{"root":"0:0:1701","crate_version":"0.3.11","includes_private":false,"index":{"2:13385:304":{"id":"2:13385:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15893:3565","str::as_mut_ptr":"1:15882:3556"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3163:227":{"id":"2:3163:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3165:127","2:3166:1407"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3558:3679":{"id":"2:3558:3679","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:181","2:3561:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:4032:4222":{"id":"2:4032:4222","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4033:4230"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:4446":{"id":"5:6085:4446","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3255:2149":{"id":"2:3255:2149","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1321:1931":{"id":"0:1321:1931","crate_id":0,"name":"November","span":{"filename":"src/month.rs","begin":[25,4],"end":[25,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13406:10814":{"id":"2:13406:10814","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49689:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1315:1933":{"id":"0:1315:1933","crate_id":0,"name":"September","span":{"filename":"src/month.rs","begin":[23,4],"end":[23,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:422:2223":{"id":"0:422:2223","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:435:2615":{"id":"0:435:2615","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[205,4],"end":[207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:408:2196":{"id":"0:408:2196","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8450:3734":{"id":"2:8450:3734","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8451:793","2:8452:4141"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:450:2627":{"id":"0:450:2627","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[269,4],"end":[272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1181:1675":{"id":"0:1181:1675","crate_id":0,"name":"ComponentRange","span":{"filename":"src/error/component_range.rs","begin":[11,0],"end":[23,1]},"visibility":"public","docs":"An error type indicating that a component provided to a method was out of range, causing a\nfailure.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3193:1408":{"id":"2:3193:1408","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47560:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3163:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436:2617":{"id":"0:436:2617","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[209,4],"end":[211,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3250:211-0:1241:127":{"id":"a:2:3250:211-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3250:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3404:3672":{"id":"2:3404:3672","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3406:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3506:132":{"id":"2:3506:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:181","2:3509:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:410:2212":{"id":"0:410:2212","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[88,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1247:1532":{"id":"0:1247:1532","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[49,19],"end":[49,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ComponentRange","id":"0:1181:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:943:1703":{"id":"0:943:1703","crate_id":0,"name":"weekday","span":{"filename":"src/weekday.rs","begin":[1,0],"end":[148,1]},"visibility":"crate","docs":"Days of the week.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1467:1711"],"is_stripped":true}},"2:2850:3786":{"id":"2:2850:3786","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:55021"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3981:68":{"id":"2:3981:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3982:1420"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:1470:2006":{"id":"0:1470:2006","crate_id":0,"name":"Tuesday","span":{"filename":"src/weekday.rs","begin":[19,4],"end":[19,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3153:149":{"id":"2:3153:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:2715"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:343:2495":{"id":"0:343:2495","crate_id":0,"name":"different_variant","span":{"filename":"src/error/different_variant.rs","begin":[1,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:309:1674","path":"::error"}},"docs":"Different variant error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1215:2502"],"is_stripped":true}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[91,0],"end":[112,1]},"visibility":{"restricted":{"parent":"0:309:1674","path":"::error"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","backtrace","type_id","source","description","provide"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:385:2513"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6464:4421":{"id":"1:6464:4421","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6465:55725","1:6466:7208","1:6467:55726","1:6468:55727","1:6469:55728","1:6470:55729"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[67,0],"end":[88,1]},"visibility":{"restricted":{"parent":"0:309:1674","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10276:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:383:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13498:61174":{"id":"2:13498:61174","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15876:3551"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49696:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1306:1936":{"id":"0:1306:1936","crate_id":0,"name":"June","span":{"filename":"src/month.rs","begin":[20,4],"end":[20,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:898:1702":{"id":"0:898:1702","crate_id":0,"name":"utc_offset","span":{"filename":"src/utc_offset.rs","begin":[1,0],"end":[337,1]},"visibility":"crate","docs":"The [`UtcOffset`] struct and its associated `impl`s.","links":{"`UtcOffset`":"0:1444:1710"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1444:1710"],"is_stripped":true}},"2:13465:61165":{"id":"2:13465:61165","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3318:1799":{"id":"2:3318:1799","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:181","2:3321:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5732:4401":{"id":"1:5732:4401","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5733:7221","1:5734:55647","1:5735:55648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:423:1929":{"id":"0:423:1929","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[138,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10552:3894":{"id":"2:10552:3894","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10553:146","2:10554:10561","2:10555:59329"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5652:4417":{"id":"1:5652:4417","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5653:55597","1:5654:5389"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:991":{"id":"0:991","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[321,0],"end":[321,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::time::Time","name":"Time","id":"0:1413:1709","glob":false}},"0:1002:1704":{"id":"0:1002:1704","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[36,0],"end":[43,1]},"visibility":"public","docs":"Date in the proleptic Gregorian calendar.\n\nBy default, years between ±9999 inclusive are representable. This can be expanded to ±999,999\ninclusive by enabling the `large-dates` crate feature. Doing so has performance implications\nand introduces some ambiguities when parsing.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3361:1649":{"id":"2:3361:1649","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3363:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10288:3907":{"id":"2:10288:3907","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10289:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13041:3840":{"id":"2:13041:3840","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5833:5289":{"id":"5:5833:5289","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:1079:4487":{"id":"1:1079:4487","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:3788","1:1081:5277","1:1082:55039","1:1083:55040","1:1084:55041","1:1085:55042","1:1086:55043"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1341:1707":{"id":"0:1341:1707","crate_id":0,"name":"OffsetDateTime","span":{"filename":"src/offset_date_time.rs","begin":[33,0],"end":[38,1]},"visibility":"public","docs":"A [`PrimitiveDateTime`] with a [`UtcOffset`].\n\nAll comparisons are performed using the UTC time.","links":{"`UtcOffset`":"0:1444:1710","`PrimitiveDateTime`":"0:1364:1708"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:5780:4405":{"id":"1:5780:4405","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5781:55611","1:5782:55612","1:5783:55613","1:5784:55614"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13489:61173":{"id":"2:13489:61173","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13011:3824","prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406:2230":{"id":"0:406:2230","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[76,4],"end":[76,31]},"visibility":"default","docs":"Create a [`Duration`] from the number of weeks.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4631:4416":{"id":"1:4631:4416","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4632:4709","1:4633:59011","1:4635:59012","1:4636:59013","1:4637:4438","1:4638:10422","1:4639:10421","1:4641:59014","1:4642:4169","1:4643:4525","1:4644:4152","1:4646:4163"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1332","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61799","5:6085:4446","5:6088:61800","5:6091:61801","5:6103:61802","5:6104:61803","5:6105:3724","5:6106:55039","5:6107:55040"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:414:1929":{"id":"0:414:1929","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1255:660":{"id":"0:1255:660","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10229:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10218:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:61159":{"id":"2:13445:61159","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:61800":{"id":"5:6088:61800","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10276:119":{"id":"2:10276:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6107:55040":{"id":"5:6107:55040","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15882:3556"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13420:4140":{"id":"2:13420:4140","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47433:176","self::pattern":"2:13011:3824","prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3398:3671":{"id":"2:3398:3671","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:181","2:3401:1228"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13396:61155":{"id":"2:13396:61155","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3562:3680","str::slice_unchecked":"1:15882:3556","`str`":"1:15882:3556"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8579:157":{"id":"2:8579:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8580:2478","2:8581:922","2:8582:4146","2:8585:4147","2:8586:495","2:8588:4148","2:8591:4149","2:8592:4150","2:8593:4151","2:8594:4152","2:8596:3737","2:8598:4153","2:8599:4154","2:8601:841","2:8604:4155","2:8611:4156","2:8613:4157","2:8616:4158","2:8617:4159","2:8618:4160","2:8620:4161","2:8622:4162","2:8625:1300","2:8626:4163","2:8627:4164","2:8631:4165","2:8634:4166","2:8635:4167","2:8636:4168","2:8638:4169","2:8639:3775","2:8641:4170","2:8644:4171","2:8646:4172","2:8656:4173","2:8671:4174","2:8673:4175","2:8677:4176","2:8686:4177","2:8689:2479","2:8691:4178","2:8694:276","2:8701:294","2:8708:4179","2:8715:4180","2:8724:4181","2:8734:1014","2:8741:4182","2:8748:1663","2:8749:1662","2:8750:3710","2:8762:3709","2:8769:3708","2:8781:3707","2:8788:4183","2:8789:4184","2:8794:2482","2:8797:4185","2:8800:4186","2:8801:2476","2:8803:4187","2:8805:415","2:8808:4188","2:8811:997","2:8814:4189","2:8817:604","2:8820:4190","2:8823:907","2:8825:826","2:8827:792","2:8829:713","2:8831:696","2:8833:4191","2:8834:4192","2:8842:4193"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3486:3677":{"id":"2:3486:3677","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3473:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3365:3665":{"id":"2:3365:3665","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3367:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[79,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:386:1687","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalDuration","id":"0:398:2583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i64"},"items":["0:408:2196","0:409:2208","0:410:2212","0:411:2194","0:412:2219","0:413:2223","0:414:1929","0:415:2230"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13469:61167":{"id":"2:13469:61167","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10269:109":{"id":"2:10269:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10270:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13430:56682":{"id":"2:13430:56682","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15882:3556","prim@char":"1:15876:3551","self::pattern":"2:13011:3824","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49415:3856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5802:4409":{"id":"1:5802:4409","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5803:7221"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23420:4923":{"id":"2:23420:4923","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23421:1262","2:23422:1261","2:23423:1259","2:23424:1258"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22832:4922","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:402:2194":{"id":"0:402:2194","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[68,4],"end":[68,33]},"visibility":"default","docs":"Create a [`Duration`] from the number of seconds.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:941:1668":{"id":"0:941:1668","crate_id":0,"name":"days_in_year","span":{"filename":"src/util.rs","begin":[58,0],"end":[60,1]},"visibility":"public","docs":"Get the number of calendar days in a given year.\n\nThe returned value will always be either 365 or 366.\n\n```rust\n# use time::util::days_in_year;\nassert_eq!(days_in_year(1900), 365);\nassert_eq!(days_in_year(2000), 366);\nassert_eq!(days_in_year(2004), 366);\nassert_eq!(days_in_year(2005), 365);\nassert_eq!(days_in_year(2100), 365);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:386:1687":{"id":"0:386:1687","crate_id":0,"name":"ext","span":{"filename":"src/ext.rs","begin":[1,0],"end":[278,1]},"visibility":"public","docs":"Extension traits.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:398:2583","0:425:2613"],"is_stripped":false}},"2:13395:4521":{"id":"2:13395:4521","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3558:3679","`str`":"1:15882:3556","str::slice_mut_unchecked":"1:15882:3556"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:61802":{"id":"5:6103:61802","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13460:61163":{"id":"2:13460:61163","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15876:3551","self::pattern":"2:13011:3824","str::match_indices":"1:15882:3556","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49565:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13375:793":{"id":"2:13375:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3370:3669":{"id":"2:3370:3669","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3371:181","2:3372:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2948:184":{"id":"2:2948:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2950:997","2:2951:826","2:2952:792","2:2953:713","2:2954:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[23,0],"end":[23,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"conversion_range::ConversionRange","name":"ConversionRange","id":"0:1202:2461","glob":false}},"1:7800:4601":{"id":"1:7800:4601","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7801:58990"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13407:56688":{"id":"2:13407:56688","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13011:3824","prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3983-0:1241:127":{"id":"b:2:3983-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3981:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3985:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:309:1674":{"id":"0:309:1674","crate_id":0,"name":"error","span":{"filename":"src/error/mod.rs","begin":[1,0],"end":[112,1]},"visibility":"public","docs":"Various error types returned by methods in the time crate.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1241:127","0:370","0:373","0:376","0:379"],"is_stripped":false}},"0:448:2623":{"id":"0:448:2623","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[259,4],"end":[262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13495:55041":{"id":"2:13495:55041","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3382:3667":{"id":"2:3382:3667","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:181","2:3385:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1251:2505":{"id":"0:1251:2505","crate_id":0,"name":"InvalidVariant","span":{"filename":"src/error/mod.rs","begin":[64,4],"end":[64,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"InvalidVariant","id":"0:1228:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:355:2499":{"id":"0:355:2499","crate_id":0,"name":"invalid_variant","span":{"filename":"src/error/invalid_variant.rs","begin":[1,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:309:1674","path":"::error"}},"docs":"Invalid variant error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1228:2505"],"is_stripped":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:2513","1:2579:3538","1:2580:2161","1:2581:4229","1:2582:4230"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10269:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10276:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13496:55042":{"id":"2:13496:55042","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13486:61172":{"id":"2:13486:61172","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13011:3824","prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4713:4444":{"id":"1:4713:4444","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4714:55435","1:4715:55436","1:4716:55437","1:4718:4443","1:4719:55438","1:4721:55439","1:4722:5626"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4631:4416","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:994":{"id":"0:994","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[322,0],"end":[322,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::utc_offset::UtcOffset","name":"UtcOffset","id":"0:1444:1710","glob":false}},"0:428:2619":{"id":"0:428:2619","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[191,4],"end":[191,45]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of milliseconds.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3985:1420":{"id":"2:3985:1420","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45969:4223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3503:131":{"id":"2:3503:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13477:10465":{"id":"2:13477:10465","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15876:3551","self::pattern":"2:13011:3824"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:997":{"id":"0:997","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[323,0],"end":[323,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::weekday::Weekday","name":"Weekday","id":"0:1467:1711","glob":false}},"2:8381:151":{"id":"2:8381:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:2478","2:8383:4145","2:8384:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:5291":{"id":"5:5837:5291","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:35353"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13470:61168":{"id":"2:13470:61168","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1228:2505":{"id":"0:1228:2505","crate_id":0,"name":"InvalidVariant","span":{"filename":"src/error/invalid_variant.rs","begin":[8,0],"end":[8,26]},"visibility":"public","docs":"An error type indicating that a [`FromStr`](core::str::FromStr) call failed because the value\nwas not a valid variant.","links":{"core::str::FromStr":"2:12950:2683"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:127:1686":{"id":"0:127:1686","crate_id":0,"name":"duration","span":{"filename":"src/duration.rs","begin":[1,0],"end":[1106,1]},"visibility":"crate","docs":"The [`Duration`] struct and its associated `impl`s.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1050:121"],"is_stripped":true}},"5:6105:3724":{"id":"5:6105:3724","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13463:61164":{"id":"2:13463:61164","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3150:74":{"id":"2:3150:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:4134"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:9237:4616-0:1241:127":{"id":"a:2:9237:4616-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9237:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2855:2641":{"id":"2:2855:2641","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:61803":{"id":"5:6104:61803","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:3937","`String`":"5:8359:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3937","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:5295","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12458:5270":{"id":"2:12458:5270","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12459:2478","2:12460:60663"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3159:228":{"id":"2:3159:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:127","2:3162:1408"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13376:4141":{"id":"2:13376:4141","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:2494":{"id":"0:328:2494","crate_id":0,"name":"conversion_range","span":{"filename":"src/error/conversion_range.rs","begin":[1,0],"end":[36,1]},"visibility":{"restricted":{"parent":"0:309:1674","path":"::error"}},"docs":"Conversion range error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1202:2461"],"is_stripped":true}},"a:2:9236:4617-0:1241:127":{"id":"a:2:9236:4617-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9236:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1256:1705":{"id":"0:1256:1705","crate_id":0,"name":"Instant","span":{"filename":"src/instant.rs","begin":[31,0],"end":[31,35]},"visibility":"public","docs":"A measurement of a monotonically non-decreasing clock. Opaque and useful only with [`Duration`].\n\nInstants are always guaranteed to be no less than any previously measured instant when created,\nand are often useful for tasks such as measuring benchmarks or timing how long an operation\ntakes.\n\nNote, however, that instants are not guaranteed to be **steady**. In other words, each tick of\nthe underlying clock may not be the same length (e.g. some seconds may be longer than others).\nAn instant may jump forwards or experience time dilation (slow down or speed up), but it will\nnever go backwards.\n\nInstants are opaque types that can only be compared to one another. There is no method to get\n\"the number of seconds\" from an instant. Instead, it only allows measuring the duration between\ntwo instants (or comparing two instants).\n\nThis implementation allows for operations with signed [`Duration`]s, but is otherwise identical\nto [`std::time::Instant`].","links":{"`Duration`":"0:1050:121","`std::time::Instant`":"1:12191:1705"},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:1258:1532"],"impls":[]}},"2:10219:2148":{"id":"2:10219:2148","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10220:1523","2:10221:55965","2:10223:4059"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4706:4441":{"id":"1:4706:4441","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4707:55073","1:4708:41537","1:4709:55074","1:4710:55075"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2938:177":{"id":"2:2938:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2939:415","2:2940:1663","2:2941:1662","2:2942:4133"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2907:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10280:3904":{"id":"2:10280:3904","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10281:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3562:3680":{"id":"2:3562:3680","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3564:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3558:3679","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:445:2617":{"id":"0:445:2617","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[244,4],"end":[247,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13400:4886":{"id":"2:13400:4886","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49373:3851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1050:121":{"id":"0:1050:121","crate_id":0,"name":"Duration","span":{"filename":"src/duration.rs","begin":[35,0],"end":[42,1]},"visibility":"public","docs":"A span of time with nanosecond precision.\n\nEach `Duration` is composed of a whole number of seconds and a fractional part represented in\nnanoseconds.\n\nThis implementation allows for negative durations, unlike [`core::time::Duration`].","links":{"`core::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:10284:3906":{"id":"2:10284:3906","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10285:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:938:1805":{"id":"0:938:1805","crate_id":0,"name":"days_in_year_month","span":{"filename":"src/util.rs","begin":[21,0],"end":[29,1]},"visibility":"public","docs":"Get the number of days in the month of a given year.\n\n```rust\n# use time::{Month, util};\nassert_eq!(util::days_in_year_month(2020, Month::February), 29);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}],["month",{"kind":"resolved_path","inner":{"name":"Month","id":"0:1290:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23092:4979":{"id":"2:23092:4979","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23729:4921","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23083:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5658:4419":{"id":"1:5658:4419","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5659:6092","1:5660:2164"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1701":{"id":"0:0:1701","crate_id":0,"name":"time","span":{"filename":"src/lib.rs","begin":[1,0],"end":[326,52]},"visibility":"public","docs":"# Feature flags\n\nThis crate exposes a number of features. These can be enabled or disabled as shown\n[in Cargo's documentation](https://doc.rust-lang.org/cargo/reference/features.html). Features\nare _disabled_ by default unless otherwise noted.\n\nReliance on a given feature is always indicated alongside the item definition.\n\n- `std` (_enabled by default, implicitly enables `alloc`_)\n\n  This enables a number of features that depend on the standard library.\n\n- `alloc` (_enabled by default via `std`_)\n\n  Enables a number of features that require the ability to dynamically allocate memory.\n\n- `macros`\n\n  Enables macros that provide compile-time verification of values and intuitive syntax.\n\n- `formatting` (_implicitly enables `std`_)\n\n  Enables formatting of most structs.\n\n- `parsing`\n\n  Enables parsing of most structs.\n\n- `local-offset` (_implicitly enables `std`_)\n\n  This feature enables a number of methods that allow obtaining the system's UTC offset.\n\n- `large-dates`\n\n  By default, only years within the ±9999 range (inclusive) are supported. If you need support\n  for years outside this range, consider enabling this feature; the supported range will be\n  increased to ±999,999.\n\n  Note that enabling this feature has some costs, as it means forgoing some optimizations.\n  Ambiguities may be introduced when parsing that would not otherwise exist.\n\n- `serde`\n\n  Enables [serde](https://docs.rs/serde) support for all types except [`Instant`].\n\n- `serde-human-readable` (_implicitly enables `serde`, `formatting`, and `parsing`_)\n\n  Allows serde representations to use a human-readable format. This is determined by the\n  serializer, not the user. If this feature is not enabled or if the serializer requests a\n  non-human-readable format, a format optimized for binary representation will be used.\n\n  Libraries should never enable this feature, as the decision of what format to use should be up\n  to the user.\n\n- `serde-well-known` (_implicitly enables `serde/alloc`, `formatting`, and `parsing`_)\n\n  Enables support for serializing and deserializing well-known formats using serde's\n  [`#[with]` attribute](https://serde.rs/field-attrs.html#with).\n\n- `rand`\n\n  Enables [rand](https://docs.rs/rand) support for all types.\n\n- `quickcheck` (_implicitly enables `alloc`_)\n\n  Enables [quickcheck](https://docs.rs/quickcheck) support for all types except [`Instant`].\n\nOne pseudo-feature flag that is only available to end users is the `unsound_local_offset` cfg.\nAs the name indicates, using the feature is unsound, and [may cause unexpected segmentation\nfaults](https://github.com/time-rs/time/issues/293). Unlike other flags, this is deliberately\nonly available to end users; this is to ensure that a user doesn't have unsound behavior without\nknowing it. To enable this behavior, you must use `RUSTFLAGS=\"--cfg unsound_local_offset\" cargo\nbuild` or similar. Note: This flag is _not tested anywhere_, including in the regular test of\nthe powerset of all feature flags. Use at your own risk. Without this flag, any method that\nrequires the local offset will return the `Err` variant when otherwise unsound.","links":{"`Instant`":"0:1256:1705"},"attrs":["#![doc(html_playground_url = \"https://play.rust-lang.org\")]","#![deny(anonymous_parameters, clippy :: all, const_err,\nillegal_floating_point_literal_pattern, late_bound_lifetime_arguments,\npath_statements, patterns_in_fns_without_body, rust_2018_idioms,\ntrivial_casts, trivial_numeric_casts, unreachable_pub, unsafe_code,\nunsafe_op_in_unsafe_fn, unused_extern_crates)]","#![warn(clippy :: dbg_macro, clippy :: decimal_literal_representation, clippy\n:: get_unwrap, clippy :: missing_docs_in_private_items, clippy :: nursery,\nclippy :: print_stdout, clippy :: todo, clippy :: unimplemented, clippy ::\nunnested_or_patterns, clippy :: unwrap_in_result, clippy :: unwrap_used,\nclippy :: use_debug, deprecated_in_future, missing_copy_implementations,\nmissing_debug_implementations, unused_qualifications,\nvariant_size_differences)]","#![allow(clippy :: redundant_pub_crate)]","#![doc(html_favicon_url =\n\"https://avatars0.githubusercontent.com/u/55999857\")]","#![doc(html_logo_url = \"https://avatars0.githubusercontent.com/u/55999857\")]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:309:1674","0:386:1687","0:927:1667","0:1000:205","0:970","0:973","0:976","0:979","0:982","0:985","0:988","0:991","0:994","0:997"],"is_stripped":false}},"2:3328:2183":{"id":"2:3328:2183","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3330:181","2:3331:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1300:1938":{"id":"0:1300:1938","crate_id":0,"name":"April","span":{"filename":"src/month.rs","begin":[18,4],"end":[18,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:398:2583":{"id":"0:398:2583","crate_id":0,"name":"NumericalDuration","span":{"filename":"src/ext.rs","begin":[60,0],"end":[77,1]},"visibility":"public","docs":"Create [`Duration`]s from numeric literals.\n\n# Examples\n\nBasic construction of [`Duration`]s.\n\n```rust\n# use time::{Duration, ext::NumericalDuration};\nassert_eq!(5.nanoseconds(), Duration::nanoseconds(5));\nassert_eq!(5.microseconds(), Duration::microseconds(5));\nassert_eq!(5.milliseconds(), Duration::milliseconds(5));\nassert_eq!(5.seconds(), Duration::seconds(5));\nassert_eq!(5.minutes(), Duration::minutes(5));\nassert_eq!(5.hours(), Duration::hours(5));\nassert_eq!(5.days(), Duration::days(5));\nassert_eq!(5.weeks(), Duration::weeks(5));\n```\n\nSigned integers work as well!\n\n```rust\n# use time::{Duration, ext::NumericalDuration};\nassert_eq!((-5).nanoseconds(), Duration::nanoseconds(-5));\nassert_eq!((-5).microseconds(), Duration::microseconds(-5));\nassert_eq!((-5).milliseconds(), Duration::milliseconds(-5));\nassert_eq!((-5).seconds(), Duration::seconds(-5));\nassert_eq!((-5).minutes(), Duration::minutes(-5));\nassert_eq!((-5).hours(), Duration::hours(-5));\nassert_eq!((-5).days(), Duration::days(-5));\nassert_eq!((-5).weeks(), Duration::weeks(-5));\n```\n\nJust like any other [`Duration`], they can be added, subtracted, etc.\n\n```rust\n# use time::ext::NumericalDuration;\nassert_eq!(2.seconds() + 500.milliseconds(), 2_500.milliseconds());\nassert_eq!(2.seconds() - 500.milliseconds(), 1_500.milliseconds());\n```\n\nWhen called on floating point values, any remainder of the floating point value will be\ntruncated. Keep in mind that floating point numbers are inherently imprecise and have limited\ncapacity.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:399:2196","0:400:2208","0:401:2212","0:402:2194","0:403:2219","0:404:2223","0:405:1929","0:406:2230"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::Sealed","id":"0:394:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:407","0:416"]}},"2:3353:1643":{"id":"2:3353:1643","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3355:1348"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:421:2219":{"id":"0:421:2219","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[130,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13397:56672":{"id":"2:13397:56672","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15882:3556"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13401:4525":{"id":"2:13401:4525","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49383:3850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1468:2012":{"id":"0:1468:2012","crate_id":0,"name":"Monday","span":{"filename":"src/weekday.rs","begin":[17,4],"end":[17,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3357:1646":{"id":"2:3357:1646","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13387:2688":{"id":"2:13387:2688","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47433:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:420:2194":{"id":"0:420:2194","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[126,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401:2212":{"id":"0:401:2212","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[66,4],"end":[66,38]},"visibility":"default","docs":"Create a [`Duration`] from the number of milliseconds.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:447:2621":{"id":"0:447:2621","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[254,4],"end":[257,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:437:2619":{"id":"0:437:2619","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[213,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8340:2181":{"id":"2:8340:2181","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8342:2476"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9237:4616":{"id":"2:9237:4616","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12950:2683":{"id":"2:12950:2683","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12951:126","2:12952:2694"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3323:1800":{"id":"2:3323:1800","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:181","2:3326:1347"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13416:4179":{"id":"2:13416:4179","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47433:176","prim@char":"1:15876:3551","self::pattern":"2:13011:3824"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:404:2223":{"id":"0:404:2223","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[72,4],"end":[72,31]},"visibility":"default","docs":"Create a [`Duration`] from the number of hours.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8344:3736":{"id":"2:8344:3736","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8346:4187"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3698:3683":{"id":"2:3698:3683","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3629:3682","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13399:3885":{"id":"2:13399:3885","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49367:3852","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13393:56652":{"id":"2:13393:56652","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13413:56226":{"id":"2:13413:56226","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15876:3551","self::pattern":"2:13011:3824"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8864:3733":{"id":"2:8864:3733","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7905:3715","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3147:75":{"id":"2:3147:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3149:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:22759:4927":{"id":"2:22759:4927","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22760:4920","2:22761:59926","2:22762:1220","2:22763:1221","2:22764:2165","2:22765:2252","2:22766:11030","2:22767:2076","2:22768:2075","2:22769:59971","2:22770:59927","2:22771:59928","2:22772:59929","2:22773:59930","2:22774:59931","2:22775:59932","2:22776:59933"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22808:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8857:3730":{"id":"2:8857:3730","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5790:4406":{"id":"1:5790:4406","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5791:57742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4688:2148":{"id":"1:4688:2148","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4689:2167","1:4690:55316","1:4692:55317","1:4693:5549","1:4694:55318","1:4695:10509","1:4696:4059","1:4705:4169"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13492:2159":{"id":"2:13492:2159","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12950:2683","FromStr::Err":"2:12950:2683"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47560:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12950:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12950:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:446:2619":{"id":"0:446:2619","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[249,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3291:3936-0:1241:127":{"id":"a:2:3291:3936-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3291:3936","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6690:4404":{"id":"1:6690:4404","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6691:55913","1:6692:7130","1:6693:7131","1:6694:7133","1:6695:7132","1:6696:7134","1:6697:7135","1:6698:7137","1:6699:6723","1:6700:7140","1:6701:7141","1:6702:7142","1:6703:7143","1:6704:7144","1:6705:7145","1:6706:7138","1:6707:7139"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10278:3903":{"id":"2:10278:3903","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10279:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1291:1941":{"id":"0:1291:1941","crate_id":0,"name":"January","span":{"filename":"src/month.rs","begin":[15,4],"end":[15,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:424:2230":{"id":"0:424:2230","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3260:106":{"id":"2:3260:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3788","5:785:4195","5:786:4196"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:2641"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:3262:220-0:1241:127":{"id":"a:2:3262:220-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3262:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:14123:141":{"id":"2:14123:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14124:277","2:14125:518","2:14126:280","2:14127:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:534:1693":{"id":"0:534:1693","crate_id":0,"name":"month","span":{"filename":"src/month.rs","begin":[1,0],"end":[164,1]},"visibility":"crate","docs":"The `Month` enum and its associated `impl`s.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1290:1706"],"is_stripped":true}},"0:1413:1709":{"id":"0:1413:1709","crate_id":0,"name":"Time","span":{"filename":"src/time.rs","begin":[32,0],"end":[43,1]},"visibility":"public","docs":"The clock time within a given date. Nanosecond precision.\n\nAll minutes are assumed to have exactly 60 seconds; no attempt is made to handle leap seconds\n(either positive or negative).\n\nWhen comparing two `Time`s, they are assumed to be in the same calendar date.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:22832:4922":{"id":"2:22832:4922","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22833:4920","2:22834:1239","2:22835:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1000:205":{"id":"0:1000:205","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[326,0],"end":[326,52]},"visibility":"public","docs":"An alias for [`std::result::Result`] with a generic error from the time crate.","links":{"`std::result::Result`":"2:47560:205"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"core::result::Result","id":"2:47560:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:3408:3673":{"id":"2:3408:3673","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:449:2625":{"id":"0:449:2625","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[264,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6795:4386":{"id":"1:6795:4386","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6796:9366"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3387:3668":{"id":"2:3387:3668","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:973":{"id":"0:973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[314,0],"end":[314,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::duration::Duration","name":"Duration","id":"0:1050:121","glob":false}},"0:1253:1532":{"id":"0:1253:1532","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[64,19],"end":[64,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"InvalidVariant","id":"0:1228:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"1:6964:4387":{"id":"1:6964:4387","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6965:55772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23044:18551":{"id":"2:23044:18551","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23045:8391","2:23046:59787","2:23047:59788"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23037:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:418:2208":{"id":"0:418:2208","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[118,4],"end":[120,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13497:55043":{"id":"2:13497:55043","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[113,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:386:1687","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalDuration","id":"0:398:2583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:417:2196","0:418:2208","0:419:2212","0:420:2194","0:421:2219","0:422:2223","0:423:1929","0:424:2230"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:14:1685":{"id":"0:14:1685","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[1031,1]},"visibility":"crate","docs":"The [`Date`] struct and its associated `impl`s.","links":{"`Date`":"0:1002:1704"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1002:1704"],"is_stripped":true}},"2:13442:56686":{"id":"2:13442:56686","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15882:3556","self::pattern":"2:13011:3824","prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49519:3860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3421:3676":{"id":"2:3421:3676","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:1229"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22795:4950":{"id":"2:22795:4950","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22796:59926","2:22797:1220","2:22798:1221","2:22799:59927","2:22800:59928","2:22801:59929","2:22802:59930","2:22803:59931","2:22804:59932","2:22805:59933"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22808:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1254":{"id":"0:1254","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[46,9],"end":[46,14]},"visibility":{"restricted":{"parent":"0:309:1674","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations, variant_size_differences)]","#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10269:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1255:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13405:61156":{"id":"2:13405:61156","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49661:3855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3192:127":{"id":"2:3192:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3163:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"2:13036:3841":{"id":"2:13036:3841","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13038:4135","2:13039:59837","2:13040:59838"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13030:3842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3721:3685":{"id":"2:3721:3685","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3723:58444"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:61799":{"id":"5:6084:61799","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3937","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:5295","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3937","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:5295","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:444:2615":{"id":"0:444:2615","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[239,4],"end":[242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13739:150":{"id":"2:13739:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13740:181","2:13741:150","2:13742:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3179-0:1241:127":{"id":"b:2:3179-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3156:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3153:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:2715"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13404:5626":{"id":"2:13404:5626","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49651:3853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:441:2627":{"id":"0:441:2627","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8425:120":{"id":"2:8425:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8426:4135","2:8427:4136","2:8428:4137","2:8429:4138","2:8433:4139","2:8436:4140"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3497:3678":{"id":"2:3497:3678","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[22,0],"end":[22,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"component_range::ComponentRange","name":"ComponentRange","id":"0:1181:1675","glob":false}},"b:2:3194-0:1241:127":{"id":"b:2:3194-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3153:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3163:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3197:127","2:3198:1407"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3710:224":{"id":"2:3710:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3711:181","2:3712:3685","2:3713:686","2:3714:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3715:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1241:127":{"id":"0:1241:127","crate_id":0,"name":"Error","span":{"filename":"src/error/mod.rs","begin":[47,0],"end":[65,1]},"visibility":"public","docs":"A unified error type for anything returned by a method in the time crate.\n\nThis can be used when you either don't know or don't care about the exact error returned.\n`Result<_, time::Error>` (or its alias `time::Result<_>`) will work in these situations.","links":{},"attrs":["#[allow(missing_copy_implementations, variant_size_differences)]","#[allow(clippy :: missing_docs_in_private_items)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1242:2461","0:1245:1675","0:1248:2502","0:1251:2505"],"impls":["a:2:3250:211-0:1241:127","a:2:9237:4616-0:1241:127","a:2:9236:4617-0:1241:127","a:2:3291:3936-0:1241:127","a:2:3262:220-0:1241:127","b:2:2853-0:1241:127","b:2:3983-0:1241:127","b:2:3179-0:1241:127","b:2:3183-0:1241:127","b:2:3189-0:1241:127","b:2:2856-0:1241:127","b:2:3194-0:1241:127","b:5:6413-0:1241:127","0:1254","0:382","0:384"]}},"2:10282:3905":{"id":"2:10282:3905","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10283:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13471:61169":{"id":"2:13471:61169","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15876:3551","self::pattern":"2:13011:3824"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13041:3840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1248:2502":{"id":"0:1248:2502","crate_id":0,"name":"DifferentVariant","span":{"filename":"src/error/mod.rs","begin":[63,4],"end":[63,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"DifferentVariant","id":"0:1215:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:3416:3675":{"id":"2:3416:3675","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:1226"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1245:1675":{"id":"0:1245:1675","crate_id":0,"name":"ComponentRange","span":{"filename":"src/error/mod.rs","begin":[49,4],"end":[49,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"ComponentRange","id":"0:1181:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:8377:136":{"id":"2:8377:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8379:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5794:4407":{"id":"1:5794:4407","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5795:55854"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3185:681":{"id":"2:3185:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:413:2223":{"id":"0:413:2223","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13391:56651":{"id":"2:13391:56651","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:452:1691":{"id":"0:452:1691","crate_id":0,"name":"instant","span":{"filename":"src/instant.rs","begin":[1,0],"end":[262,1]},"visibility":"crate","docs":"The [`Instant`] struct and its associated `impl`s.","links":{"`Instant`":"0:1256:1705"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1256:1705"],"is_stripped":true}},"2:2858:55021":{"id":"2:2858:55021","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3156:135":{"id":"2:3156:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:383:660":{"id":"0:383:660","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[68,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10229:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10218:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:399:2196":{"id":"0:399:2196","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[62,4],"end":[62,37]},"visibility":"default","docs":"Create a [`Duration`] from the number of nanoseconds.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:22706:4917":{"id":"2:22706:4917","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22707:4920","2:22708:59926","2:22709:60105","2:22710:60106","2:22711:60107","2:22712:2165","2:22713:60108","2:22714:60109","2:22715:60110","2:22716:60111","2:22717:60112","2:22718:60113","2:22719:60114","2:22720:60115","2:22721:10866","2:22722:60116","2:22723:59971","2:22724:10196","2:22725:59626","2:22726:59625","2:22727:59627","2:22728:59927","2:22729:59928","2:22730:59929","2:22731:59930"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22808:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3197:127":{"id":"2:3197:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38746:3891","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:1202:2461":{"id":"0:1202:2461","crate_id":0,"name":"ConversionRange","span":{"filename":"src/error/conversion_range.rs","begin":[10,0],"end":[10,27]},"visibility":"public","docs":"An error type indicating that a conversion failed because the target type could not store the\ninitial value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:439:2623":{"id":"0:439:2623","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13398:56673":{"id":"2:13398:56673","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15882:3556"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3250:211":{"id":"2:3250:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:417:2196":{"id":"0:417:2196","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10911:214":{"id":"2:10911:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10913:181","2:10914:2688","2:10915:56650","2:10916:56651","2:10917:56652","2:10918:753","2:10919:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10902:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13467:61166":{"id":"2:13467:61166","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[315,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Error","name":"Error","id":"0:1241:127","glob":false}},"2:13374":{"id":"2:13374","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12471:1332","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13375:793","2:13376:4141","2:13377:10864","2:13378:61152","2:13380:61153","2:13383:2164","2:13384:61154","2:13385:304","2:13386:56653","2:13387:2688","2:13389:56650","2:13391:56651","2:13393:56652","2:13395:4521","2:13396:61155","2:13397:56672","2:13398:56673","2:13399:3885","2:13400:4886","2:13401:4525","2:13402:11072","2:13403:11070","2:13404:5626","2:13405:61156","2:13406:10814","2:13407:56688","2:13410:56224","2:13413:56226","2:13416:4179","2:13420:4140","2:13424:55439","2:13427:11071","2:13430:56682","2:13433:61157","2:13436:61158","2:13439:56684","2:13442:56686","2:13445:61159","2:13448:61160","2:13451:3633","2:13454:61161","2:13457:61162","2:13460:61163","2:13463:61164","2:13465:61165","2:13467:61166","2:13469:61167","2:13470:61168","2:13471:61169","2:13474:61170","2:13477:10465","2:13480:56689","2:13483:61171","2:13486:61172","2:13489:61173","2:13492:2159","2:13494:5277","2:13495:55041","2:13496:55042","2:13497:55043","2:13498:61174","2:13500:4489","2:13501:61175"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6864:4388":{"id":"1:6864:4388","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6865:55289"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8390:3735":{"id":"2:8390:3735","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8392:4142","2:8394:4143","2:8395:4144"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13724:138":{"id":"2:13724:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13725:181","2:13726:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:394:2556":{"id":"0:394:2556","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[10,4],"end":[10,23]},"visibility":"public","docs":"A trait that cannot be implemented by downstream users.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3392:3670":{"id":"2:3392:3670","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3394:181","2:3395:1225"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23729:4921":{"id":"2:23729:4921","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23730:4920"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23725:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13474:61170":{"id":"2:13474:61170","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13011:3824","prim@char":"1:15876:3551"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3349:1640":{"id":"2:3349:1640","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3351:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1258:1532":{"id":"0:1258:1532","crate_id":0,"name":"0","span":{"filename":"src/instant.rs","begin":[31,19],"end":[31,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"StdInstant","id":"1:12191:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:427:2617":{"id":"0:427:2617","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[189,4],"end":[189,45]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of microseconds.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4991:4497":{"id":"1:4991:4497","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4992:4199","1:4993:59177"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3291:3936":{"id":"2:3291:3936","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3182:2715":{"id":"2:3182:2715","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3156:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13030:3842":{"id":"2:13030:3842","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13032:4879","2:13033:922","2:13034:60584","2:13035:60585"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3345:2184":{"id":"2:3345:2184","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3346:181","2:3347:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:432:2627":{"id":"0:432:2627","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[199,4],"end":[199,37]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of days.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13403:11070":{"id":"2:13403:11070","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15882:3556"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49680:3870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2856-0:1241:127":{"id":"b:2:2856-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2850:3786","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2858:55021"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1364:1708":{"id":"0:1364:1708","crate_id":0,"name":"PrimitiveDateTime","span":{"filename":"src/primitive_date_time.rs","begin":[17,0],"end":[22,1]},"visibility":"public","docs":"Combined date and time.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:6868:4391":{"id":"1:6868:4391","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6869:59159"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10286:189":{"id":"2:10286:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10287:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:440:2625":{"id":"0:440:2625","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:451:2629":{"id":"0:451:2629","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[274,4],"end":[277,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14197:4530":{"id":"2:14197:4530","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14198:55788","2:14199:55789","2:14200:55790","2:14201:55791","2:14202:55792","2:14203:55793","2:14204:4169"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13448:61160":{"id":"2:13448:61160","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3715:137":{"id":"2:3715:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3717:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:405:1929":{"id":"0:405:1929","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[74,4],"end":[74,30]},"visibility":"default","docs":"Create a [`Duration`] from the number of days.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[238,0],"end":[278,1]},"visibility":{"restricted":{"parent":"0:386:1687","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalStdDuration","id":"0:425:2613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:444:2615","0:445:2617","0:446:2619","0:447:2621","0:448:2623","0:449:2625","0:450:2627","0:451:2629"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13500:4489":{"id":"2:13500:4489","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15876:3551"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49705:3868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:982":{"id":"0:982","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[318,0],"end":[318,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::month::Month","name":"Month","id":"0:1290:1706","glob":false}},"0:1294:1940":{"id":"0:1294:1940","crate_id":0,"name":"February","span":{"filename":"src/month.rs","begin":[16,4],"end":[16,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5724:4402":{"id":"1:5724:4402","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5725:55159","1:5726:55161","1:5727:55160","1:5728:55162"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:717:1695":{"id":"0:717:1695","crate_id":0,"name":"primitive_date_time","span":{"filename":"src/primitive_date_time.rs","begin":[1,0],"end":[935,1]},"visibility":"crate","docs":"The [`PrimitiveDateTime`] struct and its associated `impl`s.","links":{"`PrimitiveDateTime`":"0:1364:1708"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1364:1708"],"is_stripped":true}},"5:6091:61801":{"id":"5:6091:61801","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1474:2008":{"id":"0:1474:2008","crate_id":0,"name":"Thursday","span":{"filename":"src/weekday.rs","begin":[23,4],"end":[23,12]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13427:11071":{"id":"2:13427:11071","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15876:3551","self::pattern":"2:13011:3824"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12803:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:6413-0:1241:127":{"id":"b:5:6413-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10276:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6411:223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6415:1389"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5746:4404":{"id":"1:5746:4404","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5747:6777","1:5748:57742","1:5749:7221","1:5750:57743","1:5751:4775","1:5752:4776","1:5753:57744","1:5754:1296","1:5755:57745","1:5756:57746","1:5757:57747","1:5758:57748","1:5759:57749","1:5760:57750","1:5761:57751","1:5762:57752"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3793:3691":{"id":"2:3793:3691","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:419:2212":{"id":"0:419:2212","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13439:56684":{"id":"2:13439:56684","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13011:3824","prim@char":"1:15876:3551","str::rsplitn":"1:15882:3556"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49501:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3473:116":{"id":"2:3473:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3474:221","2:3475:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:409:2208":{"id":"0:409:2208","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:415:2230":{"id":"0:415:2230","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[108,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8860:3732":{"id":"2:8860:3732","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1478:2010":{"id":"0:1478:2010","crate_id":0,"name":"Saturday","span":{"filename":"src/weekday.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3412:3674":{"id":"2:3412:3674","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3414:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3377:3666":{"id":"2:3377:3666","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:181","2:3380:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:988":{"id":"0:988","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[320,0],"end":[320,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::primitive_date_time::PrimitiveDateTime","name":"PrimitiveDateTime","id":"0:1364:1708","glob":false}},"1:6792:4384":{"id":"1:6792:4384","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6793:55215","1:6794:55600"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10517:146":{"id":"2:10517:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10518:652","2:10519:2167","2:10520:4357","2:10521:4358","2:10522:4359","2:10523:4360","2:10524:4361","2:10525:4362","2:10526:4363","2:10527:4364","2:10528:4365","2:10529:4366","2:10530:4367","2:10531:4368","2:10532:4369","2:10533:1523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:442:2629":{"id":"0:442:2629","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[233,4],"end":[235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1290:1706":{"id":"0:1290:1706","crate_id":0,"name":"Month","span":{"filename":"src/month.rs","begin":[14,0],"end":[27,1]},"visibility":"public","docs":"Months of the year.","links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]","#[repr(u8)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1291:1941","0:1294:1940","0:1297:1939","0:1300:1938","0:1303:1937","0:1306:1936","0:1309:1935","0:1312:1934","0:1315:1933","0:1318:1932","0:1321:1931","0:1324:1930"],"impls":[]}},"2:3540:3688":{"id":"2:3540:3688","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3542:237","2:3543:206","2:3544:59861"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3339:3664":{"id":"2:3339:3664","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:181","2:3342:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10507:142":{"id":"2:10507:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10508:715","2:10510:4197"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22895:4494":{"id":"2:22895:4494","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22885:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:562:1694":{"id":"0:562:1694","crate_id":0,"name":"offset_date_time","span":{"filename":"src/offset_date_time.rs","begin":[1,0],"end":[1322,1]},"visibility":"crate","docs":"The [`OffsetDateTime`] struct and its associated `impl`s.","links":{"`OffsetDateTime`":"0:1341:1707"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1341:1707"],"is_stripped":true}},"1:6442:4386":{"id":"1:6442:4386","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6443:4775","1:6444:4776","1:6445:9365","1:6446:59212","1:6448:59216","1:6450:59213","1:6451:59214","1:6453:59215"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:927:1667":{"id":"0:927:1667","crate_id":0,"name":"util","span":{"filename":"src/util.rs","begin":[1,0],"end":[80,1]},"visibility":"public","docs":"Utility functions.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:938:1805","0:940:1806","0:941:1668","0:942:1807"],"is_stripped":false}},"0:979":{"id":"0:979","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[317,0],"end":[317,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::instant::Instant","name":"Instant","id":"0:1256:1705","glob":false}},"2:3500:130":{"id":"2:3500:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3502:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3503:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3198:1407":{"id":"2:3198:1407","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47560:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3163:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:425:2613":{"id":"0:425:2613","crate_id":0,"name":"NumericalStdDuration","span":{"filename":"src/ext.rs","begin":[185,0],"end":[202,1]},"visibility":"public","docs":"Create [`std::time::Duration`]s from numeric literals.\n\n# Examples\n\nBasic construction of [`std::time::Duration`]s.\n\n```rust\n# use time::ext::NumericalStdDuration;\n# use core::time::Duration;\nassert_eq!(5.std_nanoseconds(), Duration::from_nanos(5));\nassert_eq!(5.std_microseconds(), Duration::from_micros(5));\nassert_eq!(5.std_milliseconds(), Duration::from_millis(5));\nassert_eq!(5.std_seconds(), Duration::from_secs(5));\nassert_eq!(5.std_minutes(), Duration::from_secs(5 * 60));\nassert_eq!(5.std_hours(), Duration::from_secs(5 * 3_600));\nassert_eq!(5.std_days(), Duration::from_secs(5 * 86_400));\nassert_eq!(5.std_weeks(), Duration::from_secs(5 * 604_800));\n```\n\nJust like any other [`std::time::Duration`], they can be added, subtracted, etc.\n\n```rust\n# use time::ext::NumericalStdDuration;\nassert_eq!(\n    2.std_seconds() + 500.std_milliseconds(),\n    2_500.std_milliseconds()\n);\nassert_eq!(\n    2.std_seconds() - 500.std_milliseconds(),\n    1_500.std_milliseconds()\n);\n```\n\nWhen called on floating point values, any remainder of the floating point value will be\ntruncated. Keep in mind that floating point numbers are inherently imprecise and have limited\ncapacity.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:426:2615","0:427:2617","0:428:2619","0:429:2621","0:430:2623","0:431:2625","0:432:2627","0:433:2629"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::Sealed","id":"0:394:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:434","0:443"]}},"2:13410:56224":{"id":"2:13410:56224","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13011:3824","prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1472:2007":{"id":"0:1472:2007","crate_id":0,"name":"Wednesday","span":{"filename":"src/weekday.rs","begin":[21,4],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5740:4403":{"id":"1:5740:4403","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5741:7221","1:5742:8773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4764:4936":{"id":"2:4764:4936","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4765:2478","2:4766:60276","2:4767:4147"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7905:3715":{"id":"2:7905:3715","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7906:60668","2:7907:60669","2:7908:60673","2:7909:60671","2:7910:60670","2:7911:60674","2:7912:60672"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1476:2009":{"id":"0:1476:2009","crate_id":0,"name":"Friday","span":{"filename":"src/weekday.rs","begin":[25,4],"end":[25,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13383:2164":{"id":"2:13383:2164","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12482:3844"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1444:1710":{"id":"0:1444:1710","crate_id":0,"name":"UtcOffset","span":{"filename":"src/utc_offset.rs","begin":[24,0],"end":[31,1]},"visibility":"public","docs":"An offset from UTC.\n\nThis struct can store values up to ±23:59:59. If you need support outside this range, please\nfile an issue with your use case.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3258:218":{"id":"2:3258:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13380:61153":{"id":"2:13380:61153","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15882:3556"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3333:2182":{"id":"2:3333:2182","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:181","2:3336:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[24,0],"end":[24,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"different_variant::DifferentVariant","name":"DifferentVariant","id":"0:1215:2502","glob":false}},"2:13386:56653":{"id":"2:13386:56653","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15893:3565"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1242:2461":{"id":"0:1242:2461","crate_id":0,"name":"ConversionRange","span":{"filename":"src/error/mod.rs","begin":[48,4],"end":[48,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"ConversionRange","id":"0:1202:2461","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:13378:61152":{"id":"2:13378:61152","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:942:1807":{"id":"0:942:1807","crate_id":0,"name":"weeks_in_year","span":{"filename":"src/util.rs","begin":[71,0],"end":[80,1]},"visibility":"public","docs":"Get the number of weeks in the ISO year.\n\nThe returned value will always be either 52 or 53.\n\n```rust\n# use time::util::weeks_in_year;\nassert_eq!(weeks_in_year(2019), 52);\nassert_eq!(weeks_in_year(2020), 53);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:426:2615":{"id":"0:426:2615","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[187,4],"end":[187,44]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of nanoseconds.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1303:1937":{"id":"0:1303:1937","crate_id":0,"name":"May","span":{"filename":"src/month.rs","begin":[19,4],"end":[19,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:393:2554":{"id":"0:393:2554","crate_id":0,"name":"sealed","span":{"filename":"src/ext.rs","begin":[8,0],"end":[8,10]},"visibility":{"restricted":{"parent":"0:386:1687","path":"::ext"}},"docs":"Sealed trait to prevent downstream implementations.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:394:2556"],"is_stripped":true}},"2:13483:61171":{"id":"2:13483:61171","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15876:3551","self::pattern":"2:13011:3824"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3259:217":{"id":"2:3259:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9236:4617":{"id":"2:9236:4617","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:985":{"id":"0:985","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[319,0],"end":[319,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::offset_date_time::OffsetDateTime","name":"OffsetDateTime","id":"0:1341:1707","glob":false}},"1:6866:4390":{"id":"1:6866:4390","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6867:55675"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:310:2493":{"id":"0:310:2493","crate_id":0,"name":"component_range","span":{"filename":"src/error/component_range.rs","begin":[1,0],"end":[92,44]},"visibility":{"restricted":{"parent":"0:309:1674","path":"::error"}},"docs":"Component range error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1181:1675"],"is_stripped":true}},"2:13451:3633":{"id":"2:13451:3633","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13011:3824","`DoubleEndedIterator`":"2:8425:120","str::matches":"1:15882:3556","prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49601:3862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429:2621":{"id":"0:429:2621","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[193,4],"end":[193,40]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of seconds.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6562:4482":{"id":"1:6562:4482","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6563:55781","1:6564:55782"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13494:5277":{"id":"2:13494:5277","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1297:1939":{"id":"0:1297:1939","crate_id":0,"name":"March","span":{"filename":"src/month.rs","begin":[17,4],"end":[17,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13436:61158":{"id":"2:13436:61158","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15882:3556","str::split_terminator":"1:15882:3556","prim@char":"1:15876:3551","self::pattern":"2:13011:3824"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49465:3857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[204,0],"end":[236,1]},"visibility":{"restricted":{"parent":"0:386:1687","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalStdDuration","id":"0:425:2613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u64"},"items":["0:435:2615","0:436:2617","0:437:2619","0:438:2621","0:439:2623","0:440:2625","0:441:2627","0:442:2629"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10290:3908":{"id":"2:10290:3908","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10291:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3189-0:1241:127":{"id":"b:2:3189-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3163:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3159:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3192:127","2:3193:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:438:2621":{"id":"0:438:2621","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[217,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:403:2219":{"id":"0:403:2219","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[70,4],"end":[70,33]},"visibility":"default","docs":"Create a [`Duration`] from the number of minutes.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1250:1532":{"id":"0:1250:1532","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[63,21],"end":[63,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"DifferentVariant","id":"0:1215:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:13454:61161":{"id":"2:13454:61161","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8425:120","str::matches":"1:15882:3556","self::pattern":"2:13011:3824","prim@char":"1:15876:3551"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49619:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3183-0:1241:127":{"id":"b:2:3183-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3156:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3185:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13424:55439":{"id":"2:13424:55439","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:15876:3551","`DoubleEndedIterator`":"2:8425:120","str::rsplit":"1:15882:3556","str::split_whitespace":"1:15882:3556","self::pattern":"2:13011:3824"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49397:3858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13389:56650":{"id":"2:13389:56650","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47433:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13501:61175":{"id":"2:13501:61175","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15876:3551"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49714:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1244:1532":{"id":"0:1244:1532","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[48,20],"end":[48,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ConversionRange","id":"0:1202:2461","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:13480:56689":{"id":"2:13480:56689","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15876:3551","self::pattern":"2:13011:3824"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430:2623":{"id":"0:430:2623","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[195,4],"end":[195,40]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of minutes.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[31,0],"end":[31,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"invalid_variant::InvalidVariant","name":"InvalidVariant","id":"0:1228:2505","glob":false}},"2:3262:220":{"id":"2:3262:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1467:1711":{"id":"0:1467:1711","crate_id":0,"name":"Weekday","span":{"filename":"src/weekday.rs","begin":[15,0],"end":[30,1]},"visibility":"public","docs":"Days of the week.\n\nAs order is dependent on context (Sunday could be either two days after or five days before\nFriday), this type does not implement `PartialOrd` or `Ord`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1468:2012","0:1470:2006","0:1472:2007","0:1474:2008","0:1476:2009","0:1478:2010","0:1480:2011"],"impls":[]}},"2:2902:183":{"id":"2:2902:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2904:604","2:2905:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:433:2629":{"id":"0:433:2629","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[201,4],"end":[201,38]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of weeks.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6415:1389":{"id":"5:6415:1389","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:970":{"id":"0:970","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[313,0],"end":[313,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::date::Date","name":"Date","id":"0:1002:1704","glob":false}},"2:13433:61157":{"id":"2:13433:61157","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15876:3551","str::rsplit_terminator":"1:15882:3556","self::pattern":"2:13011:3824","str::split":"1:15882:3556","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49447:3859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:55039":{"id":"5:6106:55039","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15882:3556"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2907:124":{"id":"2:2907:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:826:1701":{"id":"0:826:1701","crate_id":0,"name":"time","span":{"filename":"src/time.rs","begin":[1,0],"end":[757,1]},"visibility":"crate","docs":"The [`Time`] struct and its associated `impl`s.","links":{"`Time`":"0:1413:1709"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1413:1709"],"is_stripped":true}},"2:3228:115":{"id":"2:3228:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3229:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:385:2513":{"id":"0:385:2513","crate_id":0,"name":"source","span":{"filename":"src/error/mod.rs","begin":[92,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13457:61162":{"id":"2:13457:61162","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15882:3556","self::pattern":"2:13011:3824","prim@char":"1:15876:3551","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49547:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:940:1806":{"id":"0:940:1806","crate_id":0,"name":"is_leap_year","span":{"filename":"src/util.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"Returns if the provided year is a leap year in the proleptic Gregorian calendar. Uses\n[astronomical year numbering](https://en.wikipedia.org/wiki/Astronomical_year_numbering).\n\n```rust\n# use time::util::is_leap_year;\nassert!(!is_leap_year(1900));\nassert!(is_leap_year(2000));\nassert!(is_leap_year(2004));\nassert!(!is_leap_year(2005));\nassert!(!is_leap_year(2100));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13377:10864":{"id":"2:13377:10864","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13384:61154":{"id":"2:13384:61154","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1324:1930":{"id":"0:1324:1930","crate_id":0,"name":"December","span":{"filename":"src/month.rs","begin":[26,4],"end":[26,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:431:2625":{"id":"0:431:2625","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[197,4],"end":[197,38]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of hours.","links":{"`std::time::Duration`":"2:50141:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50141:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:411:2194":{"id":"0:411:2194","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13021:3839":{"id":"2:13021:3839","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13023:3842","2:13024:60171","2:13025:60172","2:13026:60173","2:13027:60175","2:13028:60174","2:13029:60176"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13402:11072":{"id":"2:13402:11072","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15882:3556"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49671:3854","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2853-0:1241:127":{"id":"b:2:2853-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2855:2641"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1309:1935":{"id":"0:1309:1935","crate_id":0,"name":"July","span":{"filename":"src/month.rs","begin":[21,4],"end":[21,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1312:1934":{"id":"0:1312:1934","crate_id":0,"name":"August","span":{"filename":"src/month.rs","begin":[22,4],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:412:2219":{"id":"0:412:2219","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3756:3690":{"id":"2:3756:3690","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:1318:1932":{"id":"0:1318:1932","crate_id":0,"name":"October","span":{"filename":"src/month.rs","begin":[24,4],"end":[24,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:400:2208":{"id":"0:400:2208","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[64,4],"end":[64,38]},"visibility":"default","docs":"Create a [`Duration`] from the number of microseconds.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23425:18570":{"id":"2:23425:18570","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23426:59625","2:23427:59626","2:23428:59627"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23420:4923","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1389"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1215:2502":{"id":"0:1215:2502","crate_id":0,"name":"DifferentVariant","span":{"filename":"src/error/different_variant.rs","begin":[8,0],"end":[8,28]},"visibility":"public","docs":"An error type indicating that a [`TryFrom`](core::convert::TryFrom) call failed because the\noriginal value was of a different variant.","links":{"core::convert::TryFrom":"2:3163:227"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:3085:3892":{"id":"2:3085:3892","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3084:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3629:3682":{"id":"2:3629:3682","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3631:59675","2:3632:59676","2:3633:56688"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:1480:2011":{"id":"0:1480:2011","crate_id":0,"name":"Sunday","span":{"filename":"src/weekday.rs","begin":[29,4],"end":[29,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:9342:4491":{"id":"1:9342:4491","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9343:57723","1:9344:57724","1:9345:57725","1:9346:57726","1:9347:57727","1:9348:41143","1:9349:57722"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"16:7279:5980":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11714:7464":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:1646:4633":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12467:7615":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:53064:4998":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6106:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:3957:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5346:5675":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:6028:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:1136:4224":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:1618:4145":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:5802:4409":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:48203:3903":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4005:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:24170:8517":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5386:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7185:5767":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10304:6042":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:50297:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3375:5355":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"12:925:4623":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4095:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:3256:4126":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:13948:4594":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4439:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:7444:6227":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10788:9296":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1674:4625":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:3488:5943":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:3966:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:8382:5279":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:6688:5299":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:14197:4530":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1486:4535":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:52067:5017":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:4762:8097":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11349:4765":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11981:7521":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:7905:3715":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:45798:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:2553:5400":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8032:4697":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:53334:8665":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3357:1646":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:47620:4145":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:3241:5939":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10179:7376":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6005:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6136:5715":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:4230:8083":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:3951:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:3939:8082":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:11402:5155":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:3404:3672":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:46918:3721":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:4242:6227":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11809:7492":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:3172:5936":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:14157:4464":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:3970:6227":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6091:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4112:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"12:1235:5579":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:157:41497":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6072:5648":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"7:85:46336":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10128:6105":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11294:4756":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:45997:5037":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:3333:4717":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"12:2018:4535":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:46250:5065":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"9:996:5511":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11199:7431":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:3714:8079":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"14:0:3532":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4203:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:6208:5746":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:15897:3569":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:12061:4145":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11269:8746":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:584:6372":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:46569:3749":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2907:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"19:117:7270":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"16:7467:5678":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:52524:5006":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11277:7432":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:2733:2150":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13054:7786":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:1736:6531":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:50133:3837":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13842:8027":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:15292:4760":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:644:6133":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:49465:3857":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4358:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:3743:5998":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6935:7268":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:12018:6254":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:8271:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:24488:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:1744:6535":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"12:1762:6225":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10502:7377":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"11:0:3530":{"crate_id":11,"path":["adler"],"kind":"module"},"5:1653:4623":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:9765:6274":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"0:1251:2505":{"crate_id":0,"path":["time","error","Error","InvalidVariant"],"kind":"variant"},"16:6021:5929":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:24692:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13154:7824":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:48733:3897":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:5389:5250":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:11386:7129":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4475:4460":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"12:761:4200":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:46927:3723":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:510:9265":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13963:8053":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47906:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:22538:60265":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:24794:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:8321:5387":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4478:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12408:7609":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4494:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:7771:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:12191:1705":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:12073:7538":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:24726:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9649:9269":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:6923:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:48521:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"12:1180:5577":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11118:3850":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8913:3721":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:46266:5067":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5815:5737":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:0:3536":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1635:4621":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:5740:4403":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:3739:4858":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6110:5714":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4317:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:1534:4630":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:12221:7558":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10377:6081":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:1527:6404":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:9896:660":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:11091:4199":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:5788:6227":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11962:7516":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12521:7623":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13331:7869":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:6942:4392":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:24048:3815":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7549:5685":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:49316:5168":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:3317:4712":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:4704:8095":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:1450:4621":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2751:4217":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5717:5732":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:32303:59962":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"6:4347:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"9:234:5470":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"18:820:6123":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5330:7363":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:15370:5607":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12756:7664":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7894:5712":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4387:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9065:48359":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:23729:4921":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:45969:4223":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:9626:55571":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"9:469:9506":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11434:7439":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3623:6256":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10279:6039":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11519:7446":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:4866:5097":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:54:5566":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"12:774:4145":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:12100:4660":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5996:5741":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:823:6276":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:681:7435":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:23092:4979":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11952:4596":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:5561:5727":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11939:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13348:7874":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:13815:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:294:9263":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1596:6443":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:11967:4597":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:3990:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4395:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:3862:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:55902:4942":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:3429:5665":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4365:4739":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"13:0:3525":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:11295:3856":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:12132:4662":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:12211:2696":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:9358:3839":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"9:157:5462":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:7823:5688":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2175:4536":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:8106:4145":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:48749:3896":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:7786:5687":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:4477:4461":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:5469:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"0:942:1807":{"crate_id":0,"path":["time","util","weeks_in_year"],"kind":"function"},"2:53343:8666":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:12067:4658":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3701:4454":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6152:5676":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:46281:5258":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:2598:9356":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:15093:4517":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:840:4621":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:51481:5019":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:837:3842":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11847:7500":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:299:9264":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:9440:7367":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:51220:5003":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:4008:9268":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:3727:3687":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:0:3526":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:5376:4752":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:5503:4760":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:52098:5020":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:50137:3838":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5978:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:51332:8629":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"0:941:1668":{"crate_id":0,"path":["time","util","days_in_year"],"kind":"function"},"2:5020:5100":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:5433:5721":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:45722:3692":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:14458:8766":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"9:603:9516":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:12045:4199":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12645:7650":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:3258:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:15875:3550":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:46528:3747":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1729:4766":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12040:7528":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:48210:3905":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:28009:3814":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:786:6276":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"12:1200:5578":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10814:6001":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11458:7440":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10489:6055":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:5790:5736":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"12:2315:62076":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:790:6120":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:49894:4870":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:1442:4145":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6718:5967":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7840:6246":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5753:5734":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4438:4465":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:169:54651":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:8857:3730":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11947:7512":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:4890:8101":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4341:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:3150:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:46372:5257":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:7928:5036":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"12:469:62078":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4046:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4052:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:7212:4534":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:47534:4207":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11990:8762":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:6176:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:15894:3566":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:14518:4440":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"7:38:46329":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:23425:18570":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:10599:9293":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:4157:6015":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:8377:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13098:7818":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:15899:3571":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:6700:7140":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:15381:5607":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12917:7677":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7737:4595":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"10:0:3529":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4501:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:4697:55991":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:3038:3788":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3604:7295":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:10282:3905":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:610:6385":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5221:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:23044:18551":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:46411:5213":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"12:354:8386":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:50342:5180":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"12:747:4199":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:14443:4394":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:49547:3864":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5998:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:22795:4950":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:5137:5106":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12982:7728":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:5794:4407":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:729:62100":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:10855:4453":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5548:7078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:7111:6241":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:46611:3753":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1690:6512":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13554:7928":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:15881:3555":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:56273:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15893:3565":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:6475:4534":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4281:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11406:7437":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13865:8028":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:1644:4622":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4511:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11082:6011":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46441:5215":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:6954:5283":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8393:4561":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:2492:4949":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13429:7890":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:13573:4550":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7804:5686":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3506:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12182:7554":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:13700:4603":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:10219:2148":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:3892:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:1311:6109":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:3488:4535":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:12155:7550":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12168:7385":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6744:5969":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13041:7780":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4713:4444":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:15007:4605":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:11614:4567":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12582:7632":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:46489:6248":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46668:3757":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:15880:3554":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"18:636:7275":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12671:7652":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:5837:5291":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"12:2303:8390":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10516:6056":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6269:5749":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:49367:3852":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:9951:5137":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1091:6227":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:3339:3664":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:774:7275":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:2793:4218":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:49275:5164":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:3756:3690":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:6690:4404":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:51082:4990":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2399:9351":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:1700:6518":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"9:809:4561":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10052:9278":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:15900:3572":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:10451:6279":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4325:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:5935:4821":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:3972:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3497:3678":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:1195:61988":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:1236:9267":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4425:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12632:7649":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:1194:13467":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:699:4668":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9133:48361":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:11994:55632":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:2253:4967":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:5875:6236":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"15:269:5603":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:5421:5720":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7119:5668":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3392:5947":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:46424:5214":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:531:6338":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5746:4404":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"12:2032:4537":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:46699:3760":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7205:5769":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:1045:4485":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:15890:3562":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:3613:4452":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:5536:5298":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:50356:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13377:7881":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11137:4499":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"5:1607:4200":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:23897:5191":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6852:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"9:27:5494":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:7122:16829":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:15355:55853":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:10863:4455":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"5:2218:5357":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:48454:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:11616:7454":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10821:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:5379:4753":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:49306:5167":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"14:47:9326":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7236:5772":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:3881:6557":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:50386:4219":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10988:9308":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13394:7884":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11539:7447":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"15:0:3533":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5210:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"15:248:5599":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:3894:5383":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:10218:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"9:692:5445":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:15882:3556":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:46730:3762":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6087:5674":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:4477:8089":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:51011:5022":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10081:6039":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:7800:4601":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6768:5971":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3335:4718":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:15874:3549":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:53389:8670":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:4045:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:5415:4430":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:2794:5664":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:45990:5036":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:3772:8080":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:48741:8614":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:14904:4596":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5987:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5505:5725":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1665:6493":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6176:5745":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:14917:4597":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12307:7573":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:46291:5259":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11337:6047":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:47604:4199":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5436:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11678:7462":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12118:7545":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:5766:5735":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:6672:5298":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"14:231:5281":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"12:937:4627":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:563:6360":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:52338:5000":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"14:250:8340":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:8241:4524":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10407:6079":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11604:7451":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6391:5751":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10701:3747":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:49696:3867":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:4671:8094":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5414:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:5582:4859":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:6577:5756":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:6488:3741":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:46588:3751":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:24205:3820":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:15626:6286":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:49921:4871":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:48557:3902":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:13506:7913":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:3370:3669":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10586:4677":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9476:7368":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3370:4536":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"12:1688:5591":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13884:8033":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:1658:6489":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10028:9276":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:13875:4595":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:51059:5002":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:50129:3836":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:49198:5158":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46541:3739":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:14528:55629":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:8129:5417":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7856:5778":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10266:6031":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10962:9306":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:10269:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:4902:5098":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:1511:4627":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:4265:4468":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:12725:7658":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4706:4441":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2267:4971":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:6442:4386":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:6964:4206":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2276:4972":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11191:4506":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:10827:6002":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:3255:2149":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6032:5667":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:4991:4497":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:46629:3764":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:53453:8674":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:1476:4534":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:46312:5253":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:11640:7458":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:8151:4145":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11100:6074":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5580:5912":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:45906:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7620:4589":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"0:425:2613":{"crate_id":0,"path":["time","ext","NumericalStdDuration"],"kind":"trait"},"17:10912:9299":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:51380:5024":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:52731:5026":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7477:5698":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11665:7461":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:8194:4145":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:6795:4386":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5863:4818":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:6864:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:10668:4635":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11118:48364":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2159:4199":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10844:6054":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:3905:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5274:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:1528:4629":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:2991:5944":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"9:900:8447":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8486:4656":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11653:7460":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4013:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4060:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:49397:3858":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:6155:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"0:927:1667":{"crate_id":0,"path":["time","util"],"kind":"module"},"17:13119:7823":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:3084:2556":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4227:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3228:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11738:7468":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10403:6053":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:48032:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:10290:3908":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13532:7923":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:15887:3559":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3540:3688":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:1655:4634":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:46237:5064":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:50117:3833":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:23094:4920":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:48780:8618":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9404:7366":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2178:8487":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:8141:59745":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:6221:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4306:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:1497:4624":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6780:5760":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:897:4672":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6704:7144":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:1153:9344":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11408:4389":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5456:5722":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12699:7656":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:51427:5012":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13296:7859":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:46304:3869":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:49661:3855":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:12012:8763":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:7668:4592":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"14:244:8338":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11993:7522":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5488:5724":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:13853:55572":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13453:7898":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:8137:60739":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3524:4451":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:14036:5181":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10696:5403":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:1156:9346":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:10658:4543":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:2889:5950":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:49619:3863":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:48980:5275":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:6100:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:46740:3763":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4362:4738":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5282:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:3396:4539":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:136:54649":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13933:8048":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:46335:5254":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:0:1323":{"crate_id":1,"path":["std"],"kind":"module"},"17:13799:8011":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:15842:9524":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13163:7828":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:11067:4440":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:11374:3861":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7843:5777":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:3147:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10140:6054":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:11183:3871":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:4641:8093":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:5082:5105":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11254:6070":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:56260:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2062:4430":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9245:6003":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:14235:4679":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:5736:5733":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:3345:2184":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:52985:5014":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:46649:3742":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:11051:3717":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"12:1253:4634":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9659:62092":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:12671:4707":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12234:7560":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:13036:3841":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:46391:5069":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:543:6343":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4033:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:8167:5288":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4164:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:3361:1649":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2460:9354":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13520:7920":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:49846:4869":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:46222:3868":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:13739:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10675:14449":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:4599:6230":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:7571:5673":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7392:5682":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:49340:3849":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:24124:40866":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:8198:6258":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:9809:62085":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:13241:41108":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"16:6620:5962":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:88:41431":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:3793:3691":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:811:6122":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:14160:4460":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:11246:55037":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:14843:6285":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:45814:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"9:0:3528":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:6893:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10458:7328":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6051:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13465:7904":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:47864:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:48469:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:511:6327":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12480:7617":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4073:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:49207:5159":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:3262:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:4047:4221":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10448:6035":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:3329:4199":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10801:9298":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:13402:7886":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:47612:4200":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13540:7926":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:7654:4591":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:14706:4598":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7884:5684":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:9574:6048":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:4506:8090":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3200:4438":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:49189:5157":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:47948:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:4733:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:3997:6634":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11194:4507":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:14693:4420":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:8097:5295":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:3558:3679":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3163:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:8112:5416":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:704:7275":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:6415:3752":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:3503:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:5360:5717":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"12:784:4624":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6636:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:51656:4981":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:10507:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:2773:5956":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13318:7863":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:49651:3853":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:7633:5342":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2170:4535":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:7611:5341":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7378:5681":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:51860:8635":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:45883:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:5833:5289":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:1630:6464":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:46911:3719":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:5724:4402":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8644:4779":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5295:46780":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10236:6033":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:12176:4792":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8294:4697":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:13986:8057":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5292:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:744:62098":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"9:776:5492":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"18:660:6134":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:7634:4590":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:3647:4447":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:2200:6229":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13582:7935":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11231:6072":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7250:5773":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22706:4917":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:47560:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:9144:4579":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:13774:60369":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:3978:6621":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3486:3677":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13240:7844":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6644:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:8304:5214":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"8:0:3527":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:47552:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:23725:2556":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:51631:4999":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10200:9281":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8978:4615":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5400:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:15876:3551":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:50121:3834":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13306:7860":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4331:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13180:7830":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10211:9282":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:46689:3759":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6682:5690":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:3421:3676":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9719:9270":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11283:4754":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13370:7879":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:5092:3918":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:14494:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:9689:62090":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:12482:3844":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"12:2045:4539":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"0:1245:1675":{"crate_id":0,"path":["time","error","Error","ComponentRange"],"kind":"variant"},"16:5522:5726":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:2437:9353":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12208:7557":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:6014:5742":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:9034:48358":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:5189:3921":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6866:4390":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:12116:4661":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11289:4755":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:24076:8504":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"14:11:9326":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:9065:4787":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:3882:4455":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"12:181:5584":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8479:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:161:41498":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:10513:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:11304:48365":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12568:7630":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11932:7508":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:49983:4874":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:11115:4200":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:6764:4430":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1584:6435":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:5672:5730":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:3260:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:7042:5979":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4431:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5472:5723":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:10795:4707":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:5965:4824":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:47500:4206":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:53127:5018":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:10652:13465":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:10938:9304":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:24084:8505":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:53415:8672":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:1501:4625":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6731:5968":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4397:4462":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:12664:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:13030:3842":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:15858:55631":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:49993:4875":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:14:2167":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2906:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"proc_derive"},"5:3839:6227":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4995:8104":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:1651:5589":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10529:7378":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11026:9311":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9759:9271":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:2777:5399":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:10800:4414":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:11260:5152":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:11933:4594":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:7682:4593":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:2543:6050":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12095:7539":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:22808:2556":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:2484:48447":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"12:1159:5576":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:12053:4655":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:12950:2683":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:3408:3673":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6881:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:12334:9354":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4419:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"12:2323:8393":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10591:4695":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:896:6129":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:3264:5940":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:22557:60270":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5953:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13272:7857":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:13837:4593":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:46519:3738":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:3868:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:50141:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:1554:6415":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:50113:3832":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:3048:61148":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:6562:4482":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:50006:8898":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"16:2754:5923":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6124:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:525:6335":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"5:1441:4631":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10426:6277":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13590:7937":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4614:8092":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"12:976:4630":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:47466:2478":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6101:5672":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:3698:3683":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:22559:60268":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:5384:5718":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:2912:5932":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12142:7547":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:3323:1800":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:3287:5941":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:51941:5025":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:50163:3700":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:10543:7417":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:4399:4463":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:1492:4623":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:46358:5255":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11197:4547":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:11499:7445":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12494:7619":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:46365:5256":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"12:866:4534":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:50965:8625":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9860:6276":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:10117:6104":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:15078:4516":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:0:3534":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:49447:3859":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:3945:6608":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1623:4631":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12685:7653":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:6792:4384":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13488:7909":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:3772:4200":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6424:5752":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:57634:8685":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:607:9266":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:578:6369":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5347:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:3194:4708":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:51313:4980":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6644:5758":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5159:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10950:9305":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7514:5696":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1908:42800":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:6611:60370":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:6702:7142":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:12729:3877":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:52020:5013":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:10943:4456":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8695:4782":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:51274:4995":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10933:4610":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7073:5763":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12659:7651":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10353:6083":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4449:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:14511:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"12:949:4628":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10839:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:6864:4388":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6870:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9179:9358":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:13501:55569":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12275:7566":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10160:7374":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:32295:5220":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:5269:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:4359:4145":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:15896:3568":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:3085:3892":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:801:6121":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:8954:6012":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:3387:3668":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:52181:5005":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:22885:2556":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:4604:4430":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:46329:3868":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11015:9310":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3278:4128":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:6870:3765":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:52373:4982":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11001:9309":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:5011:3919":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5167:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4377:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:49415:3856":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:9971:62086":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:53400:8671":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7420:5697":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:6868:4391":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:0:3535":{"crate_id":17,"path":["object"],"kind":"module"},"1:9633:6273":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:46640:3755":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:14949:8776":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:45929:3681":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:8864:3733":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7337:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"18:849:6125":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:9280:7363":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:22491:3706":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:15346:8781":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:3398:3671":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10061:9279":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:8335:5388":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7738:5775":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:8157:3720":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:13236:9341":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:1547:6412":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:5166:3922":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11779:7480":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:650:6130":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5255:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:7733:3746":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:11544:4563":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:46677:3758":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:23420:4923":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:51169:5015":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:1708:6519":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12287:7567":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3328:2183":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12327:7574":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:5015:5099":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:5273:5924":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10001:48409":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"12:396:5582":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:51836:8634":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:47990:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:4436:4464":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9162:6071":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:49829:4868":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:5652:4417":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:25198:3813":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12783:7668":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:1597:4199":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:47738:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11357:4754":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13282:7858":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:15271:4753":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3319:4713":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:11388:3860":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13819:8014":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10623:9295":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10420:6078":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:24624:3817":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:10557:3895":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"12:1118:4632":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9005:48357":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9729:62084":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10637:13463":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5420:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12247:7562":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:3040:8481":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"12:1667:5590":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:1663:4624":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:7373:4145":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4066:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:47654:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:8289:5386":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:15106:4522":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13685:7987":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:46351:3867":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:1432:4200":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:47433:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:13920:60017":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:6636:5693":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:3041:5935":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8415:5382":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:152:54650":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:2462:9355":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:4386:8086":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:45750:3689":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:49815:4865":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:2938:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:4417:8087":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:22832:4922":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:720:7277":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:739:9261":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:610:6131":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"0:0:1701":{"crate_id":0,"path":["time"],"kind":"module"},"2:10288:3907":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6691:5759":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:3197:4709":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:53276:5021":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:49705:3868":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:51530:5004":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:11982:4598":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:51146:5011":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6239:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"0:398:2583":{"crate_id":0,"path":["time","ext","NumericalDuration"],"kind":"trait"},"2:49297:5166":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11588:7450":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13780:8006":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:12087:4659":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"20:0:798":{"crate_id":20,"path":["libc"],"kind":"module"},"2:24007:8496":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:23968:8494":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:10284:3906":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:14837:6284":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:14481:8774":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11378:6005":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:10564:2556":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:47629:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:6085:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:14689:9361":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:50289:8624":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:23619:4493":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:13482:9353":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12537:7625":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:49565:3865":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:23826:5190":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:12803:3871":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12373:7598":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:51577:4992":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6252:5748":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4410:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2181:4537":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4371:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:12752:3874":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7333:5695":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:632:6398":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8651:4781":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:5314:7362":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:9296:7364":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11226:8740":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:15892:3564":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9799:9272":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:4306:4200":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10926:9303":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"12:0:3531":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"12:892:5568":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6999:5762":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12946:7697":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:5889:6239":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:13446:7897":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13760:8000":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10887:7414":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:3412:3674":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:13087:4864":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4364:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"14:189:9326":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:49777:4861":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3392:3670":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:2943:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"2:53468:8675":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3353:1643":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:4572:3725":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7761:5776":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:48499:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"9:749:5447":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:13564:7931":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11572:7449":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4241:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:2968:5933":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5927:5739":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4459:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:14463:8768":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:8353:8485":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:15879:3553":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"18:782:7275":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:9745:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:3721:3685":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11131:3853":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"9:722:5446":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:2512:6080":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:3039:62042":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:8929:48356":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12598:7636":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:47543:4202":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5197:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5855:5738":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13258:7852":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:51804:8633":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10071:6108":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11147:7427":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:4643:6232":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:24828:3818":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:6910:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:885:6128":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4183:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:24760:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4120:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1939:4535":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:53374:8669":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:624:6393":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6591:5757":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:605:6383":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:49355:3848":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2187:4538":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:1617:6457":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:15901:3573":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:11222:5151":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:46004:3918":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:15898:3570":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"0:386:1687":{"crate_id":0,"path":["time","ext"],"kind":"module"},"1:10609:4679":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"15:230:5598":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:9896:62091":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1463:4622":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11696:7463":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:4651:4430":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:22759:4927":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:4359:4737":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:6257:5341":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:46936:3725":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:8902:48355":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:14468:4414":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:7303:5774":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11435:16830":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"9:1056:5505":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:3382:3667":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:37565:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:5790:4406":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:3362:4538":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:1457:4633":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:7257:6227":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:1760:6541":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9528:3850":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:4955:8103":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:1419:4199":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"9:1020:5512":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:542:5653":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12795:7675":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6413:5595":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"0:940:1806":{"crate_id":0,"path":["time","util","is_leap_year"],"kind":"function"},"2:56286:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:14969:1705":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:11726:7467":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:1540:6410":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:51679:4984":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2401:9352":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13978:8054":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:14821:6283":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:3522:7291":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7146:5764":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5371:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:10911:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:10365:7435":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:3291:3936":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:11555:7448":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12552:7629":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:13850:9342":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13497:7912":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:23083:2556":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4262:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:8579:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:15112:4523":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:8425:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:22889:4492":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:10902:2556":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7295:5694":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:4709:4911":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:866:6127":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9933:9274":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11504:4561":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:1235:5395":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:4304:8084":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4145:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5945:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"9:963:5510":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6219:5747":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:15877:3552":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:10790:4496":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"14:194:46703":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"9:41:5495":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:46620:3754":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13386:7882":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9593:6272":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:4721:4912":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12028:7526":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:537:6340":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:3320:5994":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:6126:5743":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:15886:3558":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:12673:6281":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:24522:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:47822:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4823:8099":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:14026:4937":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:24061:5078":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11358:6006":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:49800:4862":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:8370:5278":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6214:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:48217:3906":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:5029:8105":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13192:7835":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:12186:4581":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10673:48547":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:3710:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"12:463:62081":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10095:6102":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:51458:5016":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10477:6051":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12195:7555":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:4946:3917":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2381:4582":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:12458:5270":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:3365:5922":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:10272:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:9839:6054":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:49288:5165":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:2902:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:9238:4682":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:853:4622":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11331:4499":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13637:7950":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4470:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:10468:6052":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:4922:8102":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:14021:6282":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:13724:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6949:5975":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11045:48363":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:8450:3734":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12456:7614":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:8344:3736":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:49601:3862":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:3800:8081":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:52307:4997":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4517:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5228:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:3064:5992":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:53438:8673":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:7980:6258":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"16:7226:5771":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:53190:4983":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:432:3937":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10331:6054":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:3018:5934":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12507:7620":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:1079:4487":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:15888:3560":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:10229:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3365:3665":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:32254:5209":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6464:5689":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3333:2182":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:12156:4786":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:5632:5729":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:4350:8085":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:599:6380":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10576:55852":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:47780:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:3349:1640":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:5407:5719":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11124:3858":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:3918:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9886:9273":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12343:7579":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:47483:4200":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:56312:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10376:9368":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:7216:5770":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9770:6275":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:10286:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3997:4613":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:24140:40875":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:49262:5163":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:2850:3786":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:14154:4462":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4133:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4300:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:829:6124":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:46499:9343":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:14087:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:4764:4936":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:11453:4551":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:1843:6227":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8385:4697":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"5:69:5336":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:694:6136":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4523:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8493:4657":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:2163:4145":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13547:7927":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:53491:8676":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7174:5766":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10938:4611":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:49958:4872":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:3091:5993":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8808:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:49138:5154":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:12768:3876":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13627:7945":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11167:4505":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:6887:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:4688:2148":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:49383:3850":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6899:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:923:5414":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10558:9288":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11915:7502":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:49226:5161":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:23631:60258":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:3715:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:6324:4772":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:1723:6528":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:9237:4616":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:4734:8096":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:10424:9340":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:6807:5761":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:2314:6082":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"12:968:4629":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:15895:3567":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:32355:59959":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"18:620:7274":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:1522:4628":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:15062:4515":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46720:3761":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10864:7413":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"9:927:46433":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13574:7934":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:8437:4535":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:37589:3706":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10975:9307":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:670:41829":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:53354:8667":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7797:4599":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:46579:3750":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5241:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1622:6459":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5185:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4040:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11527:4562":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11164:4501":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:46559:3748":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12712:7657":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:50109:3831":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"12:112:62077":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11338:4822":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:48074:5218":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:24023:8499":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:8359:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11159:7428":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6605:5691":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:52874:4994":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:50125:3835":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:8121:4534":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:15847:13468":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5522:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4272:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10584:6014":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:5428:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8844:9358":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:51704:4985":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:5658:4419":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:10280:3904":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12051:7529":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11328:7665":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:547:5914":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46406:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:3145:5945":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"12:1144:4633":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6518:5754":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:9236:4617":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:5312:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:4032:4222":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:12005:55038":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:49714:3869":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2955:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"proc_derive"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:766:7285":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:1694:5392":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:3759:4199":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"12:2309:8391":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:667:6135":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:903:4673":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:1563:6420":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11835:7497":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9943:62087":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7870:5683":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:11111:3761":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13205:7840":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:1215:5394":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:1161:13466":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"0:1000:205":{"crate_id":0,"path":["time","Result"],"kind":"typedef"},"2:24177:3819":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:57613:8684":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:15883:3557":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:1572:6426":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5969:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:11140:3858":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5191:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:1472:4632":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10149:9273":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:13021:3839":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:10278:3903":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:9740:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:15891:3563":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:1011:4199":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"14:56:7441":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9466:9390":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:22519:60254":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:53363:8668":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:47696:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:12692:3875":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:45962:3684":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:2166:4534":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:52260:4993":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:46709:3744":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"12:2039:4538":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11767:7477":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:160:5580":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:569:6363":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:9717:4746":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:3259:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:7815:6241":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9961:9275":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:9210:48362":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:10565:4669":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:32289:4528":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11750:7469":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"0:309:1674":{"crate_id":0,"path":["time","error"],"kind":"module"},"16:5595:5728":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:47491:4145":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4127:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3377:3666":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:10517:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:7835:5039":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:4790:8098":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5379:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:14000:8060":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"12:2009:4145":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:22895:4494":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:47475:4199":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:10692:9361":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6964:4387":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:4215:4534":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4193:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:7647:3737":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"0:938:1805":{"crate_id":0,"path":["time","util","days_in_year_month"],"kind":"function"},"17:13942:8050":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12385:7600":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1676:6501":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:3951:4535":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:9638:55575":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:3341:5354":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13733:7988":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11382:4385":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:5608:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:51293:8628":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7937:55574":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:49671:3854":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10253:6028":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:8860:3732":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:24590:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13772:8003":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6569:5964":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11482:7441":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:4443:4199":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11597:4199":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:1021:4697":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:12171:4644":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:9849:62093":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:2013:4534":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:3336:4537":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:2866:5931":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9551:6069":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:9732:4747":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:22948:4920":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10106:6103":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4043:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:6238:5679":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:23037:2556":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:50333:5179":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:12231:3789":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:6464:4421":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:3629:3682":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"7:0:1471":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:46945:3727":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:11058:4467":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11343:4825":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:9342:4491":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11161:4500":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:4023:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3473:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46550:3740":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13746:7994":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:13598:7938":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4101:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:8340:2181":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:812:4625":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:3338:5921":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:48487:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:519:6332":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:13041:3840":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:51608:4996":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3345:4723":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:7446:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:9600:62088":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:48788:8619":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"12:2025:4536":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4852:8100":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3562:3680":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:10276:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10435:9284":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:5973:4826":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13898:8035":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"12:930:4626":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12442:7612":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5975:5740":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5130:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12431:7610":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:49216:5160":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:11416:5156":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1486:4634":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13356:7877":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:5561:13469":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:53315:4986":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11970:7518":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12610:7638":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10571:9291":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:616:6388":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2948:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4215:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:374:5362":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1505:4626":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:3044:61147":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6812:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:56299:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:2262:5397":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4293:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10552:3894":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10847:4730":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13788:8007":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4255:4773":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:994:5415":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6185:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10635:7379":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:50374:4220":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6166:5744":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11186:7429":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:6087:4762":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5528:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3159:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:6357:5750":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7024:5978":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1637:4632":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:2192:4539":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1533:6407":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5359:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:15211:4509":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:50986:8626":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:3118:5946":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:50176:3701":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:7158:5765":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:3549:8078":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:11363:4774":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:3218:5938":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"12:1100:4631":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13924:8044":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:8159:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9368:7365":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:5960:5919":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:8930:4800":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"18:754:62097":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:49373:3851":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13912:8042":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:49236:5162":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:23990:5082":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:591:6375":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:53237:5001":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:14999:8777":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:4515:5371":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:11079:4442":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:24556:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7195:5768":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:3250:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:3500:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7453:5677":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:5231:8106":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"0:1241:127":{"crate_id":0,"path":["time","error","Error"],"kind":"enum"},"1:11587:4564":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"12:2005:4199":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:7342:5709":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12010:7525":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:51034:5010":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:24658:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:22504:60254":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:49689:3866":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:712:3706":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:5957:4823":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:5732:4401":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11628:7455":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10807:4415":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:24454:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:3195:5937":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10317:6045":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:9186:6010":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10656:7381":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13620:7943":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:49680:3870":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6366:5596":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12771:7665":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:24102:40874":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:46:8396":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3416:3675":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:48436:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12741:7660":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10041:9277":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6614:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:49519:3860":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13062:7788":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:15889:3561":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:7264:5692":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:48758:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:3268:3923":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:7512:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:11333:5153":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:8390:3735":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:51756:8632":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:4699:6232":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:46228:8593":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:857:6126":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"13:232:8385":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:51188:8627":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:6068:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:4535:8091":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:46658:3756":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:14123:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9264:7362":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6491:5753":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:7932:4696":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"16:4448:8088":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:22536:60267":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"9:1075:5513":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:5146:3920":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:32455:59960":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"0:1248:2502":{"crate_id":0,"path":["time","error","Error","DifferentVariant"],"kind":"variant"},"2:51251:4991":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:3318:1799":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:45860:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12262:7565":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:48460:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:48770:4561":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8743:4790":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:48196:3904":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:3981:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:8188:4145":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:46049:5055":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:15233:4752":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:49972:4873":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:51115:5023":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:53530:8677":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:32114:3807":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:2816:5949":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:48573:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"12:377:5583":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:8849:6068":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11822:7496":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:13011:3824":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:6204:4771":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:12181:4580":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4401:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:4631:4416":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:9068:4585":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2945:5955":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13477:7905":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:3506:5942":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:5986:4827":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:9956:5138":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:8254:4638":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"1:14930:2696":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:1522:6402":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13810:8012":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:7260:9357":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11101:3747":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:11918:5170":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:13221:7843":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10224:9283":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13172:7829":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:24192:3816":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"0:1242:2461":{"crate_id":0,"path":["time","error","Error","ConversionRange"],"kind":"variant"},"2:38746:3891":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1717:6525":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"9:686:5443":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:50105:3829":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:2843:5930":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10611:9294":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8137:4697":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"21:0:1714":{"crate_id":21,"path":["num_threads"],"kind":"module"},"6:5407:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5563:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9769:62089":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:1602:6445":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:48984:5274":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:46597:8604":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:7406:5680":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5459:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4083:6672":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9332:6046":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:13336:4767":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:4649:4439":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13609:7942":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:49501:3861":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:8454:5337":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6554:5755":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"12:429:5581":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"14:216:46709":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6858:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:46956:3729":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"12:877:4535":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:7291:9357":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:8381:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"12:2331:4524":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:2310:5424":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:45839:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:50279:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11603:4566":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:8084:3717":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:5780:4405":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:38809:4129":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:9088:48360":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:3153:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6200:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11794:7486":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:2330:5396":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"13:120:46675":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:11885:5169":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:5707:5731":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"}},"external_crates":{"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"libc","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"num_threads","html_root_url":null}},"format_version":16}