{"root":"0:0:1687","crate_version":"0.3.11","includes_private":false,"index":{"0:419:2198":{"id":"0:419:2198","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:56544":{"id":"2:13410:56544","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:15856:3538","`DoubleEndedIterator`":"2:8411:120","str::rsplit":"1:15862:3543","self::pattern":"2:12997:3820","str::split_whitespace":"1:15862:3543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49320:3854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8411:120":{"id":"2:8411:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8412:4131","2:8413:4132","2:8414:4133","2:8415:4134","2:8419:4135","2:8422:4136"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13399:56555":{"id":"2:13399:56555","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3329:3651":{"id":"2:3329:3651","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:171","2:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8846:3719":{"id":"2:8846:3719","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13384:56537":{"id":"2:13384:56537","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15862:3543"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8367:151":{"id":"2:8367:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:2464","2:8369:4141","2:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13434:60414":{"id":"2:13434:60414","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5650:4415":{"id":"1:5650:4415","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5651:58785","1:5652:5360"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3149:217":{"id":"2:3149:217","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3151:127","2:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13463:16181":{"id":"2:13463:16181","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12997:3820","prim@char":"1:15856:3538"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:431:2611":{"id":"0:431:2611","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[197,4],"end":[197,38]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of hours.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1202:2447":{"id":"0:1202:2447","crate_id":0,"name":"ConversionRange","span":{"filename":"src/error/conversion_range.rs","begin":[10,0],"end":[10,27]},"visibility":"public","docs":"An error type indicating that a conversion failed because the target type could not store the\ninitial value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"1:5744:4482":{"id":"1:5744:4482","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5745:6771","1:5746:54691","1:5747:7215","1:5748:54692","1:5749:4771","1:5750:4772","1:5751:54693","1:5752:1283","1:5753:54694","1:5754:54695","1:5755:54696","1:5756:54697","1:5757:54698","1:5758:54699","1:5759:54700","1:5760:54701"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1245:1661":{"id":"0:1245:1661","crate_id":0,"name":"ComponentRange","span":{"filename":"src/error/mod.rs","begin":[49,4],"end":[49,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"ComponentRange","id":"0:1181:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:13364:60406":{"id":"2:13364:60406","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6866:4387":{"id":"1:6866:4387","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6867:54936"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:982":{"id":"0:982","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[318,0],"end":[318,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::month::Month","name":"Month","id":"0:1290:1692","glob":false}},"0:355:2485":{"id":"0:355:2485","crate_id":0,"name":"invalid_variant","span":{"filename":"src/error/invalid_variant.rs","begin":[1,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:309:1660","path":"::error"}},"docs":"Invalid variant error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1228:2491"],"is_stripped":true}},"0:409:2194":{"id":"0:409:2194","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[23,0],"end":[23,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"conversion_range::ConversionRange","name":"ConversionRange","id":"0:1202:2447","glob":false}},"0:941:1654":{"id":"0:941:1654","crate_id":0,"name":"days_in_year","span":{"filename":"src/util.rs","begin":[58,0],"end":[60,1]},"visibility":"public","docs":"Get the number of calendar days in a given year.\n\nThe returned value will always be either 365 or 366.\n\n```rust\n# use time::util::days_in_year;\nassert_eq!(days_in_year(1900), 365);\nassert_eq!(days_in_year(2000), 366);\nassert_eq!(days_in_year(2004), 366);\nassert_eq!(days_in_year(2005), 365);\nassert_eq!(days_in_year(2100), 365);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"2:14109:141":{"id":"2:14109:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14110:266","2:14111:507","2:14112:269","2:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8330:3723":{"id":"2:8330:3723","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8332:4183"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:408:2182":{"id":"0:408:2182","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13440:60415":{"id":"2:13440:60415","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820","str::matches":"1:15862:3543","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49542:3859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8436:3721":{"id":"2:8436:3721","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8437:780","2:8438:4137"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[67,0],"end":[88,1]},"visibility":{"restricted":{"parent":"0:309:1660","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:383:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:424:2216":{"id":"0:424:2216","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13446:60417":{"id":"2:13446:60417","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15862:3543","self::pattern":"2:12997:3820","prim@char":"1:15856:3538","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49488:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3367:3653":{"id":"2:3367:3653","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:171","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1079:4505":{"id":"1:1079:4505","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:3775","1:1081:5271","1:1082:54324","1:1083:54325","1:1084:54326","1:1085:54327","1:1086:54328"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:425:2599":{"id":"0:425:2599","crate_id":0,"name":"NumericalStdDuration","span":{"filename":"src/ext.rs","begin":[185,0],"end":[202,1]},"visibility":"public","docs":"Create [`std::time::Duration`]s from numeric literals.\n\n# Examples\n\nBasic construction of [`std::time::Duration`]s.\n\n```rust\n# use time::ext::NumericalStdDuration;\n# use core::time::Duration;\nassert_eq!(5.std_nanoseconds(), Duration::from_nanos(5));\nassert_eq!(5.std_microseconds(), Duration::from_micros(5));\nassert_eq!(5.std_milliseconds(), Duration::from_millis(5));\nassert_eq!(5.std_seconds(), Duration::from_secs(5));\nassert_eq!(5.std_minutes(), Duration::from_secs(5 * 60));\nassert_eq!(5.std_hours(), Duration::from_secs(5 * 3_600));\nassert_eq!(5.std_days(), Duration::from_secs(5 * 86_400));\nassert_eq!(5.std_weeks(), Duration::from_secs(5 * 604_800));\n```\n\nJust like any other [`std::time::Duration`], they can be added, subtracted, etc.\n\n```rust\n# use time::ext::NumericalStdDuration;\nassert_eq!(\n    2.std_seconds() + 500.std_milliseconds(),\n    2_500.std_milliseconds()\n);\nassert_eq!(\n    2.std_seconds() - 500.std_milliseconds(),\n    1_500.std_milliseconds()\n);\n```\n\nWhen called on floating point values, any remainder of the floating point value will be\ntruncated. Keep in mind that floating point numbers are inherently imprecise and have limited\ncapacity.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:426:2601","0:427:2603","0:428:2605","0:429:2607","0:430:2609","0:431:2611","0:432:2613","0:433:2615"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::Sealed","id":"0:394:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:434","0:443"]}},"1:6790:4380":{"id":"1:6790:4380","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:54628","1:6792:58797"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13484:60428":{"id":"2:13484:60428","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15856:3538"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49619:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:399:2182":{"id":"0:399:2182","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[62,4],"end":[62,37]},"visibility":"default","docs":"Create a [`Duration`] from the number of nanoseconds.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:9223:4562":{"id":"2:9223:4562","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1258:1518":{"id":"0:1258:1518","crate_id":0,"name":"0","span":{"filename":"src/instant.rs","begin":[31,19],"end":[31,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"StdInstant","id":"1:12189:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:13388:33376":{"id":"2:13388:33376","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15862:3543"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49594:3850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23655:4957":{"id":"2:23655:4957","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23656:4961"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23651:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3492:132":{"id":"2:3492:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3494:171","2:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6862:4384":{"id":"1:6862:4384","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6863:58428"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5828:5281":{"id":"5:5828:5281","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3486:130":{"id":"2:3486:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8376:3722":{"id":"2:8376:3722","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8378:4138","2:8380:4139","2:8381:4140"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5738:4481":{"id":"1:5738:4481","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5739:7215","1:5740:8767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3351:1635":{"id":"2:3351:1635","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:441:2613":{"id":"0:441:2613","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6100:3711":{"id":"5:6100:3711","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3472:3664":{"id":"2:3472:3664","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23006:4962":{"id":"2:23006:4962","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23655:4957","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22997:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1244:1518":{"id":"0:1244:1518","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[48,20],"end":[48,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ConversionRange","id":"0:1202:2447","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:417:2182":{"id":"0:417:2182","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1002:1690":{"id":"0:1002:1690","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[36,0],"end":[43,1]},"visibility":"public","docs":"Date in the proleptic Gregorian calendar.\n\nBy default, years between ±9999 inclusive are representable. This can be expanded to ±999,999\ninclusive by enabling the `large-dates` crate feature. Doing so has performance implications\nand introduces some ambiguities when parsing.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13455:60421":{"id":"2:13455:60421","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:2499","1:2579:3525","1:2580:2147","1:2581:4225","1:2582:4226"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1255:648":{"id":"0:1255:648","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3281:3932":{"id":"2:3281:3932","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3398:3660":{"id":"2:3398:3660","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:398:2569":{"id":"0:398:2569","crate_id":0,"name":"NumericalDuration","span":{"filename":"src/ext.rs","begin":[60,0],"end":[77,1]},"visibility":"public","docs":"Create [`Duration`]s from numeric literals.\n\n# Examples\n\nBasic construction of [`Duration`]s.\n\n```rust\n# use time::{Duration, ext::NumericalDuration};\nassert_eq!(5.nanoseconds(), Duration::nanoseconds(5));\nassert_eq!(5.microseconds(), Duration::microseconds(5));\nassert_eq!(5.milliseconds(), Duration::milliseconds(5));\nassert_eq!(5.seconds(), Duration::seconds(5));\nassert_eq!(5.minutes(), Duration::minutes(5));\nassert_eq!(5.hours(), Duration::hours(5));\nassert_eq!(5.days(), Duration::days(5));\nassert_eq!(5.weeks(), Duration::weeks(5));\n```\n\nSigned integers work as well!\n\n```rust\n# use time::{Duration, ext::NumericalDuration};\nassert_eq!((-5).nanoseconds(), Duration::nanoseconds(-5));\nassert_eq!((-5).microseconds(), Duration::microseconds(-5));\nassert_eq!((-5).milliseconds(), Duration::milliseconds(-5));\nassert_eq!((-5).seconds(), Duration::seconds(-5));\nassert_eq!((-5).minutes(), Duration::minutes(-5));\nassert_eq!((-5).hours(), Duration::hours(-5));\nassert_eq!((-5).days(), Duration::days(-5));\nassert_eq!((-5).weeks(), Duration::weeks(-5));\n```\n\nJust like any other [`Duration`], they can be added, subtracted, etc.\n\n```rust\n# use time::ext::NumericalDuration;\nassert_eq!(2.seconds() + 500.milliseconds(), 2_500.milliseconds());\nassert_eq!(2.seconds() - 500.milliseconds(), 1_500.milliseconds());\n```\n\nWhen called on floating point values, any remainder of the floating point value will be\ntruncated. Keep in mind that floating point numbers are inherently imprecise and have limited\ncapacity.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:399:2182","0:400:2194","0:401:2198","0:402:2180","0:403:2205","0:404:2209","0:405:1915","0:406:2216"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::Sealed","id":"0:394:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:407","0:416"]}},"5:6086:61066":{"id":"5:6086:61066","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:927:1653":{"id":"0:927:1653","crate_id":0,"name":"util","span":{"filename":"src/util.rs","begin":[1,0],"end":[80,1]},"visibility":"public","docs":"Utility functions.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:938:1791","0:940:1792","0:941:1654","0:942:1793"],"is_stripped":false}},"b:2:3179-0:1241:127":{"id":"b:2:3179-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3137:75":{"id":"2:3137:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10272:179":{"id":"2:10272:179","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1318:1918":{"id":"0:1318:1918","crate_id":0,"name":"October","span":{"filename":"src/month.rs","begin":[24,4],"end":[24,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:4018:4218":{"id":"2:4018:4218","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4019:4226"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:427:2603":{"id":"0:427:2603","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[189,4],"end":[189,45]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of microseconds.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10255:109":{"id":"2:10255:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13371:293":{"id":"2:13371:293","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15873:3552","str::as_mut_ptr":"1:15862:3543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[24,0],"end":[24,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"different_variant::DifferentVariant","name":"DifferentVariant","id":"0:1215:2488","glob":false}},"2:2862:104":{"id":"2:2862:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:397","2:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:413:2209":{"id":"0:413:2209","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3318:2169":{"id":"2:3318:2169","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:171","2:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:450:2613":{"id":"0:450:2613","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[269,4],"end":[272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3175:669":{"id":"2:3175:669","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:440:2611":{"id":"0:440:2611","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:426:2601":{"id":"0:426:2601","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[187,4],"end":[187,44]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of nanoseconds.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5792:4485":{"id":"1:5792:4485","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5793:54561"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2846-0:1241:127":{"id":"b:2:2846-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:3773","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:54234"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12936:2670":{"id":"2:12936:2670","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12937:126","2:12938:2681"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13375:56514":{"id":"2:13375:56514","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7891:3702":{"id":"2:7891:3702","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7892:59904","2:7893:59905","2:7894:59902","2:7895:59900","2:7896:59906","2:7897:59903","2:7898:59901"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:988":{"id":"0:988","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[320,0],"end":[320,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::primitive_date_time::PrimitiveDateTime","name":"PrimitiveDateTime","id":"0:1364:1694","glob":false}},"2:13428:56551":{"id":"2:13428:56551","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15862:3543","self::pattern":"2:12997:3820","prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49442:3856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6410:1376":{"id":"5:6410:1376","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1291:1927":{"id":"0:1291:1927","crate_id":0,"name":"January","span":{"filename":"src/month.rs","begin":[15,4],"end":[15,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13022:3837":{"id":"2:13022:3837","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13024:4131","2:13025:59423","2:13026:59424"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13016:3838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1241:127":{"id":"0:1241:127","crate_id":0,"name":"Error","span":{"filename":"src/error/mod.rs","begin":[47,0],"end":[65,1]},"visibility":"public","docs":"A unified error type for anything returned by a method in the time crate.\n\nThis can be used when you either don't know or don't care about the exact error returned.\n`Result<_, time::Error>` (or its alias `time::Result<_>`) will work in these situations.","links":{},"attrs":["#[allow(missing_copy_implementations, variant_size_differences)]","#[allow(clippy :: missing_docs_in_private_items)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1242:2447","0:1245:1661","0:1248:2488","0:1251:2491"],"impls":["a:2:9222:4563-0:1241:127","a:2:9223:4562-0:1241:127","a:2:3240:200-0:1241:127","a:2:3252:209-0:1241:127","a:2:3281:3932-0:1241:127","b:2:3169-0:1241:127","b:2:3969-0:1241:127","b:2:2846-0:1241:127","b:2:2843-0:1241:127","b:2:3184-0:1241:127","b:2:3179-0:1241:127","b:2:3173-0:1241:127","b:5:6408-0:1241:127","0:1254","0:382","0:384"]}},"2:13478:2145":{"id":"2:13478:2145","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12936:2670","`FromStr`":"2:12936:2670"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:2670","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:2670","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3323:2168":{"id":"2:3323:2168","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:171","2:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3183:1395":{"id":"2:3183:1395","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:393:2540":{"id":"0:393:2540","crate_id":0,"name":"sealed","span":{"filename":"src/ext.rs","begin":[8,0],"end":[8,10]},"visibility":{"restricted":{"parent":"0:386:1673","path":"::ext"}},"docs":"Sealed trait to prevent downstream implementations.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:394:2542"],"is_stripped":true}},"0:433:2615":{"id":"0:433:2615","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[201,4],"end":[201,38]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of weeks.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1000:195":{"id":"0:1000:195","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[326,0],"end":[326,52]},"visibility":"public","docs":"An alias for [`std::result::Result`] with a generic error from the time crate.","links":{"`std::result::Result`":"2:47483:195"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"core::result::Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"b:5:6408-0:1241:127":{"id":"b:5:6408-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6406:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6410:1376"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1315:1919":{"id":"0:1315:1919","crate_id":0,"name":"September","span":{"filename":"src/month.rs","begin":[23,4],"end":[23,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:446:2605":{"id":"0:446:2605","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[249,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:432:2613":{"id":"0:432:2613","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[199,4],"end":[199,37]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of days.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3245:2135":{"id":"2:3245:2135","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13360":{"id":"2:13360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13361:780","2:13362:4137","2:13363:60405","2:13364:60406","2:13366:60407","2:13369:2150","2:13370:60408","2:13371:293","2:13372:56517","2:13373:2675","2:13375:56514","2:13377:56515","2:13379:56516","2:13381:4517","2:13382:60409","2:13383:56536","2:13384:56537","2:13385:3881","2:13386:4899","2:13387:4521","2:13388:33376","2:13389:33366","2:13390:5620","2:13391:60410","2:13392:33361","2:13393:56553","2:13396:56554","2:13399:56555","2:13402:4175","2:13406:4136","2:13410:56544","2:13413:33233","2:13416:56547","2:13419:60411","2:13422:60412","2:13425:56549","2:13428:56551","2:13431:60413","2:13434:60414","2:13437:3620","2:13440:60415","2:13443:60416","2:13446:60417","2:13449:60418","2:13451:60419","2:13453:60420","2:13455:60421","2:13456:60422","2:13457:60423","2:13460:60424","2:13463:16181","2:13466:56556","2:13469:60425","2:13472:60426","2:13475:60427","2:13478:2145","2:13480:5271","2:13481:54326","2:13482:54327","2:13483:54328","2:13484:60428","2:13486:4507","2:13487:60429"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:451:2615":{"id":"0:451:2615","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[274,4],"end":[277,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3971:1408":{"id":"2:3971:1408","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45892:4219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406:2216":{"id":"0:406:2216","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[76,4],"end":[76,31]},"visibility":"default","docs":"Create a [`Duration`] from the number of weeks.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:22961:17529":{"id":"2:22961:17529","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22962:8385","2:22963:58824","2:22964:58825"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22954:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5656:4413":{"id":"1:5656:4413","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5657:6086","1:5658:2150"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5788:4484":{"id":"1:5788:4484","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5789:54691"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13406:4136":{"id":"2:13406:4136","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47356:166","self::pattern":"2:12997:3820","prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6406:212":{"id":"5:6406:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6407:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:400:2194":{"id":"0:400:2194","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[64,4],"end":[64,38]},"visibility":"default","docs":"Create a [`Duration`] from the number of microseconds.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:127:1672":{"id":"0:127:1672","crate_id":0,"name":"duration","span":{"filename":"src/duration.rs","begin":[1,0],"end":[1106,1]},"visibility":"crate","docs":"The [`Duration`] struct and its associated `impl`s.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1050:121"],"is_stripped":true}},"0:437:2605":{"id":"0:437:2605","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[213,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:414:1915":{"id":"0:414:1915","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:60409":{"id":"2:13382:60409","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15862:3543","`str`":"1:15862:3543","crate::ops::IndexMut":"2:3548:3667"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10276:3904":{"id":"2:10276:3904","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13457:60423":{"id":"2:13457:60423","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13027:3836","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13007:3835":{"id":"2:13007:3835","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13009:3838","2:13010:59615","2:13011:59616","2:13012:59617","2:13013:59619","2:13014:59618","2:13015:59620"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13389:33366":{"id":"2:13389:33366","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15862:3543"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49603:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3248:207":{"id":"2:3248:207","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:444:2601":{"id":"0:444:2601","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[239,4],"end":[242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1309:1921":{"id":"0:1309:1921","crate_id":0,"name":"July","span":{"filename":"src/month.rs","begin":[21,4],"end":[21,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:970":{"id":"0:970","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[313,0],"end":[313,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::date::Date","name":"Date","id":"0:1002:1690","glob":false}},"2:8565:157":{"id":"2:8565:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8566:2464","2:8567:909","2:8568:4142","2:8571:4143","2:8572:484","2:8574:4144","2:8577:4145","2:8578:4146","2:8579:4147","2:8580:4148","2:8582:3724","2:8584:4149","2:8585:4150","2:8587:828","2:8590:4151","2:8597:4152","2:8599:4153","2:8602:4154","2:8603:4155","2:8604:4156","2:8606:4157","2:8608:4158","2:8611:1287","2:8612:4159","2:8613:4160","2:8617:4161","2:8620:4162","2:8621:4163","2:8622:4164","2:8624:4165","2:8625:3762","2:8627:4166","2:8630:4167","2:8632:4168","2:8642:4169","2:8657:4170","2:8659:4171","2:8663:4172","2:8672:4173","2:8675:2465","2:8677:4174","2:8680:265","2:8687:283","2:8694:4175","2:8701:4176","2:8710:4177","2:8720:1001","2:8727:4178","2:8734:1649","2:8735:1648","2:8736:3697","2:8748:3696","2:8755:3695","2:8767:3694","2:8774:4179","2:8775:4180","2:8780:2468","2:8783:4181","2:8786:4182","2:8787:2462","2:8789:4183","2:8791:404","2:8794:4184","2:8797:984","2:8800:4185","2:8803:593","2:8806:4186","2:8809:894","2:8811:813","2:8813:779","2:8815:701","2:8817:684","2:8819:4187","2:8820:4188","2:8828:4189"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:418:2194":{"id":"0:418:2194","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[118,4],"end":[120,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430:2609":{"id":"0:430:2609","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[195,4],"end":[195,40]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of minutes.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13425:56549":{"id":"2:13425:56549","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12997:3820","prim@char":"1:15856:3538","str::rsplitn":"1:15862:3543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49424:3857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13466:56556":{"id":"2:13466:56556","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13392:33361":{"id":"2:13392:33361","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49612:3862","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:447:2607":{"id":"0:447:2607","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[254,4],"end":[257,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2845:2627":{"id":"2:2845:2627","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10268:3901":{"id":"2:10268:3901","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2892:173":{"id":"2:2892:173","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2894:593","2:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:898:1688":{"id":"0:898:1688","crate_id":0,"name":"utc_offset","span":{"filename":"src/utc_offset.rs","begin":[1,0],"end":[337,1]},"visibility":"crate","docs":"The [`UtcOffset`] struct and its associated `impl`s.","links":{"`UtcOffset`":"0:1444:1696"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1444:1696"],"is_stripped":true}},"2:13449:60418":{"id":"2:13449:60418","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:452:1677":{"id":"0:452:1677","crate_id":0,"name":"instant","span":{"filename":"src/instant.rs","begin":[1,0],"end":[262,1]},"visibility":"crate","docs":"The [`Instant`] struct and its associated `impl`s.","links":{"`Instant`":"0:1256:1691"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1256:1691"],"is_stripped":true}},"2:13361:780":{"id":"2:13361:780","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10503:146":{"id":"2:10503:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10504:640","2:10505:2153","2:10506:4353","2:10507:4354","2:10508:4355","2:10509:4356","2:10510:4357","2:10511:4358","2:10512:4359","2:10513:4360","2:10514:4361","2:10515:4362","2:10516:4363","2:10517:4364","2:10518:4365","2:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[91,0],"end":[112,1]},"visibility":{"restricted":{"parent":"0:309:1660","path":"::error"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","backtrace","description","provide","cause","source"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:385:2499"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13469:60425":{"id":"2:13469:60425","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:131":{"id":"2:3489:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1306:1922":{"id":"0:1306:1922","crate_id":0,"name":"June","span":{"filename":"src/month.rs","begin":[20,4],"end":[20,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1474:1994":{"id":"0:1474:1994","crate_id":0,"name":"Thursday","span":{"filename":"src/weekday.rs","begin":[23,4],"end":[23,12]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8843:3717":{"id":"2:8843:3717","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:439:2609":{"id":"0:439:2609","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10493:142":{"id":"2:10493:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10494:703","2:10496:4193"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3240:200-0:1241:127":{"id":"a:2:3240:200-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:343:2481":{"id":"0:343:2481","crate_id":0,"name":"different_variant","span":{"filename":"src/error/different_variant.rs","begin":[1,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:309:1660","path":"::error"}},"docs":"Different variant error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1215:2488"],"is_stripped":true}},"1:4711:4441":{"id":"1:4711:4441","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4712:58595","1:4713:58596","1:4714:58597","1:4716:4440","1:4717:58598","1:4719:56544","1:4720:5620"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4629:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13725:150":{"id":"2:13725:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13726:171","2:13727:150","2:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1476:1995":{"id":"0:1476:1995","crate_id":0,"name":"Friday","span":{"filename":"src/weekday.rs","begin":[25,4],"end":[25,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13393:56553":{"id":"2:13393:56553","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401:2198":{"id":"0:401:2198","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[66,4],"end":[66,38]},"visibility":"default","docs":"Create a [`Duration`] from the number of milliseconds.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:994":{"id":"0:994","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[322,0],"end":[322,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::utc_offset::UtcOffset","name":"UtcOffset","id":"0:1444:1696","glob":false}},"0:421:2205":{"id":"0:421:2205","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[130,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1364:1694":{"id":"0:1364:1694","crate_id":0,"name":"PrimitiveDateTime","span":{"filename":"src/primitive_date_time.rs","begin":[17,0],"end":[22,1]},"visibility":"public","docs":"Combined date and time.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13486:4507":{"id":"2:13486:4507","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15856:3538"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49628:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13481:54326":{"id":"2:13481:54326","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1468:1998":{"id":"0:1468:1998","crate_id":0,"name":"Monday","span":{"filename":"src/weekday.rs","begin":[17,4],"end":[17,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1228:2491":{"id":"0:1228:2491","crate_id":0,"name":"InvalidVariant","span":{"filename":"src/error/invalid_variant.rs","begin":[8,0],"end":[8,26]},"visibility":"public","docs":"An error type indicating that a [`FromStr`](core::str::FromStr) call failed because the value\nwas not a valid variant.","links":{"core::str::FromStr":"2:12936:2670"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:3182:127":{"id":"2:3182:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"2:13027:3836":{"id":"2:13027:3836","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1242:2447":{"id":"0:1242:2447","crate_id":0,"name":"ConversionRange","span":{"filename":"src/error/mod.rs","begin":[48,4],"end":[48,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"ConversionRange","id":"0:1202:2447","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:1253:1518":{"id":"0:1253:1518","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[64,19],"end":[64,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"InvalidVariant","id":"0:1228:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:991":{"id":"0:991","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[321,0],"end":[321,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::time::Time","name":"Time","id":"0:1413:1695","glob":false}},"2:3355:3652":{"id":"2:3355:3652","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13391:60410":{"id":"2:13391:60410","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49584:3851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3394:3659":{"id":"2:3394:3659","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13386:4899":{"id":"2:13386:4899","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49296:3847","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13483:54328":{"id":"2:13483:54328","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1256:1691":{"id":"0:1256:1691","crate_id":0,"name":"Instant","span":{"filename":"src/instant.rs","begin":[31,0],"end":[31,35]},"visibility":"public","docs":"A measurement of a monotonically non-decreasing clock. Opaque and useful only with [`Duration`].\n\nInstants are always guaranteed to be no less than any previously measured instant when created,\nand are often useful for tasks such as measuring benchmarks or timing how long an operation\ntakes.\n\nNote, however, that instants are not guaranteed to be **steady**. In other words, each tick of\nthe underlying clock may not be the same length (e.g. some seconds may be longer than others).\nAn instant may jump forwards or experience time dilation (slow down or speed up), but it will\nnever go backwards.\n\nInstants are opaque types that can only be compared to one another. There is no method to get\n\"the number of seconds\" from an instant. Instead, it only allows measuring the duration between\ntwo instants (or comparing two instants).\n\nThis implementation allows for operations with signed [`Duration`]s, but is otherwise identical\nto [`std::time::Instant`].","links":{"`std::time::Instant`":"1:12189:1691","`Duration`":"0:1050:121"},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:1258:1518"],"impls":[]}},"0:1312:1920":{"id":"0:1312:1920","crate_id":0,"name":"August","span":{"filename":"src/month.rs","begin":[22,4],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"5:6099:61068":{"id":"5:6099:61068","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:3933","`String`":"5:8354:205"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3933","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:5287","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:449:2611":{"id":"0:449:2611","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[264,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3252:209":{"id":"2:3252:209","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13366:60407":{"id":"2:13366:60407","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15862:3543"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8326:2167":{"id":"2:8326:2167","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8328:2462"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13437:3620":{"id":"2:13437:3620","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820","`DoubleEndedIterator`":"2:8411:120","str::matches":"1:15862:3543"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49524:3858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:385:2499":{"id":"0:385:2499","crate_id":0,"name":"source","span":{"filename":"src/error/mod.rs","begin":[92,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3335:2170":{"id":"2:3335:2170","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:171","2:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13363:60405":{"id":"2:13363:60405","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3377:3655":{"id":"2:3377:3655","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:171","2:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:973":{"id":"0:973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[314,0],"end":[314,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::duration::Duration","name":"Duration","id":"0:1050:121","glob":false}},"2:9222:4563":{"id":"2:9222:4563","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3684:3670":{"id":"2:3684:3670","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:3669","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:942:1793":{"id":"0:942:1793","crate_id":0,"name":"weeks_in_year","span":{"filename":"src/util.rs","begin":[71,0],"end":[80,1]},"visibility":"public","docs":"Get the number of weeks in the ISO year.\n\nThe returned value will always be either 52 or 53.\n\n```rust\n# use time::util::weeks_in_year;\nassert_eq!(weeks_in_year(2019), 52);\nassert_eq!(weeks_in_year(2020), 53);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:448:2609":{"id":"0:448:2609","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[259,4],"end":[262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1413:1695":{"id":"0:1413:1695","crate_id":0,"name":"Time","span":{"filename":"src/time.rs","begin":[32,0],"end":[43,1]},"visibility":"public","docs":"The clock time within a given date. Nanosecond precision.\n\nAll minutes are assumed to have exactly 60 seconds; no attempt is made to handle leap seconds\n(either positive or negative).\n\nWhen comparing two `Time`s, they are assumed to be in the same calendar date.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:9340:4494":{"id":"1:9340:4494","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9341:54643","1:9342:54644","1:9343:54645","1:9344:54646","1:9345:5177","1:9346:40337","1:9347:54642"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3459:116":{"id":"2:3459:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:210","2:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1294:1926":{"id":"0:1294:1926","crate_id":0,"name":"February","span":{"filename":"src/month.rs","begin":[16,4],"end":[16,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[204,0],"end":[236,1]},"visibility":{"restricted":{"parent":"0:386:1673","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalStdDuration","id":"0:425:2599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u64"},"items":["0:435:2601","0:436:2603","0:437:2605","0:438:2607","0:439:2609","0:440:2611","0:441:2613","0:442:2615"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8850:3720":{"id":"2:8850:3720","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7891:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:826:1687":{"id":"0:826:1687","crate_id":0,"name":"time","span":{"filename":"src/time.rs","begin":[1,0],"end":[757,1]},"visibility":"crate","docs":"The [`Time`] struct and its associated `impl`s.","links":{"`Time`":"0:1413:1695"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1413:1695"],"is_stripped":true}},"2:2840:3773":{"id":"2:2840:3773","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2842:54234"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3969-0:1241:127":{"id":"b:2:3969-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3140:74":{"id":"2:3140:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142:4130"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13373:2675":{"id":"2:13373:2675","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:383:648":{"id":"0:383:648","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[68,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13710:138":{"id":"2:13710:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13711:171","2:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10538:3890":{"id":"2:10538:3890","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10539:146","2:10540:34605","2:10541:54236"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3382:3657":{"id":"2:3382:3657","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:171","2:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1251:2491":{"id":"0:1251:2491","crate_id":0,"name":"InvalidVariant","span":{"filename":"src/error/mod.rs","begin":[64,4],"end":[64,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"InvalidVariant","id":"0:1228:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:310:2479":{"id":"0:310:2479","crate_id":0,"name":"component_range","span":{"filename":"src/error/component_range.rs","begin":[1,0],"end":[92,44]},"visibility":{"restricted":{"parent":"0:309:1660","path":"::error"}},"docs":"Component range error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1181:1661"],"is_stripped":true}},"2:3308:1785":{"id":"2:3308:1785","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:171","2:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:943:1689":{"id":"0:943:1689","crate_id":0,"name":"weekday","span":{"filename":"src/weekday.rs","begin":[1,0],"end":[148,1]},"visibility":"crate","docs":"Days of the week.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1467:1697"],"is_stripped":true}},"0:415:2216":{"id":"0:415:2216","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[108,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10897:203":{"id":"2:10897:203","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10899:171","2:10900:2675","2:10901:56514","2:10902:56515","2:10903:56516","2:10904:740","2:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10888:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3967:68":{"id":"2:3967:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:412:2205":{"id":"0:412:2205","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:1241:127":{"id":"b:2:2843-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2627"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:428:2605":{"id":"0:428:2605","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[191,4],"end":[191,45]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of milliseconds.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:4750:4841":{"id":"2:4750:4841","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4751:2464","2:4752:59824","2:4753:4143"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[31,0],"end":[31,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"invalid_variant::InvalidVariant","name":"InvalidVariant","id":"0:1228:2491","glob":false}},"0:979":{"id":"0:979","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[317,0],"end":[317,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::instant::Instant","name":"Instant","id":"0:1256:1691","glob":false}},"0:1247:1518":{"id":"0:1247:1518","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[49,19],"end":[49,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ComponentRange","id":"0:1181:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:403:2205":{"id":"0:403:2205","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[70,4],"end":[70,33]},"visibility":"default","docs":"Create a [`Duration`] from the number of minutes.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3172:2702":{"id":"2:3172:2702","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3146:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13385:3881":{"id":"2:13385:3881","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49290:3848","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1250:1518":{"id":"0:1250:1518","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[63,21],"end":[63,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"DifferentVariant","id":"0:1215:2488","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:1248:2488":{"id":"0:1248:2488","crate_id":0,"name":"DifferentVariant","span":{"filename":"src/error/mod.rs","begin":[63,4],"end":[63,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"DifferentVariant","id":"0:1215:2488","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:13456:60422":{"id":"2:13456:60422","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13487:60429":{"id":"2:13487:60429","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15856:3538"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49637:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7798:4604":{"id":"1:7798:4604","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7799:54666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3360:3656":{"id":"2:3360:3656","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3361:171","2:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3252:209-0:1241:127":{"id":"a:2:3252:209-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2897:124":{"id":"2:2897:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1470:1992":{"id":"0:1470:1992","crate_id":0,"name":"Tuesday","span":{"filename":"src/weekday.rs","begin":[19,4],"end":[19,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"5:5832:5283":{"id":"5:5832:5283","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:34401"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3313:1786":{"id":"2:3313:1786","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:171","2:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6080:4443":{"id":"5:6080:4443","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13362:4137":{"id":"2:13362:4137","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3187:127":{"id":"2:3187:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38669:3887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:13443:60416":{"id":"2:13443:60416","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15856:3538","str::rmatch_indices":"1:15862:3543","self::pattern":"2:12997:3820","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49470:3860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:404:2209":{"id":"0:404:2209","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[72,4],"end":[72,31]},"visibility":"default","docs":"Create a [`Duration`] from the number of hours.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13451:60419":{"id":"2:13451:60419","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429:2607":{"id":"0:429:2607","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[193,4],"end":[193,40]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of seconds.","links":{"`std::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6102:54325":{"id":"5:6102:54325","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15862:3543"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:4563-0:1241:127":{"id":"a:2:9222:4563-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:4563","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:985":{"id":"0:985","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[319,0],"end":[319,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::offset_date_time::OffsetDateTime","name":"OffsetDateTime","id":"0:1341:1693","glob":false}},"0:328:2480":{"id":"0:328:2480","crate_id":0,"name":"conversion_range","span":{"filename":"src/error/conversion_range.rs","begin":[1,0],"end":[36,1]},"visibility":{"restricted":{"parent":"0:309:1660","path":"::error"}},"docs":"Conversion range error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1202:2447"],"is_stripped":true}},"0:420:2180":{"id":"0:420:2180","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[126,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3742:3677":{"id":"2:3742:3677","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13370:60408":{"id":"2:13370:60408","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13416:56547":{"id":"2:13416:56547","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12997:3820","str::split":"1:15862:3543","prim@char":"1:15856:3538","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49338:3852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:1241:127":{"id":"b:2:3184-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2938:174":{"id":"2:2938:174","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2940:984","2:2941:813","2:2942:779","2:2943:701","2:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13475:60427":{"id":"2:13475:60427","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12997:3820","prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10266:3900":{"id":"2:10266:3900","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1303:1923":{"id":"0:1303:1923","crate_id":0,"name":"May","span":{"filename":"src/month.rs","begin":[19,4],"end":[19,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13460:60424":{"id":"2:13460:60424","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13453:60420":{"id":"2:13453:60420","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6864:4386":{"id":"1:6864:4386","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6865:54446"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3250:106":{"id":"2:3250:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5722:4480":{"id":"1:5722:4480","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5723:58383","1:5724:58385","1:5725:58384","1:5726:58386"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6101:54324":{"id":"5:6101:54324","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15862:3543"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3696:213":{"id":"2:3696:213","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3697:171","2:3698:3672","2:3699:674","2:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1297:1925":{"id":"0:1297:1925","crate_id":0,"name":"March","span":{"filename":"src/month.rs","begin":[17,4],"end":[17,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:14:1671":{"id":"0:14:1671","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[1031,1]},"visibility":"crate","docs":"The [`Date`] struct and its associated `impl`s.","links":{"`Date`":"0:1002:1690"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1002:1690"],"is_stripped":true}},"2:3075:3888":{"id":"2:3075:3888","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3074:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3526:3675":{"id":"2:3526:3675","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:226","2:3529:196","2:3530:59450"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3188:1394":{"id":"2:3188:1394","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436:2603":{"id":"0:436:2603","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[209,4],"end":[211,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:4562-0:1241:127":{"id":"a:2:9223:4562-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:4562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1480:1997":{"id":"0:1480:1997","crate_id":0,"name":"Sunday","span":{"filename":"src/weekday.rs","begin":[29,4],"end":[29,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:309:1660":{"id":"0:309:1660","crate_id":0,"name":"error","span":{"filename":"src/error/mod.rs","begin":[1,0],"end":[112,1]},"visibility":"public","docs":"Various error types returned by methods in the time crate.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:370","0:373","0:376","0:379","0:1241:127"],"is_stripped":false}},"0:422:2209":{"id":"0:422:2209","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[22,0],"end":[22,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"component_range::ComponentRange","name":"ComponentRange","id":"0:1181:1661","glob":false}},"1:6560:4501":{"id":"1:6560:4501","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6561:54620","1:6562:54621"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13379:56516":{"id":"2:13379:56516","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:3663":{"id":"2:3411:3663","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13482:54327":{"id":"2:13482:54327","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3548:3667":{"id":"2:3548:3667","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3544:3666","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13396:56554":{"id":"2:13396:56554","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15856:3538","self::pattern":"2:12997:3820"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:1241:127":{"id":"b:2:3169-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2702"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6462:4417":{"id":"1:6462:4417","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6463:54489","1:6464:7202","1:6465:54490","1:6466:54491","1:6467:54492","1:6468:54493"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4629:4435":{"id":"1:4629:4435","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4630:4705","1:4631:54775","1:4633:54776","1:4634:54777","1:4635:4436","1:4636:54778","1:4637:54403","1:4639:54779","1:4640:4165","1:4641:4521","1:4642:4148","1:4644:4159"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:423:1915":{"id":"0:423:1915","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[138,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4686:2134":{"id":"1:4686:2134","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4687:2153","1:4688:58477","1:4690:58478","1:4691:5543","1:4692:58479","1:4693:58480","1:4694:4055","1:4703:4165"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6688:4482":{"id":"1:6688:4482","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6689:54571","1:6690:7124","1:6691:7125","1:6692:7127","1:6693:7126","1:6694:7128","1:6695:7129","1:6696:7131","1:6697:6717","1:6698:7134","1:6699:7135","1:6700:7136","1:6701:7137","1:6702:7138","1:6703:7139","1:6704:7132","1:6705:7133"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6440:4382":{"id":"1:6440:4382","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6441:4771","1:6442:4772","1:6443:9359","1:6444:55104","1:6446:55108","1:6448:55105","1:6449:55106","1:6451:55107"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:938:1791":{"id":"0:938:1791","crate_id":0,"name":"days_in_year_month","span":{"filename":"src/util.rs","begin":[21,0],"end":[29,1]},"visibility":"public","docs":"Get the number of days in the month of a given year.\n\n```rust\n# use time::{Month, util};\nassert_eq!(util::days_in_year_month(2020, Month::February), 29);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}],["month",{"kind":"resolved_path","inner":{"name":"Month","id":"0:1290:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10262:119":{"id":"2:10262:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:534:1679":{"id":"0:534:1679","crate_id":0,"name":"month","span":{"filename":"src/month.rs","begin":[1,0],"end":[164,1]},"visibility":"crate","docs":"The `Month` enum and its associated `impl`s.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1290:1692"],"is_stripped":true}},"2:13381:4517":{"id":"2:13381:4517","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15862:3543","crate::ops::Index":"2:3544:3666","str::slice_mut_unchecked":"1:15862:3543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1215:2488":{"id":"0:1215:2488","crate_id":0,"name":"DifferentVariant","span":{"filename":"src/error/different_variant.rs","begin":[8,0],"end":[8,28]},"visibility":"public","docs":"An error type indicating that a [`TryFrom`](core::convert::TryFrom) call failed because the\noriginal value was of a different variant.","links":{"core::convert::TryFrom":"2:3153:216"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[315,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Error","name":"Error","id":"0:1241:127","glob":false}},"2:13402:4175":{"id":"2:13402:4175","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15856:3538","`None`":"2:47356:166","self::pattern":"2:12997:3820"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[238,0],"end":[278,1]},"visibility":{"restricted":{"parent":"0:386:1673","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalStdDuration","id":"0:425:2599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:444:2601","0:445:2603","0:446:2605","0:447:2607","0:448:2609","0:449:2611","0:450:2613","0:451:2615"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13472:60426":{"id":"2:13472:60426","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12997:3820","prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1467:1697":{"id":"0:1467:1697","crate_id":0,"name":"Weekday","span":{"filename":"src/weekday.rs","begin":[15,0],"end":[30,1]},"visibility":"public","docs":"Days of the week.\n\nAs order is dependent on context (Sunday could be either two days after or five days before\nFriday), this type does not implement `PartialOrd` or `Ord`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1468:1998","0:1470:1992","0:1472:1993","0:1474:1994","0:1476:1995","0:1478:1996","0:1480:1997"],"impls":[]}},"2:3347:1632":{"id":"2:3347:1632","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13390:5620":{"id":"2:13390:5620","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49574:3849","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3615:3669":{"id":"2:3615:3669","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3617:58835","2:3618:58836","2:3619:56553"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:1341:1693":{"id":"0:1341:1693","crate_id":0,"name":"OffsetDateTime","span":{"filename":"src/offset_date_time.rs","begin":[33,0],"end":[38,1]},"visibility":"public","docs":"A [`PrimitiveDateTime`] with a [`UtcOffset`].\n\nAll comparisons are performed using the UTC time.","links":{"`UtcOffset`":"0:1444:1696","`PrimitiveDateTime`":"0:1364:1694"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:411:2180":{"id":"0:411:2180","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3249:206":{"id":"2:3249:206","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13372:56517":{"id":"2:13372:56517","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15873:3552"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:717:1681":{"id":"0:717:1681","crate_id":0,"name":"primitive_date_time","span":{"filename":"src/primitive_date_time.rs","begin":[1,0],"end":[935,1]},"visibility":"crate","docs":"The [`PrimitiveDateTime`] struct and its associated `impl`s.","links":{"`PrimitiveDateTime`":"0:1364:1694"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1364:1694"],"is_stripped":true}},"2:3402:3661":{"id":"2:3402:3661","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13387:4521":{"id":"2:13387:4521","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49306:3846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:1673":{"id":"0:386:1673","crate_id":0,"name":"ext","span":{"filename":"src/ext.rs","begin":[1,0],"end":[278,1]},"visibility":"public","docs":"Extension traits.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:398:2569","0:425:2599"],"is_stripped":false}},"2:10264:3899":{"id":"2:10264:3899","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:3662":{"id":"2:3406:3662","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:435:2601":{"id":"0:435:2601","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[205,4],"end":[207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1687":{"id":"0:0:1687","crate_id":0,"name":"time","span":{"filename":"src/lib.rs","begin":[1,0],"end":[326,52]},"visibility":"public","docs":"# Feature flags\n\nThis crate exposes a number of features. These can be enabled or disabled as shown\n[in Cargo's documentation](https://doc.rust-lang.org/cargo/reference/features.html). Features\nare _disabled_ by default unless otherwise noted.\n\nReliance on a given feature is always indicated alongside the item definition.\n\n- `std` (_enabled by default, implicitly enables `alloc`_)\n\n  This enables a number of features that depend on the standard library.\n\n- `alloc` (_enabled by default via `std`_)\n\n  Enables a number of features that require the ability to dynamically allocate memory.\n\n- `macros`\n\n  Enables macros that provide compile-time verification of values and intuitive syntax.\n\n- `formatting` (_implicitly enables `std`_)\n\n  Enables formatting of most structs.\n\n- `parsing`\n\n  Enables parsing of most structs.\n\n- `local-offset` (_implicitly enables `std`_)\n\n  This feature enables a number of methods that allow obtaining the system's UTC offset.\n\n- `large-dates`\n\n  By default, only years within the ±9999 range (inclusive) are supported. If you need support\n  for years outside this range, consider enabling this feature; the supported range will be\n  increased to ±999,999.\n\n  Note that enabling this feature has some costs, as it means forgoing some optimizations.\n  Ambiguities may be introduced when parsing that would not otherwise exist.\n\n- `serde`\n\n  Enables [serde](https://docs.rs/serde) support for all types except [`Instant`].\n\n- `serde-human-readable` (_implicitly enables `serde`, `formatting`, and `parsing`_)\n\n  Allows serde representations to use a human-readable format. This is determined by the\n  serializer, not the user. If this feature is not enabled or if the serializer requests a\n  non-human-readable format, a format optimized for binary representation will be used.\n\n  Libraries should never enable this feature, as the decision of what format to use should be up\n  to the user.\n\n- `serde-well-known` (_implicitly enables `serde/alloc`, `formatting`, and `parsing`_)\n\n  Enables support for serializing and deserializing well-known formats using serde's\n  [`#[with]` attribute](https://serde.rs/field-attrs.html#with).\n\n- `rand`\n\n  Enables [rand](https://docs.rs/rand) support for all types.\n\n- `quickcheck` (_implicitly enables `alloc`_)\n\n  Enables [quickcheck](https://docs.rs/quickcheck) support for all types except [`Instant`].\n\nOne pseudo-feature flag that is only available to end users is the `unsound_local_offset` cfg.\nAs the name indicates, using the feature is unsound, and [may cause unexpected segmentation\nfaults](https://github.com/time-rs/time/issues/293). Unlike other flags, this is deliberately\nonly available to end users; this is to ensure that a user doesn't have unsound behavior without\nknowing it. To enable this behavior, you must use `RUSTFLAGS=\"--cfg unsound_local_offset\" cargo\nbuild` or similar. Note: This flag is _not tested anywhere_, including in the regular test of\nthe powerset of all feature flags. Use at your own risk. Without this flag, any method that\nrequires the local offset will return the `Err` variant when otherwise unsound.","links":{"`Instant`":"0:1256:1691"},"attrs":["#![doc(html_playground_url = \"https://play.rust-lang.org\")]","#![deny(anonymous_parameters, clippy :: all, const_err,\nillegal_floating_point_literal_pattern, late_bound_lifetime_arguments,\npath_statements, patterns_in_fns_without_body, rust_2018_idioms,\ntrivial_casts, trivial_numeric_casts, unreachable_pub, unsafe_code,\nunsafe_op_in_unsafe_fn, unused_extern_crates)]","#![warn(clippy :: dbg_macro, clippy :: decimal_literal_representation, clippy\n:: get_unwrap, clippy :: missing_docs_in_private_items, clippy :: nursery,\nclippy :: print_stdout, clippy :: todo, clippy :: unimplemented, clippy ::\nunnested_or_patterns, clippy :: unwrap_in_result, clippy :: unwrap_used,\nclippy :: use_debug, deprecated_in_future, missing_copy_implementations,\nmissing_debug_implementations, unused_qualifications,\nvariant_size_differences)]","#![allow(clippy :: redundant_pub_crate)]","#![doc(html_favicon_url =\n\"https://avatars0.githubusercontent.com/u/55999857\")]","#![doc(html_logo_url = \"https://avatars0.githubusercontent.com/u/55999857\")]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:309:1660","0:386:1673","0:927:1653","0:970","0:973","0:976","0:979","0:982","0:985","0:988","0:991","0:994","0:997","0:1000:195"],"is_stripped":false}},"2:2928:167":{"id":"2:2928:167","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2929:404","2:2930:1649","2:2931:1648","2:2932:4129"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1254":{"id":"0:1254","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[46,9],"end":[46,14]},"visibility":{"restricted":{"parent":"0:309:1660","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_copy_implementations, variant_size_differences)]","#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1255:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10270:3902":{"id":"2:10270:3902","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6078":{"id":"5:6078","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5898:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6079:61064","5:6080:4443","5:6083:61065","5:6086:61066","5:6098:61067","5:6099:61068","5:6100:3711","5:6101:54324","5:6102:54325"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13377:56515":{"id":"2:13377:56515","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2837:97":{"id":"2:2837:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2839:2627"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13422:60412":{"id":"2:13422:60412","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15862:3543","self::pattern":"2:12997:3820","str::split":"1:15862:3543","prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49388:3853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3240:200":{"id":"2:3240:200","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083:61065":{"id":"5:6083:61065","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5778:4483":{"id":"1:5778:4483","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5779:58767","1:5780:58768","1:5781:58769","1:5782:58770"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3701:137":{"id":"2:3701:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3339:1626":{"id":"2:3339:1626","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6793:4382":{"id":"1:6793:4382","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6794:9360"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3779:3678":{"id":"2:3779:3678","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5730:4479":{"id":"1:5730:4479","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5731:7215","1:5732:54409","1:5733:54410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3343:1629":{"id":"2:3343:1629","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13413:33233":{"id":"2:13413:33233","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12997:3820","prim@char":"1:15856:3538"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12789:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:445:2603":{"id":"0:445:2603","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[244,4],"end":[247,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3218:115":{"id":"2:3218:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3775","5:785:4191","5:786:4192"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1300:1924":{"id":"0:1300:1924","crate_id":0,"name":"April","span":{"filename":"src/month.rs","begin":[18,4],"end":[18,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1321:1917":{"id":"0:1321:1917","crate_id":0,"name":"November","span":{"filename":"src/month.rs","begin":[25,4],"end":[25,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1324:1916":{"id":"0:1324:1916","crate_id":0,"name":"December","span":{"filename":"src/month.rs","begin":[26,4],"end":[26,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3707:3672":{"id":"2:3707:3672","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3709:55832"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[113,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:386:1673","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalDuration","id":"0:398:2569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:417:2182","0:418:2194","0:419:2198","0:420:2180","0:421:2205","0:422:2209","0:423:1915","0:424:2216"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3143:149":{"id":"2:3143:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3145:2702"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8363:136":{"id":"2:8363:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1472:1993":{"id":"0:1472:1993","crate_id":0,"name":"Wednesday","span":{"filename":"src/weekday.rs","begin":[21,4],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:4989:4397":{"id":"1:4989:4397","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4990:4195","1:4991:54964"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13383:56536":{"id":"2:13383:56536","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15862:3543"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10205:2134":{"id":"2:10205:2134","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10206:1509","2:10207:59736","2:10209:4055"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1050:121":{"id":"0:1050:121","crate_id":0,"name":"Duration","span":{"filename":"src/duration.rs","begin":[35,0],"end":[42,1]},"visibility":"public","docs":"A span of time with nanosecond precision.\n\nEach `Duration` is composed of a whole number of seconds and a fractional part represented in\nnanoseconds.\n\nThis implementation allows for negative durations, unlike [`core::time::Duration`].","links":{"`core::time::Duration`":"2:50064:121"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:402:2180":{"id":"0:402:2180","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[68,4],"end":[68,33]},"visibility":"default","docs":"Create a [`Duration`] from the number of seconds.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1181:1661":{"id":"0:1181:1661","crate_id":0,"name":"ComponentRange","span":{"filename":"src/error/component_range.rs","begin":[11,0],"end":[23,1]},"visibility":"public","docs":"An error type indicating that a component provided to a method was out of range, causing a\nfailure.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:562:1680":{"id":"0:562:1680","crate_id":0,"name":"offset_date_time","span":{"filename":"src/offset_date_time.rs","begin":[1,0],"end":[1322,1]},"visibility":"crate","docs":"The [`OffsetDateTime`] struct and its associated `impl`s.","links":{"`OffsetDateTime`":"0:1341:1693"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1341:1693"],"is_stripped":true}},"0:1290:1692":{"id":"0:1290:1692","crate_id":0,"name":"Month","span":{"filename":"src/month.rs","begin":[14,0],"end":[27,1]},"visibility":"public","docs":"Months of the year.","links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]","#[repr(u8)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1291:1927","0:1294:1926","0:1297:1925","0:1300:1924","0:1303:1923","0:1306:1922","0:1309:1921","0:1312:1920","0:1315:1919","0:1318:1918","0:1321:1917","0:1324:1916"],"impls":[]}},"2:3153:216":{"id":"2:3153:216","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:127","2:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:438:2607":{"id":"0:438:2607","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[217,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1478:1996":{"id":"0:1478:1996","crate_id":0,"name":"Saturday","span":{"filename":"src/weekday.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5800:4487":{"id":"1:5800:4487","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5801:7215"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[79,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:386:1673","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalDuration","id":"0:398:2569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i64"},"items":["0:408:2182","0:409:2194","0:410:2198","0:411:2180","0:412:2205","0:413:2209","0:414:1915","0:415:2216"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13016:3838":{"id":"2:13016:3838","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13018:4892","2:13019:909","2:13020:59852","2:13021:59853"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1444:1696":{"id":"0:1444:1696","crate_id":0,"name":"UtcOffset","span":{"filename":"src/utc_offset.rs","begin":[24,0],"end":[31,1]},"visibility":"public","docs":"An offset from UTC.\n\nThis struct can store values up to ±23:59:59. If you need support outside this range, please\nfile an issue with your use case.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:14183:4568":{"id":"2:14183:4568","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14184:56432","2:14185:56433","2:14186:56434","2:14187:56435","2:14188:56436","2:14189:56437","2:14190:4165"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3388:3658":{"id":"2:3388:3658","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:171","2:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6079:61064":{"id":"5:6079:61064","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3933","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:5287","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3933","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:5287","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:3932-0:1241:127":{"id":"a:2:3281:3932-0:1241:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:3932","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2848:54234":{"id":"2:2848:54234","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:442:2615":{"id":"0:442:2615","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[233,4],"end":[235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50064:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13419:60411":{"id":"2:13419:60411","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15856:3538","str::rsplit_terminator":"1:15862:3543","self::pattern":"2:12997:3820","`DoubleEndedIterator`":"2:8411:120","str::split":"1:15862:3543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49370:3855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:997":{"id":"0:997","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[323,0],"end":[323,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::weekday::Weekday","name":"Weekday","id":"0:1467:1697","glob":false}},"0:405:1915":{"id":"0:405:1915","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[74,4],"end":[74,30]},"visibility":"default","docs":"Create a [`Duration`] from the number of days.","links":{"`Duration`":"0:1050:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13480:5271":{"id":"2:13480:5271","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6962:4383":{"id":"1:6962:4383","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6963:54547"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13369:2150":{"id":"2:13369:2150","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12468:3840"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:1241:127":{"id":"b:2:3173-0:1241:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1241:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:22812:4497":{"id":"2:22812:4497","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22802:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3544:3666":{"id":"2:3544:3666","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3546:171","2:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:394:2542":{"id":"0:394:2542","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[10,4],"end":[10,23]},"visibility":"public","docs":"A trait that cannot be implemented by downstream users.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3146:135":{"id":"2:3146:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6098:61067":{"id":"5:6098:61067","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4704:4421":{"id":"1:4704:4421","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4705:58297","1:4706:40746","1:4707:58298","1:4708:58299"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:410:2198":{"id":"0:410:2198","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[88,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1050:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10274:3903":{"id":"2:10274:3903","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3483:3665":{"id":"2:3483:3665","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:3654":{"id":"2:3372:3654","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:171","2:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12444:5264":{"id":"2:12444:5264","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12445:2464","2:12446:59897"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:940:1792":{"id":"0:940:1792","crate_id":0,"name":"is_leap_year","span":{"filename":"src/util.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"Returns if the provided year is a leap year in the proleptic Gregorian calendar. Uses\n[astronomical year numbering](https://en.wikipedia.org/wiki/Astronomical_year_numbering).\n\n```rust\n# use time::util::is_leap_year;\nassert!(!is_leap_year(1900));\nassert!(is_leap_year(2000));\nassert!(is_leap_year(2004));\nassert!(!is_leap_year(2005));\nassert!(!is_leap_year(2100));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13431:60413":{"id":"2:13431:60413","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"0:309:1660":{"crate_id":0,"path":["time","error"],"kind":"module"},"5:2548:5404":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46511:3738":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:8299:5208":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:37512:3693":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46859:3712":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:0:3517":{"crate_id":11,"path":["adler"],"kind":"module"},"5:6406:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:8236:4520":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:8284:5357":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12118:7539":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:6085:4758":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:786:6270":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:6085:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11915:7496":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:12468:3840":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:14479:8768":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:50265:5169":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:6560:4501":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:46160:5048":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:11937:171":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:46329:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:5800:4487":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:8413:5363":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:8484:4580":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:5374:4748":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11714:7458":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10926:9297":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"12:354:8380":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2892:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"9:927:45643":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2837:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:157:40706":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:923:5388":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12756:7658":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:8449:5337":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:4360:4734":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:11101:4196":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:51627:4968":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:2401:9346":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:9715:4742":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:9088:47572":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:49278:3844":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:15856:3538":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:9730:4743":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:3615:3669":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"0:1248:2488":{"crate_id":0,"path":["time","error","Error","DifferentVariant"],"kind":"variant"},"2:12754:3872":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11082:6025":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:13073:4877":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:50060:3834":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10801:9292":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:13760:59821":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:6935:7262":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6731:5962":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1572:6420":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:10941:4453":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:10589:4691":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:5707:5659":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"16:3264:5934":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10599:9287":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:14673:4416":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:3742:3677":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11254:6051":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6176:5800":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:46572:3729":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:53312:8664":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13842:8021":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:6667:5300":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12671:6275":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:9809:61497":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12685:7647":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:12010:8757":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:50086:3687":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:3246:4122":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5159:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4494:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:3713:3674":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10988:9302":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:6683:5313":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1547:6406":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:1497:4540":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12537:7619":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"12:396:5576":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:12669:4703":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:5753:5665":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:537:6334":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:7073:5818":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6014:5797":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:11049:3704":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13306:7854":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5778:4483":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:3889:5364":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:23556:4496":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:2257:5401":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:46281:5249":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:4473:4457":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:3033:3775":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:10205:2134":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12221:7552":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:10363:7429":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:8383:4693":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:9726:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:51783:8629":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:820:6117":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10516:6035":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13331:7863":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"12:784:4540":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10420:6059":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10975:9301":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:599:6374":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:15857:3539":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:4018:4218":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:45927:3914":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7928:4933":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:11208:5140":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:15213:4748":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3522:4448":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:47356:166":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8391:4623":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:9034:47570":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:7335:176":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:1700:6512":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12467:7609":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:53376:8668":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13497:7906":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:49263:3845":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:51038:5006":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:7719:3733":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:7930:4692":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:7735:4598":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:3701:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:50036:3828":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:50052:3832":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7618:4592":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:5971:4822":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9858:6270":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:12130:4586":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:49470:3860":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:11388:5144":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5998:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:2843:5924":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:9942:5127":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:10274:3903":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11192:4407":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"12:968:4545":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12385:7594":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:49112:5146":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:8189:4141":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"3:0:419":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:3320:5988":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4395:4459":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"12:1118:4548":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:14:2153":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:46563:3742":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:9404:7360":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:294:9257":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:4790:8092":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:4637:4427":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:56029:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3258:3919":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:45762:185":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:8116:4524":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:46442:3725":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:2192:4529":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1533:6401":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:3772:8074":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46543:3741":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7823:5765":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1528:4545":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12247:7556":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:650:6124":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:6698:7134":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6744:5963":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7453:5754":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:3918:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10950:9299":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11931:4597":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10279:6012":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5548:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13986:8051":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:5790:5667":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:27932:3801":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:15822:9519":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6858:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7120:15780":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5384:5642":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10656:7375":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:3965:6221":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4419:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10635:7373":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:823:6270":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:10562:2542":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:3343:1629":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:694:6130":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:3347:1632":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:3966:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2175:4526":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:22954:2542":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"12:1667:5584":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:636:7269":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:2305:5418":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:11347:4761":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:3218:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:9245:5997":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:1602:4196":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9476:7362":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:52183:4976":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13554:7922":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13772:7997":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:11595:4195":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:53414:8670":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11822:7490":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:3329:3651":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:5884:6233":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"16:5522:5652":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:50279:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"9:0:3515":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:1623:4547":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:53113:4966":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:49916:4888":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:49619:3863":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:1522:6396":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"9:27:5488":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"0:938:1791":{"crate_id":0,"path":["time","util","days_in_year_month"],"kind":"function"},"1:15872:3551":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:12715:3873":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11519:7440":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:46274:3863":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:6864:4386":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:569:6357":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:15859:3540":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:15855:3537":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:6462:4417":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5717:5661":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6208:5801":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6999:5817":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5472:5649":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5185:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1617:6451":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:49752:4881":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:6856:3752":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:46347:5208":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11355:4750":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5996:5796":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:4629:4435":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:13222:9335":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:3892:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:11056:4464":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:48392:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:7378:5758":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:47535:4196":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:5314:7356":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4133:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13062:7782":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:56042:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10258:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:10650:12348":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3483:4525":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"0:942:1793":{"crate_id":0,"path":["time","util","weeks_in_year"],"kind":"function"},"2:46653:3749":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:1522:4544":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1736:6525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:8107:5390":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:620:7268":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:11065:4438":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12699:7650":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46600:3745":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7628:5342":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3382:3657":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6176:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"9:469:9501":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10502:7371":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"12:747:4195":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:3281:3932":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:53199:5004":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:4995:8098":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"0:1251:2491":{"crate_id":0,"path":["time","error","Error","InvalidVariant"],"kind":"variant"},"16:4614:8086":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:712:3693":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:8954:6026":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:10699:3734":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"17:13912:8036":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13540:7920":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10041:9271":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"12:949:4544":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"12:2005:4195":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:610:6379":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:15361:5601":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:6790:4380":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:49628:3864":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:49296:3847":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:811:6116":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:8642:4775":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:11129:3849":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:4719:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"0:1242:2447":{"crate_id":0,"path":["time","error","Error","ConversionRange"],"kind":"variant"},"1:10805:4493":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4395:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:5933:4817":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7884:5761":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:50028:3825":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:3967:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:4852:5086":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1689:5396":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10140:6033":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:3145:5939":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:14509:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"12:0:3518":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:3333:4714":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:12789:3867":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:1492:4539":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:46151:8587":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12275:7560":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11794:7480":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10236:6002":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:8850:3720":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13465:7898":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2897:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:5029:8099":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:3331:4713":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:8135:4693":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"12:976:4546":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:47619:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13963:8047":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:49220:5155":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"12:2315:61484":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12154:4782":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:14158:4457":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:55990:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10673:13353":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:51216:8622":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8649:4777":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12456:7608":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7680:4596":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:5006:5089":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"12:377:5577":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"3:300:195":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13394:7878":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5346:5752":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10912:9293":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:14152:4459":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:616:6382":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:3190:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:49338:3852":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3146:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:7891:3702":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:14929:8770":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"20:0:785":{"crate_id":20,"path":["libc"],"kind":"module"},"1:12085:4583":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:7786:5764":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4046:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11980:4601":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:14073:191":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:2934:170":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5528:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10861:4452":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"9:809:4623":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"12:1762:6219":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3035:8475":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:52908:4997":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:9177:9352":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:50256:5168":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:3997:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:51350:4995":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:15862:3543":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:10215:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13296:7853":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:22812:4497":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:3881:6551":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12645:7644":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1540:6404":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7856:5833":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11337:6022":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:547:5663":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:1045:4504":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3250:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"12:1100:4547":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4145:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6185:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:14897:4600":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:4008:9262":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:48480:3898":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:12946:7691":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:4293:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:45852:3668":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12010:7519":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:15871:3550":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3388:3658":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4371:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10028:9270":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:1200:5572":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10128:6099":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:47955:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4101:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:4510:5375":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:46841:3708":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:48496:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"9:1075:5507":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:10268:3901":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11147:7421":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:591:6369":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4387:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12659:7645":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2754:5678":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2751:4213":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:1136:4220":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5407:5643":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:720:7271":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:23655:4957":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:3951:6603":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:49130:5148":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:10788:4499":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:1021:4693":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:2816:5943":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12795:7669":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10266:5996":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:8070:3704":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:937:4543":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:1592:4195":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:7207:4524":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:11319:5142":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2060:4427":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:11585:4626":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:49723:4875":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:53266:8660":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:7821:5020":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:3459:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:23946:8493":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7205:5824":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6893:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:51990:5000":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5563:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:2437:9347":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"12:853:4538":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:47871:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:3492:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:9066:4655":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:49229:5156":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:52230:4980":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:511:6321":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:10200:9275":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7804:5763":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11750:7463":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8976:4560":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:53391:8669":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7870:5760":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12582:7626":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:3331:4527":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7467:5755":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11539:7441":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:8376:3722":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11542:4625":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:6910:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4164:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"12:930:4542":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:136:53861":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:8929:47568":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:1723:6522":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:1441:4547":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:15873:3552":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:4535:8085":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:49198:5153":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13402:7880":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:5960:5674":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:1161:12349":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10864:7407":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"0:940:1792":{"crate_id":0,"path":["time","util","is_leap_year"],"kind":"function"},"2:51174:4974":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:49929:8892":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"16:6718:5961":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:1646:4549":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:299:9258":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:32212:4561":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:49370:3855":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4023:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3137:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6072:5772":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11604:7445":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:0:1700":{"crate_id":21,"path":["num_threads"],"kind":"module"},"1:12051:4579":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:52021:5003":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6887:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:0:1310":{"crate_id":1,"path":["std"],"kind":"module"},"2:46412:6242":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46534:3740":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6091:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13532:7917":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13598:7932":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:3074:2542":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:1622:6453":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3995:4645":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:4762:8091":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:53361:8667":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"12:2309:8385":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10635:12346":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:13016:3838":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:22603:59705":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:47577:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:1253:4550":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4341:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:3245:2135":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6238:5756":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:2512:6061":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:3392:5941":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:11678:7456":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:51864:5008":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"12:892:5562":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"18:782:7269":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11628:7449":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:7935:54636":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"17:12521:7617":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:6793:4382":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:7632:4593":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13547:7921":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:23999:8498":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9943:61495":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:15866:3545":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:5855:5669":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:829:6118":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:2381:4652":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"9:722:5440":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:4033:4217":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:51554:4982":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:11267:8740":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:8092:5287":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10179:7370":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11779:7474":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:46235:5247":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:670:41038":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6214:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"9:157:5456":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"12:812:4541":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7420:5775":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:0:477":{"crate_id":2,"path":["core"],"kind":"module"},"18:610:6125":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13429:7884":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:4989:4397":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:6221:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7042:5973":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11525:4624":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:37488:168":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11287:4751":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:24649:3811":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1505:4542":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:9223:4562":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:3877:4452":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:605:6377":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13760:7994":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:510:9259":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6100:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:5152:3918":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:48664:8608":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9659:61501":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:4823:8093":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6620:5956":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:3483:3665":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13582:7929":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:4350:8079":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:15878:3557":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11231:6053":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:15868:3547":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:15191:4409":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6200:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5197:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"15:0:3520":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:525:6329":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4401:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6691:5814":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:9631:6267":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:24479:3807":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:10264:3899":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:24581:3813":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:2840:3773":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:10574:56496":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:47398:4195":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:46473:3727":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:48359:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:4686:2134":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"14:216:45921":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:15042:4511":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46464:3726":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:46502:3737":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:2325:5400":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6870:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:6700:7136":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:6702:7138":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:3377:3655":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10149:9267":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11116:3846":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6424:5807":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:5744:4482":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:51303:5007":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:12189:1691":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8030:4693":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:11358:6021":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:46643:3748":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"12:2025:4526":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7406:5757":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11482:7435":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:45806:187":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:7303:5829":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:1442:4141":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3249:206":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:5330:7357":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:4750:4841":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4459:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:15272:4756":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6087:5751":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"12:469:61486":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10117:6098":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12040:7522":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9368:7359":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13865:8022":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11835:7491":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7264:5769":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:1613:4141":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13590:7931":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13272:7851":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11965:4600":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11189:4406":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"12:160:5574":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4241:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11195:4646":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:9210:47574":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10468:6031":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:3367:3653":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:5656:4413":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:49185:5152":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"12:2303:8384":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:10204:195":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:5650:4415":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6644:5813":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:3308:1785":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10001:47621":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:10962:9300":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:49700:4874":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2169:567":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:2323:8387":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5347:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:8101:4141":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:3549:8072":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:11246:5141":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"9:686:5437":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:6577:5811":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:4997:3915":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:3972:6612":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3195:4705":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:5955:4819":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10331:6033":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10353:6064":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:5377:4749":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:45721:186":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:8316:5358":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:46:8390":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:5984:4823":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:2460:9348":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"9:41:5489":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"18:754:61505":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:9731:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:10656:4533":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4073:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9769:61499":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:9729:61494":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:2896:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"proc_derive"},"2:48140:3902":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"12:429:5575":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:51005:4973":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:624:6387":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:531:6332":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5792:4485":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5433:5645":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5282:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9971:61492":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"12:181:5578":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:13851:54631":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:69:5336":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:1534:4546":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:13571:4612":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:48383:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:11572:7443":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10477:6030":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:2933:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"18:885:6122":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:10270:3902":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:1717:6519":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10106:6097":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:3034:60221":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"14:47:9320":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:11077:4195":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3252:209":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:49574:3849":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:14949:1691":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:2181:4527":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6110:5792":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:49603:3866":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:5861:4814":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"5:3767:4196":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:3402:3661":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:6401:3739":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12195:7549":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:14492:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"0:386:1673":{"crate_id":0,"path":["time","ext"],"kind":"module"},"6:6155:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11361:4770":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1669:4541":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11696:7457":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:6949:5288":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46482:3735":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4215:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6780:5815":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11970:7512":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"12:1235:5573":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:9600:61496":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:12671:7646":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:1563:6414":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:12738:3870":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:15251:4749":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:3526:3675":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:14441:4390":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:6866:4387":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7894:5790":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12568:7624":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9264:7356":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5632:5657":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:1180:5571":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:51404:5002":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:51255:8623":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:49594:3850":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"9:749:5441":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:45829:189":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"15:230:5592":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:5123:5095":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:1079:4505":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3544:3666":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:9528:3846":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:50032:3827":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:542:5688":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9280:7357":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7216:5825":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"9:900:8441":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5191:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5371:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"9:963:5504":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:49290:3848":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:563:6354":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:1450:4537":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:7666:4595":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6032:5684":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7195:5823":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11341:4821":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:10276:3904":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:47787:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:32218:5214":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:4501:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"12:2032:4527":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:704:7269":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:48656:3893":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5580:5655":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"9:776:5486":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:13698:4606":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4331:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10793:4703":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:1419:4195":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2274:4940":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:23891:8488":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"12:2045:4529":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:3779:3678":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:15875:3554":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:2187:4528":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7119:5685":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:15867:3546":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"12:463:61485":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:15881:3560":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5428:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:1637:4548":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:46879:3716":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:10584:4673":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:14526:54569":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:48133:3901":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:15827:12351":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:45892:4219":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:15058:4512":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:5832:5283":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3198:4436":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7392:5759":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2733:2136":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:15092:4519":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:896:6123":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13119:7817":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:10503:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:9849:61500":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:4157:6083":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3240:200":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4060:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:32177:5203":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"14:0:3519":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:7633:3724":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:1432:4196":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12043:4195":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:4043:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11588:7444":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11159:7422":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6357:5805":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:49424:3857":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:6051:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:38732:4125":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:14155:4461":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:53286:8662":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7549:5762":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:1760:6535":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:5738:4481":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:47543:4141":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10424:6271":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:9186:6024":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:46868:3714":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:6636:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12287:7561":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6569:5958":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:3140:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:1527:6398":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:13801:177":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:11433:15781":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:49061:5143":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11458:7434":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5488:5650":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13453:7892":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:9636:58723":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:45673:3676":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:2794:5679":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6252:5803":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:3488:5937":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:13027:3836":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:3411:3663":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5295:45992":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:24007:8499":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:49769:4882":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:3318:2169":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4570:3712":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4425:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4052:6648":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4272:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5421:5644":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:8843:3717":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:14019:6276":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:5132:3916":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4255:4769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:46451:3734":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:38669:3887":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6949:5969":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:9886:9267":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13446:7891":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12771:7659":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:5975:5795":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:15086:4518":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:5730:4479":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:1194:12350":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:6864:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:45885:3671":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:3406:3662":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11328:7659":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8491:4581":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"9:603:9511":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:0:3513":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:51111:8621":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9896:61498":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13356:7871":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11962:7510":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:2492:4842":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6940:4388":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:45783:188":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:3335:2170":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5815:5668":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12073:7532":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13172:7823":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"12:2013:4524":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:9065:47571":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:24547:3808":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:49817:4883":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:3548:3667":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1676:6495":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22584:59706":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"18:729:61503":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6491:5808":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6391:5806":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"12:774:4141":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11502:4623":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6852:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:12662:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:1486:4525":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12982:7722":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:47661:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:14516:4438":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10160:7368":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4300:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:50934:5005":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:1665:6487":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13574:7928":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:46288:5250":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13377:7875":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:57291:8678":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:2170:4525":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:584:6366":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5273:5682":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:3391:4529":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4695:54975":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:51381:4999":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:49149:5150":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13098:7812":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5210:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2159:4195":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:48444:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:5231:8100":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:12678:3871":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:1934:4525":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11653:7454":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:4647:4437":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:3645:4444":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8693:4778":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2163:4141":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:8162:5275":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13221:7837":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9591:6266":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:46850:3710":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:1511:4543":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:11950:4599":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:519:6326":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:739:9255":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6605:5768":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:5407:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11045:47575":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:24128:3816":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10623:9289":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:47423:4202":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12494:7613":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:5001:5088":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:53050:5001":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6166:5799":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:6322:4768":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:1153:9338":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5400:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:53338:8666":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9624:58727":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"16:7174:5821":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3360:3656":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:5595:5656":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4364:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46552:3751":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:3075:3888":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5292:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:49738:4878":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:7514:5774":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:2912:5926":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:7258:9351":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:681:7429":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:14233:4675":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:3862:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9005:47569":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:6962:4383":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3315:4708":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:994:5389":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12507:7614":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4922:8096":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10374:9362":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:12169:4660":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5987:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:12114:4585":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13180:7824":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:9763:6268":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:52654:5009":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:32226:59729":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:13933:8042":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13318:7857":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:5360:5641":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10853:4450":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:46622:3747":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:4932:3913":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4013:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:4438:4195":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:2968:5927":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:7835:6240":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:4237:6221":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:7236:5827":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:4602:4427":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:5978:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8842:9352":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:10558:9282":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11100:6055":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:6862:4384":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4377:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:1655:4550":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:8846:3719":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:2991:5938":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11244:54395":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:10819:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:4694:6226":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10543:7411":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:24615:3810":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:8902:47567":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13942:8044":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:3800:8075":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:3192:4704":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:8183:4141":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:4888:5087":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:15854:3536":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4523:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:15877:3556":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5312:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13924:8038":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9296:7358":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:14817:6278":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7738:5830":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:7652:4594":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4193:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11434:7433":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:0:3521":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:857:6120":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:10543:3891":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:49584:3851":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7106:6235":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:56055:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9344:3835":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:50048:3831":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:15874:3553":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:2213:5293":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13733:7982":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:23008:4961":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:3343:4719":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:3990:6624":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4477:8083":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11026:9305":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:51727:8627":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:3394:3659":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13780:8000":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11118:47576":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:11077:4439":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13041:7774":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:4704:8089":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:3699:4451":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:161:40707":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2793:4214":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:11109:3748":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"15:269:5597":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:22802:2542":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:7606:5341":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:3018:5928":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:7252:6221":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5766:5666":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:1457:4549":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13685:7981":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:22582:59703":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13054:7780":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:12209:2683":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13154:7818":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8292:4693":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:13520:7914":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:6239:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:14987:4608":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11015:9304":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10061:9273":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:15350:5601":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:2937:169":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10095:6096":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:3834:6221":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:1554:6409":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13205:7834":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12098:4584":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:24445:3806":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:2889:5944":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:9937:5126":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:4304:8078":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12307:7567":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3317:4709":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:2195:6223":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"12:1651:5583":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"12:2009:4141":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11122:3854":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7158:5820":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9464:9385":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:607:9260":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12741:7654":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:1602:6439":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3939:8076":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:9689:61493":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5945:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:49442:3856":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:9224:4678":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:801:6115":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46422:9337":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:3957:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:6647:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9574:6027":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11224:8734":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:13282:7852":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"12:1159:5570":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7477:5776":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:15335:56501":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:15606:6280":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11847:7494":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:3611:4449":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:15876:3555":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:49844:4884":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:24717:3809":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:47406:4196":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6413:5589":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:10694:5407":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:7761:5831":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3313:1786":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:774:7269":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:7444:175":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13898:8029":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"0:398:2569":{"crate_id":0,"path":["time","ext","NumericalDuration"],"kind":"trait"},"2:57312:8679":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:1091:6221":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:8249:4554":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:51236:4963":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6923:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:50056:3833":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"15:248:5593":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:8849:6049":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:53453:8671":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:13946:4597":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:22537:3693":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5736:5662":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46145:3864":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:50309:4215":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:22961:17529":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:46834:3706":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13258:7846":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:3696:213":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:1195:60261":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:7810:6235":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:10538:3890":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7226:5826":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:49306:3846":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"9:1020:5506":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:5594:766":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:6124:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:11329:4399":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:8143:3707":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:8365:5276":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:47457:4203":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:9222:4563":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:48377:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:5722:4480":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:14979:8771":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2176:8481":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:11612:4629":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4449:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:3743:6076":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13799:8005":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"9:1056:5499":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:6759:4427":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:11360:3857":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:1630:6458":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:24751:3814":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:2945:5949":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11809:7486":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12327:7568":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2366:589":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:9799:9266":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:56016:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:4641:8087":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:12004:6248":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"14:11:9320":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8741:4786":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:23749:5184":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:4711:4441":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4325:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:24377:2669":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"0:0:1687":{"crate_id":0,"path":["time"],"kind":"module"},"2:51453:4987":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:8146:4141":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:8367:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:23820:5185":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"12:761:4196":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:13499:54632":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:45737:184":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:22550:59611":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11555:7442":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:46204:5252":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3323:2168":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:5068:5094":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:24683:3812":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4263:4465":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:14910:2683":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:8154:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:11374:3856":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:7439:6221":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11640:7452":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12610:7632":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2938:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5788:4484":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:46314:5053":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:10897:203":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12552:7623":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6219:5802":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10845:4726":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:3241:5933":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13386:7876":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:3118:5940":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:51531:4979":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:4:966":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:11162:4401":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:50888:8619":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:10888:2542":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:5456:5646":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12168:7379":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7024:5972":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"9:692:5439":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:10673:47759":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:3372:3654":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:3287:5935":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13810:8006":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:897:4668":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:1744:6529":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:23006:4962":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:8132:60094":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:0:3522":{"crate_id":17,"path":["object"],"kind":"module"},"6:88:40640":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:11165:4405":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"5:4210:4524":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2166:4524":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2945:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"proc_derive"},"2:55977:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:13710:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:9759:9265":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:47703:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:48119:3900":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4517:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:14109:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:6597:59823":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:49488:3861":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6068:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12632:7643":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5469:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4306:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:32037:3794":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:4506:8084":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5379:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:12936:2670":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:3365:4526":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12155:7544":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6591:5812":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11992:54514":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:2543:6029":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:5963:4820":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:11169:3867":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:10493:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:47466:4198":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12208:7551":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:8330:3723":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:9839:6033":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:2773:5950":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13488:7903":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:3039:60222":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2265:4939":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12343:7573":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12598:7630":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4033:6640":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3398:3660":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:1011:4195":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11738:7462":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5420:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:3218:5932":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4227:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12051:7523":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:12184:4651":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:790:6114":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5414:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:14466:4492":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:3472:3664":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2598:9350":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:46492:3736":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13477:7899":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"13:0:3512":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12332:9348":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6812:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46214:5253":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:2862:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:10224:9277":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:6005:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:10255:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:51759:8628":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:49881:4885":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:5783:6221":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:12059:4141":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:8565:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:3429:5680":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:10262:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:15838:54513":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:6644:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4358:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6518:5809":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"0:1241:127":{"crate_id":0,"path":["time","error","Error"],"kind":"enum"},"16:3091:5987":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:3172:5930":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13637:7944":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"7:38:45539":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:46258:5248":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:22565:59611":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11616:7448":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:13835:4596":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:6470:4524":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:11281:3852":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6021:5923":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:24047:40050":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7571:5750":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2251:4936":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:50957:4993":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:10607:4675":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:49612:3862":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:3506:5936":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:49388:3853":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:3684:3670":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:3754:4195":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:24100:3815":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:49542:3859":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"0:1245:1661":{"crate_id":0,"path":["time","error","Error","ComponentRange"],"kind":"variant"},"6:1584:6429":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11406:4385":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11499:7439":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:11159:4400":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:6614:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:14686:4601":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1215:5398":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:3978:6615":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:866:6121":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12408:7603":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:1658:4540":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:11601:4628":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:48907:5268":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11932:7502":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:10410:9334":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13620:7937":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5130:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:13227:40300":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"14:231:5279":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:49211:5154":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10407:6060":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5386:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:5505:5651":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:14801:6277":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:52296:4965":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3725:4845":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:6202:4767":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11665:7455":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:55897:4953":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"10:0:3516":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:3041:5929":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:4475:4458":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:5228:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46227:3865":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:23971:3802":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5221:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"0:941:1654":{"crate_id":0,"path":["time","util","days_in_year"],"kind":"function"},"2:3339:1626":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:15326:8775":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:11988:8756":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:46173:5049":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11726:7461":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:5410:4427":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10052:9272":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11947:7506":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:50040:3829":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:8124:5391":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6768:5965":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:4434:4461":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:12179:4650":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:12444:5264":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:8432:4525":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:46612:3746":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:52447:4989":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13163:7822":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:6028:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:7185:5822":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:49524:3858":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8911:3708":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4040:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:5561:5654":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"14:244:8332":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:4301:4196":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10458:7322":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:50099:3688":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:22605:59701":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:9133:47573":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:8436:3721":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12442:7606":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12262:7559":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:23651:2542":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:49637:3865":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:46632:3731":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:10403:6032":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"12:112:61489":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:3486:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7295:5771":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:2314:6063":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:10827:6080":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:3153:216":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"14:194:45915":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:47483:195":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:32278:59731":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:53160:4984":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:48126:3899":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:54:5560":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:1235:5399":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:8411:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11993:7516":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10666:4551":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:5274:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:8330:5359":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13506:7907":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:1501:4541":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:5501:4756":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11292:4752":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4478:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:1311:6103":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9162:6052":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6688:4482":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:53297:8663":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:46189:5051":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47414:4141":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:2399:9345":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13819:8008":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:49159:5151":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:5568:4948":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:4041:195":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:53238:4969":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:53257:8659":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:3522:7285":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10690:9355":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7146:5819":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:22997:2542":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:47829:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8806:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:12003:54399":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:14022:5170":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"12:2018:4525":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:3351:1635":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:48711:8613":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4357:4733":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10448:6004":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:13334:4763":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:24093:8511":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:47745:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"12:877:4525":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:10837:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"0:927:1653":{"crate_id":0,"path":["time","util"],"kind":"module"},"1:7798:4604":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:152:53862":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4317:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13192:7829":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:15861:3542":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:5175:3917":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:15879:3558":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:24513:3804":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:3707:3672":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:2866:5925":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9551:6050":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"12:840:4537":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9440:7361":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:24411:3805":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:2772:5403":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:49906:4887":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7333:5773":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10304:6015":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10211:9276":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:578:6363":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:49139:5149":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:46295:5251":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:7342:5787":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:13725:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:1729:4762":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:48703:8612":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6554:5810":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"9:996:5505":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:52797:4977":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:169:53863":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:1639:4538":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12373:7592":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:50909:8620":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:24025:40058":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:11904:5159":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:15863:3544":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:7250:5828":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12480:7611":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6464:5766":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:10931:4642":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:51943:4996":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"13:232:8379":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6269:5804":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:11281:4750":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:49121:5147":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:837:3838":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:3355:3652":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:48681:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12229:3776":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:23913:5066":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13978:8048":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:13022:3837":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:6440:4382":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4386:8080":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:374:5356":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4127:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:50220:180":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4410:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9063:4783":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:22865:4961":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6126:5798":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:15870:3549":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:10887:7408":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5927:5672":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:903:4669":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12065:4582":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8928:4796":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:11406:7431":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11451:4613":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:45972:5077":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10081:6012":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1463:4538":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:14456:8760":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:3714:8073":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:543:6337":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:1658:6483":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:13906:59772":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"18:667:6129":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13884:8027":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:10272:179":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11277:7426":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:15860:3541":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:6807:5816":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:14884:4599":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5672:5658":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10611:9288":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11186:7423":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:51579:4964":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:15880:3559":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:3064:5986":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10844:6033":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:7510:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4397:4460":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:23930:8490":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:4671:8088":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:4734:8090":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:51069:4994":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:14669:9355":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:11380:4381":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:3868:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"14:189:9320":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:14000:8054":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:4852:8094":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5241:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:1838:6221":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8196:6252":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:50297:4216":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:7795:4602":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:53323:8665":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:11402:5145":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:47527:4195":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:3365:5677":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:46663:3750":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:1486:4550":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:48693:4623":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:50044:3830":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13746:7988":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11135:4399":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:51143:4986":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:47389:2464":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12095:7533":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3489:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:25121:3800":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:14012:4843":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:52261:4983":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:7978:6252":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:11336:4818":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:2201:1037":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:6636:5770":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6152:5753":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:49895:4886":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6682:5767":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5459:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:14823:6279":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12712:7651":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10435:9278":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4470:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11981:7515":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:3946:4525":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:3248:207":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:3905:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5436:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10938:9298":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:3268:4124":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13370:7873":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6899:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:8326:2167":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"0:1000:195":{"crate_id":0,"path":["time","Result"],"kind":"typedef"},"2:12997:3820":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:3357:4528":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:4890:8095":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:4230:8077":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:3604:7289":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2753:568":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:4417:8081":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1908:42010":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:15073:4513":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:8363:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13627:7939":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:51602:4967":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:13480:9347":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:46334:5207":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:48422:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:7368:4141":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:4638:6226":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7279:5974":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"0:425:2599":{"crate_id":0,"path":["time","ext","NumericalStdDuration"],"kind":"trait"},"6:4183:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13609:7936":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:8348:8479":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"12:866:4524":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:13836:9336":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3143:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11099:3734":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:4448:8082":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13240:7838":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:45645:3679":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10489:6034":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:47475:178":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46591:3744":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12917:7671":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10584:6082":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:46520:8598":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"13:120:45887":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10317:6018":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:2331:4520":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:432:3933":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4120:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:10563:4665":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:12174:4788":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:45913:4933":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:45920:4934":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"14:56:7435":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5969:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6964:4202":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:1708:6513":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:52987:4981":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:3324:4195":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"8:0:3514":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"12:2039:4528":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2928:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:10571:9285":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:23984:5062":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"12:925:4539":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:10798:4492":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:10936:4643":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1472:4548":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:56003:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3336:5290":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10449:6273":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:2484:47659":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:5870:6230":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:48672:3892":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9933:9268":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11199:7425":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5167:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:47997:5212":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:0:3523":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:48410:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"18:660:6128":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:49320:3854":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:47552:168":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:24115:3803":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:632:6392":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:51197:4978":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9649:9263":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:8354:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:14461:8762":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:24063:40059":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"12:1144:4549":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:1236:9261":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:5828:5281":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12431:7604":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:4594:6224":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:46252:3864":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"7:85:45546":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:6474:3728":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4203:6722":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:15869:3548":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4431:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5359:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11001:9303":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:8266:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:50982:4985":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:50064:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:5547:12352":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:1690:6506":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12783:7662":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12182:7548":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:7766:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11767:7471":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6881:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4281:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4262:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5522:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:3043:60224":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"14:250:8334":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4347:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:4955:8097":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:1476:4524":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12142:7541":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:4345:4141":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:10266:3900":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13348:7868":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46364:5209":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12028:7520":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10253:5993":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10377:6062":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:6106:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:5531:5300":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:13873:4598":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:3338:5676":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:8377:5277":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2462:9349":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11378:6020":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4066:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:9340:4494":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:52104:4988":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9719:9264":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:3195:5931":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5953:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:4695:5011":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:13007:3835":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10071:6102":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"9:234:5464":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:32378:59730":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"18:744:61504":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11304:47577":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8477:192":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:4707:5012":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:49239:5157":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10814:6079":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:699:4664":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:10499:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:4436:4462":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13564:7925":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4083:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4511:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:22806:4495":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:3945:6602":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13788:8001":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"12:1688:5585":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:6252:5341":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:1648:4539":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:3621:6250":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:53277:8661":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"19:117:7264":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:9882:648":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"17:9961:9269":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:48903:5269":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:644:6127":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:9768:6269":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:4005:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6366:5590":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:9332:6019":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:3370:5291":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10788:9290":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:6101:5749":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:766:7279":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5269:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:47913:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4095:6672":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5255:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:51500:4975":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:4363:4735":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:1630:4537":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:3149:217":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:1156:9340":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11384:7123":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:7843:5832":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:14183:4568":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6136:5793":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:11126:3854":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12234:7554":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:8127:58967":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:51679:8626":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:5375:5244":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:51092:4998":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:50202:191":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1596:6437":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4112:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:50212:8618":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12725:7652":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:5078:3914":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:9142:4649":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:11871:5158":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4439:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:849:6119":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7289:9351":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10529:7372":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46581:3743":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4704:4421":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"}},"external_crates":{"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"libc","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"num_threads","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}