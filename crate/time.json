{"root":"0:0:1710","crate_version":"0.3.12","includes_private":false,"index":{"2:2873:55403":{"id":"2:2873:55403","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13487:61414":{"id":"2:13487:61414","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13072:3864":{"id":"2:13072:3864","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13074:4996","2:13075:922","2:13076:60160","2:13077:60161"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:449:2638":{"id":"0:449:2638","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[269,4],"end":[272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13427:304":{"id":"2:13427:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:16011:3576","`u8`":"1:16022:3585"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1206:2472":{"id":"0:1206:2472","crate_id":0,"name":"ConversionRange","span":{"filename":"src/error/conversion_range.rs","begin":[10,0],"end":[10,27]},"visibility":"public","docs":"An error type indicating that a conversion failed because the target type could not store the\ninitial value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:1255:2516":{"id":"0:1255:2516","crate_id":0,"name":"InvalidVariant","span":{"filename":"src/error/mod.rs","begin":[64,4],"end":[64,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"InvalidVariant","id":"0:1232:2516","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:434:2626":{"id":"0:434:2626","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[205,4],"end":[207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5745:4452":{"id":"1:5745:4452","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5746:6865","1:5747:59103","1:5748:7309","1:5749:59104","1:5750:4831","1:5751:4832","1:5752:59105","1:5753:1303","1:5754:59106","1:5755:59107","1:5756:59108","1:5757:59109","1:5758:59110","1:5759:59111","1:5760:59112","1:5761:59113"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8403:151":{"id":"2:8403:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8404:2489","2:8405:4215","2:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:974":{"id":"0:974","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[313,0],"end":[313,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::date::Date","name":"Date","id":"0:1006:1713","glob":false}},"0:422:1938":{"id":"0:422:1938","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[138,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3309:3958-0:1245:127":{"id":"a:2:3309:3958-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3958","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3200:2731":{"id":"2:3200:2731","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3174:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:448:2636":{"id":"0:448:2636","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[264,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:62054":{"id":"5:6084:62054","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3959","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5348","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3959","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5348","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:830:1710":{"id":"0:830:1710","crate_id":0,"name":"time","span":{"filename":"src/time.rs","begin":[1,0],"end":[761,1]},"visibility":"crate","docs":"The [`Time`] struct and its associated `impl`s.","links":{"`Time`":"0:1417:1718"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1417:1718"],"is_stripped":true}},"1:9347:4541":{"id":"1:9347:4541","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9348:58752","1:9349:58753","1:9350:58754","1:9351:58755","1:9352:58756","1:9353:41204","1:9354:58751"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5833:5344":{"id":"5:5833:5344","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:2868-0:1245:127":{"id":"b:2:2868-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2870:2652"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1249:1684":{"id":"0:1249:1684","crate_id":0,"name":"ComponentRange","span":{"filename":"src/error/mod.rs","begin":[49,4],"end":[49,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"ComponentRange","id":"0:1185:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:13439:57336":{"id":"2:13439:57336","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16011:3576"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:439:2636":{"id":"0:439:2636","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3367:1649":{"id":"2:3367:1649","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13499:61417":{"id":"2:13499:61417","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8447:120","self::pattern":"2:13053:3846","prim@char":"1:16005:3571","str::rmatch_indices":"1:16011:3576"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49609:3886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13063:3861":{"id":"2:13063:3861","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13065:3864","2:13066:59950","2:13067:59951","2:13068:59952","2:13069:59954","2:13070:59953","2:13071:59955"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:384:2524":{"id":"0:384:2524","crate_id":0,"name":"source","span":{"filename":"src/error/mod.rs","begin":[92,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[204,0],"end":[236,1]},"visibility":{"restricted":{"parent":"0:385:1696","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalStdDuration","id":"0:424:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u64"},"items":["0:434:2626","0:435:2628","0:436:2630","0:437:2632","0:438:2634","0:439:2636","0:440:2638","0:441:2640"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3268:211":{"id":"2:3268:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[79,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:385:1696","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalDuration","id":"0:397:2594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i64"},"items":["0:407:2207","0:408:2219","0:409:2223","0:410:2205","0:411:2230","0:412:2234","0:413:1938","0:414:2241"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13425:2173":{"id":"2:13425:2173","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12524:3866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3351:2193":{"id":"2:3351:2193","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:181","2:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6689:4452":{"id":"1:6689:4452","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6690:57088","1:6691:7218","1:6692:7219","1:6693:7221","1:6694:7220","1:6695:7222","1:6696:7223","1:6697:7225","1:6698:6811","1:6699:7228","1:6700:7229","1:6701:7230","1:6702:7231","1:6703:7232","1:6704:7233","1:6705:7226","1:6706:7227"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3357:3684":{"id":"2:3357:3684","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:181","2:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:5342":{"id":"5:5837:5342","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:35415"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:392:2565":{"id":"0:392:2565","crate_id":0,"name":"sealed","span":{"filename":"src/ext.rs","begin":[8,0],"end":[8,10]},"visibility":{"restricted":{"parent":"0:385:1696","path":"::ext"}},"docs":"Sealed trait to prevent downstream implementations.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:393:2567"],"is_stripped":true}},"0:992":{"id":"0:992","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[320,0],"end":[320,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::primitive_date_time::PrimitiveDateTime","name":"PrimitiveDateTime","id":"0:1368:1717","glob":false}},"2:13540:61429":{"id":"2:13540:61429","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16005:3571"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49758:3889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8362:2192":{"id":"2:8362:2192","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8364:2487"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6104:62058":{"id":"5:6104:62058","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:3959"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3959","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5348","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1260:1714":{"id":"0:1260:1714","crate_id":0,"name":"Instant","span":{"filename":"src/instant.rs","begin":[31,0],"end":[31,35]},"visibility":"public","docs":"A measurement of a monotonically non-decreasing clock. Opaque and useful only with [`Duration`].\n\nInstants are always guaranteed to be no less than any previously measured instant when created,\nand are often useful for tasks such as measuring benchmarks or timing how long an operation\ntakes.\n\nNote, however, that instants are not guaranteed to be **steady**. In other words, each tick of\nthe underlying clock may not be the same length (e.g. some seconds may be longer than others).\nAn instant may jump forwards or experience time dilation (slow down or speed up), but it will\nnever go backwards.\n\nInstants are opaque types that can only be compared to one another. There is no method to get\n\"the number of seconds\" from an instant. Instead, it only allows measuring the duration between\ntwo instants (or comparing two instants).\n\nThis implementation allows for operations with signed [`Duration`]s, but is otherwise identical\nto [`std::time::Instant`].","links":{"`Duration`":"0:1054:121","`std::time::Instant`":"1:12258:1714"},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:1262:1541"],"impls":[]}},"0:1368:1717":{"id":"0:1368:1717","crate_id":0,"name":"PrimitiveDateTime","span":{"filename":"src/primitive_date_time.rs","begin":[17,0],"end":[22,1]},"visibility":"public","docs":"Combined date and time.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13466:57344":{"id":"2:13466:57344","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:16011:3576","str::split_whitespace":"1:16011:3576","self::pattern":"2:13053:3846","`DoubleEndedIterator`":"2:8447:120","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49459:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13429:2699":{"id":"2:13429:2699","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3201-0:1245:127":{"id":"b:2:3201-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13534:2168":{"id":"2:13534:2168","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12992:2694","FromStr::Err":"2:12992:2694"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:2694","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:2694","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:409:2223":{"id":"0:409:2223","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[88,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10302:3926":{"id":"2:10302:3926","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13437:4598":{"id":"2:13437:4598","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:16011:3576","crate::ops::Index":"2:3576:3699","`str`":"1:16011:3576"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:23771:4943":{"id":"2:23771:4943","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23772:5048"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23767:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2862:97":{"id":"2:2862:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:2652"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[31,0],"end":[31,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"invalid_variant::InvalidVariant","name":"InvalidVariant","id":"0:1232:2516","glob":false}},"2:13484:57351":{"id":"2:13484:57351","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13053:3846","prim@char":"1:16005:3571","str::splitn":"1:16011:3576"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49581:3882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:55418":{"id":"5:6107:55418","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16011:3576"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2871-0:1245:127":{"id":"b:2:2871-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3807","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2873:55403"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:308:1683":{"id":"0:308:1683","crate_id":0,"name":"error","span":{"filename":"src/error/mod.rs","begin":[1,0],"end":[112,1]},"visibility":"public","docs":"Various error types returned by methods in the time crate.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1245:127","0:369","0:372","0:375","0:378"],"is_stripped":false}},"0:1471:1720":{"id":"0:1471:1720","crate_id":0,"name":"Weekday","span":{"filename":"src/weekday.rs","begin":[15,0],"end":[30,1]},"visibility":"public","docs":"Days of the week.\n\nAs order is dependent on context (Sunday could be either two days after or five days before\nFriday), this type does not implement `PartialOrd` or `Ord`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1472:2021","0:1474:2015","0:1476:2016","0:1478:2017","0:1480:2018","0:1482:2019","0:1484:2020"],"impls":[]}},"2:22748:5100":{"id":"2:22748:5100","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22749:5048","2:22750:59861","2:22751:59862","2:22752:59863","2:22753:59864","2:22754:2174","2:22755:59865","2:22756:59866","2:22757:59867","2:22758:59868","2:22759:59869","2:22760:59870","2:22761:59871","2:22762:59872","2:22763:10941","2:22764:59873","2:22765:59874","2:22766:10271","2:22767:59875","2:22768:59876","2:22769:59877","2:22770:59878","2:22771:59879","2:22772:59880","2:22773:59881"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5801:4457":{"id":"1:5801:4457","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5802:7309"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:430:2636":{"id":"0:430:2636","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[197,4],"end":[197,38]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of hours.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1054:121":{"id":"0:1054:121","crate_id":0,"name":"Duration","span":{"filename":"src/duration.rs","begin":[35,0],"end":[42,1]},"visibility":"public","docs":"A span of time with nanosecond precision.\n\nEach `Duration` is composed of a whole number of seconds and a fractional part represented in\nnanoseconds.\n\nThis implementation allows for negative durations, unlike [`core::time::Duration`].","links":{"`core::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"b:5:6413-0:1245:127":{"id":"b:5:6413-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6411:223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6415:1396"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2920:183":{"id":"2:2920:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2922:604","2:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:1251:1541":{"id":"0:1251:1541","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[49,19],"end":[49,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ComponentRange","id":"0:1185:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:13781:150":{"id":"2:13781:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13782:181","2:13783:150","2:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1246:2472":{"id":"0:1246:2472","crate_id":0,"name":"ConversionRange","span":{"filename":"src/error/mod.rs","begin":[48,4],"end":[48,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"ConversionRange","id":"0:1206:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:10304:3927":{"id":"2:10304:3927","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13441:3907":{"id":"2:13441:3907","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49429:3874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13444:11148":{"id":"2:13444:11148","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16011:3576"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49733:3876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13455:57355":{"id":"2:13455:57355","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13053:3846","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:561:1703":{"id":"0:561:1703","crate_id":0,"name":"offset_date_time","span":{"filename":"src/offset_date_time.rs","begin":[1,0],"end":[1325,1]},"visibility":"crate","docs":"The [`OffsetDateTime`] struct and its associated `impl`s.","links":{"`OffsetDateTime`":"0:1345:1716"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1345:1716"],"is_stripped":true}},"2:3103:3914":{"id":"2:3103:3914","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3102:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3341:1810":{"id":"2:3341:1810","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:181","2:3344:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13448:10889":{"id":"2:13448:10889","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49751:3888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:446:2632":{"id":"0:446:2632","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[254,4],"end":[257,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13431:57314":{"id":"2:13431:57314","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3733:137":{"id":"2:3733:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:4204"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13462:4210":{"id":"2:13462:4210","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47492:176","prim@char":"1:16005:3571","self::pattern":"2:13053:3846"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1448:1719":{"id":"0:1448:1719","crate_id":0,"name":"UtcOffset","span":{"filename":"src/utc_offset.rs","begin":[24,0],"end":[31,1]},"visibility":"public","docs":"An offset from UTC.\n\nThis struct can store values up to ±23:59:59. If you need support outside this range, please\nfile an issue with your use case.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:6105:3745":{"id":"5:6105:3745","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:942:1815":{"id":"0:942:1815","crate_id":0,"name":"days_in_year_month","span":{"filename":"src/util.rs","begin":[21,0],"end":[29,1]},"visibility":"public","docs":"Get the number of days in the month of a given year.\n\n```rust\n# use time::{Month, util};\nassert_eq!(util::days_in_year_month(2020, Month::February), 29);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}],["month",{"kind":"resolved_path","inner":{"name":"Month","id":"0:1294:1715","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1313:1944":{"id":"0:1313:1944","crate_id":0,"name":"July","span":{"filename":"src/month.rs","begin":[21,4],"end":[21,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:947:1712":{"id":"0:947:1712","crate_id":0,"name":"weekday","span":{"filename":"src/weekday.rs","begin":[1,0],"end":[148,1]},"visibility":"crate","docs":"Days of the week.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1471:1720"],"is_stripped":true}},"2:3434:3695":{"id":"2:3434:3695","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10306:3928":{"id":"2:10306:3928","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2925:124":{"id":"2:2925:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3273:2158":{"id":"2:3273:2158","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3524:132":{"id":"2:3524:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:181","2:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1232:2516":{"id":"0:1232:2516","crate_id":0,"name":"InvalidVariant","span":{"filename":"src/error/invalid_variant.rs","begin":[8,0],"end":[8,26]},"visibility":"public","docs":"An error type indicating that a [`FromStr`](core::str::FromStr) call failed because the value\nwas not a valid variant.","links":{"core::str::FromStr":"2:12992:2694"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:3811:3711":{"id":"2:3811:3711","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:400:2223":{"id":"0:400:2223","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[66,4],"end":[66,38]},"visibility":"default","docs":"Create a [`Duration`] from the number of milliseconds.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13538:55420":{"id":"2:13538:55420","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1339","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:62054","5:6085:4492","5:6088:62055","5:6091:62056","5:6103:62057","5:6104:62058","5:6105:3745","5:6106:55417","5:6107:55418"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13422:61408":{"id":"2:13422:61408","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16011:3576"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6463:4551":{"id":"1:6463:4551","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6464:55811","1:6465:7296","1:6466:55812","1:6467:55813","1:6468:55814","1:6469:55815"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3276:218":{"id":"2:3276:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9259:4158-0:1245:127":{"id":"a:2:9259:4158-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:4158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3215:127":{"id":"2:3215:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38805:3913","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:3422:3692":{"id":"2:3422:3692","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3278:106":{"id":"2:3278:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23086:18614":{"id":"2:23086:18614","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23087:8488","2:23088:60906","2:23089:60907"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23079:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22874:5101":{"id":"2:22874:5101","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22875:5048","2:22876:1246","2:22877:1271"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2956:177":{"id":"2:2956:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2957:415","2:2958:1672","2:2959:1671","2:2960:4203"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:425:2626":{"id":"0:425:2626","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[187,4],"end":[187,44]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of nanoseconds.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3576:3699":{"id":"2:3576:3699","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3578:181","2:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3395:3686":{"id":"2:3395:3686","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12500:5334":{"id":"2:12500:5334","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12501:2489","2:12502:60530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3430:3694":{"id":"2:3430:3694","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1319:1942":{"id":"0:1319:1942","crate_id":0,"name":"September","span":{"filename":"src/month.rs","begin":[23,4],"end":[23,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:419:2205":{"id":"0:419:2205","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[126,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8601:157":{"id":"2:8601:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8602:2489","2:8603:922","2:8604:4216","2:8607:4217","2:8608:495","2:8610:4218","2:8613:4219","2:8614:4220","2:8615:4221","2:8616:4222","2:8618:3758","2:8620:4223","2:8621:4224","2:8623:841","2:8626:4225","2:8633:4226","2:8635:4227","2:8638:4228","2:8639:4229","2:8640:4230","2:8642:4231","2:8644:4232","2:8647:1307","2:8648:4233","2:8649:4234","2:8653:4235","2:8656:4236","2:8657:4237","2:8658:4238","2:8660:4239","2:8661:3796","2:8663:4240","2:8666:4241","2:8668:4242","2:8678:4243","2:8693:4244","2:8695:4245","2:8699:4246","2:8708:4247","2:8711:2490","2:8713:4248","2:8716:276","2:8723:294","2:8730:4249","2:8737:4250","2:8746:4251","2:8756:1014","2:8763:4252","2:8770:1672","2:8771:1671","2:8772:3730","2:8784:3729","2:8791:3728","2:8803:3727","2:8810:4253","2:8811:4254","2:8816:2493","2:8819:4255","2:8822:4256","2:8823:2487","2:8825:4257","2:8827:415","2:8830:4258","2:8833:997","2:8836:4259","2:8839:604","2:8842:4260","2:8845:907","2:8847:826","2:8849:792","2:8851:713","2:8853:696","2:8855:4261","2:8856:4262","2:8864:4263"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4001-0:1245:127":{"id":"b:2:4001-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:421:2234":{"id":"0:421:2234","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5739:4449":{"id":"1:5739:4449","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5740:7309","1:5741:8870"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1185:1684":{"id":"0:1185:1684","crate_id":0,"name":"ComponentRange","span":{"filename":"src/error/component_range.rs","begin":[11,0],"end":[23,1]},"visibility":"public","docs":"An error type indicating that a component provided to a method was out of range, causing a\nfailure.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:1345:1716":{"id":"0:1345:1716","crate_id":0,"name":"OffsetDateTime","span":{"filename":"src/offset_date_time.rs","begin":[31,0],"end":[36,1]},"visibility":"public","docs":"A [`PrimitiveDateTime`] with a [`UtcOffset`].\n\nAll comparisons are performed using the UTC time.","links":{"`PrimitiveDateTime`":"0:1368:1717","`UtcOffset`":"0:1448:1719"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:8472:3755":{"id":"2:8472:3755","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8473:793","2:8474:4211"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3277:217":{"id":"2:3277:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2870:2652":{"id":"2:2870:2652","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7799:4660":{"id":"1:7799:4660","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7800:59100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:946:1817":{"id":"0:946:1817","crate_id":0,"name":"weeks_in_year","span":{"filename":"src/util.rs","begin":[71,0],"end":[80,1]},"visibility":"public","docs":"Get the number of weeks in the ISO year.\n\nThe returned value will always be either 52 or 53.\n\n```rust\n# use time::util::weeks_in_year;\nassert_eq!(weeks_in_year(2019), 52);\nassert_eq!(weeks_in_year(2020), 53);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3521:131":{"id":"2:3521:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:998":{"id":"0:998","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[322,0],"end":[322,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::utc_offset::UtcOffset","name":"UtcOffset","id":"0:1448:1719","glob":false}},"0:944:1816":{"id":"0:944:1816","crate_id":0,"name":"is_leap_year","span":{"filename":"src/util.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"Returns if the provided year is a leap year in the proleptic Gregorian calendar. Uses\n[astronomical year numbering](https://en.wikipedia.org/wiki/Astronomical_year_numbering).\n\n```rust\n# use time::util::is_leap_year;\nassert!(!is_leap_year(1900));\nassert!(is_leap_year(2000));\nassert!(is_leap_year(2004));\nassert!(!is_leap_year(2005));\nassert!(!is_leap_year(2100));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:385:1696":{"id":"0:385:1696","crate_id":0,"name":"ext","span":{"filename":"src/ext.rs","begin":[1,0],"end":[278,1]},"visibility":"public","docs":"Extension traits.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:397:2594","0:424:2624"],"is_stripped":false}},"2:3177:228":{"id":"2:3177:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:127","2:3180:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13419:10939":{"id":"2:13419:10939","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13502:61418":{"id":"2:13502:61418","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8447:120","self::pattern":"2:13053:3846","str::match_indices":"1:16011:3576","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49627:3887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3280:220-0:1245:127":{"id":"a:2:3280:220-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3371:1652":{"id":"2:3371:1652","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4050:4285":{"id":"2:4050:4285","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4051:4293"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1710":{"id":"0:0:1710","crate_id":0,"name":"time","span":{"filename":"src/lib.rs","begin":[1,0],"end":[326,52]},"visibility":"public","docs":"# Feature flags\n\nThis crate exposes a number of features. These can be enabled or disabled as shown\n[in Cargo's documentation](https://doc.rust-lang.org/cargo/reference/features.html). Features\nare _disabled_ by default unless otherwise noted.\n\nReliance on a given feature is always indicated alongside the item definition.\n\n- `std` (_enabled by default, implicitly enables `alloc`_)\n\n  This enables a number of features that depend on the standard library.\n\n- `alloc` (_enabled by default via `std`_)\n\n  Enables a number of features that require the ability to dynamically allocate memory.\n\n- `macros`\n\n  Enables macros that provide compile-time verification of values and intuitive syntax.\n\n- `formatting` (_implicitly enables `std`_)\n\n  Enables formatting of most structs.\n\n- `parsing`\n\n  Enables parsing of most structs.\n\n- `local-offset` (_implicitly enables `std`_)\n\n  This feature enables a number of methods that allow obtaining the system's UTC offset.\n\n- `large-dates`\n\n  By default, only years within the ±9999 range (inclusive) are supported. If you need support\n  for years outside this range, consider enabling this feature; the supported range will be\n  increased to ±999,999.\n\n  Note that enabling this feature has some costs, as it means forgoing some optimizations.\n  Ambiguities may be introduced when parsing that would not otherwise exist.\n\n- `serde`\n\n  Enables [serde](https://docs.rs/serde) support for all types except [`Instant`].\n\n- `serde-human-readable` (_implicitly enables `serde`, `formatting`, and `parsing`_)\n\n  Allows serde representations to use a human-readable format. This is determined by the\n  serializer, not the user. If this feature is not enabled or if the serializer requests a\n  non-human-readable format, a format optimized for binary representation will be used.\n\n  Libraries should never enable this feature, as the decision of what format to use should be up\n  to the user.\n\n- `serde-well-known` (_implicitly enables `serde/alloc`, `formatting`, and `parsing`_)\n\n  Enables support for serializing and deserializing well-known formats using serde's\n  [`#[with]` attribute](https://serde.rs/field-attrs.html#with).\n\n- `rand`\n\n  Enables [rand](https://docs.rs/rand) support for all types.\n\n- `quickcheck` (_implicitly enables `alloc`_)\n\n  Enables [quickcheck](https://docs.rs/quickcheck) support for all types except [`Instant`].\n\nOne pseudo-feature flag that is only available to end users is the `unsound_local_offset` cfg.\nAs the name indicates, using the feature is unsound, and [may cause unexpected segmentation\nfaults](https://github.com/time-rs/time/issues/293). Unlike other flags, this is deliberately\nonly available to end users; this is to ensure that a user doesn't have unsound behavior without\nknowing it. To enable this behavior, you must use `RUSTFLAGS=\"--cfg unsound_local_offset\" cargo\nbuild` or similar. Note: This flag is _not tested anywhere_, including in the regular test of\nthe powerset of all feature flags. Use at your own risk. Without this flag, any method that\nrequires the local offset will return the `Err` variant when otherwise unsound.","links":{"`Instant`":"0:1260:1714"},"attrs":["#![doc(html_playground_url = \"https://play.rust-lang.org\")]","#![deny(anonymous_parameters, clippy :: all, const_err,\nillegal_floating_point_literal_pattern, late_bound_lifetime_arguments,\npath_statements, patterns_in_fns_without_body, rust_2018_idioms,\ntrivial_casts, trivial_numeric_casts, unreachable_pub, unsafe_code,\nunsafe_op_in_unsafe_fn, unused_extern_crates)]","#![warn(clippy :: dbg_macro, clippy :: decimal_literal_representation, clippy\n:: get_unwrap, clippy :: missing_docs_in_private_items, clippy :: nursery,\nclippy :: print_stdout, clippy :: todo, clippy :: unimplemented, clippy ::\nunnested_or_patterns, clippy :: unwrap_in_result, clippy :: unwrap_used,\nclippy :: use_debug, deprecated_in_future, missing_copy_implementations,\nmissing_debug_implementations, unused_qualifications,\nvariant_size_differences)]","#![allow(clippy :: redundant_pub_crate)]","#![doc(html_favicon_url =\n\"https://avatars0.githubusercontent.com/u/55999857\")]","#![doc(html_logo_url = \"https://avatars0.githubusercontent.com/u/55999857\")]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:308:1683","0:385:1696","0:931:1676","0:1004:205","0:974","0:977","0:980","0:983","0:986","0:989","0:992","0:995","0:998","0:1001"],"is_stripped":false}},"2:13445:11146":{"id":"2:13445:11146","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16011:3576"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49742:3892","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:126:1695":{"id":"0:126:1695","crate_id":0,"name":"duration","span":{"filename":"src/duration.rs","begin":[1,0],"end":[1106,1]},"visibility":"crate","docs":"The [`Duration`] struct and its associated `impl`s.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1054:121"],"is_stripped":true}},"2:4782:4974":{"id":"2:4782:4974","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4783:2489","2:4784:60100","2:4785:4217"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4752:4490":{"id":"1:4752:4490","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:59234","1:4754:59235","1:4755:59237","1:4757:4489","1:4758:59236","1:4760:57344","1:4761:5691"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4670:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:403:2234":{"id":"0:403:2234","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[72,4],"end":[72,31]},"visibility":"default","docs":"Create a [`Duration`] from the number of hours.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3426:3693":{"id":"2:3426:3693","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5651:4526":{"id":"1:5651:4526","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5652:55517","1:5653:5407"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13416":{"id":"2:13416","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12513:1339","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13417:793","2:13418:4211","2:13419:10939","2:13420:61407","2:13422:61408","2:13425:2173","2:13426:61409","2:13427:304","2:13428:57317","2:13429:2699","2:13431:57314","2:13433:57315","2:13435:57316","2:13437:4598","2:13438:61410","2:13439:57336","2:13440:57337","2:13441:3907","2:13442:5003","2:13443:4601","2:13444:11148","2:13445:11146","2:13446:5691","2:13447:61411","2:13448:10889","2:13449:57353","2:13452:57354","2:13455:57355","2:13458:4249","2:13462:4210","2:13466:57344","2:13469:11147","2:13472:57347","2:13475:61412","2:13478:61413","2:13481:57349","2:13484:57351","2:13487:61414","2:13490:61415","2:13493:3653","2:13496:61416","2:13499:61417","2:13502:61418","2:13505:61419","2:13507:61420","2:13509:61421","2:13511:61422","2:13512:61423","2:13513:61424","2:13516:61425","2:13519:10540","2:13522:57356","2:13525:61426","2:13528:61427","2:13531:61428","2:13534:2168","2:13536:5341","2:13537:55419","2:13538:55420","2:13539:55421","2:13540:61429","2:13542:4548","2:13543:61430"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13537:55419":{"id":"2:13537:55419","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13542:4548":{"id":"2:13542:4548","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16005:3571"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49767:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1254:1541":{"id":"0:1254:1541","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[63,21],"end":[63,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"DifferentVariant","id":"0:1219:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:445:2630":{"id":"0:445:2630","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[249,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3216:1415":{"id":"2:3216:1415","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10310:3929":{"id":"2:10310:3929","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1482:2019":{"id":"0:1482:2019","crate_id":0,"name":"Saturday","span":{"filename":"src/weekday.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:417:2219":{"id":"0:417:2219","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[118,4],"end":[120,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13522:57356":{"id":"2:13522:57356","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13053:3846","prim@char":"1:16005:3571"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[91,0],"end":[112,1]},"visibility":{"restricted":{"parent":"0:308:1683","path":"::error"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","description","source","type_id","cause"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:384:2524"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13428:57317":{"id":"2:13428:57317","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16022:3585"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:447:2634":{"id":"0:447:2634","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[259,4],"end":[262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13507:61420":{"id":"2:13507:61420","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3246:115":{"id":"2:3246:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:441:2640":{"id":"0:441:2640","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[233,4],"end":[235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:405:2241":{"id":"0:405:2241","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[76,4],"end":[76,31]},"visibility":"default","docs":"Create a [`Duration`] from the number of weeks.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5779:4453":{"id":"1:5779:4453","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5780:55520","1:5781:55521","1:5782:55522","1:5783:55523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3728:224":{"id":"2:3728:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3729:181","2:3730:3705","2:3731:686","2:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:327:2505":{"id":"0:327:2505","crate_id":0,"name":"conversion_range","span":{"filename":"src/error/conversion_range.rs","begin":[1,0],"end":[36,1]},"visibility":{"restricted":{"parent":"0:308:1683","path":"::error"}},"docs":"Conversion range error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1206:2472"],"is_stripped":true}},"2:3410:3690":{"id":"2:3410:3690","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:181","2:3413:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:432:2640":{"id":"0:432:2640","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[201,4],"end":[201,38]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of weeks.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3268:211-0:1245:127":{"id":"a:2:3268:211-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3336:1809":{"id":"2:3336:1809","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14:1694":{"id":"0:14:1694","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[1035,1]},"visibility":"crate","docs":"The [`Date`] struct and its associated `impl`s.","links":{"`Date`":"0:1006:1713"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1006:1713"],"is_stripped":true}},"0:435:2628":{"id":"0:435:2628","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[209,4],"end":[211,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:2524","1:2579:2170","1:2580:4292","1:2581:4293"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:411:2230":{"id":"0:411:2230","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3999:68":{"id":"2:3999:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4000:1428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3210:127":{"id":"2:3210:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"0:429:2634":{"id":"0:429:2634","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[195,4],"end":[195,40]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of minutes.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:393:2567":{"id":"0:393:2567","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[10,4],"end":[10,23]},"visibility":"public","docs":"A trait that cannot be implemented by downstream users.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:416:2207":{"id":"0:416:2207","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13531:61428":{"id":"2:13531:61428","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:3846","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9258:4159-0:1245:127":{"id":"a:2:9258:4159-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:4159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4727:2157":{"id":"1:4727:2157","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4728:2176","1:4729:58985","1:4731:58986","1:4732:5614","1:4733:58987","1:4734:10584","1:4735:4085","1:4744:4239"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4745:4487":{"id":"1:4745:4487","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4746:57155","1:4747:41598","1:4748:57156","1:4749:57157"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:450:2640":{"id":"0:450:2640","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[274,4],"end":[277,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:423:2241":{"id":"0:423:2241","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22937:4544":{"id":"2:22937:4544","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22927:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13475:61412":{"id":"2:13475:61412","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13053:3846","str::rsplit_terminator":"1:16011:3576","prim@char":"1:16005:3571","`DoubleEndedIterator`":"2:8447:120","str::split":"1:16011:3576"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49509:3881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6865:4532":{"id":"1:6865:4532","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6866:55783"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23467:18633":{"id":"2:23467:18633","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23468:59876","2:23469:59875","2:23470:59877"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23462:5049","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1259:660":{"id":"0:1259:660","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5789:4454":{"id":"1:5789:4454","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:59103"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:62055":{"id":"5:6088:62055","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:309:2504":{"id":"0:309:2504","crate_id":0,"name":"component_range","span":{"filename":"src/error/component_range.rs","begin":[1,0],"end":[92,44]},"visibility":{"restricted":{"parent":"0:308:1683","path":"::error"}},"docs":"Component range error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1185:1684"],"is_stripped":true}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[23,0],"end":[23,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"conversion_range::ConversionRange","name":"ConversionRange","id":"0:1206:2472","glob":false}},"2:22801:5046":{"id":"2:22801:5046","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22802:5048","2:22803:59861","2:22804:1226","2:22805:1227","2:22806:2174","2:22807:2263","2:22808:11105","2:22809:2085","2:22810:2084","2:22811:59874","2:22812:59878","2:22813:59879","2:22814:59880","2:22815:59881","2:22816:60987","2:22817:60988","2:22818:60989"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1219:2513":{"id":"0:1219:2513","crate_id":0,"name":"DifferentVariant","span":{"filename":"src/error/different_variant.rs","begin":[8,0],"end":[8,28]},"visibility":"public","docs":"An error type indicating that a [`TryFrom`](core::convert::TryFrom) call failed because the\noriginal value was of a different variant.","links":{"core::convert::TryFrom":"2:3181:227"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[113,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:385:1696","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalDuration","id":"0:397:2594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:416:2207","0:417:2219","0:418:2223","0:419:2205","0:420:2230","0:421:2234","0:422:1938","0:423:2241"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:724:1704":{"id":"0:724:1704","crate_id":0,"name":"primitive_date_time","span":{"filename":"src/primitive_date_time.rs","begin":[1,0],"end":[893,1]},"visibility":"crate","docs":"The [`PrimitiveDateTime`] struct and its associated `impl`s.","links":{"`PrimitiveDateTime`":"0:1368:1717"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1368:1717"],"is_stripped":true}},"2:8882:3753":{"id":"2:8882:3753","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1484:2020":{"id":"0:1484:2020","crate_id":0,"name":"Sunday","span":{"filename":"src/weekday.rs","begin":[29,4],"end":[29,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1322:1941":{"id":"0:1322:1941","crate_id":0,"name":"October","span":{"filename":"src/month.rs","begin":[24,4],"end":[24,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:931:1676":{"id":"0:931:1676","crate_id":0,"name":"util","span":{"filename":"src/util.rs","begin":[1,0],"end":[80,1]},"visibility":"public","docs":"Utility functions.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:942:1815","0:944:1816","0:945:1677","0:946:1817"],"is_stripped":false}},"1:1079:4546":{"id":"1:1079:4546","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:3809","1:1081:5341","1:1082:55417","1:1083:55418","1:1084:55419","1:1085:55420","1:1086:55421"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3504:3697":{"id":"2:3504:3697","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:401:2205":{"id":"0:401:2205","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[68,4],"end":[68,33]},"visibility":"default","docs":"Create a [`Duration`] from the number of seconds.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:451:1700":{"id":"0:451:1700","crate_id":0,"name":"instant","span":{"filename":"src/instant.rs","begin":[1,0],"end":[262,1]},"visibility":"crate","docs":"The [`Instant`] struct and its associated `impl`s.","links":{"`Instant`":"0:1260:1714"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1260:1714"],"is_stripped":true}},"2:3309:3958":{"id":"2:3309:3958","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3280:220":{"id":"2:3280:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:980":{"id":"0:980","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[315,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Error","name":"Error","id":"0:1245:127","glob":false}},"2:3171:149":{"id":"2:3171:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:2731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6794:4539":{"id":"1:6794:4539","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6795:9466"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8886:3754":{"id":"2:8886:3754","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7927:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:428:2632":{"id":"0:428:2632","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[193,4],"end":[193,40]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of seconds.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23134:5051":{"id":"2:23134:5051","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23771:4943","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23125:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5723:4450":{"id":"1:5723:4450","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5724:59692","1:5725:59694","1:5726:59693","1:5727:59695"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3416:3691":{"id":"2:3416:3691","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:181","2:3419:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:427:2630":{"id":"0:427:2630","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[191,4],"end":[191,45]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of milliseconds.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6963:4464":{"id":"1:6963:4464","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6964:55846"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2966:184":{"id":"2:2966:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2968:997","2:2969:826","2:2970:792","2:2971:713","2:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1248:1541":{"id":"0:1248:1541","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[48,20],"end":[48,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ConversionRange","id":"0:1206:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3346:2194":{"id":"2:3346:2194","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:181","2:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10308:189":{"id":"2:10308:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2887:104":{"id":"2:2887:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2888:408","2:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:977":{"id":"0:977","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[314,0],"end":[314,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::duration::Duration","name":"Duration","id":"0:1054:121","glob":false}},"2:13539:55421":{"id":"2:13539:55421","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13478:61413":{"id":"2:13478:61413","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:16011:3576","prim@char":"1:16005:3571","self::pattern":"2:13053:3846","str::split_terminator":"1:16011:3576"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49527:3879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[24,0],"end":[24,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"different_variant::DifferentVariant","name":"DifferentVariant","id":"0:1219:2513","glob":false}},"2:2865:3807":{"id":"2:2865:3807","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2867:55403"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:989":{"id":"0:989","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[319,0],"end":[319,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::offset_date_time::OffsetDateTime","name":"OffsetDateTime","id":"0:1345:1716","glob":false}},"0:995":{"id":"0:995","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[321,0],"end":[321,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::time::Time","name":"Time","id":"0:1417:1718","glob":false}},"0:1417:1718":{"id":"0:1417:1718","crate_id":0,"name":"Time","span":{"filename":"src/time.rs","begin":[32,0],"end":[43,1]},"visibility":"public","docs":"The clock time within a given date. Nanosecond precision.\n\nAll minutes are assumed to have exactly 60 seconds; no attempt is made to handle leap seconds\n(either positive or negative).\n\nWhen comparing two `Time`s, they are assumed to be in the same calendar date.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13513:61424":{"id":"2:13513:61424","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16005:3571","self::pattern":"2:13053:3846"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13083:3862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8412:3756":{"id":"2:8412:3756","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8414:4212","2:8416:4213","2:8417:4214"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5731:4451":{"id":"1:5731:4451","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5732:7309","1:5733:55756","1:5734:55757"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13442:5003":{"id":"2:13442:5003","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49435:3873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1301:1948":{"id":"0:1301:1948","crate_id":0,"name":"March","span":{"filename":"src/month.rs","begin":[17,4],"end":[17,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:418:2223":{"id":"0:418:2223","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4003:1428":{"id":"2:4003:1428","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46028:4286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1001":{"id":"0:1001","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[323,0],"end":[323,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::weekday::Weekday","name":"Weekday","id":"0:1471:1720","glob":false}},"0:1298:1949":{"id":"0:1298:1949","crate_id":0,"name":"February","span":{"filename":"src/month.rs","begin":[16,4],"end":[16,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3580:3700":{"id":"2:3580:3700","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:3699","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13525:61426":{"id":"2:13525:61426","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:3846","prim@char":"1:16005:3571"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3203:681":{"id":"2:3203:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13505:61419":{"id":"2:13505:61419","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:404:1938":{"id":"0:404:1938","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[74,4],"end":[74,30]},"visibility":"default","docs":"Create a [`Duration`] from the number of days.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10312:3930":{"id":"2:10312:3930","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1006:1713":{"id":"0:1006:1713","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[35,0],"end":[42,1]},"visibility":"public","docs":"Date in the proleptic Gregorian calendar.\n\nBy default, years between ±9999 inclusive are representable. This can be expanded to ±999,999\ninclusive by enabling the `large-dates` crate feature. Doing so has performance implications\nand introduces some ambiguities when parsing.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:533:1702":{"id":"0:533:1702","crate_id":0,"name":"month","span":{"filename":"src/month.rs","begin":[1,0],"end":[164,1]},"visibility":"crate","docs":"The `Month` enum and its associated `impl`s.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1294:1715"],"is_stripped":true}},"0:1476:2016":{"id":"0:1476:2016","crate_id":0,"name":"Wednesday","span":{"filename":"src/weekday.rs","begin":[21,4],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3379:1658":{"id":"2:3379:1658","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3439:3696":{"id":"2:3439:3696","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:420:2230":{"id":"0:420:2230","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[130,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13452:57354":{"id":"2:13452:57354","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:16005:3571","self::pattern":"2:13053:3846"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:438:2634":{"id":"0:438:2634","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:382:660":{"id":"0:382:660","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[68,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3739:3705":{"id":"2:3739:3705","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3741:56500"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10298:119":{"id":"2:10298:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13417:793":{"id":"2:13417:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1480:2018":{"id":"0:1480:2018","crate_id":0,"name":"Friday","span":{"filename":"src/weekday.rs","begin":[25,4],"end":[25,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1472:2021":{"id":"0:1472:2021","crate_id":0,"name":"Monday","span":{"filename":"src/weekday.rs","begin":[17,4],"end":[17,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:407:2207":{"id":"0:407:2207","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:57353":{"id":"2:13449:57353","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13053:3846","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6863:4465":{"id":"1:6863:4465","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:59734"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3518:130":{"id":"2:3518:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1252:2513":{"id":"0:1252:2513","crate_id":0,"name":"DifferentVariant","span":{"filename":"src/error/mod.rs","begin":[63,4],"end":[63,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"DifferentVariant","id":"0:1219:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"1:6867:4533":{"id":"1:6867:4533","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6868:59177"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:342:2506":{"id":"0:342:2506","crate_id":0,"name":"different_variant","span":{"filename":"src/error/different_variant.rs","begin":[1,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:308:1683","path":"::error"}},"docs":"Different variant error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1219:2513"],"is_stripped":true}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[238,0],"end":[278,1]},"visibility":{"restricted":{"parent":"0:385:1696","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalStdDuration","id":"0:424:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:443:2626","0:444:2628","0:445:2630","0:446:2632","0:447:2634","0:448:2636","0:449:2638","0:450:2640"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3647:3702":{"id":"2:3647:3702","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3649:60749","2:3650:60750","2:3651:57353"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:14239:4603":{"id":"2:14239:4603","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14240:59408","2:14241:59409","2:14242:59410","2:14243:59411","2:14244:59412","2:14245:59413","2:14246:4239"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13469:11147":{"id":"2:13469:11147","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13053:3846","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12845:3893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13509:61421":{"id":"2:13509:61421","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1257:1541":{"id":"0:1257:1541","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[64,19],"end":[64,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"InvalidVariant","id":"0:1232:2516","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:1258":{"id":"0:1258","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[46,9],"end":[46,14]},"visibility":{"restricted":{"parent":"0:308:1683","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations, variant_size_differences)]","#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1259:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:440:2638":{"id":"0:440:2638","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13496:61416":{"id":"2:13496:61416","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13053:3846","str::matches":"1:16011:3576","`DoubleEndedIterator`":"2:8447:120","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49681:3885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10529:142":{"id":"2:10529:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10530:715","2:10532:4267"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3400:3687":{"id":"2:3400:3687","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3402:181","2:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13435:57316":{"id":"2:13435:57316","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1328:1939":{"id":"0:1328:1939","crate_id":0,"name":"December","span":{"filename":"src/month.rs","begin":[26,4],"end":[26,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13511:61422":{"id":"2:13511:61422","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:902:1711":{"id":"0:902:1711","crate_id":0,"name":"utc_offset","span":{"filename":"src/utc_offset.rs","begin":[1,0],"end":[337,1]},"visibility":"crate","docs":"The [`UtcOffset`] struct and its associated `impl`s.","links":{"`UtcOffset`":"0:1448:1719"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1448:1719"],"is_stripped":true}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[67,0],"end":[88,1]},"visibility":{"restricted":{"parent":"0:308:1683","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:382:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13458:4249":{"id":"2:13458:4249","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13053:3846","`None`":"2:47492:176","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3809","5:785:4265","5:786:4266"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6441:4539":{"id":"1:6441:4539","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6442:4831","1:6443:4832","1:6444:9465","1:6445:59470","1:6447:59474","1:6449:59471","1:6450:59472","1:6452:59473"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:945:1677":{"id":"0:945:1677","crate_id":0,"name":"days_in_year","span":{"filename":"src/util.rs","begin":[58,0],"end":[60,1]},"visibility":"public","docs":"Get the number of calendar days in a given year.\n\nThe returned value will always be either 365 or 366.\n\n```rust\n# use time::util::days_in_year;\nassert_eq!(days_in_year(1900), 365);\nassert_eq!(days_in_year(2000), 366);\nassert_eq!(days_in_year(2004), 366);\nassert_eq!(days_in_year(2005), 365);\nassert_eq!(days_in_year(2100), 365);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1474:2015":{"id":"0:1474:2015","crate_id":0,"name":"Tuesday","span":{"filename":"src/weekday.rs","begin":[19,4],"end":[19,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1478:2017":{"id":"0:1478:2017","crate_id":0,"name":"Thursday","span":{"filename":"src/weekday.rs","begin":[23,4],"end":[23,12]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13766:138":{"id":"2:13766:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13767:181","2:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:424:2624":{"id":"0:424:2624","crate_id":0,"name":"NumericalStdDuration","span":{"filename":"src/ext.rs","begin":[185,0],"end":[202,1]},"visibility":"public","docs":"Create [`std::time::Duration`]s from numeric literals.\n\n# Examples\n\nBasic construction of [`std::time::Duration`]s.\n\n```rust\n# use time::ext::NumericalStdDuration;\n# use core::time::Duration;\nassert_eq!(5.std_nanoseconds(), Duration::from_nanos(5));\nassert_eq!(5.std_microseconds(), Duration::from_micros(5));\nassert_eq!(5.std_milliseconds(), Duration::from_millis(5));\nassert_eq!(5.std_seconds(), Duration::from_secs(5));\nassert_eq!(5.std_minutes(), Duration::from_secs(5 * 60));\nassert_eq!(5.std_hours(), Duration::from_secs(5 * 3_600));\nassert_eq!(5.std_days(), Duration::from_secs(5 * 86_400));\nassert_eq!(5.std_weeks(), Duration::from_secs(5 * 604_800));\n```\n\nJust like any other [`std::time::Duration`], they can be added, subtracted, etc.\n\n```rust\n# use time::ext::NumericalStdDuration;\nassert_eq!(\n    2.std_seconds() + 500.std_milliseconds(),\n    2_500.std_milliseconds()\n);\nassert_eq!(\n    2.std_seconds() - 500.std_milliseconds(),\n    1_500.std_milliseconds()\n);\n```\n\nWhen called on floating point values, any remainder of the floating point value will be\ntruncated. Keep in mind that floating point numbers are inherently imprecise and have limited\ncapacity.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:425:2626","0:426:2628","0:427:2630","0:428:2632","0:429:2634","0:430:2636","0:431:2638","0:432:2640"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::Sealed","id":"0:393:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:433","0:442"]}},"2:13536:5341":{"id":"2:13536:5341","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1294:1715":{"id":"0:1294:1715","crate_id":0,"name":"Month","span":{"filename":"src/month.rs","begin":[14,0],"end":[27,1]},"visibility":"public","docs":"Months of the year.","links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]","#[repr(u8)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1295:1950","0:1298:1949","0:1301:1948","0:1304:1947","0:1307:1946","0:1310:1945","0:1313:1944","0:1316:1943","0:1319:1942","0:1322:1941","0:1325:1940","0:1328:1939"],"impls":[]}},"2:13440:57337":{"id":"2:13440:57337","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16011:3576"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13447:61411":{"id":"2:13447:61411","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49723:3877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:55417":{"id":"5:6106:55417","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16011:3576"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3515:3698":{"id":"2:3515:3698","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13078:3863":{"id":"2:13078:3863","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13080:4205","2:13081:60912","2:13082:60913"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13072:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13443:4601":{"id":"2:13443:4601","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49445:3872","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13493:3653":{"id":"2:13493:3653","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:16011:3576","prim@char":"1:16005:3571","`DoubleEndedIterator`":"2:8447:120","self::pattern":"2:13053:3846"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49663:3884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1262:1541":{"id":"0:1262:1541","crate_id":0,"name":"0","span":{"filename":"src/instant.rs","begin":[31,19],"end":[31,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"StdInstant","id":"1:12258:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:443:2626":{"id":"0:443:2626","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[239,4],"end":[242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8447:120":{"id":"2:8447:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8448:4205","2:8449:4206","2:8450:4207","2:8451:4208","2:8455:4209","2:8458:4210"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:414:2241":{"id":"0:414:2241","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[108,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1307:1946":{"id":"0:1307:1946","crate_id":0,"name":"May","span":{"filename":"src/month.rs","begin":[19,4],"end":[19,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6561:4554":{"id":"1:6561:4554","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6562:57136","1:6563:57137"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9259:4158":{"id":"2:9259:4158","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:61407":{"id":"2:13420:61407","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5657:4528":{"id":"1:5657:4528","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5658:6157","1:5659:2173"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3716:3703":{"id":"2:3716:3703","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3647:3702","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3363:2195":{"id":"2:3363:2195","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:181","2:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1245:127":{"id":"0:1245:127","crate_id":0,"name":"Error","span":{"filename":"src/error/mod.rs","begin":[47,0],"end":[65,1]},"visibility":"public","docs":"A unified error type for anything returned by a method in the time crate.\n\nThis can be used when you either don't know or don't care about the exact error returned.\n`Result<_, time::Error>` (or its alias `time::Result<_>`) will work in these situations.","links":{},"attrs":["#[allow(missing_copy_implementations, variant_size_differences)]","#[allow(clippy :: missing_docs_in_private_items)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1246:2472","0:1249:1684","0:1252:2513","0:1255:2516"],"impls":["a:2:3268:211-0:1245:127","a:2:3309:3958-0:1245:127","a:2:9258:4159-0:1245:127","a:2:3280:220-0:1245:127","a:2:9259:4158-0:1245:127","b:2:3212-0:1245:127","b:2:3207-0:1245:127","b:2:2871-0:1245:127","b:2:4001-0:1245:127","b:2:2868-0:1245:127","b:2:3197-0:1245:127","b:2:3201-0:1245:127","b:5:6413-0:1245:127","0:1258","0:381","0:383"]}},"0:1295:1950":{"id":"0:1295:1950","crate_id":0,"name":"January","span":{"filename":"src/month.rs","begin":[15,4],"end":[15,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"5:6085:4492":{"id":"5:6085:4492","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13472:57347":{"id":"2:13472:57347","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8447:120","self::pattern":"2:13053:3846","prim@char":"1:16005:3571","str::split":"1:16011:3576"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49477:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10291:109":{"id":"2:10291:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1316:1943":{"id":"0:1316:1943","crate_id":0,"name":"August","span":{"filename":"src/month.rs","begin":[22,4],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13438:61410":{"id":"2:13438:61410","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:16011:3576","crate::ops::IndexMut":"2:3580:3700","str::slice_unchecked":"1:16011:3576"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3383:3685":{"id":"2:3383:3685","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3774:3710":{"id":"2:3774:3710","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3405:3688":{"id":"2:3405:3688","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3407:181","2:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:410:2205":{"id":"0:410:2205","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13083:3862":{"id":"2:13083:3862","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8399:136":{"id":"2:8399:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3197-0:1245:127":{"id":"b:2:3197-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:2731"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13446:5691":{"id":"2:13446:5691","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49713:3875","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:398:2207":{"id":"0:398:2207","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[62,4],"end":[62,37]},"visibility":"default","docs":"Create a [`Duration`] from the number of nanoseconds.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:12992:2694":{"id":"2:12992:2694","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12993:126","2:12994:2705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10539:146":{"id":"2:10539:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10540:652","2:10541:2176","2:10542:4417","2:10543:4418","2:10544:4419","2:10545:4420","2:10546:4421","2:10547:4422","2:10548:4423","2:10549:4424","2:10550:4425","2:10551:4426","2:10552:4427","2:10553:4428","2:10554:4429","2:10555:1532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:983":{"id":"0:983","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[317,0],"end":[317,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::instant::Instant","name":"Instant","id":"0:1260:1714","glob":false}},"0:412:2234":{"id":"0:412:2234","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13418:4211":{"id":"2:13418:4211","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1325:1940":{"id":"0:1325:1940","crate_id":0,"name":"November","span":{"filename":"src/month.rs","begin":[25,4],"end":[25,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6791:4537":{"id":"1:6791:4537","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6792:7338","1:6793:55541"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:402:2230":{"id":"0:402:2230","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[70,4],"end":[70,33]},"visibility":"default","docs":"Create a [`Duration`] from the number of minutes.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3181:227":{"id":"2:3181:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:127","2:3184:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1310:1945":{"id":"0:1310:1945","crate_id":0,"name":"June","span":{"filename":"src/month.rs","begin":[20,4],"end":[20,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10300:3925":{"id":"2:10300:3925","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13512:61423":{"id":"2:13512:61423","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10241:2157":{"id":"2:10241:2157","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10242:1532","2:10243:55455","2:10245:4085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3558:3708":{"id":"2:3558:3708","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:237","2:3561:206","2:3562:61009"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3211:1416":{"id":"2:3211:1416","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[22,0],"end":[22,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"component_range::ComponentRange","name":"ComponentRange","id":"0:1185:1684","glob":false}},"2:7927:3736":{"id":"2:7927:3736","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7928:60841","2:7929:60842","2:7930:60839","2:7931:60837","2:7932:60843","2:7933:60840","2:7934:60838"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6091:62056":{"id":"5:6091:62056","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:399:2219":{"id":"0:399:2219","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[64,4],"end":[64,38]},"visibility":"default","docs":"Create a [`Duration`] from the number of microseconds.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1004:205":{"id":"0:1004:205","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[326,0],"end":[326,52]},"visibility":"public","docs":"An alias for [`std::result::Result`] with a generic error from the time crate.","links":{"`std::result::Result`":"2:47619:205"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"core::result::Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"5:6103:62057":{"id":"5:6103:62057","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5012:4558":{"id":"1:5012:4558","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5013:4269","1:5014:55776"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8879:3751":{"id":"2:8879:3751","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6415:1396":{"id":"5:6415:1396","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:354:2510":{"id":"0:354:2510","crate_id":0,"name":"invalid_variant","span":{"filename":"src/error/invalid_variant.rs","begin":[1,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:308:1683","path":"::error"}},"docs":"Invalid variant error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1232:2516"],"is_stripped":true}},"0:1304:1947":{"id":"0:1304:1947","crate_id":0,"name":"April","span":{"filename":"src/month.rs","begin":[18,4],"end":[18,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10933:214":{"id":"2:10933:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10935:181","2:10936:2699","2:10937:57314","2:10938:57315","2:10939:57316","2:10940:753","2:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10924:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13543:61430":{"id":"2:13543:61430","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16005:3571"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49776:3891","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23462:5049":{"id":"2:23462:5049","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23463:1269","2:23464:1268","2:23465:1266","2:23466:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22874:5101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:408:2219":{"id":"0:408:2219","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3388:3689":{"id":"2:3388:3689","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13426:61409":{"id":"2:13426:61409","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:437:2632":{"id":"0:437:2632","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[217,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13516:61425":{"id":"2:13516:61425","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16005:3571","self::pattern":"2:13053:3846"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:413:1938":{"id":"0:413:1938","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3174:135":{"id":"2:3174:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5793:4455":{"id":"1:5793:4455","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5794:57080"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13490:61415":{"id":"2:13490:61415","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:426:2628":{"id":"0:426:2628","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[189,4],"end":[189,45]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of microseconds.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10574:3916":{"id":"2:10574:3916","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:146","2:10576:10636","2:10577:57049"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4670:4468":{"id":"1:4670:4468","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4671:4766","1:4672:55562","1:4674:55563","1:4675:55564","1:4676:4484","1:4677:10497","1:4678:10496","1:4680:55565","1:4681:4239","1:4682:4601","1:4683:4222","1:4685:4233"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8366:3757":{"id":"2:8366:3757","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:4257"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13519:10540":{"id":"2:13519:10540","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16005:3571","self::pattern":"2:13053:3846"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:431:2638":{"id":"0:431:2638","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[199,4],"end":[199,37]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of days.","links":{"`std::time::Duration`":"2:50203:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3212-0:1245:127":{"id":"b:2:3212-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3375:1655":{"id":"2:3375:1655","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13433:57315":{"id":"2:13433:57315","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:397:2594":{"id":"0:397:2594","crate_id":0,"name":"NumericalDuration","span":{"filename":"src/ext.rs","begin":[60,0],"end":[77,1]},"visibility":"public","docs":"Create [`Duration`]s from numeric literals.\n\n# Examples\n\nBasic construction of [`Duration`]s.\n\n```rust\n# use time::{Duration, ext::NumericalDuration};\nassert_eq!(5.nanoseconds(), Duration::nanoseconds(5));\nassert_eq!(5.microseconds(), Duration::microseconds(5));\nassert_eq!(5.milliseconds(), Duration::milliseconds(5));\nassert_eq!(5.seconds(), Duration::seconds(5));\nassert_eq!(5.minutes(), Duration::minutes(5));\nassert_eq!(5.hours(), Duration::hours(5));\nassert_eq!(5.days(), Duration::days(5));\nassert_eq!(5.weeks(), Duration::weeks(5));\n```\n\nSigned integers work as well!\n\n```rust\n# use time::{Duration, ext::NumericalDuration};\nassert_eq!((-5).nanoseconds(), Duration::nanoseconds(-5));\nassert_eq!((-5).microseconds(), Duration::microseconds(-5));\nassert_eq!((-5).milliseconds(), Duration::milliseconds(-5));\nassert_eq!((-5).seconds(), Duration::seconds(-5));\nassert_eq!((-5).minutes(), Duration::minutes(-5));\nassert_eq!((-5).hours(), Duration::hours(-5));\nassert_eq!((-5).days(), Duration::days(-5));\nassert_eq!((-5).weeks(), Duration::weeks(-5));\n```\n\nJust like any other [`Duration`], they can be added, subtracted, etc.\n\n```rust\n# use time::ext::NumericalDuration;\nassert_eq!(2.seconds() + 500.milliseconds(), 2_500.milliseconds());\nassert_eq!(2.seconds() - 500.milliseconds(), 1_500.milliseconds());\n```\n\nWhen called on floating point values, any remainder of the floating point value will be\ntruncated. Keep in mind that floating point numbers are inherently imprecise and have limited\ncapacity.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:398:2207","0:399:2219","0:400:2223","0:401:2205","0:402:2230","0:403:2234","0:404:1938","0:405:2241"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::Sealed","id":"0:393:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:406","0:415"]}},"0:444:2628":{"id":"0:444:2628","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[244,4],"end":[247,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:986":{"id":"0:986","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[318,0],"end":[318,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::month::Month","name":"Month","id":"0:1294:1715","glob":false}},"2:3491:116":{"id":"2:3491:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:221","2:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13528:61427":{"id":"2:13528:61427","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:3846","prim@char":"1:16005:3571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436:2630":{"id":"0:436:2630","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[213,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50203:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9258:4159":{"id":"2:9258:4159","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:57349":{"id":"2:13481:57349","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:16005:3571","str::rsplitn":"1:16011:3576","self::pattern":"2:13053:3846"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49563:3883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14165:141":{"id":"2:14165:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14166:277","2:14167:518","2:14168:280","2:14169:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3207-0:1245:127":{"id":"b:2:3207-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:22837:5038":{"id":"2:22837:5038","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22838:59861","2:22839:1226","2:22840:1227","2:22841:59878","2:22842:59879","2:22843:59880","2:22844:59881","2:22845:60987","2:22846:60988","2:22847:60989"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"16:2991:6009":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5379:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:3549:8175":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11779:7577":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:51282:5075":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:1663:4682":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13119:7920":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2187:4580":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:4699:6320":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:4477:4511":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:3905:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12073:7635":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6644:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3811:3711":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:1457:4691":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10331:6124":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:7667:4651":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:5862:4875":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"18:830:6189":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:4884:5161":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4040:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13258:7949":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"12:1147:4691":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:3745:3707":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:1674:4683":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"9:157:5527":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:12598:7733":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:0:798":{"crate_id":20,"path":["libc"],"kind":"module"},"12:1103:4689":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10844:6124":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:6892:3786":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12494:7716":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:705:7372":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:14103:6370":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:8742:4846":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:47602:4272":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:3362:4580":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5421:5715":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:621:7371":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:1700:6606":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:10948:4675":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11822:7593":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1623:4689":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:49323:5227":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:8447:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:2314:6114":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:48829:4623":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3273:2158":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:12248:4702":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:9722:4802":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:0:3555":{"crate_id":17,"path":["object"],"kind":"module"},"17:11750:7566":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:5789:4454":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:4417:8184":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7216:5896":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:46708:3763":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13540:8023":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13477:8002":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6185:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:6764:4476":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4752:4490":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7378:5829":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:1492:4681":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11434:7536":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13598:8035":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:46628:3770":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5167:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:52322:5065":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:50020:4989":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:3041:6000":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:56374:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3355:4780":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46450:5133":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12040:7625":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3345:4775":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6214:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:46309:5129":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:4082:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11082:6076":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:24802:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11199:7528":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:48632:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:46388:3890":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46049:5044":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11159:7525":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"12:432:5646":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:12057:8859":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:4511:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13547:8024":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:1533:6495":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8807:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4439:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:897:4731":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6691:5885":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:10294:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:53592:8774":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:9471:9489":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:7111:6329":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:923:5479":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11026:9410":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:3972:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4516:4507":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:45809:3709":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:12738:4763":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"0:1255:2516":{"crate_id":0,"path":["time","error","Error","InvalidVariant"],"kind":"variant"},"2:14:2176":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4459:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4255:4829":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13942:8147":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:53451:8767":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:50203:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:23868:5254":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:8882:3753":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:11611:4625":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:46028:4286":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:8146:61144":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:4350:8182":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10403:6120":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12568:7727":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:3800:8178":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:531:6426":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:4242:6315":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4227:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:838:3864":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:5731:4451":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13163:7925":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13062:7885":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11356:4811":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:3177:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11993:7619":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:299:9363":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:1607:4270":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:22990:5048":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:51336:5067":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:7642:5391":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3739:3705":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5436:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:50448:4282":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46465:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:294:9362":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:6699:7228":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:6203:4827":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47671:4270":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"9:1020:5577":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1554:6503":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5960:5745":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:50183:3856":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:51898:8731":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8136:4753":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:10570:4728":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:51866:8730":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:22561:60005":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:1602:6533":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2956:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:2920:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:47611:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:6391:5877":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:69:5385":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:3388:3689":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:48519:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:12500:5334":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:8446:4577":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:7856:5904":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:24219:3841":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:3716:3703":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:48839:8715":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:48513:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:7226:5897":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8031:4753":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:23661:4543":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:4477:8186":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:22546:60005":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:13497:8009":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4401:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:22801:5046":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:14953:6372":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:32337:5284":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:9943:62478":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:53126:5070":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7185:5893":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:53299:5073":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13488:8006":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:3246:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3341:1810":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:46500:5279":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:24564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:9759:9370":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12610:7735":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11653:7557":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10477:6148":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:6701:7230":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10801:9397":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5314:7459":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7761:5902":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:3772:8177":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:0:3556":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:51592:5076":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10599:9392":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11001:9408":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:24530:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:16027:3590":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:9067:4645":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5407:5714":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:24182:40936":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:5927:5743":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:9368:7462":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6620:6027":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:10805:4462":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:6028:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46768:3765":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:10304:3927":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12327:7671":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46679:3775":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13810:8109":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:5231:8203":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:9918:660":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"7:0:1480":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:4727:2157":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:2310:5489":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6577:5882":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:47965:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:52400:5072":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"14:231:5358":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:10308:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:4475:4510":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:8849:6094":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6166:5870":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9162:6097":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:1156:9445":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:3274:4196":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3276:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"12:1238:5644":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4145:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11453:7217":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:49891:4985":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6464:5837":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5386:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11337:6146":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4347:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6893:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11714:7561":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11410:4882":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:47839:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:3400:3687":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:51394:8726":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5459:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"12:880:4577":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"12:1162:5641":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:3278:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:3327:4769":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:2797:4281":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:7849:6334":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:15131:4664":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:24734:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:4514:4506":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12442:7709":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:52936:5066":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:4643:6320":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:24768:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:12275:7663":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:136:55009":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4133:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:5801:4457":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:49758:3889":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:51231:5087":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1637:4690":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:3429:5751":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46394:5318":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11616:7551":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:721:7374":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:11317:3878":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:4643:4476":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:14239:4603":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:2507:4975":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6413:5660":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8492:4716":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3728:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:3772:4270":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"12:2045:4577":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"18:821:6188":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:9769:62480":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:49336:5228":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:49723:3877":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:1690:6600":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6591:5883":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:13935:55410":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:22599:60028":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:49956:4987":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:7379:4215":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12120:4714":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:50171:3853":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13924:8141":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4052:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10160:7471":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5330:7460":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4215:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10420:6106":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:48792:3919":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"9:603:9612":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:3343:4774":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:12845:3893":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:8886:3754":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12287:7664":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:7979:6346":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:4023:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:10862:4787":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4410:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:53515:8771":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10836:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"13:232:8482":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12480:7714":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:1717:6613":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13356:7974":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:16006:3572":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13054:7883":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:12000:4653":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:543:6431":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13098:7915":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:3320:6059":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:812:6187":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12725:7755":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11628:7552":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:5964:4881":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:7121:4146":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:7620:5390":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:5793:4455":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1676:6589":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13402:7983":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:5956:4880":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:3218:6003":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:2733:2159":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:2412:8490":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9729:62476":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:15217:4594":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10377:6113":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6366:5661":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:12258:1714":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:13957:4654":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:5038:5164":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:10701:5450":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:11640:7555":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"9:809:4623":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:8403:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:15123:8874":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"12:952:4686":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2889:6015":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:4036:4678":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6731:6033":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:50341:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10988:9407":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:6463:4551":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6126:5869":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:152:55010":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:25240:3835":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:46578:3759":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:46758:3781":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2973:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"proc_derive"},"1:9064:4843":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13912:8139":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:13078:3863":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:2512:6108":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:11082:4486":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2159:4269":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:14937:6371":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4095:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:15093:1714":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:4506:8187":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:16023:3586":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:48580:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:52435:5054":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:14610:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:3990:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5359:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:5433:5716":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1442:4215":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:32331:4669":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:1486:4577":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"14:47:9425":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4183:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:0:3554":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5563:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"12:815:4683":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:7824:6329":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:5837:5342":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:49767:3890":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:15230:4599":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4325:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:22874:5101":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:10306:3928":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9971:62484":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7571:5821":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:4611:3746":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3201:4766":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"18:775:7372":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:4727:4958":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5855:5740":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13429:7987":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3329:4770":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:2912:5997":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:3892:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46986:3744":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1760:6629":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10529:7475":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9440:7464":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"0:1252:2513":{"crate_id":0,"path":["time","error","Error","DifferentVariant"],"kind":"variant"},"6:569:6451":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:12243:4849":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:15033:4656":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:4734:8193":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4419:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13221:7940":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"19:117:7367":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:12128:4215":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9404:7463":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7870:5831":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:23079:2567":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:46670:3774":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:5934:4878":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11146:3875":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"18:730:62490":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:5522:5723":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:9186:6075":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:2968:5998":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:745:62491":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6491:5879":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11254:6096":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5295:47140":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13564:8028":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3416:3691":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:13053:3846":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"9:1075:5578":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:4215:4576":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:4065:4284":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:24103:5149":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:3241:6004":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7549:5833":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:1939:4577":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:3379:1658":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:1235:5442":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10071:6173":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:15475:8878":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10304:6110":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:50351:8721":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:49358:5230":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10128:6170":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:48049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:22578:60025":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2399:9450":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:10642:13537":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:7290:9456":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13318:7960":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:1653:4681":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:23771:4943":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4306:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10117:6169":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13192:7932":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:2866:5996":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:903:4732":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:10291:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2291:4950":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13733:8085":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1908:42861":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:3064:6057":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"15:0:3553":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:51718:5053":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:16022:3585":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10211:9381":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:47550:4215":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7195:5894":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:3296:4198":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7467:5826":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10827:6067":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:7796:4658":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:15354:4808":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:8362:2192":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:53425:8765":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:14242:4506":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:46371:5317":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"12:114:62469":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:24010:8591":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:7927:3736":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:49368:5231":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:3198:4764":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"14:194:47063":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10938:9403":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:2175:4578":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:895:5633":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"12:750:4269":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:4920:5162":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:14822:4657":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:53436:8766":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9649:9368":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:12992:2694":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:3392:6012":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:13962:60090":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:7928:5044":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6021:5994":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4066:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"9:996:5576":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:786:6364":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:6424:5878":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8643:4835":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:11424:5219":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:52082:5085":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"9:749:5512":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9088:48720":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10571:9390":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:1646:4691":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1665:6581":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:8263:4696":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:57675:8781":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"14:216:47069":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"12:787:4682":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9719:9369":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:16009:3574":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11588:7547":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:0:3546":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"18:695:6201":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:10240:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:5292:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:3957:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:6863:4465":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6200:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:16015:3578":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:4823:8196":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6014:5868":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:3426:3693":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:2843:5995":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5469:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11100:6101":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:46587:3768":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10864:7510":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"7:85:46396":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:24118:8601":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45942:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:823:6364":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"5:8463:5386":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4203:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:46717:3777":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:11189:4562":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"16:4790:8195":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:32156:3829":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"12:1121:4690":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3518:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:3091:6058":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:11396:3883":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10926:9402":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2768:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10611:9393":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:16011:3576":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:9631:55412":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"16:6238:5827":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:0:1723":{"crate_id":21,"path":["num_threads"],"kind":"module"},"2:13278:9440":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:37648:3726":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:12019:4655":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10814:6066":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:3357:3684":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:49197:5218":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13041:7877":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:8106:5348":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:11438:5220":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6999:5888":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:48255:3926":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14000:8157":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13282:7955":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10279:6122":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10095:6167":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:11336:8843":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:8391:5356":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:5788:6315":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:542:5759":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:3604:7392":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1079:4546":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:49609:3886":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2924:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"proc_derive"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:740:9360":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:47679:4215":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11293:8837":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:7619:4648":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5953:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13760:8097":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:3565:4497":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:3862:6635":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"12:2253:4689":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:15976:13542":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11449:4538":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11678:7559":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:5184:3944":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:2553:5447":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8843:9457":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:11246:4566":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:13063:3861":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:50395:5243":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:7453:5825":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:13892:9441":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5407:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6518:5880":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:1486:4692":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:45898:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:24247:3842":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:6794:4539":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6176:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:32296:5273":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:12524:3866":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6768:6036":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:7445:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:5274:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:24126:8602":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:4762:8194":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13788:8104":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:54:5631":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:2460:9453":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11555:7545":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10673:48907":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:32497:60195":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:10489:6150":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:8366:3757":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:9978:5202":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11126:3782":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:3172:6001":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6614:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:1136:4287":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11604:7548":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:51121:5074":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:6703:7232":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:3405:3688":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:13857:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:49459:3880":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:6867:4533":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5561:5725":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:49378:5232":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8414:5410":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:4050:4285":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:11264:4609":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:13348:7971":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11594:4624":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"12:971:4687":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:10822:4463":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:2777:5446":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:3881:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13465:8001":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10266:6111":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12582:7729":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:22931:4542":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"12:856:4680":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"18:661:6199":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:1617:6545":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:47559:4155":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4404:4795":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:2163:4215":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:52003:5097":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7342:5858":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5282:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:49776:3891":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"12:466:62470":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:2462:9454":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"9:963:5575":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:24049:8593":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:10950:9404":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:2925:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4517:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:15484:57144":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:8130:4576":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:16029:3592":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:4084:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:1547:6500":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"0:0:1710":{"crate_id":0,"path":["time"],"kind":"module"},"12:353:8483":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:48007:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"12:1682:5655":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:56361:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:5504:4816":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:51670:5068":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:15332:4568":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:7073:5889":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:7158:5891":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:6086:4818":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:8379:5355":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:57696:8782":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:24144:40935":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2192:4581":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:7799:4660":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46056:5045":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"0:942:1815":{"crate_id":0,"path":["time","util","days_in_year_month"],"kind":"function"},"1:16012:3577":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:3040:8578":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:46995:3746":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:49429:3874":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:46736:3779":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12343:7676":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2282:4949":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4523:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"9:686:5508":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:13418:4823":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:161:41559":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:12112:4269":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5978:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5969:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5191:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5428:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8197:6346":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"12:1784:6313":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:11355:5217":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"12:2036:4215":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11147:7524":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:24166:40927":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"12:2072:4581":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4377:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:3662:6344":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11458:7537":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:5380:4809":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:3714:8176":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12431:7707":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:5604:5036":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:6475:4576":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:4995:8201":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:1256:4692":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3375:1655":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7633:4649":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4331:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:4230:8180":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:53338:5093":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11767:7574":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:4599:6318":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:4671:8191":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:47004:3748":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:5155:5170":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:1091:6315":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"0:1249:1684":{"crate_id":0,"path":["time","error","Error","ComponentRange"],"kind":"variant"},"2:51543:5091":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:9799:9371":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:46470:5277":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:22748:5100":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:2186:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7843:5903":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6085:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10458:7425":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"6:563:6448":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"0:1245:127":{"crate_id":0,"path":["time","error","Error"],"kind":"enum"},"5:432:3959":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12049:4657":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"9:0:3548":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:50167:3851":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:9380:3861":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:2396:4704":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:16016:3579":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:10924:2567":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11981:7618":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11726:7564":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:47542:4270":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2966:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10663:4586":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:5972:4883":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:49417:3870":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"12:399:5647":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12095:7636":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:6935:7365":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:5012:4558":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:0:1330":{"crate_id":1,"path":["std"],"kind":"module"},"2:32345:60194":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:10680:14523":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3524:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:591:6463":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1729:4822":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13532:8020":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:4008:9367":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:51375:5052":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:49402:3871":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9933:9373":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"12:2392:8487":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"9:469:9602":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:14634:4486":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:7755:3767":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:7257:6315":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:47015:3750":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"0:424:2624":{"crate_id":0,"path":["time","ext","NumericalStdDuration"],"kind":"trait"},"2:8163:59942":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:12253:4703":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46647:3772":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:51442:5096":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5130:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:16020:3583":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:4614:8189":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12632:7746":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:46483:5278":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:46799:3784":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8485:4715":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:886:6193":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12199:4721":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:9896:62479":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:10958:4502":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:1511:4685":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:14317:4738":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:12056:6342":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:10179:7473":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:12061:59367":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"5:4443:4269":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"9:1056:5570":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:3329:4269":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10975:9406":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:53377:5058":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12671:7749":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"12:764:4270":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7259:9456":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6208:5872":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:11502:4147":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:10800:4763":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10788:9395":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11350:4810":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:48817:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:14602:4765":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11406:7534":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:12734:3897":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:3652:4498":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3396:4581":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:48262:3925":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:2200:6317":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12521:7720":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:699:4727":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5488:5721":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:5377:4808":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:47663:4269":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"18:897:6194":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:24496:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11738:7565":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6554:5881":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46350:5323":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:1045:4557":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:10302:3926":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:51766:5057":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"9:41:5560":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:9839:6124":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5595:5727":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:5164:3942":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5548:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:4641:8190":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:767:7382":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:1723:6616":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8694:4838":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:46548:6336":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6087:5822":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:11282:5216":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:1501:4683":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3286:3945":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:48276:3928":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:5657:4528":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:1476:4576":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:11681:4629":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:6864:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:4377:4215":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11499:7542":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:6865:4532":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:48847:8716":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:24870:3840":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:46638:3771":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"9:234:5535":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:49445:3872":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:547:5734":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4262:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:49477:3878":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10468:6149":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:47492:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5255:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12659:7748":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:3365:5748":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"9:776:5557":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:3491:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:5536:5416":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:50068:8995":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:11152:4560":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:6636:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:6437:3773":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:15236:4600":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12010:7622":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10635:7476":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:24836:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12795:7772":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4358:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:8902:48715":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:46063:3940":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:5790:5738":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4736:55482":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:48546:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:7857:4919":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:9528:3872":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8293:4753":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:10795:4553":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:49286:5225":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:2280:4691":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9143:4151":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12051:7626":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10579:3917":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:5889:6327":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:11313:55516":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:45873:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:1161:13540":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:16021:3584":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2887:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:8472:3755":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:3945:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10516:6151":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4293:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4688:4485":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"0:1004:205":{"crate_id":0,"path":["time","Result"],"kind":"typedef"},"17:12307:7670":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3196:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"12:2040:4576":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:50195:3859":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:5033:5163":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:49862:4979":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:51250:8724":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4955:8200":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8977:4668":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:1021:4753":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:11430:4830":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:14644:59562":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"12:2419:4584":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:6633:60739":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:12079:8860":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:5528:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12645:7747":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:6791:4537":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3515:3698":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11970:7615":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:584:6460":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:11205:3893":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:670:41890":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:48808:3918":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:45781:3712":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13386:7979":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10140:6124":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13884:8130":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:157:41558":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:7669:3758":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5159:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:46727:3778":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:51489:5084":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:49581:3882":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:16024:3587":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:2268:4945":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5766:5737":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:50045:4991":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:11670:4628":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:3039:61134":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11094:4488":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:8344:5406":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:11923:5233":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:3264:6005":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12142:7644":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:10446:9439":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11572:7546":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4193:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:38805:3913":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12155:7647":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6682:5838":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9332:6145":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:4436:4508":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:3939:8179":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:51073:5094":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:5197:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6091:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3371:1652":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10081:6122":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46108:5108":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12168:7482":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:49257:5222":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6881:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12385:7697":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:22850:2567":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:6963:4464":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:7453:6315":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4304:8181":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:49527:3879":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:8250:4584":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:7823:5836":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5269:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8384:4753":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:53047:5086":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"0:1246:2472":{"crate_id":0,"path":["time","error","Error","ConversionRange"],"kind":"variant"},"12:843:4679":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9476:7465":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:15413:4816":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7894:5861":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:5985:4884":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10569:2567":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"12:1203:5643":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:783:7372":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:49297:5226":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5384:5713":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46287:8690":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:49681:3885":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:5717:5732":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3882:4501":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7333:5844":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11073:4513":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11139:3880":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7514:5845":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:681:7532":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:11133:3872":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"12:940:4685":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4083:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:14165:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9809:62477":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4364:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:11956:5234":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:15202:4593":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6005:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11947:7609":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:48616:3924":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:11654:4626":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4033:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9065:48719":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12373:7695":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13370:7976":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4494:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11915:7599":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:1194:13541":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:52129:5089":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11416:4821":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:46558:9442":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:10236:6093":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:9638:6361":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:5745:4452":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12756:7761":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:9264:7459":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:49276:5224":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:7212:4576":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6136:5864":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:605:6471":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:3309:3958":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:12278:2707":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:5347:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:46789:3783":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:51741:5056":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"13:120:47035":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:802:6186":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46431:5321":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:11137:4270":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:55964:4939":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:24666:3839":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:37624:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:5415:4476":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:47881:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:10200:9380":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:49435:3873":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:52160:5092":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6221:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:511:6415":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3488:6008":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3686:4493":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:651:6195":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:10878:4501":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:9133:48721":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:374:5437":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6101:5820":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:3757:4935":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9245:6068":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:53189:5090":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11847:7597":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12456:7711":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:45988:3701":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:13129:4981":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11664:4269":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:1655:4692":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6051:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:15392:4809":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12154:4718":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:4745:4487":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13272:7954":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:632:6486":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:4782:4974":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13609:8039":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6744:6034":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10953:4676":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:5736:5733":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:51520:5088":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:10381:9468":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:0:3550":{"crate_id":11,"path":["adler"],"kind":"module"},"17:12917:7774":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12028:7623":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:52369:5069":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:12794:3896":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13446:7994":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:8399:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:11162:3880":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:14068:4976":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:2961:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"17:10558:9387":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:6239:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11398:4560":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"12:472:62471":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:48091:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11424:4810":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5996:5867":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2773:6021":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13819:8111":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12247:7659":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:599:6468":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"12:933:4684":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:3504:3697":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10061:9378":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13627:8042":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:16018:3581":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:1597:4269":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:850:6190":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:5029:3941":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:8106:3738":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:9886:9372":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:1843:6315":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:9258:4159":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:611:6196":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:28051:3836":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:53396:8762":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11809:7589":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11118:48724":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:1644:4680":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:10591:4736":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:11066:3738":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4073:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:51313:5063":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"12:979:4688":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:47593:4156":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:3336:1809":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:9865:6364":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:11244:5215":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9643:55414":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:12467:7712":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1463:4680":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"15:269:5668":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7250:5899":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13331:7966":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7884:5832":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5987:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:13072:3864":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:49983:4988":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4449:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:3774:3710":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11328:7762":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:624:6481":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:9762:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:52586:5078":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:50179:3855":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:10581:57143":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"18:867:6192":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:2862:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5228:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5185:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9034:48718":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7042:6044":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"12:183:5649":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:537:6428":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:2262:5444":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:14551:4540":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:46340:5322":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:3506:6007":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13506:8010":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:3277:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12946:7794":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:10574:3916":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7236:5898":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13554:8025":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46977:3742":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:1450:4679":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:8121:5481":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:49742:3892":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:53252:5055":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10353:6115":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:23134:5051":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13933:8145":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"0:931:1676":{"crate_id":0,"path":["time","util"],"kind":"module"},"5:2330:5443":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:1584:6523":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13154:7921":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:3733:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:14236:4508":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:49839:4978":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:14959:6373":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:2218:5363":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:49349:5229":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:3383:3685":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:15499:5672":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:8160:4215":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:24212:8614":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4431:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"12:869:4576":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:10253:6112":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:12769:9461":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"16:3018:5999":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:14030:4653":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:9770:6362":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"12:1703:5656":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:49733:3876":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6949:6040":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:51818:8729":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:8115:4215":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:5414:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:1540:6498":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12262:7662":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13963:8150":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:2945:6020":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6068:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:53553:8773":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5400:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6910:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4060:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:6954:5349":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12182:7651":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:3488:4577":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:13583:55415":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"12:777:4215":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:13564:9452":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:3894:5411":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"13:0:3545":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:49039:5339":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12221:7655":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"14:189:9425":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11358:6071":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:3759:4269":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6923:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:2865:3807":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:50359:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12408:7706":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:50175:3854":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:46970:3740":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10448:6140":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:3966:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3395:3686":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:46021:3704":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:5739:4449":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46600:3760":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6718:6032":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46699:3776":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:4448:8185":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:2543:6147":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:6870:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"12:2059:4579":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:22837:5038":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:13766:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:5875:6324":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:3181:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8929:4857":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"5:6672:5416":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12183:4720":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4281:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:48495:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:4304:4514":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:6252:5874":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:8954:6077":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:51144:5062":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5505:5722":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12118:7642":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:1153:9443":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4272:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5456:5717":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:24234:3838":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10310:3929":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:4852:8197":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:23673:60008":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10041:9376":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"2:49509:3881":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:14239:4510":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:49908:4986":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:51208:5083":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12771:7762":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:8362:8582":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:4535:8188":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4241:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8650:4837":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1011:4269":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12195:7652":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:3044:61136":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:5407:5314":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"9:900:8544":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:3997:6722":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11304:48725":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:8412:3756":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9689:62482":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6852:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1195:61163":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:3195:6002":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:610:6473":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4964:3939":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:16025:3588":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:49043:5338":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:10870:4499":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:49266:5223":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:50238:3721":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:13919:4652":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:23086:18614":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:8330:5405":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5672:5729":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"15:248:5664":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13590:8034":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12740:6369":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:1522:6490":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13842:8124":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:5029:8202":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:9296:7461":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"10:0:3549":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:16026:3589":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:53530:8772":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:13781:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:4157:6080":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3346:2194":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:50034:4990":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:14809:4529":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:11405:4879":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:9259:4158":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:578:6457":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:10673:4693":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:3558:3708":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:7392:5830":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:637:7372":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11378:6070":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:48269:3927":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:5630:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:3430:3694":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:15755:6374":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:3336:4579":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4395:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:3839:6315":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"14:11:9425":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:22580:60023":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4013:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:48528:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:9659:62485":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10584:6079":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11045:48723":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10435:9383":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:24598:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6357:5876":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:56387:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24032:5153":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:32693:5031":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:10370:7532":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:6688:5417":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:713:3726":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3576:3699":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:5110:3940":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:52243:5077":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:3363:2195":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:49563:3883":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11231:6098":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:6323:4828":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7146:5890":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11665:7558":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11962:7613":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13394:7981":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1572:6514":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10502:7474":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9551:6095":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9574:6100":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10657:13539":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:16010:3575":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"9:692:5510":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:6441:4539":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5273:5753":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4112:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:10933:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10407:6107":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:1694:5439":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2193:8584":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:51693:5071":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:9737:4803":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:3280:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:10431:6365":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:5583:13543":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:15073:8873":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:50225:3720":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:46656:8701":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:13782:4662":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:169:55011":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:3048:61135":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8912:3742":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11794:7583":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:379:5648":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"12:162:5645":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:16017:3580":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:525:6423":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12134:4717":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:3647:3702":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:2794:5750":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11361:4812":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12552:7726":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"0:385:1696":{"crate_id":0,"path":["time","ext"],"kind":"module"},"2:10539:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:24700:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"12:2398:8488":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:23939:5255":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:50418:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:9260:4157":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:2484:48807":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1635:4679":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5221:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:8179:3741":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:8929:48716":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2181:4579":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2062:4476":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11835:7594":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:12034:4656":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:1534:4688":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:14129:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4478:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9280:7460":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7279:6045":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:88:41492":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:50191:3858":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:14571:8865":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:11410:3882":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:46417:5319":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:12771:3899":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2598:9455":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:4425:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6964:4155":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:46688:3785":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:13816:60088":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:6858:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:2816:6014":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2755:4280":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:49713:3875":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:8601:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:24632:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:3951:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:4739:4959":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:1596:6531":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:53462:8768":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:7736:4654":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"8:0:3547":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:8478:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:14566:8863":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:22533:3726":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13986:8154":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9849:62481":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:51922:8732":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10317:6109":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:1419:4269":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7406:5828":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:4890:8198":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11520:4613":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"0:308:1683":{"crate_id":0,"path":["time","error"],"kind":"module"},"1:5723:4450":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:3375:5361":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:8138:5482":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:8176:5354":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"12:2052:4578":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:56400:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13620:8040":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3204:4484":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"0:944:1816":{"crate_id":0,"path":["time","util","is_leap_year"],"kind":"function"},"2:47525:2489":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:15020:4655":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:45919:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:7295:5842":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:1505:4684":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5815:5739":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:23467:18633":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:16004:3570":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7420:5846":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:47688:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:6155:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13306:7957":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:23767:2567":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:10251:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3174:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4300:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12298:3810":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:510:9364":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:46779:3782":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:3103:3914":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:3102:2567":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:4751:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:15510:5672":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:10241:2157":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12208:7654":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:858:6191":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13520:8017":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:994:5480":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:2437:9452":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:3422:3692":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13799:8108":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:3951:4577":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:1311:6174":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3268:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4341:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:791:6185":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4398:4793":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11015:9409":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:1215:5441":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:6561:4554":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"12:1183:5642":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:5779:4453":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6269:5875":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2170:4577":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13296:7956":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"12:2404:62468":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:1527:6492":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:1618:4215":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"12:2269:4690":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"0:397:2594":{"crate_id":0,"path":["time","ext","NumericalDuration"],"kind":"trait"},"2:47755:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11204:4564":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:10962:9405":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4387:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5632:5728":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:7653:4650":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4120:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:7931:4752":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"14:244:8435":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6072:5843":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:23462:5049":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:7681:4652":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"14:56:7538":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:3522:7388":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12685:7750":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:45857:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:4306:4270":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:14627:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:10300:3925":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:1563:6508":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:22601:60026":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7264:5840":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4005:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:1528:4687":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10149:9372":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:13083:3862":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10001:48769":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13637:8047":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10623:9394":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6110:5863":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:14576:4462":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:3918:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:46363:3891":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:3978:6709":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"9:927:46493":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:1658:6577":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:616:6476":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7174:5892":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3439:3696":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:755:62492":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:15054:2707":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:1630:6552":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12712:7754":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:12401:9453":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:4515:5469":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:3434:3695":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:50199:3860":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:645:6198":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:22927:2567":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:38868:4199":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5707:5730":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:24065:8596":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:16005:3571":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5945:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46410:3889":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"7:38:46389":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:4438:4509":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5420:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:9178:9457":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:14589:8871":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:46748:3780":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:15971:9620":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11696:7560":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:2401:9451":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:5998:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:53477:8769":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:3970:6315":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:8879:3751":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13377:7978":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:47797:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13978:8151":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1708:6607":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11539:7544":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:668:6200":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:47713:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:15186:4592":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:1622:6547":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:15046:59564":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:4704:8192":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13772:8100":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:53416:8764":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13898:8132":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4371:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11932:7605":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6569:6029":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4164:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:8197:4215":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:10298:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:4386:8183":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11571:4623":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2938:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:9767:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7477:5847":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:6812:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:7936:55413":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"9:722:5511":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:3740:4500":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:5100:5169":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13205:7937":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"15:230:5663":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:24090:3837":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13240:7941":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10656:7478":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:9210:48722":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:9598:6360":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"0:946:1817":{"crate_id":0,"path":["time","util","weeks_in_year"],"kind":"function"},"5:1472:4690":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:3145:6010":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6032:5755":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:8313:5278":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6689:4452":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:51177:5095":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"12:2032:4269":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11228:4565":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:11277:7529":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:10456:6367":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:3171:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:10697:9460":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:46424:5320":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:10596:4751":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5371:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:12238:4641":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:16019:3582":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:1236:9366":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:5975:5866":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:47534:4269":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12741:7757":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:13655:4612":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:50436:4283":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:16008:3573":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:45965:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10912:9398":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9600:62483":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:6257:5390":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:3370:4578":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12699:7753":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4101:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"14:0:3552":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4127:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:6176:5871":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:5210:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5522:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11482:7538":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4470:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:50055:4992":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10887:7511":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6106:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13865:8125":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:3118:6011":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46609:3761":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:2754:5749":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8392:4623":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"9:27:5559":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:48133:5282":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:49877:4982":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:12167:4719":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:49627:3887":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46281:3890":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:3038:3809":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1497:4682":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:7511:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13172:7926":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9775:6363":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:48558:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:5207:3943":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:53500:8770":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:8298:5404":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7786:5835":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:3287:6006":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:6510:3762":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:16030:3593":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"12:0:3551":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:12006:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:7205:5895":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10028:9375":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4670:4468":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:6899:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:46:8493":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6636:5841":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:49663:3884":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12783:7765":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10106:6168":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"14:250:8437":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10812:4765":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9005:48717":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:6941:4531":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:47619:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:3580:3700":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:15987:57145":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:9973:5201":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:2218:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13685:8084":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5312:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:2941:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13746:8091":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6644:5884":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:14078:5245":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3999:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:52793:5098":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:3338:5747":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:14805:9460":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:46325:5131":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:3351:2193":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:51027:8722":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4046:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:46618:3769":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:4669:4476":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:47923:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:5580:5726":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:16028:3591":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:1441:4689":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10706:3768":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:3521:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7024:6043":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7738:5901":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:5833:5344":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"0:945:1677":{"crate_id":0,"path":["time","util","days_in_year"],"kind":"function"},"16:6605:5839":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:8203:4215":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2166:4576":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:48800:8711":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:12810:3898":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"12:2066:4580":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:46296:5128":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:32397:60196":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:51096:5082":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:7336:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12537:7722":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3410:3690":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:51048:8723":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6807:5887":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10052:9377":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:1522:4686":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11116:3768":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4501:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7804:5834":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:10529:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:49751:3888":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:51639:5064":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:22937:4544":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:23136:5048":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11519:7543":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:4922:8199":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12234:7657":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:13283:41169":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:13780:8103":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6100:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:5472:5720":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:10614:4738":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:3341:5360":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5360:5712":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13453:7995":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4401:4794":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:11113:4269":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:928:4681":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:9961:9374":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:53405:8763":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5241:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:3743:6063":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5753:5736":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3367:1649":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:12072:55511":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:12507:7717":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:11475:4530":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:6219:5873":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10312:3930":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7119:5756":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4317:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:3868:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13574:8031":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:12223:4842":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:6124:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:5651:4526":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7303:5900":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:5346:5823":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10224:9382":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:51355:8725":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:23125:2567":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6780:5886":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10543:7514":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:1736:6619":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:49248:5221":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:11176:4561":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:12982:7825":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:607:9365":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:10535:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:1744:6623":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13180:7927":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:519:6420":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11186:7526":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:1432:4270":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:50404:5244":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"12:1666:5654":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6152:5824":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:9347:4541":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13582:8032":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6887:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:16003:3569":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:50187:3857":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"}},"external_crates":{"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"num_threads","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"libc","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}