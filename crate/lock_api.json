{"root":"0:0:1629","crate_version":"0.4.7","includes_private":false,"index":{"b:1:3192-0:8:1625":{"id":"b:1:3192-0:8:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"1:3162:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3195:127","1:3196:1414"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:36:1758":{"id":"0:36:1758","crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[52,4],"end":[52,31]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3088:3009":{"id":"1:3088:3009","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3087:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:374:2000":{"id":"0:374:2000","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[603,0],"end":[606,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":["#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"GetThreadId","id":"0:265:1953","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3718:137":{"id":"1:3718:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3720:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:537:2116":{"id":"0:537:2116","crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"src/rwlock.rs","begin":[194,0],"end":[200,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:538:2118","0:539:2120"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3196:1414":{"id":"1:3196:1414","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44:1792":{"id":"0:44:1792","crate_id":0,"name":"Instant","span":{"filename":"src/mutex.rs","begin":[125,4],"end":[125,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8393:2660":{"id":"1:8393:2660","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8395:2677","1:8397:2678","1:8398:2679"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3253:211-0:5:1623":{"id":"a:1:3253:211-0:5:1623","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"1:3253:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3385:2536":{"id":"1:3385:2536","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3387:181","1:3388:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3294:2514-0:5:1623":{"id":"a:1:3294:2514-0:5:1623","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"1:3294:2514","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3506:131":{"id":"1:3506:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3508:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3509:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:42:1789":{"id":"0:42:1789","crate_id":0,"name":"RawMutexTimed","span":{"filename":"src/mutex.rs","begin":[120,0],"end":[132,1]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:43:121","0:44:1792","0:45:1794","0:46:1796"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:12:1626":{"id":"0:12:1626","crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[8,0],"end":[924,97]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:32:1747","0:39:1775","0:42:1789","0:47:162","0:103:1817","0:163:1900"],"is_stripped":true}},"1:3796:2557":{"id":"1:3796:2557","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8453:2659":{"id":"1:8453:2659","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8454:793","1:8455:2676"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9239:2898":{"id":"1:9239:2898","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:268:1966":{"id":"0:268:1966","crate_id":0,"name":"RawReentrantMutex","span":{"filename":"src/remutex.rs","begin":[67,0],"end":[72,1]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.\n\n[`RawMutex`]: trait.RawMutex.html\n[`ReentrantMutex`]: struct.ReentrantMutex.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3500:1927":{"id":"1:3500:1927","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3501:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:547:2141":{"id":"0:547:2141","crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[238,4],"end":[238,29]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:2910:124":{"id":"1:2910:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:513:1750":{"id":"0:513:1750","crate_id":0,"name":"INIT","span":{"filename":"src/rwlock.rs","begin":[43,4],"end":[43,21]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"1:3503:130":{"id":"1:3503:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3505:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3506:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7908:2924":{"id":"1:7908:2924","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7909:30262","1:7910:30263","1:7911:30260","1:7912:30258","1:7913:30264","1:7914:30261","1:7915:30259"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3150:75":{"id":"1:3150:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3152:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:1:3986-0:5:1623":{"id":"b:1:3986-0:5:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"1:3984:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3988:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3476:116":{"id":"1:3476:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3477:221","1:3478:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13028:2952":{"id":"1:13028:2952","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13030:2955","1:13031:30226","1:13032:30227","1:13033:30228","1:13034:30230","1:13035:30229","1:13036:30231"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:645:2190":{"id":"0:645:2190","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[1186,0],"end":[1189,1]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:8582:157":{"id":"1:8582:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8583:2680","1:8584:922","1:8585:2682","1:8588:2683","1:8589:495","1:8591:2684","1:8594:2685","1:8595:2686","1:8596:2687","1:8597:2688","1:8599:2689","1:8601:2690","1:8602:2691","1:8604:841","1:8607:2692","1:8614:2693","1:8616:2694","1:8619:2695","1:8620:2696","1:8621:2697","1:8623:2698","1:8625:2699","1:8628:1306","1:8629:2700","1:8630:2701","1:8634:2702","1:8637:2703","1:8638:2704","1:8639:2705","1:8641:2706","1:8642:2663","1:8644:2707","1:8647:2708","1:8649:2709","1:8659:2710","1:8674:2711","1:8676:2712","1:8680:2713","1:8689:2714","1:8692:2715","1:8694:2716","1:8697:276","1:8704:294","1:8711:2717","1:8718:2718","1:8727:2719","1:8737:1014","1:8744:2720","1:8751:2665","1:8752:2666","1:8753:2721","1:8765:2722","1:8772:2723","1:8784:2724","1:8791:2725","1:8792:2726","1:8797:2727","1:8800:2728","1:8803:2729","1:8804:2730","1:8806:2731","1:8808:415","1:8811:2732","1:8814:997","1:8817:2733","1:8820:604","1:8823:2734","1:8826:907","1:8828:826","1:8830:792","1:8832:713","1:8834:696","1:8836:2735","1:8837:2736","1:8845:2737"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3265:220-0:5:1623":{"id":"a:1:3265:220-0:5:1623","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3265:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:552:2156":{"id":"0:552:2156","crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"src/rwlock.rs","begin":[276,0],"end":[290,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:553:2158","0:554:2160"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockUpgrade","id":"0:543:2132","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockDowngrade","id":"0:528:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3701:2550":{"id":"1:3701:2550","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3632:2549","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3342:2528":{"id":"1:3342:2528","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3344:181","1:3345:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8860:2889":{"id":"1:8860:2889","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:872:2369":{"id":"0:872:2369","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[2469,0],"end":[2473,1]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:544:2134":{"id":"0:544:2134","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[221,4],"end":[221,30]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::remutex","name":"remutex","id":"0:220:1627","glob":true}},"0:760:2310":{"id":"0:760:2310","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[1862,0],"end":[1865,1]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockUpgrade","id":"0:543:2132","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3368:2533":{"id":"1:3368:2533","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3370:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3265:220":{"id":"1:3265:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3162:228":{"id":"1:3162:228","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3164:127","1:3165:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2905:183":{"id":"1:2905:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2907:604","1:2908:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:35:1755":{"id":"0:35:1755","crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:38:1768":{"id":"0:38:1768","crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3186-0:8:1625":{"id":"b:1:3186-0:8:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3159:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3188:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:541:2125":{"id":"0:541:2125","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/rwlock.rs","begin":[206,4],"end":[206,77]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2856-0:8:1625":{"id":"b:1:2856-0:8:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"1:2850:3057","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:2858:28837"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3395:2539":{"id":"1:3395:2539","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3397:181","1:3398:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3294:2514":{"id":"1:3294:2514","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3231:115":{"id":"1:3231:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3156:149":{"id":"1:3156:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3158:2669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3192-0:5:1623":{"id":"b:1:3192-0:5:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"1:3162:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3195:127","1:3196:1414"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3401:2540":{"id":"1:3401:2540","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3403:181","1:3404:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:548:2144":{"id":"0:548:2144","crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[246,4],"end":[246,41]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:492:1628":{"id":"0:492:1628","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[8,0],"end":[2604,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:512:2063","0:523:2083","0:528:2098","0:530:2103","0:537:2116","0:540:2122","0:543:2132","0:549:2147","0:552:2156","0:555:2163","0:560:2181","0:645:2190","0:695:2192","0:760:2310","0:821:2342","0:872:2369"],"is_stripped":true}},"0:517:2071":{"id":"0:517:2071","crate_id":0,"name":"unlock_shared","span":{"filename":"src/rwlock.rs","begin":[60,4],"end":[60,35]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:14204:2925":{"id":"1:14204:2925","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14205:29139","1:14206:29140","1:14207:29141","1:14208:29142","1:14209:29143","1:14210:29144","1:14211:2706"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13048:2957":{"id":"1:13048:2957","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3253:211-0:8:1625":{"id":"a:1:3253:211-0:8:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"1:3253:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:8:1625":{"id":"0:8:1625","crate_id":0,"name":"GuardNoSend","span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,32]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:9239:2898-0:8:1625","a:1:3253:211-0:8:1625","a:1:9240:2900-0:8:1625","a:1:3294:2514-0:8:1625","b:1:3186-0:8:1625","b:1:3986-0:8:1625","b:1:2856-0:8:1625","b:1:3197-0:8:1625","b:1:2853-0:8:1625","b:1:3182-0:8:1625","b:1:3192-0:8:1625","0:11"]}},"1:10272:109":{"id":"1:10272:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10273:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2855:2421":{"id":"1:2855:2421","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3489:1732":{"id":"1:3489:1732","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3490:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3476:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22766:2998":{"id":"1:22766:2998","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22767:3001","1:22768:29614","1:22769:1225","1:22770:1226","1:22771:29654","1:22772:29655","1:22773:4755","1:22774:29656","1:22775:29657","1:22776:29658","1:22777:29615","1:22778:29616","1:22779:29617","1:22780:29618","1:22781:29619","1:22782:29620","1:22783:29621"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22815:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3364:2531":{"id":"1:3364:2531","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3366:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3326:2529":{"id":"1:3326:2529","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3328:181","1:3329:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10281:2745":{"id":"1:10281:2745","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10282:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2850:3057":{"id":"1:2850:3057","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2852:28837"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:267:1957":{"id":"0:267:1957","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[54,4],"end":[54,48]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"1:24631:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3197-0:8:1625":{"id":"b:1:3197-0:8:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3200:127","1:3201:1413"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:532:1792":{"id":"0:532:1792","crate_id":0,"name":"Instant","span":{"filename":"src/rwlock.rs","begin":[172,4],"end":[172,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:512:2063":{"id":"0:512:2063","crate_id":0,"name":"RawRwLock","span":{"filename":"src/rwlock.rs","begin":[38,0],"end":[99,1]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:513:1750","0:514:1753","0:515:2066","0:516:2068","0:517:2071","0:518:2073","0:519:2075","0:520:2078","0:521:1768","0:522:2081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:32:1747":{"id":"0:32:1747","crate_id":0,"name":"RawMutex","span":{"filename":"src/mutex.rs","begin":[36,0],"end":[79,1]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:33:1750","0:34:1753","0:35:1755","0:36:1758","0:37:1766","0:38:1768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:560:2181":{"id":"0:560:2181","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[330,0],"end":[333,1]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:41:1785":{"id":"0:41:1785","crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[110,4],"end":[113,5]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8380:136":{"id":"1:8380:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8382:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:37:1766":{"id":"0:37:1766","crate_id":0,"name":"unlock","span":{"filename":"src/mutex.rs","begin":[65,4],"end":[65,28]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: #tymethod.lock\n[`try_lock`]: #tymethod.try_lock\n[`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for\n[`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:13037:2955":{"id":"1:13037:2955","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13039:2976","1:13040:922","1:13041:30647","1:13042:30648"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2858:28837":{"id":"1:2858:28837","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:531:121":{"id":"0:531:121","crate_id":0,"name":"Duration","span":{"filename":"src/rwlock.rs","begin":[169,4],"end":[169,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:10285:2747":{"id":"1:10285:2747","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10286:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10291:2749":{"id":"1:10291:2749","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22902:2942":{"id":"1:22902:2942","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22892:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10289:189":{"id":"1:10289:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10290:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:220:1627":{"id":"0:220:1627","crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[8,0],"end":[1036,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:265:1953","0:268:1966","0:306:1994","0:374:2000","0:436:2039"],"is_stripped":true}},"1:3988:1426":{"id":"1:3988:1426","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:45976:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10283:2746":{"id":"1:10283:2746","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10284:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:555:2163":{"id":"0:555:2163","crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"src/rwlock.rs","begin":[294,0],"end":[316,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:556:2165","0:557:2166","0:558:2169","0:559:2170"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockUpgrade","id":"0:543:2132","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockTimed","id":"0:530:2103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3724:2552":{"id":"1:3724:2552","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3726:29647"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2847:97":{"id":"1:2847:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2849:2421"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:5:1623":{"id":"0:5:1623","crate_id":0,"name":"GuardSend","span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,25]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:9239:2898-0:5:1623","a:1:3253:211-0:5:1623","a:1:9240:2900-0:5:1623","a:1:3265:220-0:5:1623","a:1:3294:2514-0:5:1623","b:1:3186-0:5:1623","b:1:3986-0:5:1623","b:1:2856-0:5:1623","b:1:3197-0:5:1623","b:1:2853-0:5:1623","b:1:3182-0:5:1623","b:1:3192-0:5:1623"]}},"1:22802:3169":{"id":"1:22802:3169","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22803:29614","1:22804:1225","1:22805:1226","1:22806:29615","1:22807:29616","1:22808:29617","1:22809:29618","1:22810:29619","1:22811:29620","1:22812:29621"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22815:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3166:227":{"id":"1:3166:227","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3168:127","1:3169:1413"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:40:1780":{"id":"0:40:1780","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[96,4],"end":[96,33]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2853-0:8:1625":{"id":"b:1:2853-0:8:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:2855:2421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3262:217":{"id":"1:3262:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:306:1994":{"id":"0:306:1994","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](struct.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:2941:177":{"id":"1:2941:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2942:415","1:2943:2665","1:2944:2666","1:2945:2667"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3159:135":{"id":"1:3159:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3161:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12465:3458":{"id":"1:12465:3458","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12466:2680","1:12467:28855"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:33:1750":{"id":"0:33:1750","crate_id":0,"name":"INIT","span":{"filename":"src/mutex.rs","begin":[41,4],"end":[41,21]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"0:556:2165":{"id":"0:556:2165","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/rwlock.rs","begin":[296,4],"end":[296,71]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10279:119":{"id":"1:10279:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10280:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2856-0:5:1623":{"id":"b:1:2856-0:5:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"1:2850:3057","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:2858:28837"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:9239:2898-0:5:1623":{"id":"a:1:9239:2898-0:5:1623","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"1:9239:2898","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2853-0:5:1623":{"id":"b:1:2853-0:5:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:2855:2421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:545:2136":{"id":"0:545:2136","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[224,4],"end":[224,42]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:45:1794":{"id":"0:45:1794","crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[128,4],"end":[128,60]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:42:1789","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3182-0:8:1625":{"id":"b:1:3182-0:8:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3159:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3185:2669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23427:3002":{"id":"1:23427:3002","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23428:1268","1:23429:1267","1:23430:1265","1:23431:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"1:22839:3006","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23736:2941":{"id":"1:23736:2941","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23737:3001"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23732:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3263:106":{"id":"1:3263:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:3186-0:5:1623":{"id":"b:1:3186-0:5:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3159:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3188:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:528:2098":{"id":"0:528:2098","crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"src/rwlock.rs","begin":[153,0],"end":[161,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:529:2101"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:525:2087":{"id":"0:525:2087","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/rwlock.rs","begin":[120,4],"end":[120,43]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:526:2091":{"id":"0:526:2091","crate_id":0,"name":"bump_shared","span":{"filename":"src/rwlock.rs","begin":[131,4],"end":[134,5]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3185:2669":{"id":"1:3185:2669","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3159:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3390:2537":{"id":"1:3390:2537","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3392:181","1:3393:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3336:2525":{"id":"1:3336:2525","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3338:181","1:3339:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:47:162":{"id":"0:47:162","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[142,0],"end":[145,1]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3200:127":{"id":"1:3200:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:38753:3008","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"1:3258:1806":{"id":"1:3258:1806","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3321:2524":{"id":"1:3321:2524","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3323:181","1:3324:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3348:2527":{"id":"1:3348:2527","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3349:181","1:3350:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3407:2541":{"id":"1:3407:2541","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3409:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3356:2534":{"id":"1:3356:2534","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3358:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:536:2109":{"id":"0:536:2109","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/rwlock.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10287:2748":{"id":"1:10287:2748","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10288:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10555:3047":{"id":"1:10555:3047","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10556:146","1:10557:4226","1:10558:29321"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:559:2170":{"id":"0:559:2170","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[315,4],"end":[315,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:529:2101":{"id":"0:529:2101","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[160,4],"end":[160,31]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:542:2126":{"id":"0:542:2126","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/rwlock.rs","begin":[210,4],"end":[210,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8428:120":{"id":"1:8428:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8429:2670","1:8430:2671","1:8431:2672","1:8432:2673","1:8436:2674","1:8439:2675"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:436:2039":{"id":"0:436:2039","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[901,0],"end":[905,1]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"GetThreadId","id":"0:265:1953","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:39:1775":{"id":"0:39:1775","crate_id":0,"name":"RawMutexFair","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[114,1]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:40:1780","0:41:1785"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:524:2085":{"id":"0:524:2085","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/rwlock.rs","begin":[113,4],"end":[113,40]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:266:1750":{"id":"0:266:1750","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[50,4],"end":[50,21]},"visibility":"default","docs":"Initial value.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"b:1:3182-0:5:1623":{"id":"b:1:3182-0:5:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3159:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3185:2669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2872:104":{"id":"1:2872:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2873:408","1:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3543:2555":{"id":"1:3543:2555","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3545:237","1:3546:206","1:3547:28957"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3411:2542":{"id":"1:3411:2542","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3413:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8863:2890":{"id":"1:8863:2890","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10520:146":{"id":"1:10520:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10521:652","1:10522:2213","1:10523:30678","1:10524:30679","1:10525:30680","1:10526:30681","1:10527:30682","1:10528:30683","1:10529:30684","1:10530:30685","1:10531:30686","1:10532:30687","1:10533:30688","1:10534:30689","1:10535:30690","1:10536:1530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:9240:2900-0:8:1625":{"id":"a:1:9240:2900-0:8:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"1:9240:2900","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:554:2160":{"id":"0:554:2160","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[289,4],"end":[289,45]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:530:2103":{"id":"0:530:2103","crate_id":0,"name":"RawRwLockTimed","span":{"filename":"src/rwlock.rs","begin":[167,0],"end":[185,1]},"visibility":"public","docs":"Additional methods for RwLocks which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:531:121","0:532:1792","0:533:2105","0:534:2106","0:535:2108","0:536:2109"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:522:2081":{"id":"0:522:2081","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[89,4],"end":[98,5]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10222:2740":{"id":"1:10222:2740","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10223:1530","1:10224:29704","1:10226:29705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8867:2922":{"id":"1:8867:2922","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7908:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3195:127":{"id":"1:3195:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"0:163:1900":{"id":"0:163:1900","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[794,0],"end":[798,1]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:23051:28089":{"id":"1:23051:28089","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23052:29529","1:23053:29530","1:23054:29531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23044:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:551:2153":{"id":"0:551:2153","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/rwlock.rs","begin":[268,4],"end":[271,5]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:515:2066":{"id":"0:515:2066","crate_id":0,"name":"lock_shared","span":{"filename":"src/rwlock.rs","begin":[50,4],"end":[50,26]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3415:2543":{"id":"1:3415:2543","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3417:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:523:2083":{"id":"0:523:2083","crate_id":0,"name":"RawRwLockFair","span":{"filename":"src/rwlock.rs","begin":[107,0],"end":[149,1]},"visibility":"public","docs":"Additional methods for RwLocks which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:524:2085","0:525:2087","0:526:2091","0:527:2095"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3352:2530":{"id":"1:3352:2530","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3354:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3201:1413":{"id":"1:3201:1413","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3261:218":{"id":"1:3261:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:821:2342":{"id":"0:821:2342","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[2334,0],"end":[2338,1]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:9240:2900":{"id":"1:9240:2900","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:527:2095":{"id":"0:527:2095","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/rwlock.rs","begin":[145,4],"end":[148,5]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:516:2068":{"id":"0:516:2068","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/rwlock.rs","begin":[53,4],"end":[53,38]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4767:2902":{"id":"1:4767:2902","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4768:2680","1:4769:29763","1:4770:2683"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3253:211":{"id":"1:3253:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:535:2108":{"id":"0:535:2108","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/rwlock.rs","begin":[181,4],"end":[181,70]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,0],"end":[104,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3265:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3565:2547":{"id":"1:3565:2547","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3567:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3561:2546","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:9239:2898-0:8:1625":{"id":"a:1:9239:2898-0:8:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"1:9239:2898","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:22839:3006":{"id":"1:22839:3006","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22840:3001","1:22841:1245","1:22842:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:546:2139":{"id":"0:546:2139","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/rwlock.rs","begin":[231,4],"end":[231,39]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3759:2505":{"id":"1:3759:2505","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3424:2545":{"id":"1:3424:2545","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3426:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3360:2532":{"id":"1:3360:2532","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3362:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8347:2949":{"id":"1:8347:2949","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8349:2731"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:514:1753":{"id":"0:514:1753","crate_id":0,"name":"GuardMarker","span":{"filename":"src/rwlock.rs","begin":[47,4],"end":[47,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3373:2538":{"id":"1:3373:2538","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3374:181","1:3375:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13746:150":{"id":"1:13746:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13747:181","1:13748:150","1:13749:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3331:2526":{"id":"1:3331:2526","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3333:181","1:3334:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:543:2132":{"id":"0:543:2132","crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"src/rwlock.rs","begin":[219,0],"end":[247,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:544:2134","0:545:2136","0:546:2139","0:547:2141","0:548:2144"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:3986-0:8:1625":{"id":"b:1:3986-0:8:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"1:3984:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3988:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:540:2122":{"id":"0:540:2122","crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"src/rwlock.rs","begin":[203,0],"end":[211,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:541:2125","0:542:2126"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockRecursive","id":"0:537:2116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockTimed","id":"0:530:2103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:538:2118":{"id":"0:538:2118","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[196,4],"end":[196,36]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,0],"end":[107,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::mutex","name":"mutex","id":"0:12:1626","glob":true}},"0:43:121":{"id":"0:43:121","crate_id":0,"name":"Duration","span":{"filename":"src/mutex.rs","begin":[122,4],"end":[122,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:553:2158":{"id":"0:553:2158","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/rwlock.rs","begin":[282,4],"end":[282,42]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:13043:2956":{"id":"1:13043:2956","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13045:2670","1:13046:29592","1:13047:29593"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13037:2955","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3153:74":{"id":"1:3153:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3155:2668"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:550:2149":{"id":"0:550:2149","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/rwlock.rs","begin":[257,4],"end":[257,44]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:533:2105":{"id":"0:533:2105","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/rwlock.rs","begin":[175,4],"end":[175,67]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:34:1753":{"id":"0:34:1753","crate_id":0,"name":"GuardMarker","span":{"filename":"src/mutex.rs","begin":[45,4],"end":[45,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:23099:3116":{"id":"1:23099:3116","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23736:2941","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23090:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:549:2147":{"id":"0:549:2147","crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"src/rwlock.rs","begin":[251,0],"end":[272,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:550:2149","0:551:2153"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockUpgrade","id":"0:543:2132","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockFair","id":"0:523:2083","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3984:68":{"id":"1:3984:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3985:1426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"a:1:9240:2900-0:5:1623":{"id":"a:1:9240:2900-0:5:1623","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"1:9240:2900","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:10510:142":{"id":"1:10510:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10511:715","1:10513:4555"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3294:2514-0:8:1625":{"id":"a:1:3294:2514-0:8:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"1:3294:2514","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2951:184":{"id":"1:2951:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2953:997","1:2954:826","1:2955:792","1:2956:713","1:2957:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:558:2169":{"id":"0:558:2169","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[307,4],"end":[307,70]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:0:1629":{"id":"0:0:1629","crate_id":0,"name":"lock_api","span":{"filename":"src/lib.rs","begin":[8,0],"end":[113,25]},"visibility":"public","docs":"This library provides type-safe and fully-featured `Mutex` and `RwLock`\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for RwLocks, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{},"attrs":["#![no_std]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5:1623","0:8:1625","0:219","0:491","0:928"],"is_stripped":false}},"0:518:2073":{"id":"0:518:2073","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[63,4],"end":[63,29]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:103:1817":{"id":"0:103:1817","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":["#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:10293:2750":{"id":"1:10293:2750","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10294:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:521:1768":{"id":"0:521:1768","crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[77,4],"end":[86,5]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:265:1953":{"id":"0:265:1953","crate_id":0,"name":"GetThreadId","span":{"filename":"src/remutex.rs","begin":[45,0],"end":[55,1]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:266:1750","0:267:1957"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:557:2166":{"id":"0:557:2166","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/rwlock.rs","begin":[299,4],"end":[299,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:28:2484":{"id":"4:28:2484","crate_id":4,"name":"Strategy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:29:31954"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3561:2546":{"id":"1:3561:2546","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3563:181","1:3564:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:928":{"id":"0:928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::rwlock","name":"rwlock","id":"0:492:1628","glob":true}},"1:12957:2581":{"id":"1:12957:2581","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12958:126","1:12959:29475"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22713:3005":{"id":"1:22713:3005","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22714:3001","1:22715:29614","1:22716:30157","1:22717:30158","1:22718:30159","1:22719:29654","1:22720:30160","1:22721:30161","1:22722:30162","1:22723:30163","1:22724:30164","1:22725:30165","1:22726:30166","1:22727:30167","1:22728:4581","1:22729:30168","1:22730:29658","1:22731:30169","1:22732:29054","1:22733:29053","1:22734:29055","1:22735:29615","1:22736:29616","1:22737:29617","1:22738:29618"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22815:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13731:138":{"id":"1:13731:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13732:181","1:13733:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3419:2544":{"id":"1:3419:2544","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3421:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23432:28108":{"id":"1:23432:28108","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23433:29053","1:23434:29054","1:23435:29055"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"1:23427:3002","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3713:224":{"id":"1:3713:224","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3714:181","1:3715:2552","1:3716:686","1:3717:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3718:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3188:681":{"id":"1:3188:681","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:519:2075":{"id":"0:519:2075","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[66,4],"end":[66,41]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:520:2078":{"id":"0:520:2078","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/rwlock.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:8384:151":{"id":"1:8384:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8385:2680","1:8386:2681","1:8387:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8343:2947":{"id":"1:8343:2947","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8345:2730"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:46:1796":{"id":"0:46:1796","crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[131,4],"end":[131,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:42:1789","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:695:2192":{"id":"0:695:2192","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[1474,0],"end":[1477,1]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:539:2120":{"id":"0:539:2120","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[199,4],"end":[199,48]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3380:2535":{"id":"1:3380:2535","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3382:181","1:3383:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10914:214":{"id":"1:10914:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10916:181","1:10917:1834","1:10918:1833","1:10919:29240","1:10920:29241","1:10921:753","1:10922:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10905:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3632:2549":{"id":"1:3632:2549","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3634:30629","1:3635:30630","1:3636:30631"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:1:3197-0:5:1623":{"id":"b:1:3197-0:5:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3200:127","1:3201:1413"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:534:2106":{"id":"0:534:2106","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/rwlock.rs","begin":[178,4],"end":[178,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2103","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3509:132":{"id":"1:3509:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3511:181","1:3512:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:53501:4056":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:50366:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:13028:2952":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:51390:3161":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:12957:2581":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2276:3040":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:23090:2945":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:11377:3260":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:24733:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:48203:2746":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9240:2900":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:50307:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:48787:3675":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:22543:30526":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:49810:2958":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:45805:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:57816:2436":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:9748:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:49706:3302":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:2941:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:49425:3257":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11298:3257":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:50147:3312":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:4869:2507":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8428:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:57821:2439":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:3360:2532":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:45867:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:23638:30483":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:32296:2790":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8160:2490":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:57826:2444":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:53478:4055":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:56296:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:47997:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:46548:3079":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:2062:3538":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:3336:2525":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:48224:2748":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:47507:2877":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:13781:30577":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:3373:2538":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:46535:3078":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:50352:3326":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:49724:3304":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:50131:3318":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:48461:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:50173:3373":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:10291:2749":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11921:3277":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:47567:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:10914:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:4767:2902":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:48528:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:11391:3261":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:3506:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:24014:3655":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8343:2947":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:24835:2586":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:51179:3152":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:48564:2744":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:49365:3178":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:47498:2681":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:53425:3744":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:57822:2440":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:4712:2993":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:23051:28089":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:56335:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:38753:3008":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:52884:3131":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:14:2213":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:57811:2432":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:48987:3463":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3265:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:4362:2681":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:2847:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:46526:3076":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:46496:3541":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:23975:3934":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:48748:3674":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3476:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:46244:3225":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:48210:2745":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8384:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:49856:2965":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2910:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:3156:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3401:2540":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11263:3256":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:22902:2942":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:6418:3086":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:12810:3254":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:53410:3741":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:46398:3230":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:12699:3287":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:57831:2449":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:51870:4007":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:51323:3117":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:47703:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:3713:224":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:48580:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:51814:4005":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:22564:30528":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:32310:29130":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:51069:3139":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:57812:2433":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:52077:3154":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:45729:2558":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:23833:3336":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:3411:2542":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:57836:2454":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:53540:4057":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:49629:3296":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8380:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:57644:4065":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:3326:2529":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3253:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:24147:5387":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:46952:3985":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:49297:3272":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:48740:3051":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3796:2557":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8393:2660":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3259:2504":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:48756:3050":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:5611:779":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:5095:2499":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:8867:2922":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:51689:3121":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:46011:2499":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:0:1620":{"crate_id":4,"path":["scopeguard"],"kind":"module"},"1:50299:3605":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:10560:3049":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:22815:2945":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:3390:2537":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:49145:3259":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:49214:3266":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:57809:2430":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:3263:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:50115:3310":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:57810:2431":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:53286:3158":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:46747:3090":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11419:3263":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:53137:3155":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"0:0:1629":{"crate_id":0,"path":["lock_api"],"kind":"module"},"1:49306:3273":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:13037:2955":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:47661:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:23732:2945":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:24461:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:57814:2434":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:50135:3316":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:3088:3009":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:32302:2791":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:45976:3024":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:50003:2971":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:49316:3274":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:38816:2515":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:51766:4004":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10222:2740":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:4050:3029":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:48795:3676":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:7908:2924":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:53353:3742":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:48039:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:51618:3133":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:46675:3095":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:53325:3123":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:46229:3303":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:12021:3547":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:46576:3082":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:24184:2587":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10221:205":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:3153:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:46506:3976":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:47871:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46737:3101":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:3380:2535":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:46311:3304":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10232:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:32261:1733":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:23736:2941":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:57623:4064":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:24091:3938":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:57824:2442":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:49681:3299":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:51261:3128":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:2753:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:5018:2492":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3348:2527":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:47913:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:51437:3149":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10281:2745":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:48081:2592":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3159:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:48777:3987":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:49383:3283":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11336:3258":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:25205:2582":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:22713:3005":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:46665:3094":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:52108:3157":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:24631:1946":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:10520:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:23101:3001":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:46431:3361":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2381:2506":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:74:2485":{"crate_id":4,"path":["scopeguard","Always"],"kind":"enum"},"1:49393:3284":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:22955:3001":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:23997:3205":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:46586:3083":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:47473:2680":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:57825:2443":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:48506:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:46647:3092":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:23044:2945":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10510:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:13043:2956":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:49968:2968":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:53373:3740":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:49284:3271":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:24665:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:49475:3289":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:46963:3927":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:45969:2551":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:3231:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:57829:2447":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:51587:3129":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9239:2898":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:22545:30529":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:49271:3270":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:24068:3201":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:50186:3374":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:57830:2448":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:10287:2748":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:24597:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:50975:3999":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4905:2508":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:46372:3443":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:52030:3150":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:51303:4002":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:53344:3739":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:24563:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:12465:3458":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:51666:3118":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:37572:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:46627:3091":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:56348:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:47550:2655":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:49931:2967":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:5192:2502":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:57828:2446":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:5085:2498":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:53463:4054":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:14094:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:23904:3339":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:49671:3298":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:24801:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:46056:3184":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:11186:3254":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:12775:3294":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:46934:3981":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3632:2549":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:46618:3085":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"0:5:1623":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"1:9899:660":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:53074:3135":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"1:47559:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:46288:3445":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:49715:3303":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:22566:30524":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:5169:1729":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:53384:3743":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:45936:2548":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:51284:3132":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:12736:3290":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:51044:3147":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:51540:3141":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:3742:2893":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:45821:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:49690:3300":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:24030:3668":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:49787:2954":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:46636:3088":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:24212:2588":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10289:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:46943:3983":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:13822:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3415:2543":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:47636:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:24495:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:52348:3137":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:49839:2964":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:52995:3151":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:53200:3120":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:51468:3153":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:12759:3291":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:53448:3753":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:51230:3140":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:3701:2550":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:47627:2681":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:51342:4003":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:47482:2887":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:3385:2536":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:51198:4001":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:28016:2583":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:49511:3260":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:57827:2445":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:22892:2945":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:48217:2747":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"0:8:1625":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"1:3150:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:24529:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:22896:2939":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:33:2486":{"crate_id":4,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"1:46706:3098":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3271:1730":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:49457:3288":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:4949:1944":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:5023:2493":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:28:2484":{"crate_id":4,"path":["scopeguard","Strategy"],"kind":"trait"},"1:52534:3143":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11094:2887":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:50016:3994":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:3281:2513":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:3294:2514":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:10427:3929":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:6491:3087":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:46418:3360":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:47490:2888":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:3162:228":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:3342:2528":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:49904:2966":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:51714:3122":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:24055:2584":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:46716:3099":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:22766:2998":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:13243:3930":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:49326:3275":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:50343:3325":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:46358:3302":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:3724:2552":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:52317:3134":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3759:2505":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:3407:2541":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:10285:2747":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:49196:3264":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:45997:3055":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:5149:2501":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:23432:28108":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:4654:3538":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:47955:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:13248:13938":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:3262:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:57817:2437":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:57815:2435":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:24199:2585":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:2253:3035":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:23427:3002":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:50119:3313":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:49377:3282":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:49234:3268":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:48765:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:47619:2888":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:47787:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:50289:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:48991:3462":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:46342:3441":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:50139:3317":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3331:2526":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3718:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:3395:2539":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:49350:3364":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:46365:3442":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:4736:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:55912:2935":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:24083:3937":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:51021:3159":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:48494:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:24767:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2850:3057":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:50396:2928":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:13731:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:46684:3096":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:3503:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:53247:3138":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:5014:2491":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:3087:2945":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11143:3253":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:22526:30478":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8860:2889":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:9361:2952":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:5140:2500":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:50996:4000":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:49825:2961":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:13927:29210":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:11225:3255":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:6614:29806":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:57823:2441":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:49557:3292":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:32462:29129":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:46595:3084":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:49575:3293":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:45913:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:52741:3163":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:14033:2904":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:47440:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:46566:3081":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:50143:3311":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:46727:3100":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:52191:3142":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3356:2534":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:11405:3262":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:23099:3116":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:46656:3093":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:3368:2533":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5585:3175":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:53399:3752":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:6873:3089":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:7838:3167":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3321:2524":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:10283:2746":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:49982:2969":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:23626:2940":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:52383:3119":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:9241:2901":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:51951:3162":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3419:2544":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3364:2531":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:51156:3148":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:7736:3077":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:52270:3130":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:49407:3253":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:13857:3933":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:24699:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:45757:2556":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:2905:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:46336:3303":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:56270:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:50127:3314":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:57818:2438":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:2492:2903":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:5564:11075":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:10905:2945":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:50151:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:10555:3047":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:13746:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3509:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3561:2546":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:24109:5385":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:24131:5377":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:8453:2659":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:47829:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:11118:2888":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:22802:3169":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:46696:3097":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:3730:2554":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:48443:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2171:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:3984:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:8144:31948":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:46604:3977":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:49529:3261":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:4724:2994":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:57833:2451":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:46918:3926":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:14204:2925":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:46004:3056":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:7650:2689":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:3166:227":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3500:1927":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:46413:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:49661:3297":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:14043:3327":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:46557:3080":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:53364:3751":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:3489:1732":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2178:2788":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:46273:3228":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:49205:3265":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:50123:3315":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:46319:3440":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:2951:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:37596:2894":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:46235:3962":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:46257:3226":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:3352:2530":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8347:2949":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:48467:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:57832:2450":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:8087:3660":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:57834:2452":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:24177:5386":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:47541:2878":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:13094:2960":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:49699:3301":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:56309:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10293:2750":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:1944:1731":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:22511:30478":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:49245:3269":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8863:2890":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:46925:3980":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:22498:2894":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:51092:3127":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9743:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:51846:4006":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2872:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:9954:3239":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10279:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:9959:3240":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2267:3039":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:46448:3362":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:3261:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:45846:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:32121:2575":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:45890:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:46379:3444":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:3565:2547":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:46298:3446":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8582:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:51641:3136":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:51125:3160":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:48476:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:22839:3006":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11888:3276":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:57835:2453":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:50384:2930":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:13048:2957":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:49993:2970":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:47611:2887":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:49611:3295":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:51491:3156":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:3258:1806":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"3:0:2481":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:47745:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:32362:29095":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:3424:2545":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:300:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3543:2555":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10272:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:56283:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49224:3267":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:56322:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}