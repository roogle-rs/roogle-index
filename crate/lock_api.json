{"root":"0:0:1943","crate_version":"0.4.11","includes_private":false,"index":{"0:603:641":{"id":"0:603:641","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[1369,4],"end":[1374,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436:2079":{"id":"0:436:2079","crate_id":0,"name":"GuardMarker","span":{"filename":"src/rwlock.rs","begin":[47,4],"end":[47,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1019,0],"end":[1029,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:412:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2675-0:255:2327":{"id":"b:1:2675-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2390:10444":{"id":"1:2390:10444","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:521:2599":{"id":"0:521:2599","crate_id":0,"name":"force_unlock_read_fair","span":{"filename":"src/rwlock.rs","begin":[700,4],"end":[702,5]},"visibility":"public","docs":"Forcibly unlocks a read lock using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2385-0:849:2229":{"id":"b:1:2385-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3496-0:865:2373":{"id":"b:1:3496-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:578:2233":{"id":"0:578:2233","crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[1269,4],"end":[1284,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. Returns the original guard if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31816:2882-0:841:187":{"id":"a:1:31816:2882-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:688:2477":{"id":"0:688:2477","crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[1940,4],"end":[1951,5]},"visibility":"public","docs":"Atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1009,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:405:248","0:406:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:617":{"id":"0:617","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1520,0],"end":[1592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:621:1942","0:622:994","0:625:2233","0:628:2237"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2670-0:881:235":{"id":"b:1:2670-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:746:757":{"id":"0:746:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2240,4],"end":[2242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:715:2506":{"id":"0:715:2506","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[2127,4],"end":[2142,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434:2399":{"id":"0:434:2399","crate_id":0,"name":"RawRwLock","span":{"filename":"src/rwlock.rs","begin":[38,0],"end":[99,1]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:435:2076","0:436:2079","0:437:2402","0:438:2404","0:439:2407","0:440:2409","0:441:2411","0:442:2414","0:443:2094","0:444:2417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[845,0],"end":[895,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:157:994","0:160:2233"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:507:2264":{"id":"0:507:2264","crate_id":0,"name":"read","span":{"filename":"src/rwlock.rs","begin":[458,4],"end":[462,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nNote that attempts to recursively acquire a read lock on a `RwLock` when\nthe current thread already holds one may result in a deadlock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[75,0],"end":[75,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:441:2411":{"id":"0:441:2411","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[66,4],"end":[66,41]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:31759:237-0:841:187":{"id":"a:1:31759:237-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2670-0:8:1939":{"id":"b:1:2670-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:819:603":{"id":"0:819:603","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2841,4],"end":[2843,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2143":{"id":"0:58:2143","crate_id":0,"name":"make_guard_unchecked","span":{"filename":"src/mutex.rs","begin":[201,4],"end":[206,5]},"visibility":"public","docs":"Creates a new `MutexGuard` without checking if the mutex is locked.\n\n# Safety\n\nThis method must only be called if the thread logically holds the lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[760,0],"end":[768,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:358:248","0:359:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1377,0],"end":[1381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:608:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:558:786":{"id":"0:558:786","crate_id":0,"name":"from","span":{"filename":"src/rwlock.rs","begin":[1194,4],"end":[1196,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[655,0],"end":[660,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3108:2058","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:129:605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41394:5051-0:881:235":{"id":"a:1:41394:5051-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:114:2106":{"id":"0:114:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[606,4],"end":[612,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1594,0],"end":[1613,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:450:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:635:2437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:365:641":{"id":"0:365:641","crate_id":0,"name":"drop","span":{"filename":"src/remutex.rs","begin":[774,4],"end":[779,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41395:5050-0:873:234":{"id":"a:1:41395:5050-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:242:2315":{"id":"0:242:2315","crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"src/remutex.rs","begin":[148,4],"end":[151,5]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:841:187":{"id":"0:841:187","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[500,0],"end":[503,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:95","0:110","a:1:41394:5051-0:841:187","a:1:31759:237-0:841:187","a:1:41395:5050-0:841:187","a:1:31816:2882-0:841:187","b:1:2660-0:841:187","b:1:2388-0:841:187","b:1:3496-0:841:187","b:1:2670-0:841:187","b:1:2664-0:841:187","b:1:2385-0:841:187","b:1:2675-0:841:187","0:135","0:91","0:125","0:119","0:140","0:130"]}}},"b:1:3496-0:908:2713":{"id":"b:1:3496-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:474:2492":{"id":"0:474:2492","crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"src/rwlock.rs","begin":[276,0],"end":[290,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:475:2494","0:476:2496"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:450:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:20:2073":{"id":"0:20:2073","crate_id":0,"name":"RawMutex","span":{"filename":"src/mutex.rs","begin":[36,0],"end":[79,1]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:21:2076","0:22:2079","0:23:2081","0:24:2084","0:25:2092","0:26:2094"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"b:1:2664-0:217:2299":{"id":"b:1:2664-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:467:2472":{"id":"0:467:2472","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[224,4],"end":[224,42]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:253:2119":{"id":"0:253:2119","crate_id":0,"name":"try_lock_for","span":{"filename":"src/remutex.rs","begin":[203,4],"end":[205,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2115","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2388-0:865:2373":{"id":"b:1:2388-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2670-0:908:2713":{"id":"b:1:2670-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:830":{"id":"0:830","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2863,0],"end":[2869,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:834:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:286:2084":{"id":"0:286:2084","crate_id":0,"name":"try_lock","span":{"filename":"src/remutex.rs","begin":[333,4],"end":[340,5]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:841:187":{"id":"b:1:2660-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:770":{"id":"0:770","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2699,0],"end":[2705,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:774:248","0:775:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:479:2502":{"id":"0:479:2502","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/rwlock.rs","begin":[299,4],"end":[299,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:522:2601":{"id":"0:522:2601","crate_id":0,"name":"force_unlock_write_fair","span":{"filename":"src/rwlock.rs","begin":[716,4],"end":[718,5]},"visibility":"public","docs":"Forcibly unlocks a write lock using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:835":{"id":"0:835","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2871,0],"end":[2877,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:839:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2660-0:865:2373":{"id":"b:1:2660-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2660-0:908:2713":{"id":"b:1:2660-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[928,0],"end":[933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3108:2058","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:178:605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2385-0:482:233":{"id":"b:1:2385-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3496-0:889:2651":{"id":"b:1:3496-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:453:132":{"id":"0:453:132","crate_id":0,"name":"Duration","span":{"filename":"src/rwlock.rs","begin":[169,4],"end":[169,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"a:1:31816:2882-0:35:186":{"id":"a:1:31816:2882-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:292:2178":{"id":"0:292:2178","crate_id":0,"name":"data_ptr","span":{"filename":"src/remutex.rs","begin":[406,4],"end":[408,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example\nwhen dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has been discarded using\n`mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348:2106":{"id":"0:348:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[719,4],"end":[725,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:2134":{"id":"0:274:2134","crate_id":0,"name":"into_inner","span":{"filename":"src/remutex.rs","begin":[266,4],"end":[268,5]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:994":{"id":"0:334:994","crate_id":0,"name":"map","span":{"filename":"src/remutex.rs","begin":[641,4],"end":[653,5]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:2417":{"id":"0:513:2417","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[530,4],"end":[532,5]},"visibility":"public","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:873:234":{"id":"0:873:234","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[1223,0],"end":[1226,1]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:570","0:584","a:1:41394:5051-0:873:234","a:1:31759:237-0:873:234","a:1:41395:5050-0:873:234","a:1:31816:2882-0:873:234","b:1:2660-0:873:234","b:1:2388-0:873:234","b:1:3496-0:873:234","b:1:2670-0:873:234","b:1:2664-0:873:234","b:1:2385-0:873:234","b:1:2675-0:873:234","0:567","0:609","0:604","0:593","0:599"]}}},"0:25:2092":{"id":"0:25:2092","crate_id":0,"name":"unlock","span":{"filename":"src/mutex.rs","begin":[65,4],"end":[65,28]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: #tymethod.lock\n[`try_lock`]: #tymethod.try_lock\n[`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for\n[`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:78:60":{"id":"0:78:60","crate_id":0,"name":"default","span":{"filename":"src/mutex.rs","begin":[432,4],"end":[434,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[836,0],"end":[839,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2667-0:255:2327":{"id":"b:1:2667-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2669:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[935,0],"end":[943,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:183:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:451:2437":{"id":"0:451:2437","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[160,4],"end":[160,31]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:589:2255":{"id":"0:589:2255","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[1333,4],"end":[1343,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2111":{"id":"0:29:2111","crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[110,4],"end":[113,5]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:412:641":{"id":"0:412:641","crate_id":0,"name":"drop","span":{"filename":"src/remutex.rs","begin":[1023,4],"end":[1028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:799":{"id":"0:799","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2763,0],"end":[2813,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:803:994","0:806:2233"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31816:2882-0:217:2299":{"id":"a:1:31816:2882-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:49:1109":{"id":"0:49:1109","crate_id":0,"name":"new","span":{"filename":"src/mutex.rs","begin":[154,4],"end":[159,5]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534:2629":{"id":"0:534:2629","crate_id":0,"name":"try_read_recursive","span":{"filename":"src/rwlock.rs","begin":[893,4],"end":[900,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis method is guaranteed to succeed if another read lock is held at the\ntime of the call. See the documentation for `read_recursive` for details.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:482:233":{"id":"b:1:2660-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41395:5050-0:35:186":{"id":"a:1:41395:5050-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:60:2084":{"id":"0:60:2084","crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[232,4],"end":[239,5]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:543:2650":{"id":"0:543:2650","crate_id":0,"name":"make_upgradable_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[1021,4],"end":[1026,5]},"visibility":"public","docs":"Creates a new `RwLockUpgradableReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds an upgradable read lock.\n\nThis function does not increment the read count of the lock. Calling this function when a\nguard has already been produced is undefined behaviour unless the guard was forgotten\nwith `mem::forget`.`","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:742":{"id":"0:742","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2237,0],"end":[2243,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:746:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2385-0:908:2713":{"id":"b:1:2385-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:829:641":{"id":"0:829:641","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2855,4],"end":[2860,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:446:2421":{"id":"0:446:2421","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/rwlock.rs","begin":[113,4],"end":[113,40]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:399:2106":{"id":"0:399:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[1000,4],"end":[1006,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41395:5050-0:889:2651":{"id":"a:1:41395:5050-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:103:2233":{"id":"0:103:2233","crate_id":0,"name":"try_map","span":{"filename":"src/mutex.rs","begin":[546,4],"end":[561,5]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425-0:195:1941":{"id":"0:425-0:195:1941","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"atomic_usize\")]"],"deprecation":null,"inner":{"import":{"source":"crate::remutex","name":"remutex","id":"0:195:1941","glob":true}}},"b:1:2385-0:865:2373":{"id":"b:1:2385-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:736:641":{"id":"0:736:641","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2221,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:881:235":{"id":"0:881:235","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[1513,0],"end":[1516,1]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:617","0:631","0:636","0:641","a:1:41394:5051-0:881:235","a:1:31759:237-0:881:235","a:1:41395:5050-0:881:235","a:1:31816:2882-0:881:235","b:1:2660-0:881:235","b:1:2388-0:881:235","b:1:3496-0:881:235","b:1:2670-0:881:235","b:1:2664-0:881:235","b:1:2385-0:881:235","b:1:2675-0:881:235","0:666","0:650","0:656","0:671","0:614","0:661"]}}},"b:1:2670-0:482:233":{"id":"b:1:2670-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:303:2121":{"id":"0:303:2121","crate_id":0,"name":"try_lock_until","span":{"filename":"src/remutex.rs","begin":[495,4],"end":[502,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2115","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584":{"id":"0:584","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1304,0],"end":[1357,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:588:2106","0:589:2255","0:592:2111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3496-0:8:1939":{"id":"b:1:3496-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:2168":{"id":"0:63:2168","crate_id":0,"name":"force_unlock","span":{"filename":"src/mutex.rs","begin":[268,4],"end":[270,5]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:825":{"id":"0:825","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2853,0],"end":[2861,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:829:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41394:5051-0:873:234":{"id":"a:1:41394:5051-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:574:1942":{"id":"0:574:1942","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1232,4],"end":[1234,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597:248":{"id":"0:597:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[1360,4],"end":[1360,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2664-0:849:2229":{"id":"b:1:2664-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:238:2084":{"id":"0:238:2084","crate_id":0,"name":"try_lock","span":{"filename":"src/remutex.rs","begin":[120,4],"end":[122,5]},"visibility":"public","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2673:138":{"id":"1:2673:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:795":{"id":"0:795","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2758,0],"end":[2761,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:434:2399","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2664-0:8:1939":{"id":"b:1:2664-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41395:5050-0:217:2299":{"id":"a:1:41395:5050-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:31816:2882-0:901:2684":{"id":"a:1:31816:2882-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:437:2402":{"id":"0:437:2402","crate_id":0,"name":"lock_shared","span":{"filename":"src/rwlock.rs","begin":[50,4],"end":[50,26]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:371:757":{"id":"0:371:757","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[785,4],"end":[787,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[687,0],"end":[719,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:521:2599","0:522:2601"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:549:2669":{"id":"0:549:2669","crate_id":0,"name":"try_upgradable_read_for","span":{"filename":"src/rwlock.rs","begin":[1117,4],"end":[1127,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:8:1939":{"id":"b:1:2660-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2674:1692":{"id":"1:2674:1692","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473:2489":{"id":"0:473:2489","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/rwlock.rs","begin":[268,4],"end":[271,5]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41394:5051-0:35:186":{"id":"a:1:41394:5051-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41395:5050-0:856:2334":{"id":"a:1:41395:5050-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:413":{"id":"0:413","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1031,0],"end":[1037,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:418:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[626,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:333:1941","0:334:994","0:337:2233","0:340:2237"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:684:1942":{"id":"0:684:1942","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1917,4],"end":[1919,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[74,0],"end":[74,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2675-0:8:1939":{"id":"b:1:2675-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:622:994":{"id":"0:622:994","crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[1535,4],"end":[1547,5]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2076":{"id":"0:21:2076","crate_id":0,"name":"INIT","span":{"filename":"src/mutex.rs","begin":[41,4],"end":[41,21]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"0:460:2454":{"id":"0:460:2454","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[196,4],"end":[196,36]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:167:2106":{"id":"0:167:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[911,4],"end":[917,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:2094":{"id":"0:288:2094","crate_id":0,"name":"is_locked","span":{"filename":"src/remutex.rs","begin":[353,4],"end":[355,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31816:2882-0:873:234":{"id":"a:1:31816:2882-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41394:5051-0:482:233":{"id":"a:1:41394:5051-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:512:2094":{"id":"0:512:2094","crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[524,4],"end":[526,5]},"visibility":"public","docs":"Checks whether this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2388-0:908:2713":{"id":"b:1:2388-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:665:641":{"id":"0:665:641","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[1708,4],"end":[1713,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1359,0],"end":[1365,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:597:248","0:598:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[505,0],"end":[505,96]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2388-0:889:2651":{"id":"b:1:2388-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:824:605":{"id":"0:824:605","crate_id":0,"name":"deref_mut","span":{"filename":"src/rwlock.rs","begin":[2848,4],"end":[2850,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1192,0],"end":[1197,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:558:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3496-0:255:2327":{"id":"b:1:3496-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[77,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:233:2076","0:236:2081","0:238:2084","0:240:2092","0:241:2094","0:242:2315"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2675-0:482:233":{"id":"b:1:2675-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41394:5051-0:889:2651":{"id":"a:1:41394:5051-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:889:2651":{"id":"0:889:2651","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[1905,0],"end":[1908,1]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:680","0:690","0:699","0:710","0:716","a:1:41394:5051-0:889:2651","a:1:31759:237-0:889:2651","a:1:41395:5050-0:889:2651","a:1:31816:2882-0:889:2651","b:1:2660-0:889:2651","b:1:2388-0:889:2651","b:1:3496-0:889:2651","b:1:2670-0:889:2651","b:1:2664-0:889:2651","b:1:2385-0:889:2651","b:1:2675-0:889:2651","0:737","0:676","0:742","0:726","0:732"]}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[840,0],"end":[843,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:20:2073","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[672,0],"end":[676,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:139:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2660-0:217:2299":{"id":"b:1:2660-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[647,0],"end":[653,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:123:248","0:124:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:352:2111":{"id":"0:352:2111","crate_id":0,"name":"bump","span":{"filename":"src/remutex.rs","begin":[752,4],"end":[757,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[621,0],"end":[624,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:609":{"id":"0:609","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1383,0],"end":[1389,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:613:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2664-0:841:187":{"id":"b:1:2664-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2664-0:255:2327":{"id":"b:1:2664-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:424:757":{"id":"0:424:757","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[1042,4],"end":[1044,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:248":{"id":"0:172:248","crate_id":0,"name":"Target","span":{"filename":"src/mutex.rs","begin":[921,4],"end":[921,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:840-0:426:1942":{"id":"0:840-0:426:1942","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,0],"end":[116,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::rwlock","name":"rwlock","id":"0:426:1942","glob":true}}},"0:814":{"id":"0:814","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2838,0],"end":[2844,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:818:248","0:819:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1518,0],"end":[1518,89]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2388-0:35:186":{"id":"b:1:2388-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:302:2119":{"id":"0:302:2119","crate_id":0,"name":"try_lock_for","span":{"filename":"src/remutex.rs","begin":[480,4],"end":[487,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2115","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523":{"id":"0:523","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[721,0],"end":[857,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:452:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:526:2607","0:527:2608","0:528:2611","0:529:2612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:635:2437":{"id":"0:635:2437","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[1601,4],"end":[1612,5]},"visibility":"public","docs":"Atomically downgrades a write lock into a read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:388:994":{"id":"0:388:994","crate_id":0,"name":"map","span":{"filename":"src/remutex.rs","begin":[939,4],"end":[951,5]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2119":{"id":"0:33:2119","crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[128,4],"end":[128,60]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:30:2115","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2385-0:35:186":{"id":"b:1:2385-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:526:2607":{"id":"0:526:2607","crate_id":0,"name":"try_read_for","span":{"filename":"src/rwlock.rs","begin":[729,4],"end":[736,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2081":{"id":"0:59:2081","crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[218,4],"end":[222,5]},"visibility":"public","docs":"Acquires a mutex, blocking the current thread until it is able to do so.\n\nThis function will block the local thread until it is available to acquire\nthe mutex. Upon returning, the thread is the only thread with the mutex\nheld. An RAII guard is returned to allow scoped unlock of the lock. When\nthe guard goes out of scope, the mutex will be unlocked.\n\nAttempts to lock a mutex in the thread which already holds the lock will\nresult in a deadlock.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[945,0],"end":[949,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:188:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:2137":{"id":"0:54:2137","crate_id":0,"name":"const_new","span":{"filename":"src/mutex.rs","begin":[183,4],"end":[188,5]},"visibility":"public","docs":"Creates a new mutex based on a pre-existing raw mutex.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_mutex",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3498:1705":{"id":"1:3498:1705","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39057:4182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:716":{"id":"0:716","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2145,0],"end":[2209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:477:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:474:2492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:720:2759","0:723:2761"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2385-0:873:234":{"id":"b:1:2385-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2675-0:881:235":{"id":"b:1:2675-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:314":{"id":"0:314","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[555,0],"end":[576,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:318:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2675-0:35:186":{"id":"b:1:2675-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[662,0],"end":[670,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:134:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2388-0:849:2229":{"id":"b:1:2388-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2670-0:255:2327":{"id":"b:1:2670-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1199,0],"end":[1217,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:562:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:418:757":{"id":"0:418:757","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[1034,4],"end":[1036,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2675-0:908:2713":{"id":"b:1:2675-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:675:757":{"id":"0:675:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1725,4],"end":[1727,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:2434":{"id":"0:450:2434","crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"src/rwlock.rs","begin":[153,0],"end":[161,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:451:2437"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:613:757":{"id":"0:613:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1386,4],"end":[1388,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2675-0:841:187":{"id":"b:1:2675-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:449:2431":{"id":"0:449:2431","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/rwlock.rs","begin":[145,4],"end":[148,5]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:774:248":{"id":"0:774:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2700,4],"end":[2700,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:31759:237-0:5:1937":{"id":"a:1:31759:237-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:366":{"id":"0:366","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[782,0],"end":[788,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:371:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115:2255":{"id":"0:115:2255","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/mutex.rs","begin":[621,4],"end":[631,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked using a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510:2555":{"id":"0:510:2555","crate_id":0,"name":"try_write","span":{"filename":"src/rwlock.rs","begin":[504,4],"end":[511,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with exclusive write access.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the lock when\nit is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:641":{"id":"0:641","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1636,0],"end":[1689,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:645:2106","0:646:2255","0:649:2111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31759:237-0:865:2373":{"id":"a:1:31759:237-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2660-0:889:2651":{"id":"b:1:2660-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:456:2442":{"id":"0:456:2442","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/rwlock.rs","begin":[178,4],"end":[178,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[233,0],"end":[269,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:273:1109","0:274:2134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:69:2191":{"id":"0:69:2191","crate_id":0,"name":"force_unlock_fair","span":{"filename":"src/mutex.rs","begin":[360,4],"end":[362,5]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1109,0],"end":[1183,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:477:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:549:2669","0:550:2670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:462:2458":{"id":"0:462:2458","crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"src/rwlock.rs","begin":[203,0],"end":[211,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:463:2461","0:464:2462"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursive","id":"0:459:2452","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:452:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"a:1:41395:5050-0:482:233":{"id":"a:1:41395:5050-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:650":{"id":"0:650","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1691,0],"end":[1697,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:654:248","0:655:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:452:2439":{"id":"0:452:2439","crate_id":0,"name":"RawRwLockTimed","span":{"filename":"src/rwlock.rs","begin":[167,0],"end":[185,1]},"visibility":"public","docs":"Additional methods for RwLocks which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:453:132","0:454:162","0:455:2441","0:456:2442","0:457:2444","0:458:2445"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[148,0],"end":[148,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:554:60":{"id":"0:554:60","crate_id":0,"name":"default","span":{"filename":"src/rwlock.rs","begin":[1187,4],"end":[1189,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2388-0:8:1939":{"id":"b:1:2388-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:248":{"id":"0:248","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[194,0],"end":[206,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:30:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:251:2121","0:253:2119"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:670:757":{"id":"0:670:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1717,4],"end":[1719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:901:2684":{"id":"0:901:2684","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[2612,0],"end":[2616,1]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:755","0:765","a:1:41394:5051-0:901:2684","a:1:41395:5050-0:901:2684","a:1:31816:2882-0:901:2684","b:1:2660-0:901:2684","b:1:2388-0:901:2684","b:1:3496-0:901:2684","b:1:2670-0:901:2684","b:1:2664-0:901:2684","b:1:2385-0:901:2684","b:1:2675-0:901:2684","0:776","0:747","0:770","0:786","0:781","0:751"]}}},"0:723:2761":{"id":"0:723:2761","crate_id":0,"name":"try_with_upgraded_until","span":{"filename":"src/rwlock.rs","begin":[2191,4],"end":[2208,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_until` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:656":{"id":"0:656","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1699,0],"end":[1704,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3108:2058","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:660:605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:757":{"id":"0:86:757","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[445,4],"end":[461,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:60":{"id":"0:308:60","crate_id":0,"name":"default","span":{"filename":"src/remutex.rs","begin":[543,4],"end":[545,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:482:233":{"id":"b:1:3496-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41394:5051-0:5:1937":{"id":"a:1:41394:5051-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1185,0],"end":[1190,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:554:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157:994":{"id":"0:157:994","crate_id":0,"name":"map","span":{"filename":"src/mutex.rs","begin":[855,4],"end":[867,5]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:654:248":{"id":"0:654:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[1692,4],"end":[1692,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:538:2640":{"id":"0:538:2640","crate_id":0,"name":"try_read_recursive_for","span":{"filename":"src/rwlock.rs","begin":[942,4],"end":[952,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.\n\nThis method is guaranteed to succeed without blocking if another read\nlock is held at the time of the call. See the documentation for\n`read_recursive` for details.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443:2094":{"id":"0:443:2094","crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[77,4],"end":[86,5]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2664-0:35:186":{"id":"b:1:2664-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26:2094":{"id":"0:26:2094","crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2111":{"id":"0:118:2111","crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[639,4],"end":[644,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[922,0],"end":[925,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:195:1941":{"id":"0:195:1941","crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[8,0],"end":[1051,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"atomic_usize\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:214:2286","0:217:2299","0:255:2327","0:856:2334","0:865:2373"],"is_stripped":true}}},"0:529:2612":{"id":"0:529:2612","crate_id":0,"name":"try_write_until","span":{"filename":"src/rwlock.rs","begin":[777,4],"end":[784,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:762:2233":{"id":"0:762:2233","crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[2658,4],"end":[2673,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:791":{"id":"0:791","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2754,0],"end":[2757,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[224,0],"end":[227,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:751":{"id":"0:751","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2619,0],"end":[2622,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:434:2399","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2660-0:255:2327":{"id":"b:1:2660-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[365,0],"end":[365,82]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:511:2159":{"id":"0:511:2159","crate_id":0,"name":"get_mut","span":{"filename":"src/rwlock.rs","begin":[518,4],"end":[520,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `RwLock` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:517:2178":{"id":"0:517:2178","crate_id":0,"name":"data_ptr","span":{"filename":"src/rwlock.rs","begin":[593,4],"end":[595,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object\nalive, for example when dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded\nusing `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:1941":{"id":"0:333:1941","crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[628,4],"end":[630,5]},"visibility":"public","docs":"Returns a reference to the original `ReentrantMutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[920,0],"end":[926,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:172:248","0:173:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:251:2121":{"id":"0:251:2121","crate_id":0,"name":"try_lock_until","span":{"filename":"src/remutex.rs","begin":[197,4],"end":[199,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2115","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:2658":{"id":"0:545:2658","crate_id":0,"name":"try_upgradable_read","span":{"filename":"src/rwlock.rs","begin":[1052,4],"end":[1059,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:550:2670":{"id":"0:550:2670","crate_id":0,"name":"try_upgradable_read_until","span":{"filename":"src/rwlock.rs","begin":[1136,4],"end":[1146,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:655:603":{"id":"0:655:603","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[1694,4],"end":[1696,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2883:246-0:5:1937":{"id":"a:1:2883:246-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:273:1109":{"id":"0:273:1109","crate_id":0,"name":"new","span":{"filename":"src/remutex.rs","begin":[237,4],"end":[247,5]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31816:2882-0:881:235":{"id":"a:1:31816:2882-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3496-0:217:2299":{"id":"b:1:3496-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31759:237-0:881:235":{"id":"a:1:31759:237-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:690":{"id":"0:690","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1971,0],"end":[2024,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeFair","id":"0:471:2483","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:694:2106","0:695:2255","0:698:2111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:720:2759":{"id":"0:720:2759","crate_id":0,"name":"try_with_upgraded_for","span":{"filename":"src/rwlock.rs","begin":[2160,4],"end":[2177,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_for` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:759:994":{"id":"0:759:994","crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[2634,4],"end":[2646,5]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426:1942":{"id":"0:426:1942","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[8,0],"end":[2883,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:434:2399","0:445:2419","0:450:2434","0:452:2439","0:459:2452","0:462:2458","0:465:2468","0:471:2483","0:474:2492","0:477:2499","0:482:233","0:873:234","0:881:235","0:889:2651","0:901:2684","0:908:2713"],"is_stripped":true}}},"0:621:1942":{"id":"0:621:1942","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1522,4],"end":[1524,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:908:2713":{"id":"0:908:2713","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[2748,0],"end":[2752,1]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:799","0:809","a:1:41394:5051-0:908:2713","a:1:41395:5050-0:908:2713","a:1:31816:2882-0:908:2713","b:1:2660-0:908:2713","b:1:2388-0:908:2713","b:1:3496-0:908:2713","b:1:2670-0:908:2713","b:1:2664-0:908:2713","b:1:2385-0:908:2713","b:1:2675-0:908:2713","0:814","0:820","0:830","0:825","0:835","0:795","0:791"]}}},"0:747":{"id":"0:747","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2618,0],"end":[2618,101]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:1940":{"id":"0:99:1940","crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[509,4],"end":[511,5]},"visibility":"public","docs":"Returns a reference to the original `Mutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2385-0:901:2684":{"id":"b:1:2385-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290:2168":{"id":"0:290:2168","crate_id":0,"name":"force_unlock","span":{"filename":"src/remutex.rs","begin":[375,4],"end":[377,5]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:608:757":{"id":"0:608:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1378,4],"end":[1380,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:2485":{"id":"0:472:2485","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/rwlock.rs","begin":[257,4],"end":[257,44]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:255:2327":{"id":"0:255:2327","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[219,0],"end":[222,1]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](struct.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:269","0:275","0:280","0:293","0:298","a:1:41394:5051-0:255:2327","a:1:41395:5050-0:255:2327","a:1:31816:2882-0:255:2327","b:1:2660-0:255:2327","b:1:2388-0:255:2327","b:1:3496-0:255:2327","b:1:2670-0:255:2327","b:1:2667-0:255:2327","b:1:2664-0:255:2327","b:1:2385-0:255:2327","b:1:2675-0:255:2327","0:314","0:309","0:261","0:304","0:265"]}}},"1:2666:786":{"id":"1:2666:786","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2385-0:856:2334":{"id":"b:1:2385-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:123:248":{"id":"0:123:248","crate_id":0,"name":"Target","span":{"filename":"src/mutex.rs","begin":[648,4],"end":[648,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[347,0],"end":[363,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:69:2191"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:689:2480":{"id":"0:689:2480","crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[1956,4],"end":[1968,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then the current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2115":{"id":"0:30:2115","crate_id":0,"name":"RawMutexTimed","span":{"filename":"src/mutex.rs","begin":[120,0],"end":[132,1]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:31:132","0:32:162","0:33:2119","0:34:2121"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:737":{"id":"0:737","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2229,0],"end":[2235,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:741:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2664-0:901:2684":{"id":"b:1:2664-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:2121":{"id":"0:74:2121","crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[387,4],"end":[394,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2115","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41395:5050-0:841:187":{"id":"a:1:41395:5050-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:109:2242":{"id":"0:109:2242","crate_id":0,"name":"leak","span":{"filename":"src/mutex.rs","begin":[585,4],"end":[589,5]},"visibility":"public","docs":"Leaks the mutex guard and returns a mutable reference to the data\nprotected by the mutex.\n\nThis will leave the `Mutex` in a locked state.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:2159":{"id":"0:287:2159","crate_id":0,"name":"get_mut","span":{"filename":"src/remutex.rs","begin":[347,4],"end":[349,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `ReentrantMutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:233":{"id":"0:482:233","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[330,0],"end":[333,1]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:493","0:498","0:502","0:518","0:523","0:530","0:535","0:540","0:546","a:1:41394:5051-0:482:233","a:1:41395:5050-0:482:233","a:1:31816:2882-0:482:233","b:1:2660-0:482:233","b:1:2388-0:482:233","b:1:3496-0:482:233","b:1:2670-0:482:233","b:1:2667-0:482:233","b:1:2664-0:482:233","b:1:2385-0:482:233","b:1:2675-0:482:233","0:555","0:487","0:559","0:490","0:551"]}}},"0:640:2496":{"id":"0:640:2496","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[1622,4],"end":[1633,5]},"visibility":"public","docs":"Atomically downgrades a write lock into an upgradable read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:820":{"id":"0:820","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2846,0],"end":[2851,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3108:2058","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:824:605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[191,0],"end":[345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:58:2143","0:59:2081","0:60:2084","0:61:2159","0:62:2094","0:63:2168","0:64:63","0:65:2178"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2678:138":{"id":"1:2678:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31687:4959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:516:63":{"id":"0:516:63","crate_id":0,"name":"raw","span":{"filename":"src/rwlock.rs","begin":[576,4],"end":[578,5]},"visibility":"public","docs":"Returns the underlying raw reader-writer lock object.\n\nNote that you will most likely need to import the `RawRwLock` trait from\n`lock_api` to be able to call functions on the raw\nreader-writer lock.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a lock guard.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:5:1937":{"id":"b:1:2670-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2660-0:856:2334":{"id":"b:1:2660-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:509:2551":{"id":"0:509:2551","crate_id":0,"name":"write","span":{"filename":"src/rwlock.rs","begin":[490,4],"end":[494,5]},"visibility":"public","docs":"Locks this `RwLock` with exclusive write access, blocking the current\nthread until it can be acquired.\n\nThis function will not return while other writers or other readers\ncurrently have access to the lock.\n\nReturns an RAII guard which will drop the write access of this `RwLock`\nwhen dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31816:2882-0:255:2327":{"id":"a:1:31816:2882-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:528:2611":{"id":"0:528:2611","crate_id":0,"name":"try_write_for","span":{"filename":"src/rwlock.rs","begin":[761,4],"end":[768,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:2641":{"id":"0:539:2641","crate_id":0,"name":"try_read_recursive_until","span":{"filename":"src/rwlock.rs","begin":[961,4],"end":[971,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:35:186":{"id":"b:1:2660-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[897,0],"end":[918,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:167:2106"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:515:2567":{"id":"0:515:2567","crate_id":0,"name":"force_unlock_write","span":{"filename":"src/rwlock.rs","begin":[562,4],"end":[564,5]},"visibility":"public","docs":"Forcibly unlocks a write lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31816:2882-0:908:2713":{"id":"a:1:31816:2882-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:818:248":{"id":"0:818:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2839,4],"end":[2839,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:406:603":{"id":"0:406:603","crate_id":0,"name":"deref","span":{"filename":"src/remutex.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[541,0],"end":[546,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:308:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:2119":{"id":"0:73:2119","crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[372,4],"end":[379,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2115","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2385-0:255:2327":{"id":"b:1:2385-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2667-0:35:186":{"id":"b:1:2667-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2669:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2664-0:908:2713":{"id":"b:1:2664-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:695:2255":{"id":"0:695:2255","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[2000,4],"end":[2010,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:481:2506":{"id":"0:481:2506","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[315,4],"end":[315,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:246:2106":{"id":"0:246:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[163,4],"end":[170,5]},"visibility":"public","docs":"Unlocks this mutex using a fair unlock protocol. The inner mutex\nmay not be unlocked if this mutex was acquired previously in the\ncurrent thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[548,0],"end":[553,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:313:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:337:2233":{"id":"0:337:2233","crate_id":0,"name":"try_map","span":{"filename":"src/remutex.rs","begin":[665,4],"end":[683,5]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:628:2237":{"id":"0:628:2237","crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1581,4],"end":[1591,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41394:5051-0:8:1939":{"id":"a:1:41394:5051-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:447:2423":{"id":"0:447:2423","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/rwlock.rs","begin":[120,4],"end":[120,43]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:475:2494":{"id":"0:475:2494","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/rwlock.rs","begin":[282,4],"end":[282,42]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:466:2470":{"id":"0:466:2470","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[221,4],"end":[221,30]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2385-0:889:2651":{"id":"b:1:2385-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41395:5050-0:908:2713":{"id":"a:1:41395:5050-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3496-0:856:2334":{"id":"b:1:3496-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2385-0:881:235":{"id":"b:1:2385-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31759:237-0:889:2651":{"id":"a:1:31759:237-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2660-0:873:234":{"id":"b:1:2660-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285:2081":{"id":"0:285:2081","crate_id":0,"name":"lock","span":{"filename":"src/remutex.rs","begin":[319,4],"end":[323,5]},"visibility":"public","docs":"Acquires a reentrant mutex, blocking the current thread until it is able\nto do so.\n\nIf the mutex is held by another thread then this function will block the\nlocal thread until it is available to acquire the mutex. If the mutex is\nalready held by the current thread then this function will increment the\nlock reference count and return immediately. Upon returning,\nthe thread is the only thread with the mutex held. An RAII guard is\nreturned to allow scoped unlock of the lock. When the guard goes out of\nscope, the mutex will be unlocked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:645:2106":{"id":"0:645:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1650,4],"end":[1656,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockWriteGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:248":{"id":"0:405:248","crate_id":0,"name":"Target","span":{"filename":"src/remutex.rs","begin":[1012,4],"end":[1012,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,0],"end":[105,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2663:3036":{"id":"1:2663:3036","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2637:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:710":{"id":"0:710","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2098,0],"end":[2143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:477:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:714:2505","0:715:2506"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2664-0:881:235":{"id":"b:1:2664-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:765":{"id":"0:765","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2676,0],"end":[2697,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:769:2106"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41394:5051-0:908:2713":{"id":"a:1:41394:5051-0:908:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:340:2237":{"id":"0:340:2237","crate_id":0,"name":"unlocked","span":{"filename":"src/remutex.rs","begin":[690,4],"end":[700,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31759:237-0:856:2334":{"id":"a:1:31759:237-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2664-0:865:2373":{"id":"b:1:2664-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41395:5050-0:901:2684":{"id":"a:1:41395:5050-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:454:162":{"id":"0:454:162","crate_id":0,"name":"Instant","span":{"filename":"src/rwlock.rs","begin":[172,4],"end":[172,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:435:2076":{"id":"0:435:2076","crate_id":0,"name":"INIT","span":{"filename":"src/rwlock.rs","begin":[43,4],"end":[43,21]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"b:1:2664-0:5:1937":{"id":"b:1:2664-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:726":{"id":"0:726","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2211,0],"end":[2217,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:730:248","0:731:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:463:2461":{"id":"0:463:2461","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/rwlock.rs","begin":[206,4],"end":[206,77]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:694:2106":{"id":"0:694:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1985,4],"end":[1991,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockUpgradableReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[147,0],"end":[147,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:698:2111":{"id":"0:698:2111","crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[2018,4],"end":[2023,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `upgradable_read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360":{"id":"0:360","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[770,0],"end":[780,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:365:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2675-0:873:234":{"id":"b:1:2675-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:63":{"id":"0:64:63","crate_id":0,"name":"raw","span":{"filename":"src/mutex.rs","begin":[282,4],"end":[284,5]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `MutexGuard`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:849:2229":{"id":"b:1:2660-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2387:2787":{"id":"1:2387:2787","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:730:248":{"id":"0:730:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2212,4],"end":[2212,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2385-0:5:1937":{"id":"b:1:2385-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:471:2483":{"id":"0:471:2483","crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"src/rwlock.rs","begin":[251,0],"end":[272,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:472:2485","0:473:2489"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:236:2081":{"id":"0:236:2081","crate_id":0,"name":"lock","span":{"filename":"src/remutex.rs","begin":[110,4],"end":[115,5]},"visibility":"public","docs":"Acquires this mutex, blocking if it's held by another thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:849:2229":{"id":"0:849:2229","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[830,0],"end":[834,1]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:153","0:163","a:1:41394:5051-0:849:2229","a:1:41395:5050-0:849:2229","a:1:31816:2882-0:849:2229","b:1:2660-0:849:2229","b:1:2388-0:849:2229","b:1:3496-0:849:2229","b:1:2670-0:849:2229","b:1:2664-0:849:2229","b:1:2385-0:849:2229","b:1:2675-0:849:2229","0:184","0:174","0:145","0:168","0:189","0:149","0:179"]}}},"b:1:2385-0:217:2299":{"id":"b:1:2385-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31816:2882-0:889:2651":{"id":"a:1:31816:2882-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2664-0:856:2334":{"id":"b:1:2664-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:8:1939":{"id":"0:8:1939","crate_id":0,"name":"GuardNoSend","span":{"filename":"src/lib.rs","begin":[103,0],"end":[103,32]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:41394:5051-0:8:1939","a:1:31759:237-0:8:1939","a:1:41395:5050-0:8:1939","a:1:31816:2882-0:8:1939","b:1:2660-0:8:1939","b:1:2388-0:8:1939","b:1:3496-0:8:1939","b:1:2670-0:8:1939","b:1:2664-0:8:1939","b:1:2385-0:8:1939","b:1:2675-0:8:1939","0:11"]}}},"0:124:603":{"id":"0:124:603","crate_id":0,"name":"deref","span":{"filename":"src/mutex.rs","begin":[650,4],"end":[652,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:2417":{"id":"0:444:2417","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[89,4],"end":[98,5]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41395:5050-0:881:235":{"id":"a:1:41395:5050-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:183:641":{"id":"0:183:641","crate_id":0,"name":"drop","span":{"filename":"src/mutex.rs","begin":[937,4],"end":[942,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:2452":{"id":"0:459:2452","crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"src/rwlock.rs","begin":[194,0],"end":[200,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:460:2454","0:461:2456"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[364,0],"end":[364,75]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:2076":{"id":"0:215:2076","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[50,4],"end":[50,21]},"visibility":"default","docs":"Initial value.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"0:465:2468":{"id":"0:465:2468","crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"src/rwlock.rs","begin":[219,0],"end":[247,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:466:2470","0:467:2472","0:468:2475","0:469:2477","0:470:2480"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"a:1:31816:2882-0:482:233":{"id":"a:1:31816:2882-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3496-0:841:187":{"id":"b:1:3496-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31816:2882-0:856:2334":{"id":"a:1:31816:2882-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:533:2626":{"id":"0:533:2626","crate_id":0,"name":"read_recursive","span":{"filename":"src/rwlock.rs","begin":[876,4],"end":[880,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nUnlike `read`, this method is guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[271,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:279:2137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:284:2143":{"id":"0:284:2143","crate_id":0,"name":"make_guard_unchecked","span":{"filename":"src/remutex.rs","begin":[301,4],"end":[306,5]},"visibility":"public","docs":"Creates a new `ReentrantMutexGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds the lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2191":{"id":"0:297:2191","crate_id":0,"name":"force_unlock_fair","span":{"filename":"src/remutex.rs","begin":[468,4],"end":[470,5]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:649:2111":{"id":"0:649:2111","crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[1683,4],"end":[1688,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `write`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:755":{"id":"0:755","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2624,0],"end":[2674,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:759:994","0:762:2233"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2670-0:35:186":{"id":"b:1:2670-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:477:2499":{"id":"0:477:2499","crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"src/rwlock.rs","begin":[294,0],"end":[316,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:478:2501","0:479:2502","0:480:2505","0:481:2506"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:452:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:468:2475":{"id":"0:468:2475","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/rwlock.rs","begin":[231,4],"end":[231,39]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:769:2106":{"id":"0:769:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[2690,4],"end":[2696,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:592:2111":{"id":"0:592:2111","crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[1351,4],"end":[1356,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:2286":{"id":"0:214:2286","crate_id":0,"name":"GetThreadId","span":{"filename":"src/remutex.rs","begin":[45,0],"end":[55,1]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:215:2076","0:216:2290"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"b:1:2388-0:873:234":{"id":"b:1:2388-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5:1937":{"id":"0:5:1937","crate_id":0,"name":"GuardSend","span":{"filename":"src/lib.rs","begin":[100,0],"end":[100,25]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:41394:5051-0:5:1937","a:1:31759:237-0:5:1937","a:1:2883:246-0:5:1937","a:1:41395:5050-0:5:1937","a:1:31816:2882-0:5:1937","b:1:2660-0:5:1937","b:1:2388-0:5:1937","b:1:3496-0:5:1937","b:1:2670-0:5:1937","b:1:2664-0:5:1937","b:1:2385-0:5:1937","b:1:2675-0:5:1937"]}}},"0:625:2233":{"id":"0:625:2233","crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[1559,4],"end":[1574,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[790,0],"end":[796,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:377:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41395:5050-0:865:2373":{"id":"a:1:41395:5050-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:741:757":{"id":"0:741:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2232,4],"end":[2234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:889:2651":{"id":"b:1:2670-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2675-0:901:2684":{"id":"b:1:2675-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2388-0:482:233":{"id":"b:1:2388-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279:2137":{"id":"0:279:2137","crate_id":0,"name":"const_new","span":{"filename":"src/remutex.rs","begin":[278,4],"end":[288,5]},"visibility":"public","docs":"Creates a new reentrant mutex based on a pre-existing raw mutex and a\nhelper to get the thread ID.\n\nThis allows creating a reentrant mutex in a constant context on stable\nRust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_mutex",{"generic":"R"}],["get_thread_id",{"generic":"G"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:448:2427":{"id":"0:448:2427","crate_id":0,"name":"bump_shared","span":{"filename":"src/rwlock.rs","begin":[131,4],"end":[134,5]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:809":{"id":"0:809","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2815,0],"end":[2836,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:813:2106"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:478:2501":{"id":"0:478:2501","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/rwlock.rs","begin":[296,4],"end":[296,71]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:803:994":{"id":"0:803:994","crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[2773,4],"end":[2785,5]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:2084":{"id":"0:24:2084","crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[52,4],"end":[52,31]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:41394:5051-0:255:2327":{"id":"a:1:41394:5051-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2679:1690":{"id":"1:2679:1690","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:757":{"id":"0:139:757","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[673,4],"end":[675,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:588:2106":{"id":"0:588:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1318,4],"end":[1324,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:464:2462":{"id":"0:464:2462","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/rwlock.rs","begin":[210,4],"end":[210,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2670-0:901:2684":{"id":"b:1:2670-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240:2092":{"id":"0:240:2092","crate_id":0,"name":"unlock","span":{"filename":"src/remutex.rs","begin":[131,4],"end":[138,5]},"visibility":"public","docs":"Unlocks this mutex. The inner mutex may not be unlocked if\nthis mutex was acquired previously in the current thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2081":{"id":"0:23:2081","crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:438:2404":{"id":"0:438:2404","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/rwlock.rs","begin":[53,4],"end":[53,38]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[396,0],"end":[409,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:501:2137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:994":{"id":"0:100:994","crate_id":0,"name":"map","span":{"filename":"src/mutex.rs","begin":[522,4],"end":[534,5]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505:2528":{"id":"0:505:2528","crate_id":0,"name":"make_read_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[422,4],"end":[427,5]},"visibility":"public","docs":"Creates a new `RwLockReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds a read lock.\n\nThis function does not increment the read count of the lock. Calling this function when a\nguard has already been produced is undefined behaviour unless the guard was forgotten\nwith `mem::forget`.`","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:775:603":{"id":"0:775:603","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2702,4],"end":[2704,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[291,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:284:2143","0:285:2081","0:286:2084","0:287:2159","0:288:2094","0:289:2315","0:290:2168","0:291:63","0:292:2178"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[444,0],"end":[462,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:86:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:567":{"id":"0:567","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1228,0],"end":[1228,88]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41395:5050-0:255:2327":{"id":"a:1:41395:5050-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:660:605":{"id":"0:660:605","crate_id":0,"name":"deref_mut","span":{"filename":"src/rwlock.rs","begin":[1701,4],"end":[1703,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458:2445":{"id":"0:458:2445","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/rwlock.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:358:248":{"id":"0:358:248","crate_id":0,"name":"Target","span":{"filename":"src/remutex.rs","begin":[763,4],"end":[763,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2664-0:482:233":{"id":"b:1:2664-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31759:237-0:8:1939":{"id":"a:1:31759:237-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:144:757":{"id":"0:144:757","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:786":{"id":"0:313:786","crate_id":0,"name":"from","span":{"filename":"src/remutex.rs","begin":[550,4],"end":[552,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2675-0:217:2299":{"id":"b:1:2675-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:469:2477":{"id":"0:469:2477","crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[238,4],"end":[238,29]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[437,0],"end":[442,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:82:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:731:603":{"id":"0:731:603","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501:2137":{"id":"0:501:2137","crate_id":0,"name":"const_new","span":{"filename":"src/rwlock.rs","begin":[403,4],"end":[408,5]},"visibility":"public","docs":"Creates a new new instance of an `RwLock<T>` based on a pre-existing\n`RawRwLock<T>`.\n\nThis allows creating a `RwLock<T>` in a constant context on stable\nRust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_rwlock",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:707:2753":{"id":"0:707:2753","crate_id":0,"name":"try_with_upgraded","span":{"filename":"src/rwlock.rs","begin":[2082,4],"end":[2095,5]},"visibility":"public","docs":"First, tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then `None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461:2456":{"id":"0:461:2456","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[199,4],"end":[199,48]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:193:757":{"id":"0:193:757","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[954,4],"end":[956,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:506:2530":{"id":"0:506:2530","crate_id":0,"name":"make_write_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[438,4],"end":[443,5]},"visibility":"public","docs":"Creates a new `RwLockReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds a write lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1615,0],"end":[1634,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:474:2492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:640:2496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2670-0:856:2334":{"id":"b:1:2670-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:233:2076":{"id":"0:233:2076","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[80,4],"end":[85,6]},"visibility":"public","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:1:3496-0:901:2684":{"id":"b:1:3496-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:834:757":{"id":"0:834:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2866,4],"end":[2868,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:603":{"id":"0:173:603","crate_id":0,"name":"deref","span":{"filename":"src/mutex.rs","begin":[923,4],"end":[925,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:732":{"id":"0:732","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2219,0],"end":[2227,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:736:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:178:605":{"id":"0:178:605","crate_id":0,"name":"deref_mut","span":{"filename":"src/mutex.rs","begin":[930,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[150,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:49:1109","0:50:2134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[365,0],"end":[428,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:30:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:73:2119","0:74:2121"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:445:2419":{"id":"0:445:2419","crate_id":0,"name":"RawRwLockFair","span":{"filename":"src/rwlock.rs","begin":[107,0],"end":[149,1]},"visibility":"public","docs":"Additional methods for RwLocks which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:446:2421","0:447:2423","0:448:2427","0:449:2431"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:476:2496":{"id":"0:476:2496","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[289,4],"end":[289,45]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:216:2290":{"id":"0:216:2290","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[54,4],"end":[54,48]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"1:22830:2279","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2388-0:217:2299":{"id":"b:1:2388-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:806:2233":{"id":"0:806:2233","crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[2797,4],"end":[2812,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:873:234":{"id":"b:1:2670-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:134:641":{"id":"0:134:641","crate_id":0,"name":"drop","span":{"filename":"src/mutex.rs","begin":[664,4],"end":[669,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[678,0],"end":[682,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:144:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2388-0:255:2327":{"id":"b:1:2388-0:255:2327","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2660-0:881:235":{"id":"b:1:2660-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:391:2233":{"id":"0:391:2233","crate_id":0,"name":"try_map","span":{"filename":"src/remutex.rs","begin":[963,4],"end":[981,5]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:699":{"id":"0:699","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2026,0],"end":[2096,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:474:2492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:703:2437","0:704:2747","0:707:2753"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31816:2882-0:849:2229":{"id":"a:1:31816:2882-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1010,0],"end":[1107,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:543:2650","0:544:2656","0:545:2658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[473,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:30:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:302:2119","0:303:2121"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:440:2409":{"id":"0:440:2409","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[63,4],"end":[63,29]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[154,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:246:2106","0:247:2111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[430,0],"end":[435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:78:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:813:2106":{"id":"0:813:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[2829,4],"end":[2835,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockWriteGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2388-0:5:1937":{"id":"b:1:2388-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2675-0:5:1937":{"id":"b:1:2675-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:129:605":{"id":"0:129:605","crate_id":0,"name":"deref_mut","span":{"filename":"src/mutex.rs","begin":[657,4],"end":[659,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2079":{"id":"0:22:2079","crate_id":0,"name":"GuardMarker","span":{"filename":"src/mutex.rs","begin":[45,4],"end":[45,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"b:1:2385-0:8:1939":{"id":"b:1:2385-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2667-0:482:233":{"id":"b:1:2667-0:482:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2669:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:508:2544":{"id":"0:508:2544","crate_id":0,"name":"try_read","span":{"filename":"src/rwlock.rs","begin":[472,4],"end":[479,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:527:2608":{"id":"0:527:2608","crate_id":0,"name":"try_read_until","span":{"filename":"src/rwlock.rs","begin":[745,4],"end":[752,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:704:2747":{"id":"0:704:2747","crate_id":0,"name":"with_upgraded","span":{"filename":"src/rwlock.rs","begin":[2057,4],"end":[2070,5]},"visibility":"public","docs":"First, atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.\n\nThen, calls the provided closure with an exclusive reference to the lock's data.\n\nFinally, atomically downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"Ret"},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493":{"id":"0:493","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[367,0],"end":[394,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:496:1109","0:497:2134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2388-0:901:2684":{"id":"b:1:2388-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:776":{"id":"0:776","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2707,0],"end":[2715,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:780:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:457:2444":{"id":"0:457:2444","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/rwlock.rs","begin":[181,4],"end":[181,70]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2675-0:849:2229":{"id":"b:1:2675-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:162":{"id":"0:32:162","crate_id":0,"name":"Instant","span":{"filename":"src/mutex.rs","begin":[125,4],"end":[125,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:82:786":{"id":"0:82:786","crate_id":0,"name":"from","span":{"filename":"src/mutex.rs","begin":[439,4],"end":[441,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[507,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:99:1940","0:100:994","0:103:2233","0:106:2237","0:109:2242"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[859,0],"end":[928,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursive","id":"0:459:2452","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:533:2626","0:534:2629"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:598:603":{"id":"0:598:603","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[1362,4],"end":[1364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:714:2505":{"id":"0:714:2505","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[2104,4],"end":[2119,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470:2480":{"id":"0:470:2480","crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[246,4],"end":[246,41]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2664-0:873:234":{"id":"b:1:2664-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41394:5051-0:841:187":{"id":"a:1:41394:5051-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:41394:5051-0:856:2334":{"id":"a:1:41394:5051-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:377:757":{"id":"0:377:757","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[793,4],"end":[795,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2388-0:841:187":{"id":"b:1:2388-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:247:2111":{"id":"0:247:2111","crate_id":0,"name":"bump","span":{"filename":"src/remutex.rs","begin":[182,4],"end":[191,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2664-0:889:2651":{"id":"b:1:2664-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:2094":{"id":"0:62:2094","crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[252,4],"end":[254,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:603":{"id":"0:359:603","crate_id":0,"name":"deref","span":{"filename":"src/remutex.rs","begin":[765,4],"end":[767,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:780:641":{"id":"0:780:641","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2709,4],"end":[2714,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41394:5051-0:901:2684":{"id":"a:1:41394:5051-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:514:2562":{"id":"0:514:2562","crate_id":0,"name":"force_unlock_read","span":{"filename":"src/rwlock.rs","begin":[546,4],"end":[548,5]},"visibility":"public","docs":"Forcibly unlocks a read lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:865:2373":{"id":"b:1:2670-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35:186":{"id":"0:35:186","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[142,0],"end":[145,1]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:46","0:51","0:55","0:66","0:70","a:1:41394:5051-0:35:186","a:1:41395:5050-0:35:186","a:1:31816:2882-0:35:186","b:1:2660-0:35:186","b:1:2388-0:35:186","b:1:3496-0:35:186","b:1:2670-0:35:186","b:1:2667-0:35:186","b:1:2664-0:35:186","b:1:2385-0:35:186","b:1:2675-0:35:186","0:83","0:43","0:75","0:79","0:40"]}}},"0:439:2407":{"id":"0:439:2407","crate_id":0,"name":"unlock_shared","span":{"filename":"src/rwlock.rs","begin":[60,4],"end":[60,35]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2388-0:881:235":{"id":"b:1:2388-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:442:2414":{"id":"0:442:2414","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/rwlock.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2670-0:217:2299":{"id":"b:1:2670-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[951,0],"end":[957,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:193:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:455:2441":{"id":"0:455:2441","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/rwlock.rs","begin":[175,4],"end":[175,67]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1910,0],"end":[1913,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2675-0:856:2334":{"id":"b:1:2675-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:680":{"id":"0:680","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1915,0],"end":[1969,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:684:1942","0:685:2237","0:688:2477","0:689:2480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[927,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:388:994","0:391:2233"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:544:2656":{"id":"0:544:2656","crate_id":0,"name":"upgradable_read","span":{"filename":"src/rwlock.rs","begin":[1038,4],"end":[1042,5]},"visibility":"public","docs":"Locks this `RwLock` with upgradable read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers or other\nupgradable reads which hold the lock. There may be other readers currently\ninside the lock when this method returns.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[703,0],"end":[758,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:348:2106","0:349:2255","0:352:2111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31816:2882-0:865:2373":{"id":"a:1:31816:2882-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[930,0],"end":[1008,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursiveTimed","id":"0:462:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:538:2640","0:539:2641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:581:2237":{"id":"0:581:2237","crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1291,4],"end":[1301,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2178":{"id":"0:65:2178","crate_id":0,"name":"data_ptr","span":{"filename":"src/mutex.rs","begin":[298,4],"end":[300,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns\na `MutexGuard` but that guard has been discarded using `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:703:2437":{"id":"0:703:2437","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[2034,4],"end":[2045,5]},"visibility":"public","docs":"Atomically downgrades an upgradable read lock lock into a shared read lock\nwithout allowing any writers to take exclusive access of the lock in the\nmeantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:5:1937":{"id":"b:1:3496-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:661":{"id":"0:661","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1706,0],"end":[1714,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:665:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[178,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:54:2137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:106:2237":{"id":"0:106:2237","crate_id":0,"name":"unlocked","span":{"filename":"src/mutex.rs","begin":[568,4],"end":[578,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:849:2229":{"id":"b:1:2670-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[592,0],"end":[645,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:114:2106","0:115:2255","0:118:2111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:318:757":{"id":"0:318:757","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[556,4],"end":[575,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:671":{"id":"0:671","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1722,0],"end":[1728,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:675:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:394":{"id":"0:394","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[984,0],"end":[1007,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:399:2106"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:865:2373":{"id":"0:865:2373","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[916,0],"end":[920,1]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:383","0:394","a:1:41394:5051-0:865:2373","a:1:31759:237-0:865:2373","a:1:41395:5050-0:865:2373","a:1:31816:2882-0:865:2373","b:1:2660-0:865:2373","b:1:2388-0:865:2373","b:1:3496-0:865:2373","b:1:2670-0:865:2373","b:1:2664-0:865:2373","b:1:2385-0:865:2373","b:1:2675-0:865:2373","0:407","0:419","0:378","0:400","0:413"]}}},"0:785:757":{"id":"0:785:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2720,4],"end":[2722,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41395:5050-0:5:1937":{"id":"a:1:41395:5050-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41394:5051-0:217:2299":{"id":"a:1:41394:5051-0:217:2299","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2299","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31759:237-0:873:234":{"id":"a:1:31759:237-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:666":{"id":"0:666","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1716,0],"end":[1720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:670:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:781":{"id":"0:781","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2717,0],"end":[2723,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:785:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3496-0:35:186":{"id":"b:1:3496-0:35:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2669:786":{"id":"1:2669:786","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31816:2882-0:5:1937":{"id":"a:1:31816:2882-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:34:2121":{"id":"0:34:2121","crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[131,4],"end":[131,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:30:2115","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:41395:5050-0:8:1939":{"id":"a:1:41395:5050-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:646:2255":{"id":"0:646:2255","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[1665,4],"end":[1675,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:5:1937":{"id":"b:1:2660-0:5:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[411,0],"end":[685,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:505:2528","0:506:2530","0:507:2264","0:508:2544","0:509:2551","0:510:2555","0:511:2159","0:512:2094","0:513:2417","0:514:2562","0:515:2567","0:516:63","0:517:2178"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:562:757":{"id":"0:562:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1200,4],"end":[1216,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:570":{"id":"0:570","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1230,0],"end":[1302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:574:1942","0:575:994","0:578:2233","0:581:2237"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2675-0:889:2651":{"id":"b:1:2675-0:889:2651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:786":{"id":"0:786","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2725,0],"end":[2731,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:790:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2385-0:841:187":{"id":"b:1:2385-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2387:2787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2675-0:865:2373":{"id":"b:1:2675-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12:1940":{"id":"0:12:1940","crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[8,0],"end":[960,97]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:20:2073","0:27:2101","0:30:2115","0:35:186","0:841:187","0:849:2229"],"is_stripped":true}}},"a:1:41395:5050-0:849:2229":{"id":"a:1:41395:5050-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:5050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:50:2134":{"id":"0:50:2134","crate_id":0,"name":"into_inner","span":{"filename":"src/mutex.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:63":{"id":"0:291:63","crate_id":0,"name":"raw","span":{"filename":"src/remutex.rs","begin":[389,4],"end":[391,5]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `ReentrantMutexGuard`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:293":{"id":"0:293","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[455,0],"end":[471,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:297:2191"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:599":{"id":"0:599","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1367,0],"end":[1375,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:603:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:790:757":{"id":"0:790:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2728,4],"end":[2730,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31816:2882-0:8:1939":{"id":"a:1:31816:2882-0:8:1939","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:1943":{"id":"0:0:1943","crate_id":0,"name":"lock_api","span":{"filename":"src/lib.rs","begin":[8,0],"end":[116,25]},"visibility":"public","docs":"This library provides type-safe and fully-featured `Mutex` and `RwLock`\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for RwLocks, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{},"attrs":["#![no_std]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5:1937","0:8:1939","0:194-0:12:1940","0:425-0:195:1941","0:840-0:426:1942"],"is_stripped":false}}},"0:497:2134":{"id":"0:497:2134","crate_id":0,"name":"into_inner","span":{"filename":"src/rwlock.rs","begin":[391,4],"end":[393,5]},"visibility":"public","docs":"Consumes this `RwLock`, returning the underlying data.","links":{},"attrs":["#[inline]","#[allow(unused_unsafe)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:873:234":{"id":"b:1:3496-0:873:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:496:1109":{"id":"0:496:1109","crate_id":0,"name":"new","span":{"filename":"src/rwlock.rs","begin":[371,4],"end":[376,5]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:482:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2101":{"id":"0:27:2101","crate_id":0,"name":"RawMutexFair","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[114,1]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:28:2106","0:29:2111"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:241:2094":{"id":"0:241:2094","crate_id":0,"name":"is_locked","span":{"filename":"src/remutex.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2159":{"id":"0:61:2159","crate_id":0,"name":"get_mut","span":{"filename":"src/mutex.rs","begin":[246,4],"end":[248,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `Mutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:881:235":{"id":"b:1:3496-0:881:235","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2388-0:856:2334":{"id":"b:1:2388-0:856:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2390:10444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3496-0:849:2229":{"id":"b:1:3496-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:2233":{"id":"0:160:2233","crate_id":0,"name":"try_map","span":{"filename":"src/mutex.rs","begin":[879,4],"end":[894,5]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:132":{"id":"0:31:132","crate_id":0,"name":"Duration","span":{"filename":"src/mutex.rs","begin":[122,4],"end":[122,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"a:1:41394:5051-0:849:2229":{"id":"a:1:41394:5051-0:849:2229","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:41394:5051-0:865:2373":{"id":"a:1:41394:5051-0:865:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:5051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1039,0],"end":[1045,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:424:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28:2106":{"id":"0:28:2106","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[96,4],"end":[96,33]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:685:2237":{"id":"0:685:2237","crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1926,4],"end":[1936,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575:994":{"id":"0:575:994","crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[1245,4],"end":[1257,5]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:757":{"id":"0:188:757","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[946,4],"end":[948,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[228,0],"end":[231,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2327","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:349:2255":{"id":"0:349:2255","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/remutex.rs","begin":[734,4],"end":[744,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:901:2684":{"id":"b:1:2660-0:901:2684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2663:3036"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2670-0:841:187":{"id":"b:1:2670-0:841:187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:217:2299":{"id":"0:217:2299","crate_id":0,"name":"RawReentrantMutex","span":{"filename":"src/remutex.rs","begin":[67,0],"end":[72,1]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.\n\n[`RawMutex`]: trait.RawMutex.html\n[`ReentrantMutex`]: struct.ReentrantMutex.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:230","0:243","0:248","a:1:41394:5051-0:217:2299","a:1:41395:5050-0:217:2299","a:1:31816:2882-0:217:2299","b:1:2660-0:217:2299","b:1:2388-0:217:2299","b:1:3496-0:217:2299","b:1:2670-0:217:2299","b:1:2664-0:217:2299","b:1:2385-0:217:2299","b:1:2675-0:217:2299","0:227","0:224"]}}},"0:289:2315":{"id":"0:289:2315","crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"src/remutex.rs","begin":[359,4],"end":[361,5]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:856:2334":{"id":"0:856:2334","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[616,0],"end":[619,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:328","0:343","a:1:41394:5051-0:856:2334","a:1:31759:237-0:856:2334","a:1:41395:5050-0:856:2334","a:1:31816:2882-0:856:2334","b:1:2660-0:856:2334","b:1:2388-0:856:2334","b:1:3496-0:856:2334","b:1:2670-0:856:2334","b:1:2664-0:856:2334","b:1:2385-0:856:2334","b:1:2675-0:856:2334","0:360","0:353","0:372","0:366","0:323"]}}},"0:194-0:12:1940":{"id":"0:194-0:12:1940","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,0],"end":[108,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::mutex","name":"mutex","id":"0:12:1940","glob":true}}},"0:480:2505":{"id":"0:480:2505","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[307,4],"end":[307,70]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2439","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:839:757":{"id":"0:839:757","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2874,4],"end":[2876,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:3158:2921":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:31759:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:15:2551":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:4459:2866":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:39884:4205":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:43054:4258":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:45210:4338":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:9995:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:40492:4105":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:38845:2930":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:45825:4391":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:46045:4427":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:2440:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:46219:4433":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:22582:11429":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:40269:4100":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:2929:2895":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:10488:3414":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:40525:4108":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:43954:5133":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:42313:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:3126:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:31687:4959":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:31848:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:41232:3970":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:22232:10261":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:13438:3520":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:2888:2055":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8387:3246":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:41010:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:39057:4182":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:43470:4191":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:12362:4137":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:44137:4316":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:43569:4285":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:41176:10935":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:40476:4104":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:23064:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:33215:2906":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2477:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5008:923":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:42549:3742":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:40517:4106":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:45787:4389":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:42981:4254":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4273:2876":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10035:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:13400:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:41453:3243":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:41198:4239":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:45049:4320":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:43028:4207":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:41405:3247":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:43726:5123":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:21729:10510":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:9175:4110":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:2640:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:11023:4121":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:10244:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:8384:3245":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:10031:3113":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:9684:3588":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:51839:404":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:43554:4278":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:39672:4184":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:38893:2922":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3129:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:43893:5098":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:43041:4257":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:38942:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:30239:3121":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:42510:3740":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:40469:4103":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:4966:3960":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:3335:2926":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:22613:2963":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:31761:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:51858:1734":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:38960:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:22555:10687":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11662:4128":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:3119:2256":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:44083:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:46393:4436":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:2918:2879":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:51866:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:13528:5158":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:2637:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:13276:4145":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:42296:3121":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:4395:2859":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:12:2852":{"crate_id":4,"path":["scopeguard","Strategy"],"kind":"trait"},"1:43533:5122":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:45356:4354":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:4316:2277":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:40483:4224":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:4386:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:2628:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:41775:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2401:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:8393:5034":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9679:14276":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:43321:4269":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:21458:3598":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:22101:4935":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:10676:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3354:10647":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:1929:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:43303:4268":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:46317:3981":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10284:3595":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:39683:10710":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46432:4452":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:42271:10787":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:45502:4362":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:12590:4110":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:42287:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:44173:4318":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:21882:10182":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:45306:4344":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:3314:2924":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:43901:3597":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:1863:3507":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:41032:3967":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:39243:4960":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:2382:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:43099:4260":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:51851:701":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:3324:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:7473:5024":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:3737:3047":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:43445:4138":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:21260:11412":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:43919:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:40085:3585":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:46245:3979":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:51864:1794":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:32422:2896":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:46340:3990":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:38980:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:30218:3145":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:41396:3020":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:41502:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:11144:4126":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:41697:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:42494:3737":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:40075:4216":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:45196:4337":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:22049:10269":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:42541:3741":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:22520:10685":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:39953:3578":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:37541:2913":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:45758:4388":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:4031:3388":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:21447:10510":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:39655:4077":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10950:4119":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:39774:4196":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:41816:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:40094:4096":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:29788:2946":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:46198:4432":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:41478:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:42734:4250":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:2631:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:39711:4188":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:41658:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:21231:11406":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:43123:4131":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:45164:4335":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:43712:4292":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10236:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:46236:3976":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4:1186":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:3077:2929":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:43275:4124":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11116:4124":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:21758:3599":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:51840:1105":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:40062:4094":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:46119:4429":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:41461:3244":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:45263:4341":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:46000:4426":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:41353:3235":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:39000:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:1741:3142":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:43873:5102":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:46355:4434":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:31736:4174":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:41999:3111":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"3:0:2851":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:51856:855":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:21280:10184":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:45111:4328":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:22154:4935":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:41064:5045":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:51848:1695":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:11130:4125":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:21214:11401":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:22830:2279":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"1:43129:4264":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:46276:3980":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:21880:10510":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:42962:4253":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:42259:10671":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:43083:3519":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:9064:3587":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:13224:11499":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:39781:4998":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2297:4936":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:22432:3570":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:33078:2904":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:41336:3244":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:39829:10934":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:21278:10510":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:22140:10271":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:44075:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:41619:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2281:642":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:43257:4123":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:4907:422":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:22504:4153":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7357:5039":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10843:3244":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:2944:2898":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:35610:2911":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:43357:4270":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:22311:4148":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:4120:4080":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:51852:717":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:7887:5036":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:22602:2949":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:39874:3393":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:51865:1320":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:40124:4098":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:45923:4425":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:9824:3129":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:41855:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:4108:4079":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:45696:4386":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:45417:4357":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:22471:2948":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11102:4123":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:13251:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:42749:10954":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:10456:3408":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:7891:5035":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:32901:2905":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:3018:2909":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:40041:4215":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:41894:2966":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:39661:4183":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:43881:5105":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:10666:10510":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:45548:4364":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:21734:10186":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:4242:2875":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:44065:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:2712:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:21229:11403":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:9497:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:43171:4121":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:1574:2056":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:43073:4259":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:45079:4324":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:43648:4291":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:22185:10510":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:43747:4299":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:44062:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:43865:5097":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:43436:4275":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4523:2869":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:38889:2920":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:21967:10267":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:3369:2873":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:43427:4274":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:4469:2867":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:39981:3582":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:39721:4189":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:41395:5050":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:45713:4387":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:22364:4150":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:31817:2884":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:22448:3601":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:41541:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10033:3114":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4928:11368":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:7643:3586":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:17:2853":{"crate_id":4,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"1:39904:4206":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:45487:4361":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4132:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:39800:4200":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3494:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:10911:4118":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:3406:2874":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:21192:3606":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:45846:4392":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4570:2870":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:43221:4267":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:7966:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:51853:861":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:41048:3969":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:40134:4220":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:45096:4327":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:3251:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:22540:10692":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:5910:3583":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:22099:11032":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:43112:4263":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:43203:4266":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10473:3409":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:41384:3236":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:43417:4273":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:37486:2912":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:12323:4135":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:39991:4083":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:21351:3598":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3095:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:51845:333":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:4155:4981":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2295:4935":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:22011:10268":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:21202:11401":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:2961:2918":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:45143:4330":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:21333:10180":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:2956:2917":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:6419:4089":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:41250:3973":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8075:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:45438:4358":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:9976:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:12605:5107":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:22227:10263":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:2634:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:46265:3977":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:41992:3112":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:51860:1722":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:45373:4355":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:12400:4118":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:39748:4192":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:33388:2907":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:7703:2857":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:6608:4095":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"0:8:1939":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"1:39698:4187":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:41092:3736":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:39844:4204":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:22496:4152":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46177:4431":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:51862:1710":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:3603:3390":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:41736:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:46302:3978":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:1840:4950":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:39020:2923":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2471:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:39755:4997":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:31816:2882":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:45569:4365":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:46090:4428":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2878:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:41344:3047":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:45292:4343":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:43063:3518":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:30186:2059":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:22087:10270":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:7421:11075":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:42013:3114":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:44124:4313":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:21248:11409":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:45128:4329":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"0:5:1937":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"1:40498:4225":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:12100:5062":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:58:2854":{"crate_id":4,"path":["scopeguard","Always"],"kind":"enum"},"1:2644:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:25464:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:12346:4136":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:1854:10682":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:45335:4353":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:51841:455":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:31743:2867":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:40009:4212":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:42502:3739":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5623:3388":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:21331:10510":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2379:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:40507:3402":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:39911:4207":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:12599:5108":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:32960:2903":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:2934:2900":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:44185:4319":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:12818:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:21246:11397":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"4:0:1934":{"crate_id":4,"path":["scopeguard"],"kind":"module"},"1:45455:4359":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:7356:5038":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:9492:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:6614:11444":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:51859:1716":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:51863:917":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:4174:4982":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:42006:3113":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:43461:4077":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:42953:4252":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:4543:2054":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7251:3055":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10819:3243":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:38905:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:45231:4339":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:42991:3517":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:51846:1577":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:2606:10510":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:43375:4271":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2925:2881":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:40259:4223":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:31729:4173":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:726:2950":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:12286:4132":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:1734:641":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:22199:10262":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:46370:4435":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2607:4755":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:10027:3111":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:7928:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:45519:4363":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:39767:4195":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:39732:4191":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:9658:757":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:6619:3400":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:43885:5103":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:45586:4366":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2764:4075":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:43760:4305":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:33561:2908":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3329:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:30599:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:38809:2931":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:45675:4385":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:41469:3047":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:10868:4115":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:39050:2925":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:31846:2883":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:5796:4087":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3123:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:45064:4323":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:10020:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:21339:10183":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:41328:3243":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:44162:4317":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:37596:2914":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:44146:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:42519:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:43897:5099":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:30250:10780":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:31750:4175":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:43869:5100":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:45388:4356":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:39962:3581":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:43889:5104":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:38230:2916":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:39740:4077":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2723:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:5719:3388":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:22589:2962":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:43139:4193":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:42971:3515":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:30224:3146":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:42531:4246":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:32608:2899":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:41394:5051":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:51844:1223":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:46148:4430":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11629:4127":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:46291:3989":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:41270:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:45277:4342":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:21770:11407":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:21456:10181":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:42242:3121":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:51842:1755":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:22417:3600":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:51855:849":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:10025:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:30626:3606":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:45601:4367":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10390:3405":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:51854:843":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:725:10510":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:45248:4340":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:37651:2915":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:41413:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:39940:3575":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:51847:1609":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:39971:4210":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:43583:4288":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:44116:4311":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:43153:4115":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:13418:3419":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:40053:4093":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:9977:3110":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:33734:2910":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:1648:3388":{"crate_id":1,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"1:40032:4088":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:43877:5101":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:12116:4129":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:3341:2928":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:10279:5053":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:45808:4390":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:10037:3115":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:39070:3959":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:43737:4295":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:13202:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:42334:3122":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:40023:3584":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8431:14314":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:12658:5116":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:32842:2901":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:31725:4172":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:39931:4209":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:7937:3025":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:8019:3024":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4514:2868":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:40283:4101":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:42232:10705":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:38920:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:2883:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:2966:2919":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:11061:4122":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:41319:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"0:0:1943":{"crate_id":0,"path":["lock_api"],"kind":"module"},"1:43943:4308":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:12610:5106":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2049:3511":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:31760:2130":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:4390:2858":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:10029:3112":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:7924:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:2435:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:43778:4142":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:45181:4336":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:51861:1728":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:43452:4192":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:2876:2872":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:32236:2897":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:51857:836":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:45470:4360":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:22073:10510":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:43002:4255":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41210:5046":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:43675:4141":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:40110:4218":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:42753:4114":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:45646:4384":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:10039:3116":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:43407:4272":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:40000:4086":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:43600:4289":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:42902:4251":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:46256:3988":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10988:4120":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:12544:2947":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:39818:4201":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:33019:2902":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:3108:2058":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:39813:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:22482:10921":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:41580:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}