{"root":658,"crate_version":"0.4.14","includes_private":false,"index":{"0":{"id":0,"crate_id":0,"name":"INIT","span":{"filename":"src/mutex.rs","begin":[41,5],"end":[41,22]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":[{"other":"#[allow(clippy::declare_interior_mutable_const)]"}],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"value":null}}},"302":{"id":302,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"604":{"id":604,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"25":{"id":25,"crate_id":0,"name":"make_guard_unchecked","span":{"filename":"src/mutex.rs","begin":[194,5],"end":[199,6]},"visibility":"public","docs":"Creates a new `MutexGuard` without checking if the mutex is locked.\n\n# Safety\n\nThis method must only be called if the thread logically holds the lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"327":{"id":327,"crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[66,5],"end":[66,42]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"629":{"id":629,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"50":{"id":50,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"352":{"id":352,"crate_id":0,"name":"lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[221,5],"end":[221,31]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"654":{"id":654,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[106,1],"end":[106,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"75":{"id":75,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"377":{"id":377,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[385,1],"end":[407,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[375,376],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"100":{"id":100,"crate_id":0,"name":"leak","span":{"filename":"src/mutex.rs","begin":[621,5],"end":[625,6]},"visibility":"public","docs":"Leaks the mutex guard and returns a mutable reference to the data\nprotected by the mutex.\n\nThis will leave the `Mutex` in a locked state.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"402":{"id":402,"crate_id":0,"name":"read_recursive","span":{"filename":"src/rwlock.rs","begin":[897,5],"end":[901,6]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nUnlike `read`, this method is guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"125":{"id":125,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[686,1],"end":[692,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[123,124],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"427":{"id":427,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"150":{"id":150,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"452":{"id":452,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"175":{"id":175,"crate_id":0,"name":"GetThreadId","span":{"filename":"src/remutex.rs","begin":[45,1],"end":[55,2]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[172,173],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"477":{"id":477,"crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[1643,5],"end":[1658,6]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"200":{"id":200,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"502":{"id":502,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1602,1],"end":[1602,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"225":{"id":225,"crate_id":0,"name":"data_ptr","span":{"filename":"src/remutex.rs","begin":[401,5],"end":[403,6]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example\nwhen dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has been discarded using\n`mem::forget`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"527":{"id":527,"crate_id":0,"name":"try_with_upgraded","span":{"filename":"src/rwlock.rs","begin":[2233,5],"end":[2246,6]},"visibility":"public","docs":"First, tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then `None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade` which takes the guard by value.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"250":{"id":250,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[558,5],"end":[577,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"552":{"id":552,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2376,5],"end":[2381,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"275":{"id":275,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"577":{"id":577,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"300":{"id":300,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"602":{"id":602,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"23":{"id":23,"crate_id":0,"name":"const_new","span":{"filename":"src/mutex.rs","begin":[179,5],"end":[181,6]},"visibility":"public","docs":"Creates a new mutex based on a pre-existing raw mutex.\n\nThis allows creating a mutex in a constant context on stable Rust.\n\nThis method is a legacy alias for [`from_raw`](Self::from_raw).","links":{"Self::from_raw":22},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_mutex",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"325":{"id":325,"crate_id":0,"name":"unlock_shared","span":{"filename":"src/rwlock.rs","begin":[60,5],"end":[60,36]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"627":{"id":627,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"350":{"id":350,"crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/rwlock.rs","begin":[210,5],"end":[210,79]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"652":{"id":652,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"73":{"id":73,"crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"TypeId","id":74,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"375":{"id":375,"crate_id":0,"name":"from_raw","span":{"filename":"src/rwlock.rs","begin":[389,5],"end":[394,6]},"visibility":"public","docs":"Creates a new new instance of an `RwLock<T>` based on a pre-existing\n`RawRwLock<T>`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_rwlock",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"98":{"id":98,"crate_id":0,"name":"try_map_or_err","span":{"filename":"src/mutex.rs","begin":[578,5],"end":[596,6]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned alongside arbitrary user data\nif the closure returns `Err`.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::try_map_or_err(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"tuple":[{"generic":"Self"},{"generic":"E"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}},{"type":{"generic":"E"}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"400":{"id":400,"crate_id":0,"name":"try_write_until","span":{"filename":"src/rwlock.rs","begin":[793,5],"end":[800,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"123":{"id":123,"crate_id":0,"name":"Target","span":{"filename":"src/mutex.rs","begin":[687,5],"end":[687,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"425":{"id":425,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"148":{"id":148,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"450":{"id":450,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"173":{"id":173,"crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[54,5],"end":[54,49]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"NonZeroUsize","id":174,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"475":{"id":475,"crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[1619,5],"end":[1631,6]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"198":{"id":198,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"500":{"id":500,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"223":{"id":223,"crate_id":0,"name":"force_unlock","span":{"filename":"src/remutex.rs","begin":[370,5],"end":[372,6]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"525":{"id":525,"crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[2183,5],"end":[2194,6]},"visibility":"public","docs":"Atomically downgrades an upgradable read lock lock into a shared read lock\nwithout allowing any writers to take exclusive access of the lock in the\nmeantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"248":{"id":248,"crate_id":0,"name":"from","span":{"filename":"src/remutex.rs","begin":[552,5],"end":[554,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"550":{"id":550,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2369,5],"end":[2371,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"273":{"id":273,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"575":{"id":575,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"298":{"id":298,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"600":{"id":600,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"21":{"id":21,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[146,1],"end":[161,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[19,20],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"323":{"id":323,"crate_id":0,"name":"lock_shared","span":{"filename":"src/rwlock.rs","begin":[50,5],"end":[50,27]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"348":{"id":348,"crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"src/rwlock.rs","begin":[194,1],"end":[200,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[346,347],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"650":{"id":650,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"71":{"id":71,"crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":null,"self_type":{"generic":"T"},"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"373":{"id":373,"crate_id":0,"name":"into_inner","span":{"filename":"src/rwlock.rs","begin":[380,5],"end":[382,6]},"visibility":"public","docs":"Consumes this `RwLock`, returning the underlying data.","links":{},"attrs":[{"other":"#[allow(unused_unsafe)]"},{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"398":{"id":398,"crate_id":0,"name":"try_read_until","span":{"filename":"src/rwlock.rs","begin":[759,5],"end":[766,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"121":{"id":121,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"423":{"id":423,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"146":{"id":146,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"448":{"id":448,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1366,1],"end":[1422,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":336,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[445,446,447],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"171":{"id":171,"crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[8,1],"end":[1039,98]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[8,11,14,17,26,95],"is_stripped":true}}},"196":{"id":196,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"498":{"id":498,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"221":{"id":221,"crate_id":0,"name":"is_locked","span":{"filename":"src/remutex.rs","begin":[346,5],"end":[348,6]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"523":{"id":523,"crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[2166,5],"end":[2171,6]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `upgradable_read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"246":{"id":246,"crate_id":0,"name":"default","span":{"filename":"src/remutex.rs","begin":[545,5],"end":[547,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"548":{"id":548,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2052,1],"end":[2055,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"271":{"id":271,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"573":{"id":573,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"296":{"id":296,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1071,1],"end":[1095,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[295],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"598":{"id":598,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[3061,1],"end":[3083,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":336,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[597],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"19":{"id":19,"crate_id":0,"name":"new","span":{"filename":"src/mutex.rs","begin":[149,5],"end":[154,6]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"321":{"id":321,"crate_id":0,"name":"INIT","span":{"filename":"src/rwlock.rs","begin":[43,5],"end":[43,22]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":[{"other":"#[allow(clippy::declare_interior_mutable_const)]"}],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"value":null}}},"623":{"id":623,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[3118,1],"end":[3124,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[622],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"346":{"id":346,"crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[196,5],"end":[196,37]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"648":{"id":648,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"69":{"id":69,"crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"path":"Infallible","id":70,"args":null}}}}},"371":{"id":371,"crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[330,1],"end":[333,2]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[374,377,393,396,401,404,407,412,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,431,433,435]}}},"94":{"id":94,"crate_id":0,"name":"map","span":{"filename":"src/mutex.rs","begin":[526,5],"end":[538,6]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"396":{"id":396,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[697,1],"end":[731,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":336,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[394,395],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"421":{"id":421,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"144":{"id":144,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[990,5],"end":[996,6]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"446":{"id":446,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[1397,5],"end":[1407,6]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"169":{"id":169,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[1033,5],"end":[1035,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"471":{"id":471,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1448,1],"end":[1454,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[470],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"194":{"id":194,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[191,1],"end":[203,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexTimed","id":14,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[192,193],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"496":{"id":496,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"219":{"id":219,"crate_id":0,"name":"try_lock","span":{"filename":"src/remutex.rs","begin":[325,5],"end":[332,6]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"521":{"id":521,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[2131,5],"end":[2137,6]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockUpgradableReadGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"244":{"id":244,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[221,1],"end":[224,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"546":{"id":546,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"269":{"id":269,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"571":{"id":571,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"294":{"id":294,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[983,1],"end":[1069,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[291,292,293],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"596":{"id":596,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2978,1],"end":[3059,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[593,594,595],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"17":{"id":17,"crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[138,1],"end":[141,2]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[21,24,35,37,40,41,43,45,47,50,53,57,60,62,67,72,75,77,79,82,85,89]}}},"319":{"id":319,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1127,1],"end":[1133,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[318],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"621":{"id":621,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[3110,1],"end":[3116,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[620],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"344":{"id":344,"crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/rwlock.rs","begin":[181,5],"end":[181,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"646":{"id":646,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"67":{"id":67,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"394":{"id":394,"crate_id":0,"name":"force_unlock_read_fair","span":{"filename":"src/rwlock.rs","begin":[711,5],"end":[713,6]},"visibility":"public","docs":"Forcibly unlocks a read lock using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"117":{"id":117,"crate_id":1,"name":"Target","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"419":{"id":419,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"142":{"id":142,"crate_id":0,"name":"try_map_or_err","span":{"filename":"src/mutex.rs","begin":[954,5],"end":[972,6]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned alongside arbitrary user data\nif the closure returns `Err`.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::try_map_or_err(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"tuple":[{"generic":"Self"},{"generic":"E"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}},{"type":{"generic":"E"}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"444":{"id":444,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1260,1],"end":[1364,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[438,439,441,442,443],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"167":{"id":167,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[1025,5],"end":[1027,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"469":{"id":469,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1442,1],"end":[1446,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[468],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"192":{"id":192,"crate_id":0,"name":"try_lock_until","span":{"filename":"src/remutex.rs","begin":[194,5],"end":[196,6]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"494":{"id":494,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"217":{"id":217,"crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[618,1],"end":[621,2]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the ReentrantMutex will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[260,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,281,283,285,287]}}},"519":{"id":519,"crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[2101,5],"end":[2113,6]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then the current guard is returned.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"242":{"id":242,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"544":{"id":544,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"267":{"id":267,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"569":{"id":569,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"292":{"id":292,"crate_id":0,"name":"try_map","span":{"filename":"src/remutex.rs","begin":[1019,5],"end":[1037,6]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"594":{"id":594,"crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[3012,5],"end":[3027,6]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"317":{"id":317,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1119,1],"end":[1125,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[316],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"619":{"id":619,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[3100,1],"end":[3108,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[618],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"40":{"id":40,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[365,1],"end":[432,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexTimed","id":14,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[38,39],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"342":{"id":342,"crate_id":0,"name":"RawRwLockTimed","span":{"filename":"src/rwlock.rs","begin":[167,1],"end":[185,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[339,340,341,343,344,345],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"644":{"id":644,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"65":{"id":65,"crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":null,"self_type":{"generic":"U"},"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"367":{"id":367,"crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[315,5],"end":[315,72]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"392":{"id":392,"crate_id":0,"name":"data_ptr","span":{"filename":"src/rwlock.rs","begin":[599,5],"end":[601,6]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object\nalive, for example when dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded\nusing `mem::forget`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"115":{"id":115,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"417":{"id":417,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"140":{"id":140,"crate_id":0,"name":"map","span":{"filename":"src/mutex.rs","begin":[902,5],"end":[914,6]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"442":{"id":442,"crate_id":0,"name":"try_map_or_err","span":{"filename":"src/rwlock.rs","begin":[1327,5],"end":[1345,6]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. The original guard is returned alongside arbitrary user data\nif the closure returns `Err`.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::try_map_or_err(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"tuple":[{"generic":"Self"},{"generic":"E"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}},{"type":{"generic":"E"}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"165":{"id":165,"crate_id":0,"name":"drop","span":{"filename":"src/mutex.rs","begin":[1016,5],"end":[1021,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"467":{"id":467,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1432,1],"end":[1440,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[466],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"190":{"id":190,"crate_id":0,"name":"bump","span":{"filename":"src/remutex.rs","begin":[179,5],"end":[188,6]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"492":{"id":492,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"215":{"id":215,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[252,1],"end":[279,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[213,214],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"517":{"id":517,"crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[2069,5],"end":[2079,6]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"240":{"id":240,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[61],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"542":{"id":542,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"265":{"id":265,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"567":{"id":567,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"13":{"id":13,"crate_id":0,"name":"Instant","span":{"filename":"src/mutex.rs","begin":[121,5],"end":[121,18]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"315":{"id":315,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1107,1],"end":[1117,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[314],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"617":{"id":617,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[3093,1],"end":[3098,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"DerefMut","id":128,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[616],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"38":{"id":38,"crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[373,5],"end":[380,6]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"340":{"id":340,"crate_id":0,"name":"Instant","span":{"filename":"src/rwlock.rs","begin":[172,5],"end":[172,18]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"642":{"id":642,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"63":{"id":63,"crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":null,"self_type":{"generic":"U"},"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"365":{"id":365,"crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/rwlock.rs","begin":[299,5],"end":[299,73]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"390":{"id":390,"crate_id":0,"name":"force_unlock_write","span":{"filename":"src/rwlock.rs","begin":[568,5],"end":[570,6]},"visibility":"public","docs":"Forcibly unlocks a write lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"113":{"id":113,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"415":{"id":415,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1141,1],"end":[1219,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeTimed","id":368,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[413,414],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"440":{"id":440,"crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[2795,1],"end":[2799,2]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the RwLock will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[564,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,583,585,587,589]}}},"163":{"id":163,"crate_id":0,"name":"deref_mut","span":{"filename":"src/mutex.rs","begin":[1009,5],"end":[1011,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"465":{"id":465,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1424,1],"end":[1430,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[463,464],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"188":{"id":188,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[74,1],"end":[149,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[182,183,184,185,186,187],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"490":{"id":490,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"213":{"id":213,"crate_id":0,"name":"from_raw","span":{"filename":"src/remutex.rs","begin":[256,5],"end":[266,6]},"visibility":"public","docs":"Creates a new reentrant mutex based on a pre-existing raw mutex and a\nhelper to get the thread ID.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_mutex",{"generic":"R"}],["get_thread_id",{"generic":"G"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"238":{"id":238,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"540":{"id":540,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"263":{"id":263,"crate_id":0,"name":"bump","span":{"filename":"src/remutex.rs","begin":[789,5],"end":[794,6]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"565":{"id":565,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[2905,5],"end":[2911,6]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockReadGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"11":{"id":11,"crate_id":0,"name":"RawMutexFair","span":{"filename":"src/mutex.rs","begin":[87,1],"end":[110,2]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[9,10],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"313":{"id":313,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1097,1],"end":[1105,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[311,312],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"615":{"id":615,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[3085,1],"end":[3091,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[613,614],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"36":{"id":36,"crate_id":0,"name":"force_unlock_fair","span":{"filename":"src/mutex.rs","begin":[360,5],"end":[362,6]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"338":{"id":338,"crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"src/rwlock.rs","begin":[153,1],"end":[161,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[337],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"61":{"id":61,"crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"363":{"id":363,"crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"src/rwlock.rs","begin":[276,1],"end":[290,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[361,362],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockDowngrade","id":338,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"86":{"id":86,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[449,5],"end":[465,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"388":{"id":388,"crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[534,5],"end":[536,6]},"visibility":"public","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"111":{"id":111,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"413":{"id":413,"crate_id":0,"name":"try_upgradable_read_for","span":{"filename":"src/rwlock.rs","begin":[1150,5],"end":[1160,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"438":{"id":438,"crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1262,5],"end":[1264,6]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"161":{"id":161,"crate_id":0,"name":"deref","span":{"filename":"src/mutex.rs","begin":[1002,5],"end":[1004,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"463":{"id":463,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[1425,5],"end":[1425,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"186":{"id":186,"crate_id":0,"name":"is_locked","span":{"filename":"src/remutex.rs","begin":[139,5],"end":[141,6]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"488":{"id":488,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1754,1],"end":[1810,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":336,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[485,486,487],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"211":{"id":211,"crate_id":0,"name":"into_inner","span":{"filename":"src/remutex.rs","begin":[247,5],"end":[249,6]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"513":{"id":513,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1843,1],"end":[1849,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[512],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"236":{"id":236,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"538":{"id":538,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"261":{"id":261,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[754,5],"end":[760,6]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"563":{"id":563,"crate_id":0,"name":"try_map_or_else","span":{"filename":"src/rwlock.rs","begin":[2869,5],"end":[2887,6]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. The original guard is returned alongside arbitrary user data\nif the closure returns `Err`.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::try_map_or_err(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"tuple":[{"generic":"Self"},{"generic":"E"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}},{"type":{"generic":"E"}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"286":{"id":286,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[830,5],"end":[832,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"588":{"id":588,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2943,5],"end":[2945,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"9":{"id":9,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[94,5],"end":[94,34]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`](RawMutex::unlock).","links":{"RawMutex::unlock":6},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"311":{"id":311,"crate_id":0,"name":"Target","span":{"filename":"src/remutex.rs","begin":[1100,5],"end":[1100,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"613":{"id":613,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[3086,5],"end":[3086,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"34":{"id":34,"crate_id":0,"name":"data_ptr","span":{"filename":"src/mutex.rs","begin":[295,5],"end":[297,6]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns\na `MutexGuard` but that guard has been discarded using `mem::forget`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"336":{"id":336,"crate_id":0,"name":"RawRwLockFair","span":{"filename":"src/rwlock.rs","begin":[107,1],"end":[149,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[332,333,334,335],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"638":{"id":638,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"59":{"id":59,"crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"361":{"id":361,"crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/rwlock.rs","begin":[282,5],"end":[282,43]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"84":{"id":84,"crate_id":0,"name":"from","span":{"filename":"src/mutex.rs","begin":[443,5],"end":[445,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"386":{"id":386,"crate_id":0,"name":"get_mut","span":{"filename":"src/rwlock.rs","begin":[520,5],"end":[522,6]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `RwLock` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"109":{"id":109,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"411":{"id":411,"crate_id":0,"name":"try_upgradable_read","span":{"filename":"src/rwlock.rs","begin":[1082,5],"end":[1089,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"134":{"id":134,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[718,5],"end":[720,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"159":{"id":159,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[887,1],"end":[890,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":8,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"461":{"id":461,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"184":{"id":184,"crate_id":0,"name":"try_lock","span":{"filename":"src/remutex.rs","begin":[117,5],"end":[119,6]},"visibility":"public","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"486":{"id":486,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[1785,5],"end":[1795,6]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"511":{"id":511,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1837,1],"end":[1841,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[510],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"234":{"id":234,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"536":{"id":536,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"259":{"id":259,"crate_id":0,"name":"unlocked","span":{"filename":"src/remutex.rs","begin":[724,5],"end":[734,6]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"561":{"id":561,"crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[2817,5],"end":[2829,6]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"284":{"id":284,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[822,5],"end":[824,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"586":{"id":586,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2935,5],"end":[2937,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"7":{"id":7,"crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[69,5],"end":[78,6]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"309":{"id":309,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"611":{"id":611,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2969,1],"end":[2972,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"32":{"id":32,"crate_id":0,"name":"force_unlock","span":{"filename":"src/mutex.rs","begin":[265,5],"end":[267,6]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"334":{"id":334,"crate_id":0,"name":"bump_shared","span":{"filename":"src/rwlock.rs","begin":[131,5],"end":[134,6]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"636":{"id":636,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"57":{"id":57,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"359":{"id":359,"crate_id":0,"name":"bump_upgradable","span":{"filename":"src/rwlock.rs","begin":[268,5],"end":[271,6]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"82":{"id":82,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[434,1],"end":[439,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Default","id":83,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Default","id":83,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[81],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"384":{"id":384,"crate_id":0,"name":"write","span":{"filename":"src/rwlock.rs","begin":[491,5],"end":[495,6]},"visibility":"public","docs":"Locks this `RwLock` with exclusive write access, blocking the current\nthread until it can be acquired.\n\nThis function will not return while other writers or other readers\ncurrently have access to the lock.\n\nReturns an RAII guard which will drop the write access of this `RwLock`\nwhen dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"107":{"id":107,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"409":{"id":409,"crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[2047,1],"end":[2050,2]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the RwLock will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[520,524,528,531,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,551,553,555,557]}}},"132":{"id":132,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[712,5],"end":[714,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"434":{"id":434,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1236,5],"end":[1246,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"157":{"id":157,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"459":{"id":459,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"182":{"id":182,"crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[77,5],"end":[82,7]},"visibility":"public","docs":"Initial value for an unlocked mutex.","links":{},"attrs":[{"other":"#[allow(clippy::declare_interior_mutable_const)]"}],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"value":"_"}}},"484":{"id":484,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1732,1],"end":[1752,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeDowngrade","id":363,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[483],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"207":{"id":207,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[72,1],"end":[72,91]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"509":{"id":509,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1827,1],"end":[1835,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[508],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"232":{"id":232,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"534":{"id":534,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2298,1],"end":[2364,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeTimed","id":368,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockUpgradeDowngrade","id":363,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[532,533],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"257":{"id":257,"crate_id":0,"name":"try_map","span":{"filename":"src/remutex.rs","begin":[667,5],"end":[685,6]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"282":{"id":282,"crate_id":0,"name":"drop","span":{"filename":"src/remutex.rs","begin":[811,5],"end":[816,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"584":{"id":584,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2924,5],"end":[2929,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"5":{"id":5,"crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[127,5],"end":[127,62]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"307":{"id":307,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"609":{"id":609,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"30":{"id":30,"crate_id":0,"name":"get_mut","span":{"filename":"src/mutex.rs","begin":[241,5],"end":[243,6]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `Mutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"332":{"id":332,"crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/rwlock.rs","begin":[113,5],"end":[113,41]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"634":{"id":634,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"357":{"id":357,"crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"src/rwlock.rs","begin":[219,1],"end":[247,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[352,353,354,355,356],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"382":{"id":382,"crate_id":0,"name":"read","span":{"filename":"src/rwlock.rs","begin":[457,5],"end":[461,6]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nNote that attempts to recursively acquire a read lock on a `RwLock` when\nthe current thread already holds one may result in a deadlock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"105":{"id":105,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[628,1],"end":[684,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[102,103,104],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"407":{"id":407,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[954,1],"end":[1036,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockRecursiveTimed","id":351,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[405,406],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"130":{"id":130,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[701,1],"end":[709,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[129],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"432":{"id":432,"crate_id":0,"name":"from","span":{"filename":"src/rwlock.rs","begin":[1230,5],"end":[1232,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"155":{"id":155,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"457":{"id":457,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"180":{"id":180,"crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[216,1],"end":[219,2]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](crate::Mutex) for more details about the underlying mutex\nprimitive.","links":{"crate::Mutex":17},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[212,215,226,228,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,247,249,251]}}},"482":{"id":482,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1710,1],"end":[1730,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockDowngrade","id":338,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[481],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"205":{"id":205,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"507":{"id":507,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1820,1],"end":[1825,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"DerefMut","id":128,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[506],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"230":{"id":230,"crate_id":0,"name":"try_lock_until","span":{"filename":"src/remutex.rs","begin":[495,5],"end":[502,6]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"532":{"id":532,"crate_id":0,"name":"try_with_upgraded_for","span":{"filename":"src/rwlock.rs","begin":[2314,5],"end":[2331,6]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_for` which takes the guard by value.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"255":{"id":255,"crate_id":0,"name":"map","span":{"filename":"src/remutex.rs","begin":[643,5],"end":[655,6]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"557":{"id":557,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2392,1],"end":[2398,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[556],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"280":{"id":280,"crate_id":0,"name":"deref","span":{"filename":"src/remutex.rs","begin":[802,5],"end":[804,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"582":{"id":582,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2917,5],"end":[2919,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"3":{"id":3,"crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[52,5],"end":[52,32]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"305":{"id":305,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"607":{"id":607,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"28":{"id":28,"crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[227,5],"end":[234,6]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"330":{"id":330,"crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[89,5],"end":[98,6]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"632":{"id":632,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"53":{"id":53,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"355":{"id":355,"crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[238,5],"end":[238,30]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"657":{"id":657,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,1],"end":[117,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::rwlock","name":"rwlock","id":624,"is_glob":true}}},"380":{"id":380,"crate_id":0,"name":"make_write_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[436,5],"end":[441,6]},"visibility":"public","docs":"Creates a new `RwLockReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds a write lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"103":{"id":103,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/mutex.rs","begin":[659,5],"end":[669,6]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked using a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"405":{"id":405,"crate_id":0,"name":"try_read_recursive_for","span":{"filename":"src/rwlock.rs","begin":[967,5],"end":[977,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.\n\nThis method is guaranteed to succeed without blocking if another read\nlock is held at the time of the call. See the documentation for\n`read_recursive` for details.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"430":{"id":430,"crate_id":0,"name":"default","span":{"filename":"src/rwlock.rs","begin":[1223,5],"end":[1225,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"153":{"id":153,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"455":{"id":455,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"480":{"id":480,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1604,1],"end":[1708,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[474,475,477,478,479],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"203":{"id":203,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"505":{"id":505,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1812,1],"end":[1818,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[503,504],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"228":{"id":228,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[452,1],"end":[469,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[227],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"530":{"id":530,"crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[2280,5],"end":[2295,6]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"555":{"id":555,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2384,1],"end":[2390,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[554],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"278":{"id":278,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[623,1],"end":[626,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"580":{"id":580,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2802,1],"end":[2805,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":331,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"1":{"id":1,"crate_id":0,"name":"GuardMarker","span":{"filename":"src/mutex.rs","begin":[45,5],"end":[45,22]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"303":{"id":303,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"605":{"id":605,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"26":{"id":26,"crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[504,1],"end":[507,2]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the Mutex will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[101,105,106,107,108,109,110,111,112,113,114,115,116,118,121,122,125,127,130,133,135]}}},"328":{"id":328,"crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/rwlock.rs","begin":[73,5],"end":[73,39]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"630":{"id":630,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"353":{"id":353,"crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[224,5],"end":[224,43]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"655":{"id":655,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,1],"end":[109,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::mutex","name":"mutex","id":171,"is_glob":true}}},"378":{"id":378,"crate_id":0,"name":"make_read_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[420,5],"end":[425,6]},"visibility":"public","docs":"Creates a new `RwLockReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds a read lock.\n\nThis function does not increment the read count of the lock. Calling this function when a\nguard has already been produced is undefined behaviour unless the guard was forgotten\nwith `mem::forget`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"101":{"id":101,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[511,1],"end":[626,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[93,94,97,98,99,100],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"403":{"id":403,"crate_id":0,"name":"try_read_recursive","span":{"filename":"src/rwlock.rs","begin":[915,5],"end":[922,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis method is guaranteed to succeed if another read lock is held at the\ntime of the call. See the documentation for `read_recursive` for details.\n\nThis function does not block.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"126":{"id":126,"crate_id":0,"name":"deref_mut","span":{"filename":"src/mutex.rs","begin":[696,5],"end":[698,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"428":{"id":428,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[364,1],"end":[364,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"151":{"id":151,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"453":{"id":453,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"478":{"id":478,"crate_id":0,"name":"try_map_or_err","span":{"filename":"src/rwlock.rs","begin":[1671,5],"end":[1689,6]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is returned alongside arbitrary user data\nif the closure returns `Err`.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::try_map_or_err(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"tuple":[{"generic":"Self"},{"generic":"E"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}},{"type":{"generic":"E"}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"201":{"id":201,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"503":{"id":503,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[1813,5],"end":[1813,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"226":{"id":226,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[281,1],"end":[450,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[216,218,219,220,221,222,223,224,225],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"528":{"id":528,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2174,1],"end":[2247,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeDowngrade","id":363,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[525,526,527],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"251":{"id":251,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[557,1],"end":[578,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[250],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"553":{"id":553,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2374,1],"end":[2382,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[552],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"276":{"id":276,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"578":{"id":578,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"301":{"id":301,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"603":{"id":603,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"24":{"id":24,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[163,1],"end":[182,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[22,23],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"326":{"id":326,"crate_id":0,"name":"lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[63,5],"end":[63,30]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"628":{"id":628,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"49":{"id":49,"crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[rustc_diagnostic_item = \"noop_method_borrow\"]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"351":{"id":351,"crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"src/rwlock.rs","begin":[203,1],"end":[211,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[349,350],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockRecursive","id":348,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockTimed","id":342,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"653":{"id":653,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"376":{"id":376,"crate_id":0,"name":"const_new","span":{"filename":"src/rwlock.rs","begin":[404,5],"end":[406,6]},"visibility":"public","docs":"Creates a new new instance of an `RwLock<T>` based on a pre-existing\n`RawRwLock<T>`.\n\nThis allows creating a `RwLock<T>` in a constant context on stable\nRust.\n\nThis method is a legacy alias for [`from_raw`](Self::from_raw).","links":{"Self::from_raw":375},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_rwlock",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"99":{"id":99,"crate_id":0,"name":"unlocked","span":{"filename":"src/mutex.rs","begin":[604,5],"end":[614,6]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"401":{"id":401,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[733,1],"end":[877,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockTimed","id":342,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[397,398,399,400],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"124":{"id":124,"crate_id":0,"name":"deref","span":{"filename":"src/mutex.rs","begin":[689,5],"end":[691,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"426":{"id":426,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"149":{"id":149,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"451":{"id":451,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":331,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"476":{"id":476,"crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[2963,1],"end":[2967,2]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the RwLock will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[596,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,615,617,619,621,623]}}},"199":{"id":199,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"501":{"id":501,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"224":{"id":224,"crate_id":0,"name":"raw","span":{"filename":"src/remutex.rs","begin":[384,5],"end":[386,6]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `ReentrantMutexGuard`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"R"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"526":{"id":526,"crate_id":0,"name":"with_upgraded","span":{"filename":"src/rwlock.rs","begin":[2207,5],"end":[2220,6]},"visibility":"public","docs":"First, atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.\n\nThen, calls the provided closure with an exclusive reference to the lock's data.\n\nFinally, atomically downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`upgrade` which takes the guard by value.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"Ret"},"is_c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"249":{"id":249,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[550,1],"end":[555,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[248],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"551":{"id":551,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2366,1],"end":[2372,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[549,550],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"274":{"id":274,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"576":{"id":576,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"299":{"id":299,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"601":{"id":601,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"22":{"id":22,"crate_id":0,"name":"from_raw","span":{"filename":"src/mutex.rs","begin":[166,5],"end":[171,6]},"visibility":"public","docs":"Creates a new mutex based on a pre-existing raw mutex.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_mutex",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"324":{"id":324,"crate_id":0,"name":"try_lock_shared","span":{"filename":"src/rwlock.rs","begin":[53,5],"end":[53,39]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"626":{"id":626,"crate_id":0,"name":"GuardSend","span":{"filename":"src/lib.rs","begin":[100,1],"end":[100,26]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[627,628,629,630,631,632,633,634,635,636,637,638,639]}}},"47":{"id":47,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"349":{"id":349,"crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/rwlock.rs","begin":[206,5],"end":[206,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"651":{"id":651,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"72":{"id":72,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"374":{"id":374,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[367,1],"end":[383,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[372,373],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"97":{"id":97,"crate_id":0,"name":"try_map","span":{"filename":"src/mutex.rs","begin":[550,5],"end":[565,6]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"399":{"id":399,"crate_id":0,"name":"try_write_for","span":{"filename":"src/rwlock.rs","begin":[776,5],"end":[783,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"122":{"id":122,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[509,1],"end":[509,97]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"424":{"id":424,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[61],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"147":{"id":147,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"449":{"id":449,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":331,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"172":{"id":172,"crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[50,5],"end":[50,22]},"visibility":"default","docs":"Initial value.","links":{},"attrs":[{"other":"#[allow(clippy::declare_interior_mutable_const)]"}],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"value":null}}},"474":{"id":474,"crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1606,5],"end":[1608,6]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"197":{"id":197,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"499":{"id":499,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"222":{"id":222,"crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"src/remutex.rs","begin":[353,5],"end":[355,6]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"524":{"id":524,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2116,1],"end":[2172,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeFair","id":360,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[521,522,523],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"247":{"id":247,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[543,1],"end":[548,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Default","id":83,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Default","id":83,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[246],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"549":{"id":549,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2367,5],"end":[2367,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"272":{"id":272,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"574":{"id":574,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"297":{"id":297,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"599":{"id":599,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"20":{"id":20,"crate_id":0,"name":"into_inner","span":{"filename":"src/mutex.rs","begin":[158,5],"end":[160,6]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"322":{"id":322,"crate_id":0,"name":"GuardMarker","span":{"filename":"src/rwlock.rs","begin":[47,5],"end":[47,22]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"624":{"id":624,"crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[8,1],"end":[3130,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[331,336,338,342,348,351,357,360,363,368,371,379,381,409,440,476],"is_stripped":true}}},"45":{"id":45,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"347":{"id":347,"crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[199,5],"end":[199,49]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"649":{"id":649,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"372":{"id":372,"crate_id":0,"name":"new","span":{"filename":"src/rwlock.rs","begin":[370,5],"end":[375,6]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"95":{"id":95,"crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[877,1],"end":[881,2]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the Mutex will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,162,164,166,168,170]}}},"397":{"id":397,"crate_id":0,"name":"try_read_for","span":{"filename":"src/rwlock.rs","begin":[742,5],"end":[749,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"422":{"id":422,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"145":{"id":145,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[975,1],"end":[997,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[144],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"447":{"id":447,"crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[1416,5],"end":[1421,6]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"170":{"id":170,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[1030,1],"end":[1036,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[169],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"195":{"id":195,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"497":{"id":497,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"220":{"id":220,"crate_id":0,"name":"get_mut","span":{"filename":"src/remutex.rs","begin":[339,5],"end":[341,6]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `ReentrantMutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"522":{"id":522,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[2147,5],"end":[2157,6]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"245":{"id":245,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[225,1],"end":[228,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"547":{"id":547,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"270":{"id":270,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"572":{"id":572,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"295":{"id":295,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[1088,5],"end":[1094,6]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"597":{"id":597,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[3076,5],"end":[3082,6]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockWriteGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"320":{"id":320,"crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[8,1],"end":[1139,2]},"visibility":"crate","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"atomic_usize\")]"}],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[175,181,180,217,256],"is_stripped":true}}},"622":{"id":622,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[3121,5],"end":[3123,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"43":{"id":43,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"345":{"id":345,"crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/rwlock.rs","begin":[184,5],"end":[184,72]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"647":{"id":647,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"93":{"id":93,"crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[513,5],"end":[515,6]},"visibility":"public","docs":"Returns a reference to the original `Mutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"395":{"id":395,"crate_id":0,"name":"force_unlock_write_fair","span":{"filename":"src/rwlock.rs","begin":[728,5],"end":[730,6]},"visibility":"public","docs":"Forcibly unlocks a write lock using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"118":{"id":118,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"420":{"id":420,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"143":{"id":143,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[892,1],"end":[973,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[140,141,142],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"445":{"id":445,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1381,5],"end":[1387,6]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockReadGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"168":{"id":168,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[1024,1],"end":[1028,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[167],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"470":{"id":470,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1451,5],"end":[1453,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"193":{"id":193,"crate_id":0,"name":"try_lock_for","span":{"filename":"src/remutex.rs","begin":[200,5],"end":[202,6]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"495":{"id":495,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"218":{"id":218,"crate_id":0,"name":"lock","span":{"filename":"src/remutex.rs","begin":[310,5],"end":[314,6]},"visibility":"public","docs":"Acquires a reentrant mutex, blocking the current thread until it is able\nto do so.\n\nIf the mutex is held by another thread then this function will block the\nlocal thread until it is available to acquire the mutex. If the mutex is\nalready held by the current thread then this function will increment the\nlock reference count and return immediately. Upon returning,\nthe thread is the only thread with the mutex held. An RAII guard is\nreturned to allow scoped unlock of the lock. When the guard goes out of\nscope, the mutex will be unlocked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"520":{"id":520,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2057,1],"end":[2114,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[516,517,518,519],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"243":{"id":243,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"545":{"id":545,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"268":{"id":268,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"570":{"id":570,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"293":{"id":293,"crate_id":0,"name":"try_map_or_err","span":{"filename":"src/remutex.rs","begin":[1050,5],"end":[1068,6]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is returned alongside arbitrary user data\nif the closure returns `Err`.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::try_map_or_err(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"tuple":[{"generic":"Self"},{"generic":"E"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}},{"type":{"generic":"E"}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"595":{"id":595,"crate_id":0,"name":"try_map_or_err","span":{"filename":"src/rwlock.rs","begin":[3040,5],"end":[3058,6]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is returned alongside arbitrary user data\nif the closure returns `Err`.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::try_map_or_err(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"tuple":[{"generic":"Self"},{"generic":"E"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}},{"type":{"generic":"E"}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"318":{"id":318,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[1130,5],"end":[1132,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"620":{"id":620,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[3113,5],"end":[3115,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"41":{"id":41,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"343":{"id":343,"crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/rwlock.rs","begin":[178,5],"end":[178,69]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"645":{"id":645,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"368":{"id":368,"crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"src/rwlock.rs","begin":[294,1],"end":[316,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[364,365,366,367],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockTimed","id":342,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"393":{"id":393,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[409,1],"end":[695,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[378,380,382,383,384,385,386,387,388,389,390,391,392],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"116":{"id":116,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"418":{"id":418,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"141":{"id":141,"crate_id":0,"name":"try_map","span":{"filename":"src/mutex.rs","begin":[926,5],"end":[941,6]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"443":{"id":443,"crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1353,5],"end":[1363,6]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"166":{"id":166,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[1014,1],"end":[1022,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[165],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"468":{"id":468,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1443,5],"end":[1445,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"191":{"id":191,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[151,1],"end":[189,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[189,190],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"493":{"id":493,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"216":{"id":216,"crate_id":0,"name":"make_guard_unchecked","span":{"filename":"src/remutex.rs","begin":[291,5],"end":[296,6]},"visibility":"public","docs":"Creates a new `ReentrantMutexGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds the lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"518":{"id":518,"crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[2084,5],"end":[2095,6]},"visibility":"public","docs":"Atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"241":{"id":241,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"543":{"id":543,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"266":{"id":266,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"568":{"id":568,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"291":{"id":291,"crate_id":0,"name":"map","span":{"filename":"src/remutex.rs","begin":[995,5],"end":[1007,6]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"593":{"id":593,"crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[2988,5],"end":[3000,6]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"14":{"id":14,"crate_id":0,"name":"RawMutexTimed","span":{"filename":"src/mutex.rs","begin":[116,1],"end":[128,2]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[12,13,4,5],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"316":{"id":316,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[1122,5],"end":[1124,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"618":{"id":618,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[3102,5],"end":[3107,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"39":{"id":39,"crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[389,5],"end":[396,6]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"341":{"id":341,"crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/rwlock.rs","begin":[175,5],"end":[175,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"643":{"id":643,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"GuardNoSend","id":641,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"366":{"id":366,"crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[307,5],"end":[307,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"89":{"id":89,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[448,1],"end":[466,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[86],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"391":{"id":391,"crate_id":0,"name":"raw","span":{"filename":"src/rwlock.rs","begin":[582,5],"end":[584,6]},"visibility":"public","docs":"Returns the underlying raw reader-writer lock object.\n\nNote that you will most likely need to import the `RawRwLock` trait from\n`lock_api` to be able to call functions on the raw\nreader-writer lock.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a lock guard.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"R"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"114":{"id":114,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"416":{"id":416,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"441":{"id":441,"crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[1299,5],"end":[1314,6]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. Returns the original guard if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"164":{"id":164,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[1007,1],"end":[1012,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"DerefMut","id":128,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[163],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"466":{"id":466,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[1434,5],"end":[1439,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"189":{"id":189,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[160,5],"end":[167,6]},"visibility":"public","docs":"Unlocks this mutex using a fair unlock protocol. The inner mutex\nmay not be unlocked if this mutex was acquired previously in the\ncurrent thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"491":{"id":491,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":331,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"214":{"id":214,"crate_id":0,"name":"const_new","span":{"filename":"src/remutex.rs","begin":[276,5],"end":[278,6]},"visibility":"public","docs":"Creates a new reentrant mutex based on a pre-existing raw mutex and a\nhelper to get the thread ID.\n\nThis allows creating a reentrant mutex in a constant context on stable\nRust.\n\nThis method is a legacy alias for [`from_raw`](Self::from_raw).","links":{"Self::from_raw":213},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_mutex",{"generic":"R"}],["get_thread_id",{"generic":"G"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"516":{"id":516,"crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[2059,5],"end":[2061,6]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"239":{"id":239,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"541":{"id":541,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"264":{"id":264,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[737,1],"end":[795,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[261,262,263],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"566":{"id":566,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2890,1],"end":[2912,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":336,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[565],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"12":{"id":12,"crate_id":0,"name":"Duration","span":{"filename":"src/mutex.rs","begin":[118,5],"end":[118,19]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"314":{"id":314,"crate_id":0,"name":"drop","span":{"filename":"src/remutex.rs","begin":[1111,5],"end":[1116,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"616":{"id":616,"crate_id":0,"name":"deref_mut","span":{"filename":"src/rwlock.rs","begin":[3095,5],"end":[3097,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"37":{"id":37,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[346,1],"end":[363,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[36],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"339":{"id":339,"crate_id":0,"name":"Duration","span":{"filename":"src/rwlock.rs","begin":[169,5],"end":[169,19]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"641":{"id":641,"crate_id":0,"name":"GuardNoSend","span":{"filename":"src/lib.rs","begin":[104,1],"end":[104,33]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[{"other":"#[allow(dead_code)]"}],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[642,643,644,645,646,647,648,649,650,651,652,653,654]}}},"62":{"id":62,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[61],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"364":{"id":364,"crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/rwlock.rs","begin":[296,5],"end":[296,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"389":{"id":389,"crate_id":0,"name":"force_unlock_read","span":{"filename":"src/rwlock.rs","begin":[551,5],"end":[553,6]},"visibility":"public","docs":"Forcibly unlocks a read lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"112":{"id":112,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"414":{"id":414,"crate_id":0,"name":"try_upgradable_read_until","span":{"filename":"src/rwlock.rs","begin":[1170,5],"end":[1180,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"439":{"id":439,"crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[1275,5],"end":[1287,6]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"162":{"id":162,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[999,1],"end":[1005,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[160,161],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"464":{"id":464,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[1427,5],"end":[1429,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"187":{"id":187,"crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"src/remutex.rs","begin":[145,5],"end":[148,6]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"489":{"id":489,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":331,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"212":{"id":212,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[230,1],"end":[250,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[210,211],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"237":{"id":237,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"539":{"id":539,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"262":{"id":262,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/remutex.rs","begin":[770,5],"end":[780,6]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"564":{"id":564,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2807,1],"end":[2888,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[561,562,563],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"287":{"id":287,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[827,1],"end":[833,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[286],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"589":{"id":589,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2940,1],"end":[2946,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[588],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"10":{"id":10,"crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[106,5],"end":[109,6]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`](RawMutex::unlock).","links":{"RawMutex::unlock":6},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"312":{"id":312,"crate_id":0,"name":"deref","span":{"filename":"src/remutex.rs","begin":[1102,5],"end":[1104,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"614":{"id":614,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[3088,5],"end":[3090,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"35":{"id":35,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[184,1],"end":[344,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[25,27,28,30,31,32,33,34],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"337":{"id":337,"crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[160,5],"end":[160,32]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"639":{"id":639,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"60":{"id":60,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"362":{"id":362,"crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[289,5],"end":[289,46]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"85":{"id":85,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[441,1],"end":[446,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[84],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"387":{"id":387,"crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[527,5],"end":[529,6]},"visibility":"public","docs":"Checks whether this `RwLock` is currently locked in any way.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"110":{"id":110,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"412":{"id":412,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1038,1],"end":[1139,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[408,410,411],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"135":{"id":135,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[717,1],"end":[721,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":136,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":136,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[134],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"160":{"id":160,"crate_id":0,"name":"Target","span":{"filename":"src/mutex.rs","begin":[1000,5],"end":[1000,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"462":{"id":462,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1258,1],"end":[1258,89]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"185":{"id":185,"crate_id":0,"name":"unlock","span":{"filename":"src/remutex.rs","begin":[128,5],"end":[135,6]},"visibility":"public","docs":"Unlocks this mutex. The inner mutex may not be unlocked if\nthis mutex was acquired previously in the current thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"487":{"id":487,"crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[1804,5],"end":[1809,6]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `write`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"210":{"id":210,"crate_id":0,"name":"new","span":{"filename":"src/remutex.rs","begin":[233,5],"end":[243,6]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"512":{"id":512,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1846,5],"end":[1848,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"235":{"id":235,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"537":{"id":537,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":331,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"260":{"id":260,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[628,1],"end":[735,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[254,255,257,258,259],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"562":{"id":562,"crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[2841,5],"end":[2856,6]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"285":{"id":285,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[819,1],"end":[825,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[284],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"587":{"id":587,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2932,1],"end":[2938,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[586],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"8":{"id":8,"crate_id":0,"name":"RawMutex","span":{"filename":"src/mutex.rs","begin":[36,1],"end":[79,2]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[0,1,2,3,6,7],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"310":{"id":310,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[978,1],"end":[981,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"612":{"id":612,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2973,1],"end":[2976,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":331,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"33":{"id":33,"crate_id":0,"name":"raw","span":{"filename":"src/mutex.rs","begin":[279,5],"end":[281,6]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `MutexGuard`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"R"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"335":{"id":335,"crate_id":0,"name":"bump_exclusive","span":{"filename":"src/rwlock.rs","begin":[145,5],"end":[148,6]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"637":{"id":637,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"360":{"id":360,"crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"src/rwlock.rs","begin":[251,1],"end":[272,2]},"visibility":"public","docs":"Additional methods for `RwLock`s which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[358,359],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":357,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockFair","id":336,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"385":{"id":385,"crate_id":0,"name":"try_write","span":{"filename":"src/rwlock.rs","begin":[506,5],"end":[513,6]},"visibility":"public","docs":"Attempts to lock this `RwLock` with exclusive write access.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the lock when\nit is dropped.\n\nThis function does not block.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"108":{"id":108,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"RawMutex","id":8,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"410":{"id":410,"crate_id":0,"name":"upgradable_read","span":{"filename":"src/rwlock.rs","begin":[1067,5],"end":[1071,6]},"visibility":"public","docs":"Locks this `RwLock` with upgradable read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers or other\nupgradable reads which hold the lock. There may be other readers currently\ninside the lock when this method returns.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"133":{"id":133,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[711,1],"end":[715,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[132],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"435":{"id":435,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1235,1],"end":[1247,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[434],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"158":{"id":158,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[883,1],"end":[886,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"460":{"id":460,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"183":{"id":183,"crate_id":0,"name":"lock","span":{"filename":"src/remutex.rs","begin":[107,5],"end":[112,6]},"visibility":"public","docs":"Acquires this mutex, blocking if it's held by another thread.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"485":{"id":485,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1769,5],"end":[1775,6]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockWriteGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"510":{"id":510,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1838,5],"end":[1840,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"233":{"id":233,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":null},"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"535":{"id":535,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":331,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"258":{"id":258,"crate_id":0,"name":"try_map_or_err","span":{"filename":"src/remutex.rs","begin":[698,5],"end":[716,6]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is returned alongside arbitrary user data\nif the closure returns `Err`.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::try_map_or_err(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"tuple":[{"generic":"Self"},{"generic":"E"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}},{"type":{"generic":"E"}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"283":{"id":283,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[807,1],"end":[817,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[282],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"585":{"id":585,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2922,1],"end":[2930,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":131,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[584],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"6":{"id":6,"crate_id":0,"name":"unlock","span":{"filename":"src/mutex.rs","begin":[65,5],"end":[65,29]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: RawMutex::lock\n[`try_lock`]: RawMutex::try_lock\n[`try_lock_for`]: RawMutexTimed::try_lock_for\n[`try_lock_until`]: RawMutexTimed::try_lock_until","links":{"RawMutex::lock":2,"RawMutex::try_lock":3,"RawMutexTimed::try_lock_until":5,"RawMutexTimed::try_lock_for":4},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"308":{"id":308,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"610":{"id":610,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"31":{"id":31,"crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[248,5],"end":[250,6]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"333":{"id":333,"crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/rwlock.rs","begin":[120,5],"end":[120,44]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"635":{"id":635,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"56":{"id":56,"crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":55},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"358":{"id":358,"crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/rwlock.rs","begin":[257,5],"end":[257,45]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"81":{"id":81,"crate_id":0,"name":"default","span":{"filename":"src/mutex.rs","begin":[436,5],"end":[438,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"383":{"id":383,"crate_id":0,"name":"try_read","span":{"filename":"src/rwlock.rs","begin":[472,5],"end":[479,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"106":{"id":106,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":null,"self_type":{"generic":"R"},"trait":{"path":"RawMutex","id":8,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"408":{"id":408,"crate_id":0,"name":"make_upgradable_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[1049,5],"end":[1054,6]},"visibility":"public","docs":"Creates a new `RwLockUpgradableReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds an upgradable read lock.\n\nThis function does not increment the read count of the lock. Calling this function when a\nguard has already been produced is undefined behaviour unless the guard was forgotten\nwith `mem::forget`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"433":{"id":433,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1228,1],"end":[1233,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[432],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"156":{"id":156,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":120,"args":null},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[117],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"458":{"id":458,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"181":{"id":181,"crate_id":0,"name":"RawReentrantMutex","span":{"filename":"src/remutex.rs","begin":[64,1],"end":[69,2]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.","links":{"`ReentrantMutex`":180,"`RawMutex`":8},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[188,191,194,195,196,197,198,199,200,201,202,203,204,205,206,207]}}},"483":{"id":483,"crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[1740,5],"end":[1751,6]},"visibility":"public","docs":"Atomically downgrades a write lock into an upgradable read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"206":{"id":206,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[71,1],"end":[71,91]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"508":{"id":508,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[1829,5],"end":[1834,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"231":{"id":231,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[471,1],"end":[541,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexTimed","id":14,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[229,230],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"533":{"id":533,"crate_id":0,"name":"try_with_upgraded_until","span":{"filename":"src/rwlock.rs","begin":[2346,5],"end":[2363,6]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_until` which takes the guard by value.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"256":{"id":256,"crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[972,1],"end":[976,2]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the ReentrantMutex will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[294,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,313,315,317,319]}}},"281":{"id":281,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[797,1],"end":[805,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":175,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[279,280],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"583":{"id":583,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2914,1],"end":[2920,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":119,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[581,582],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"4":{"id":4,"crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[124,5],"end":[124,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"306":{"id":306,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"608":{"id":608,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"331":{"id":331,"crate_id":0,"name":"RawRwLock","span":{"filename":"src/rwlock.rs","begin":[38,1],"end":[99,2]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[321,322,323,324,325,326,327,328,329,330],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"633":{"id":633,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"356":{"id":356,"crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[246,5],"end":[246,42]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"658":{"id":658,"crate_id":0,"name":"lock_api","span":{"filename":"src/lib.rs","begin":[8,1],"end":[117,26]},"visibility":"public","docs":"This library provides type-safe and fully-featured [`Mutex`] and [`RwLock`]\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for [`RwLock`]s, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{"`RwLock`":371,"`Mutex`":17},"attrs":[{"other":"#[<cfg_attr>(docsrs, feature(doc_cfg))]"},{"other":"#[warn(missing_docs)]"},{"other":"#[warn(rust_2018_idioms)]"},{"other":"#[attr = NoStd]"}],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[626,641,655,656,657],"is_stripped":false}}},"79":{"id":79,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[144,1],"end":[144,74]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"381":{"id":381,"crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[1597,1],"end":[1600,2]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the RwLock will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[480,482,484,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,505,507,509,511,513]}}},"104":{"id":104,"crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[678,5],"end":[683,6]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"406":{"id":406,"crate_id":0,"name":"try_read_recursive_until","span":{"filename":"src/rwlock.rs","begin":[987,5],"end":[997,6]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"129":{"id":129,"crate_id":0,"name":"drop","span":{"filename":"src/mutex.rs","begin":[703,5],"end":[708,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"431":{"id":431,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1221,1],"end":[1226,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Default","id":83,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Default","id":83,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[430],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"154":{"id":154,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"456":{"id":456,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"481":{"id":481,"crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[1718,5],"end":[1729,6]},"visibility":"public","docs":"Atomically downgrades a write lock into a read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"204":{"id":204,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"506":{"id":506,"crate_id":0,"name":"deref_mut","span":{"filename":"src/rwlock.rs","begin":[1822,5],"end":[1824,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"229":{"id":229,"crate_id":0,"name":"try_lock_for","span":{"filename":"src/remutex.rs","begin":[479,5],"end":[486,6]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"531":{"id":531,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2249,1],"end":[2296,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeTimed","id":368,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":409,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[529,530],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"254":{"id":254,"crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[630,5],"end":[632,6]},"visibility":"public","docs":"Returns a reference to the original `ReentrantMutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"ReentrantMutex","id":180,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"556":{"id":556,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2395,5],"end":[2397,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"279":{"id":279,"crate_id":0,"name":"Target","span":{"filename":"src/remutex.rs","begin":[800,5],"end":[800,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"581":{"id":581,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2915,5],"end":[2915,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"2":{"id":2,"crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[48,5],"end":[48,20]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"304":{"id":304,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":256,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"606":{"id":606,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":476,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"27":{"id":27,"crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[212,5],"end":[216,6]},"visibility":"public","docs":"Acquires a mutex, blocking the current thread until it is able to do so.\n\nThis function will block the local thread until it is available to acquire\nthe mutex. Upon returning, the thread is the only thread with the mutex\nheld. An RAII guard is returned to allow scoped unlock of the lock. When\nthe guard goes out of scope, the mutex will be unlocked.\n\nAttempts to lock a mutex in the thread which already holds the lock will\nresult in a deadlock.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"329":{"id":329,"crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[77,5],"end":[86,6]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"631":{"id":631,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":null},"for":{"resolved_path":{"path":"GuardSend","id":626,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"52":{"id":52,"crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"354":{"id":354,"crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/rwlock.rs","begin":[231,5],"end":[231,40]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"656":{"id":656,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,1],"end":[114,27]},"visibility":"public","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"atomic_usize\")]"}],"deprecation":null,"inner":{"use":{"source":"crate::remutex","name":"remutex","id":320,"is_glob":true}}},"77":{"id":77,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[143,1],"end":[143,74]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":null},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"379":{"id":379,"crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[1253,1],"end":[1256,2]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[{"other":"#[clippy::has_significant_drop]"},{"must_use":{"reason":"if unused the RwLock will immediately unlock"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[444,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,465,467,469,471]}}},"102":{"id":102,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[643,5],"end":[649,6]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"404":{"id":404,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[879,1],"end":[952,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockRecursive","id":348,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[402,403],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"127":{"id":127,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[694,1],"end":[699,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"DerefMut","id":128,"args":null},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[126],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"429":{"id":429,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[365,1],"end":[365,83]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"RwLock","id":371,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"152":{"id":152,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"454":{"id":454,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":379,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"479":{"id":479,"crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1697,5],"end":[1707,6]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"202":{"id":202,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":181,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"504":{"id":504,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[1815,5],"end":[1817,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"227":{"id":227,"crate_id":0,"name":"force_unlock_fair","span":{"filename":"src/remutex.rs","begin":[466,5],"end":[468,6]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"},{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"529":{"id":529,"crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[2256,5],"end":[2271,6]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Duration","args":null,"self_type":{"generic":"R"},"trait":{"path":"","id":342,"args":null}}}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":381,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"554":{"id":554,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2387,5],"end":[2389,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"277":{"id":277,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":null},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":217,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"579":{"id":579,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2801,1],"end":[2801,102]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":331,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":null},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":null},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":440,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}}},"paths":{"1183":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"906":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1208":{"crate_id":1,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"931":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1233":{"crate_id":1,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"956":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1258":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"679":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"981":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1283":{"crate_id":1,"path":["core","sync","atomic","AtomicPrimitive"],"kind":"trait"},"704":{"crate_id":1,"path":["core","num","niche_types","U64NotAllOnes"],"kind":"struct"},"1006":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1308":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"729":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1031":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1333":{"crate_id":3,"path":["compiler_builtins","math","libm_math","generic","fma","Norm"],"kind":"struct"},"754":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1056":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"175":{"crate_id":0,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"1358":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"779":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1081":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"804":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1106":{"crate_id":1,"path":["core","clone","UseCloned"],"kind":"trait"},"829":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1131":{"crate_id":1,"path":["core","pin","unsafe_pinned","UnsafePinned"],"kind":"struct"},"854":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1156":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"879":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1181":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"904":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1206":{"crate_id":1,"path":["core","hint","select_unpredictable","DropOnPanic"],"kind":"struct"},"48":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"929":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1231":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"954":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1256":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"677":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"979":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1281":{"crate_id":1,"path":["core","random","RandomSource"],"kind":"trait"},"702":{"crate_id":1,"path":["core","num","niche_types","U32NotAllOnes"],"kind":"struct"},"1004":{"crate_id":1,"path":["core","wtf8","Wtf8CodePoints"],"kind":"struct"},"1306":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"727":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1029":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1331":{"crate_id":3,"path":["compiler_builtins","math","libm_math","support","feature_detect","Flags"],"kind":"struct"},"752":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1054":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1356":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"777":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1079":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1381":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"802":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1104":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"827":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1129":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"852":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1154":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"877":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1179":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"902":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1204":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"927":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"46":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"348":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"1229":{"crate_id":1,"path":["core","ffi","va_list","VaArgSafe"],"kind":"trait"},"952":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1254":{"crate_id":1,"path":["core","marker","variance","sealed","Sealed"],"kind":"trait"},"675":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"977":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"96":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1279":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"700":{"crate_id":1,"path":["core","num","niche_types","NonZeroUsizeInner"],"kind":"struct"},"1002":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1304":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"725":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1027":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1329":{"crate_id":3,"path":["compiler_builtins","math","libm_math","support","env","Round"],"kind":"enum"},"750":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1052":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1354":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"775":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1077":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1379":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"800":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1102":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"825":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1127":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"850":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1152":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"875":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1177":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"900":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1202":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"44":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"925":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"1227":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"950":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"371":{"crate_id":0,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"673":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"975":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1252":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1277":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"698":{"crate_id":1,"path":["core","num","niche_types","NonZeroCharInner"],"kind":"struct"},"119":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1000":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"723":{"crate_id":1,"path":["core","marker","variance","PhantomContravariant"],"kind":"struct"},"1025":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1302":{"crate_id":1,"path":["core","core_simd","vector","splat","splat_rt","Splat"],"kind":"struct"},"748":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1327":{"crate_id":3,"path":["compiler_builtins","math","libm_math","support","big","u256"],"kind":"struct"},"1050":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1352":{"crate_id":1,"path":["core"],"kind":"module"},"773":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1075":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1377":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"798":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1100":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"823":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1125":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"848":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1150":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"873":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1175":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"898":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17":{"crate_id":0,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"1200":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"42":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"923":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1225":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"948":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1250":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"671":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"973":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1275":{"crate_id":1,"path":["core","ffi","va_list","sealed","Sealed"],"kind":"trait"},"696":{"crate_id":1,"path":["core","num","niche_types","NonZeroI64Inner"],"kind":"struct"},"998":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1300":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"721":{"crate_id":1,"path":["core","marker","variance","PhantomInvariantLifetime"],"kind":"struct"},"1023":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1325":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"746":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1048":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1350":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"771":{"crate_id":1,"path":["core","slice","GetDisjointMutError"],"kind":"enum"},"1073":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1375":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"796":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1098":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"217":{"crate_id":0,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"821":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1123":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"846":{"crate_id":1,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"1148":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"871":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1173":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"896":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1198":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"921":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"342":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"1223":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"946":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1248":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"669":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"971":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"90":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1273":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"694":{"crate_id":1,"path":["core","num","niche_types","NonZeroI16Inner"],"kind":"struct"},"996":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1298":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"719":{"crate_id":1,"path":["core","marker","variance","PhantomCovariantLifetime"],"kind":"struct"},"1021":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1323":{"crate_id":2,"path":["scopeguard","Strategy"],"kind":"trait"},"744":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1046":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1348":{"crate_id":1,"path":["core","ptr","without_provenance"],"kind":"function"},"769":{"crate_id":1,"path":["core","fmt","FormattingOptions"],"kind":"struct"},"1071":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1373":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"794":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1096":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"819":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1121":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"844":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1146":{"crate_id":1,"path":["core","fmt","num_buffer","NumBuffer"],"kind":"struct"},"869":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1171":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"894":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1196":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"919":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1221":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"944":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1246":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"667":{"crate_id":1,"path":["core","marker","UnsafeUnpin"],"kind":"trait"},"969":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1271":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"88":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"692":{"crate_id":1,"path":["core","num","niche_types","NonZeroU128Inner"],"kind":"struct"},"994":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1296":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"717":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1019":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"440":{"crate_id":0,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1321":{"crate_id":2,"path":["scopeguard","Always"],"kind":"enum"},"742":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1044":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1346":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"767":{"crate_id":1,"path":["core","fmt","Sign"],"kind":"enum"},"1069":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1371":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"792":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1094":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"817":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1119":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"842":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1144":{"crate_id":1,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"867":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1169":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"892":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11":{"crate_id":0,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"1194":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"917":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatNInner"],"kind":"struct"},"338":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"1219":{"crate_id":1,"path":["core","intrinsics","fallback","DisjointBitOr"],"kind":"trait"},"942":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1244":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"363":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"665":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"967":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1269":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"690":{"crate_id":1,"path":["core","num","niche_types","NonZeroU32Inner"],"kind":"struct"},"992":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1294":{"crate_id":1,"path":["core","core_simd","swizzle","shift_elements_left","Shift"],"kind":"struct"},"715":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1017":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"136":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"740":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1042":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1319":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1344":{"crate_id":1,"path":["core","iter"],"kind":"module"},"765":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1067":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1369":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"790":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1092":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"815":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1117":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"840":{"crate_id":1,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"1142":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"865":{"crate_id":1,"path":["core","array","iter","iter_inner","PolymorphicIter"],"kind":"struct"},"1167":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"890":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1192":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"915":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"336":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"1217":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"940":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1242":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"663":{"crate_id":1,"path":["core","mem"],"kind":"module"},"965":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1267":{"crate_id":1,"path":["core","ops","range","IntoBounds"],"kind":"trait"},"688":{"crate_id":1,"path":["core","num","niche_types","NonZeroU8Inner"],"kind":"struct"},"990":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1292":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"713":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1015":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1317":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"738":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1040":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1342":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"763":{"crate_id":1,"path":["core","range","RangeToInclusive"],"kind":"struct"},"1065":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1367":{"crate_id":1,"path":["core","f128"],"kind":"primitive"},"788":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1090":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"813":{"crate_id":1,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"1115":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"838":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1140":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"863":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1165":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"888":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1190":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"913":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1215":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"938":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1240":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"661":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"963":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1265":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"686":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"988":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"409":{"crate_id":0,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"711":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1013":{"crate_id":1,"path":["core","escape","MaybeEscaped"],"kind":"struct"},"1290":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1315":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"736":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1038":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1340":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"761":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"1063":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1365":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"786":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1088":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"811":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1113":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"836":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1138":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"861":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1163":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"886":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1188":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"911":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1213":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"936":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"55":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"357":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"659":{"crate_id":1,"path":["core","marker","MetaSized"],"kind":"trait"},"80":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"961":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"684":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"986":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1238":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1263":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"709":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1011":{"crate_id":1,"path":["core","escape","MaybeEscapedCharacter"],"kind":"union"},"1288":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"734":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1036":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1313":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1338":{"crate_id":1,"path":["core","intrinsics","unchecked_funnel_shl"],"kind":"function"},"759":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"180":{"crate_id":0,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"1061":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"784":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1086":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1363":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"809":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1111":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"834":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1136":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"859":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1161":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"884":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1186":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"909":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1211":{"crate_id":1,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"934":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1236":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"78":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"959":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"682":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"984":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1261":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"707":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1286":{"crate_id":1,"path":["core","slice","private_get_disjoint_mut_index","Sealed"],"kind":"trait"},"128":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1009":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"732":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1034":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1311":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"757":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1059":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1336":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1361":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"782":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1084":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"807":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1109":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"832":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1134":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"857":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1159":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"882":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1184":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"907":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"26":{"crate_id":0,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"1209":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"51":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"932":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1234":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"957":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"76":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1259":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"680":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"982":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1284":{"crate_id":1,"path":["core","sync","atomic","Sealed"],"kind":"trait"},"705":{"crate_id":1,"path":["core","num","niche_types","I64NotAllOnes"],"kind":"struct"},"1007":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1309":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"730":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1032":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1334":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"755":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1057":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1359":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"780":{"crate_id":1,"path":["core","wtf8","CodePoint"],"kind":"struct"},"1082":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"805":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1107":{"crate_id":1,"path":["core","mem","drop_guard","DropGuard"],"kind":"struct"},"830":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1132":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"855":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1157":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"880":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1182":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"905":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1207":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"930":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1232":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"351":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"74":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"955":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"678":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"980":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1257":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1282":{"crate_id":1,"path":["core","random","Distribution"],"kind":"trait"},"703":{"crate_id":1,"path":["core","num","niche_types","I32NotAllOnes"],"kind":"struct"},"1005":{"crate_id":1,"path":["core","wtf8","EncodeWide"],"kind":"struct"},"1307":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"728":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1030":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1332":{"crate_id":3,"path":["compiler_builtins","math","libm_math","support","hex_float","HexFloatParseError"],"kind":"struct"},"753":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"174":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"476":{"crate_id":0,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"778":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1055":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1080":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1357":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"803":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1105":{"crate_id":1,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"828":{"crate_id":1,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"1130":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"853":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1155":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"878":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1180":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"903":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1205":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"626":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"928":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1230":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"953":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1255":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"676":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"978":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1280":{"crate_id":1,"path":["core","pat","RangePattern"],"kind":"trait"},"701":{"crate_id":1,"path":["core","num","niche_types","NonZeroIsizeInner"],"kind":"struct"},"1003":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1305":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"726":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1028":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1330":{"crate_id":3,"path":["compiler_builtins","math","libm_math","support","env","Status"],"kind":"struct"},"751":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1053":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1355":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"776":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1078":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1380":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"801":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1103":{"crate_id":1,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"826":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1128":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"851":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1153":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"876":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1178":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"901":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1203":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"926":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1228":{"crate_id":1,"path":["core","slice","GetDisjointMutIndex"],"kind":"trait"},"951":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"70":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1253":{"crate_id":1,"path":["core","marker","variance","Variance"],"kind":"trait"},"674":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"95":{"crate_id":0,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"976":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"699":{"crate_id":1,"path":["core","num","niche_types","UsizeNoHighBit"],"kind":"struct"},"1001":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"120":{"crate_id":1,"path":["core","ops","deref","Receiver"],"kind":"trait"},"1278":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"724":{"crate_id":1,"path":["core","marker","variance","PhantomInvariant"],"kind":"struct"},"1026":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1303":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"749":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1051":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1328":{"crate_id":3,"path":["compiler_builtins","math","libm_math","support","big","i256"],"kind":"struct"},"1353":{"crate_id":2,"path":["scopeguard"],"kind":"module"},"774":{"crate_id":1,"path":["core","str","pattern","Utf8Pattern"],"kind":"enum"},"1076":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1378":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"799":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1101":{"crate_id":1,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"824":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1126":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"849":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1151":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"874":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1176":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"18":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"899":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1201":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"924":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1226":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"68":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"949":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"672":{"crate_id":1,"path":["core","num","dec2flt","decimal_seq","DecimalSeq"],"kind":"struct"},"974":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1251":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1276":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"697":{"crate_id":1,"path":["core","num","niche_types","NonZeroI128Inner"],"kind":"struct"},"999":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1301":{"crate_id":1,"path":["core","core_simd","swizzle","extract","Extract"],"kind":"struct"},"722":{"crate_id":1,"path":["core","marker","variance","PhantomCovariant"],"kind":"struct"},"1024":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1326":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"747":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"enum"},"1049":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1351":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"772":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1074":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1376":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"797":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1099":{"crate_id":1,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"822":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1124":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"847":{"crate_id":1,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"1149":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"872":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1174":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"897":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1199":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"922":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1224":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"66":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"368":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"670":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"947":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"972":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1249":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"695":{"crate_id":1,"path":["core","num","niche_types","NonZeroI32Inner"],"kind":"struct"},"997":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1274":{"crate_id":1,"path":["core","cell","CloneFromCell"],"kind":"trait"},"720":{"crate_id":1,"path":["core","marker","variance","PhantomContravariantLifetime"],"kind":"struct"},"1022":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1299":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1324":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"745":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1047":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1349":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"770":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1072":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1374":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"795":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1097":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"820":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1122":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"845":{"crate_id":1,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"1147":{"crate_id":1,"path":["core","fmt","num_buffer","NumBufferTrait"],"kind":"trait"},"870":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1172":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"895":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"14":{"crate_id":0,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"1197":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"920":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"945":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"64":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1247":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"668":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"970":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1272":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"693":{"crate_id":1,"path":["core","num","niche_types","NonZeroI8Inner"],"kind":"struct"},"995":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1297":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"718":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1020":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1322":{"crate_id":2,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"743":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1045":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1347":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"768":{"crate_id":1,"path":["core","fmt","DebugAsHex"],"kind":"enum"},"1070":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1372":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"793":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1095":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"818":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1120":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"843":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1145":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"868":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1170":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"893":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1195":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"918":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1220":{"crate_id":1,"path":["core","intrinsics","fallback","FunnelShift"],"kind":"trait"},"641":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"943":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1245":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"666":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"968":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"87":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1270":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"691":{"crate_id":1,"path":["core","num","niche_types","NonZeroU64Inner"],"kind":"struct"},"993":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1295":{"crate_id":1,"path":["core","core_simd","swizzle","shift_elements_right","Shift"],"kind":"struct"},"716":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1018":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1320":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"741":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1043":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1345":{"crate_id":1,"path":["core","write"],"kind":"macro"},"766":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1068":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1370":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"791":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1093":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"816":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1118":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"841":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1143":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"866":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1168":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"891":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1193":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"916":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1218":{"crate_id":1,"path":["core","intrinsics","fallback","CarryingMulAdd"],"kind":"trait"},"941":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1243":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"664":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"966":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1268":{"crate_id":1,"path":["core","ops","range","OneSidedRangeBound"],"kind":"enum"},"689":{"crate_id":1,"path":["core","num","niche_types","NonZeroU16Inner"],"kind":"struct"},"991":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1293":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"714":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1016":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1318":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"739":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1041":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1343":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"764":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1066":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1368":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"789":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1091":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"814":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1116":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"839":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1141":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"864":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1166":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"889":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"8":{"crate_id":0,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"1191":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"914":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1216":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"939":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"58":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"360":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"662":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"964":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"83":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"687":{"crate_id":1,"path":["core","num","niche_types","Nanoseconds"],"kind":"struct"},"989":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1241":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1266":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"712":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1014":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1291":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"737":{"crate_id":1,"path":["core","bstr","ByteStr"],"kind":"struct"},"1039":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1316":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1341":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"762":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"1064":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1366":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"787":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1089":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"812":{"crate_id":1,"path":["core","core_arch","simd","f16x4"],"kind":"struct"},"1114":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"837":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1139":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"862":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1164":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"887":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1189":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"912":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1214":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"937":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1239":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"660":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"962":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1264":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"685":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"987":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1289":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"710":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1012":{"crate_id":1,"path":["core","escape","AlwaysEscaped"],"kind":"struct"},"131":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1314":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"735":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1037":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1339":{"crate_id":1,"path":["core","intrinsics","unchecked_funnel_shr"],"kind":"function"},"760":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"1062":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"181":{"crate_id":0,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"1364":{"crate_id":1,"path":["core","f16"],"kind":"primitive"},"785":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1087":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"810":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1112":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"835":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"256":{"crate_id":0,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"1137":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"860":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1162":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"885":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1187":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"910":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"29":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"331":{"crate_id":0,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"1212":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"54":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"935":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"658":{"crate_id":0,"path":["lock_api"],"kind":"module"},"960":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1237":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"381":{"crate_id":0,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"683":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"985":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1262":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"708":{"crate_id":1,"path":["core","intrinsics","AtomicOrdering"],"kind":"enum"},"1010":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1287":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1312":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"733":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1035":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1337":{"crate_id":1,"path":["core","intrinsics","disjoint_bitor"],"kind":"function"},"758":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1060":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1362":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"783":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1085":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"808":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1110":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"833":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1135":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"858":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1160":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"883":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1185":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"908":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1210":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"933":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1235":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"958":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"379":{"crate_id":0,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"681":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"983":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1260":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1285":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"706":{"crate_id":1,"path":["core","num","niche_types","CodePointInner"],"kind":"struct"},"1008":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1310":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"731":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1033":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1335":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"756":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1058":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1360":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"781":{"crate_id":1,"path":["core","wtf8","Wtf8"],"kind":"struct"},"1083":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"806":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1108":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"831":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1133":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"856":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1158":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"881":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"}},"external_crates":{"2":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"target":{"triple":"x86_64-unknown-linux-gnu","target_features":[{"name":"adx","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"aes","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"amx-avx512","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-bf16","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-complex","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-fp8","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-fp16","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-int8","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-movrs","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-tf32","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-tile","implies_features":[],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-transpose","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"apxf","implies_features":[],"unstable_feature_gate":"apx_target_feature","globally_enabled":false},{"name":"avx","implies_features":["sse4.2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx2","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx10.1","implies_features":["avx512bf16","avx512bitalg","avx512bw","avx512cd","avx512dq","avx512f","avx512fp16","avx512ifma","avx512vbmi","avx512vbmi2","avx512vl","avx512vnni","avx512vpopcntdq"],"unstable_feature_gate":"avx10_target_feature","globally_enabled":false},{"name":"avx10.2","implies_features":["avx10.1"],"unstable_feature_gate":"avx10_target_feature","globally_enabled":false},{"name":"avx512bf16","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512bitalg","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512bw","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512cd","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512dq","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512f","implies_features":["avx2","fma","f16c"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512fp16","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512ifma","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vbmi","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vbmi2","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vl","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vnni","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vp2intersect","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vpopcntdq","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxifma","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxneconvert","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnni","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnniint8","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnniint16","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"bmi1","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"bmi2","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"cmpxchg16b","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"ermsb","implies_features":[],"unstable_feature_gate":"ermsb_target_feature","globally_enabled":false},{"name":"f16c","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"fma","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"fxsr","implies_features":[],"unstable_feature_gate":null,"globally_enabled":true},{"name":"gfni","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"kl","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"lahfsahf","implies_features":[],"unstable_feature_gate":"lahfsahf_target_feature","globally_enabled":false},{"name":"lzcnt","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"movbe","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"movrs","implies_features":[],"unstable_feature_gate":"movrs_target_feature","globally_enabled":false},{"name":"pclmulqdq","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"popcnt","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"prfchw","implies_features":[],"unstable_feature_gate":"prfchw_target_feature","globally_enabled":false},{"name":"rdrand","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"rdseed","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"rtm","implies_features":[],"unstable_feature_gate":"rtm_target_feature","globally_enabled":false},{"name":"sha","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sha512","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sm3","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sm4","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"soft-float","implies_features":[],"unstable_feature_gate":"x87_target_feature","globally_enabled":false},{"name":"sse","implies_features":[],"unstable_feature_gate":null,"globally_enabled":true},{"name":"sse2","implies_features":["sse"],"unstable_feature_gate":null,"globally_enabled":true},{"name":"sse3","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4.1","implies_features":["ssse3"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4.2","implies_features":["sse4.1"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4a","implies_features":["sse3"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"ssse3","implies_features":["sse3"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"tbm","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"vaes","implies_features":["avx2","aes"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"vpclmulqdq","implies_features":["avx","pclmulqdq"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"widekl","implies_features":["kl"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"x87","implies_features":[],"unstable_feature_gate":"x87_target_feature","globally_enabled":true},{"name":"xop","implies_features":["avx","sse4a"],"unstable_feature_gate":"xop_target_feature","globally_enabled":false},{"name":"xsave","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsavec","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsaveopt","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsaves","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false}]},"format_version":56}