{"root":"0:0:1648","crate_version":"0.4.8","includes_private":false,"index":{"1:2884:105":{"id":"1:2884:105","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2885:414","1:2886:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2868-0:8:1644":{"id":"b:1:2868-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2870:28519"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23175:3161":{"id":"1:23175:3161","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23176:2939","1:23177:1260","1:23178:1285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:514:1774":{"id":"0:514:1774","crate_id":0,"name":"GuardMarker","span":{"filename":"src/rwlock.rs","begin":[47,4],"end":[47,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:10811:147":{"id":"1:10811:147","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10812:656","1:10813:2233","1:10814:29024","1:10815:29025","1:10816:29026","1:10817:29027","1:10818:29028","1:10819:29029","1:10820:29030","1:10821:29031","1:10822:29032","1:10823:29033","1:10824:29034","1:10825:29035","1:10826:29036","1:10827:1549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3364:215-0:8:1644":{"id":"a:1:3364:215-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,0],"end":[107,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::mutex","name":"mutex","id":"0:12:1645","glob":true}},"1:3611:1946":{"id":"1:3611:1946","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3612:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:515:2089":{"id":"0:515:2089","crate_id":0,"name":"lock_shared","span":{"filename":"src/rwlock.rs","begin":[50,4],"end":[50,26]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:531:122":{"id":"0:531:122","crate_id":0,"name":"Duration","span":{"filename":"src/rwlock.rs","begin":[169,4],"end":[169,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:928":{"id":"0:928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::rwlock","name":"rwlock","id":"0:492:1647","glob":true}},"1:3171:150":{"id":"1:3171:150","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3173:2691"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3372:222":{"id":"1:3372:222","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:33:1771":{"id":"0:33:1771","crate_id":0,"name":"INIT","span":{"filename":"src/mutex.rs","begin":[41,4],"end":[41,21]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"a:1:3376:224-0:5:1642":{"id":"a:1:3376:224-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:23387:27761":{"id":"1:23387:27761","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23388:28941","1:23389:31846","1:23390:31847"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23380:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:35:1776":{"id":"0:35:1776","crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:541:2148":{"id":"0:541:2148","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/rwlock.rs","begin":[206,4],"end":[206,77]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13357:2997":{"id":"1:13357:2997","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13359:2692","1:13360:28820","1:13361:28821"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13351:2996","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:12:1645":{"id":"0:12:1645","crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[8,0],"end":[947,97]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:32:1768","0:39:1796","0:42:1810","0:47:163","0:103:164","0:163:1919"],"is_stripped":true}},"a:1:9533:3080-0:8:1644":{"id":"a:1:9533:3080-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9533:3080","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3463:2553":{"id":"1:3463:2553","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3465:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8669:137":{"id":"1:8669:137","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8671:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3203:685":{"id":"1:3203:685","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3496:2559":{"id":"1:3496:2559","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3498:183","1:3499:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::remutex","name":"remutex","id":"0:220:1646","glob":true}},"1:23763:2942":{"id":"1:23763:2942","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23764:1283","1:23765:1282","1:23766:1280","1:23767:1279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"1:23175:3161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2859:97":{"id":"1:2859:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2861:2443"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3614:131":{"id":"1:3614:131","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3616:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3617:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1648":{"id":"0:0:1648","crate_id":0,"name":"lock_api","span":{"filename":"src/lib.rs","begin":[8,0],"end":[113,25]},"visibility":"public","docs":"This library provides type-safe and fully-featured `Mutex` and `RwLock`\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for RwLocks, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{},"attrs":["#![no_std]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5:1642","0:8:1644","0:219","0:491","0:928"],"is_stripped":false}},"0:523:2106":{"id":"0:523:2106","crate_id":0,"name":"RawRwLockFair","span":{"filename":"src/rwlock.rs","begin":[107,0],"end":[149,1]},"visibility":"public","docs":"Additional methods for RwLocks which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:524:2108","0:525:2110","0:526:2114","0:527:2118"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:492:1647":{"id":"0:492:1647","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[8,0],"end":[2604,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:512:2086","0:523:2106","0:528:2121","0:530:2126","0:537:2139","0:540:2145","0:543:2155","0:549:2170","0:552:2179","0:555:2186","0:560:2204","0:645:213","0:695:214","0:760:2330","0:821:2362","0:872:2391"],"is_stripped":true}},"1:3376:224":{"id":"1:3376:224","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3216:1430":{"id":"1:3216:1430","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:550:2172":{"id":"0:550:2172","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/rwlock.rs","begin":[257,4],"end":[257,44]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3373:221":{"id":"1:3373:221","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8682:2682":{"id":"1:8682:2682","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8684:2699","1:8686:2700","1:8687:2701"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2862:98":{"id":"1:2862:98","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2864:28519"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:512:2086":{"id":"0:512:2086","crate_id":0,"name":"RawRwLock","span":{"filename":"src/rwlock.rs","begin":[38,0],"end":[99,1]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:513:1771","0:514:1774","0:515:2089","0:516:2091","0:517:2094","0:518:2096","0:519:2098","0:520:2101","0:521:1789","0:522:2104"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10580:191":{"id":"1:10580:191","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3459:2550":{"id":"1:3459:2550","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3460:183","1:3461:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,0],"end":[104,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:14057:139":{"id":"1:14057:139","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14058:183","1:14059:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3829:138":{"id":"1:3829:138","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3831:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3405:2537":{"id":"1:3405:2537","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:37:1787":{"id":"0:37:1787","crate_id":0,"name":"unlock","span":{"filename":"src/mutex.rs","begin":[65,4],"end":[65,28]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: #tymethod.lock\n[`try_lock`]: #tymethod.try_lock\n[`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for\n[`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2868-0:5:1642":{"id":"b:1:2868-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2870:28519"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:560:2204":{"id":"0:560:2204","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[330,0],"end":[333,1]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:23138:3205":{"id":"1:23138:3205","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23139:28530","1:23140:1238","1:23141:1239","1:23142:28531","1:23143:28532","1:23144:28533","1:23145:28534","1:23146:28535","1:23147:28536","1:23148:28537"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23151:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:540:2145":{"id":"0:540:2145","crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"src/rwlock.rs","begin":[203,0],"end":[211,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:541:2148","0:542:2149"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursive","id":"0:537:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:530:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3165:75":{"id":"1:3165:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3167:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:41:1806":{"id":"0:41:1806","crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[110,4],"end":[113,5]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3512:2563":{"id":"1:3512:2563","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3514:183","1:3515:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:28:2507":{"id":"4:28:2507","crate_id":4,"name":"Strategy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:29:31873"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:220:1646":{"id":"0:220:1646","crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[8,0],"end":[1036,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:265:1976","0:268:1989","0:306:2017","0:374:2023","0:436:2062"],"is_stripped":true}},"0:45:1815":{"id":"0:45:1815","crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[128,4],"end":[128,60]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:42:1810","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:306:2017":{"id":"0:306:2017","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](struct.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"b:1:2865-0:5:1642":{"id":"b:1:2865-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2867:2443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:528:2121":{"id":"0:528:2121","crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"src/rwlock.rs","begin":[153,0],"end":[161,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:529:2124"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:513:1771":{"id":"0:513:1771","crate_id":0,"name":"INIT","span":{"filename":"src/rwlock.rs","begin":[43,4],"end":[43,21]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"1:10801:143":{"id":"1:10801:143","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10802:718","1:10804:29642"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:517:2094":{"id":"0:517:2094","crate_id":0,"name":"unlock_shared","span":{"filename":"src/rwlock.rs","begin":[60,4],"end":[60,35]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:872:2391":{"id":"0:872:2391","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[2469,0],"end":[2473,1]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:8197:2951":{"id":"1:8197:2951","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8198:30583","1:8199:30584","1:8200:30581","1:8201:30577","1:8202:30585","1:8203:30582","1:8204:30580"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3743:2572":{"id":"1:3743:2572","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3745:29686","1:3746:29687","1:3747:29688"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:1:3212-0:5:1642":{"id":"b:1:3212-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3215:128","1:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:524:2108":{"id":"0:524:2108","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/rwlock.rs","begin":[113,4],"end":[113,40]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3181:232":{"id":"1:3181:232","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3183:128","1:3184:1430"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3197-0:8:1644":{"id":"b:1:3197-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3200:2691"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:521:1789":{"id":"0:521:1789","crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[77,4],"end":[86,5]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38:1789":{"id":"0:38:1789","crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3369:1826":{"id":"1:3369:1826","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:547:2164":{"id":"0:547:2164","crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[238,4],"end":[238,29]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3617:132":{"id":"1:3617:132","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3619:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3620:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3870:2528":{"id":"1:3870:2528","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:526:2114":{"id":"0:526:2114","crate_id":0,"name":"bump_shared","span":{"filename":"src/rwlock.rs","begin":[131,4],"end":[134,5]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3168:74":{"id":"1:3168:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3170:2690"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:44:1813":{"id":"0:44:1813","crate_id":0,"name":"Instant","span":{"filename":"src/mutex.rs","begin":[125,4],"end":[125,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:1:3201-0:8:1644":{"id":"b:1:3201-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:536:2132":{"id":"0:536:2132","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/rwlock.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3212-0:8:1644":{"id":"b:1:3212-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3215:128","1:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:542:2149":{"id":"0:542:2149","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/rwlock.rs","begin":[210,4],"end":[210,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13342:2993":{"id":"1:13342:2993","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13344:2996","1:13345:29603","1:13346:29608","1:13347:29604","1:13348:29606","1:13349:29605","1:13350:29607"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:32:1768":{"id":"0:32:1768","crate_id":0,"name":"RawMutex","span":{"filename":"src/mutex.rs","begin":[36,0],"end":[79,1]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:33:1771","0:34:1774","0:35:1776","0:36:1779","0:37:1787","0:38:1789"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:549:2170":{"id":"0:549:2170","crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"src/rwlock.rs","begin":[251,0],"end":[272,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:550:2172","0:551:2176"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:543:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:523:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13351:2996":{"id":"1:13351:2996","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13353:3017","1:13354:928","1:13355:30475","1:13356:30476"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14540:3155":{"id":"1:14540:3155","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14541:30338","1:14542:30339","1:14543:30340","1:14544:30341","1:14545:30342","1:14546:30343","1:14547:2728"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3835:2575":{"id":"1:3835:2575","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3837:28638"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10570:120":{"id":"1:10570:120","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10571:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3405:2537-0:5:1642":{"id":"a:1:3405:2537-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3405:2537","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:9157:2916":{"id":"1:9157:2916","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:43:122":{"id":"0:43:122","crate_id":0,"name":"Duration","span":{"filename":"src/mutex.rs","begin":[122,4],"end":[122,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3506:2562":{"id":"1:3506:2562","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3508:183","1:3509:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:522:2104":{"id":"0:522:2104","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[89,4],"end":[98,5]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9533:3080-0:5:1642":{"id":"a:1:9533:3080-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9533:3080","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3215:128":{"id":"1:3215:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39108:2972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:2953:179":{"id":"1:2953:179","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2954:421","1:2955:2687","1:2956:2688","1:2957:2689"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2922:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3364:215":{"id":"1:3364:215","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:530:2126":{"id":"0:530:2126","crate_id":0,"name":"RawRwLockTimed","span":{"filename":"src/rwlock.rs","begin":[167,0],"end":[185,1]},"visibility":"public","docs":"Additional methods for RwLocks which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:531:122","0:532:1813","0:533:2128","0:534:2129","0:535:2131","0:536:2132"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:695:214":{"id":"0:695:214","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[1474,0],"end":[1477,1]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:3812:2573":{"id":"1:3812:2573","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3743:2572","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4146:2955":{"id":"1:4146:2955","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4147:28719"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:4097-0:5:1642":{"id":"b:1:4097-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9534:3082":{"id":"1:9534:3082","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:9534:3082-0:8:1644":{"id":"a:1:9534:3082-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9534:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:9161:2949":{"id":"1:9161:2949","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"1:8197:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:14072:151":{"id":"1:14072:151","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14073:183","1:14074:151","1:14075:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3676:2570":{"id":"1:3676:2570","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3678:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"1:3672:2569","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:39:1796":{"id":"0:39:1796","crate_id":0,"name":"RawMutexFair","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[114,1]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:40:1801","0:41:1806"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3272:128":{"id":"1:3272:128","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3273:3401","1:3275:29358","1:3276:29359","1:3277:28719"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"1:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23238:2943":{"id":"1:23238:2943","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23228:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:537:2139":{"id":"0:537:2139","crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"src/rwlock.rs","begin":[194,0],"end":[200,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:538:2141","0:539:2143"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:436:2062":{"id":"0:436:2062","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[901,0],"end":[905,1]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:265:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:8632:3075":{"id":"1:8632:3075","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8634:2753"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:516:2091":{"id":"0:516:2091","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/rwlock.rs","begin":[53,4],"end":[53,38]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2865-0:8:1644":{"id":"b:1:2865-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2867:2443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3475:2554":{"id":"1:3475:2554","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3477:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3467:2557":{"id":"1:3467:2557","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3469:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:266:1771":{"id":"0:266:1771","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[50,4],"end":[50,21]},"visibility":"default","docs":"Initial value.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"1:8742:2681":{"id":"1:8742:2681","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8743:798","1:8744:2698"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2870:28519":{"id":"1:2870:28519","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:525:2110":{"id":"0:525:2110","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/rwlock.rs","begin":[120,4],"end":[120,43]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:2922:125":{"id":"1:2922:125","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10584:2773":{"id":"1:10584:2773","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9154:2915":{"id":"1:9154:2915","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:546:2162":{"id":"0:546:2162","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/rwlock.rs","begin":[231,4],"end":[231,39]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:4896:3084":{"id":"1:4896:3084","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4897:2702","1:4898:30055","1:4899:2705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3374:107":{"id":"1:3374:107","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3587:117":{"id":"1:3587:117","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3588:226","1:3589:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3210:128":{"id":"1:3210:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"1:3672:2569":{"id":"1:3672:2569","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3674:183","1:3675:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:374:2023":{"id":"0:374:2023","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[603,0],"end":[606,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":["#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:265:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:10574:2769":{"id":"1:10574:2769","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:47:163":{"id":"0:47:163","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[142,0],"end":[145,1]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:10563:110":{"id":"1:10563:110","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10564:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3501:2560":{"id":"1:3501:2560","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3503:183","1:3504:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:645:213":{"id":"0:645:213","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[1186,0],"end":[1189,1]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:557:2189":{"id":"0:557:2189","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/rwlock.rs","begin":[299,4],"end":[299,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3405:2537-0:8:1644":{"id":"a:1:3405:2537-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3405:2537","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:10578:2771":{"id":"1:10578:2771","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10846:3069":{"id":"1:10846:3069","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10847:147","1:10848:13102","1:10849:30284"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:24072:2941":{"id":"1:24072:2941","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:24073:2939"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:24068:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4095:68":{"id":"1:4095:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4096:1443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:3522:2565":{"id":"1:3522:2565","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3524:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3620:133":{"id":"1:3620:133","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3622:183","1:3623:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10572:2768":{"id":"1:10572:2768","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:555:2186":{"id":"0:555:2186","crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"src/rwlock.rs","begin":[294,0],"end":[316,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:556:2188","0:557:2189","0:558:2192","0:559:2193"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:543:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:530:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:46:1817":{"id":"0:46:1817","crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[131,4],"end":[131,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:42:1810","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8636:3077":{"id":"1:8636:3077","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8638:2754"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:535:2131":{"id":"0:535:2131","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/rwlock.rs","begin":[181,4],"end":[181,70]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3600:1753":{"id":"1:3600:1753","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3601:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3587:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:533:2128":{"id":"0:533:2128","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/rwlock.rs","begin":[175,4],"end":[175,67]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3103:2973":{"id":"1:3103:2973","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:3102:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10576:2770":{"id":"1:10576:2770","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3207-0:8:1644":{"id":"b:1:3207-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3210:128","1:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3437:2552":{"id":"1:3437:2552","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3439:183","1:3440:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:558:2192":{"id":"0:558:2192","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[307,4],"end":[307,70]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:545:2159":{"id":"0:545:2159","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[224,4],"end":[224,42]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3207-0:5:1642":{"id":"b:1:3207-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3210:128","1:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13271:2603":{"id":"1:13271:2603","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13272:127","1:13273:28738"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:534:2129":{"id":"0:534:2129","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/rwlock.rs","begin":[178,4],"end":[178,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3479:2556":{"id":"1:3479:2556","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3481:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3197-0:5:1642":{"id":"b:1:3197-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3200:2691"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:538:2141":{"id":"0:538:2141","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[196,4],"end":[196,36]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:265:1976":{"id":"0:265:1976","crate_id":0,"name":"GetThreadId","span":{"filename":"src/remutex.rs","begin":[45,0],"end":[55,1]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:266:1771","0:267:1980"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9533:3080":{"id":"1:9533:3080","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:163:1919":{"id":"0:163:1919","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[817,0],"end":[821,1]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:559:2193":{"id":"0:559:2193","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[315,4],"end":[315,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:544:2157":{"id":"0:544:2157","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[221,4],"end":[221,30]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3518:2564":{"id":"1:3518:2564","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3520:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3174:136":{"id":"1:3174:136","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3176:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:821:2362":{"id":"0:821:2362","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[2334,0],"end":[2338,1]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:3447:2548":{"id":"1:3447:2548","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3449:183","1:3450:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8874:158":{"id":"1:8874:158","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8875:2702","1:8876:928","1:8877:2704","1:8880:2705","1:8881:500","1:8883:2706","1:8886:2707","1:8887:2708","1:8888:2709","1:8889:2710","1:8891:2711","1:8893:2712","1:8894:2713","1:8896:847","1:8899:2714","1:8906:2715","1:8908:2716","1:8911:2717","1:8912:2718","1:8913:2719","1:8915:2720","1:8917:2721","1:8920:1321","1:8921:2722","1:8922:2723","1:8926:2724","1:8929:2725","1:8930:2726","1:8931:2727","1:8933:2728","1:8934:2685","1:8936:2729","1:8939:2730","1:8941:2731","1:8951:2732","1:8966:2733","1:8968:2734","1:8972:2735","1:8981:2736","1:8984:2737","1:8986:2738","1:8989:282","1:8996:300","1:9003:2739","1:9010:2740","1:9019:2741","1:9029:1021","1:9036:2742","1:9043:2687","1:9044:2688","1:9045:2743","1:9057:2744","1:9064:2745","1:9076:2746","1:9083:2747","1:9084:2748","1:9089:2749","1:9092:2750","1:9095:2751","1:9096:2752","1:9098:2753","1:9100:2754","1:9102:421","1:9105:2755","1:9108:1004","1:9111:2756","1:9114:608","1:9117:2757","1:9120:913","1:9122:832","1:9124:797","1:9126:716","1:9128:700","1:9130:2758","1:9131:2759","1:9139:2760"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:40:1801":{"id":"0:40:1801","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[96,4],"end":[96,33]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:10513:2763":{"id":"1:10513:2763","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10514:1549","1:10515:30540","1:10517:30541"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10582:2772":{"id":"1:10582:2772","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3200:2691":{"id":"1:3200:2691","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3174:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268:1989":{"id":"0:268:1989","crate_id":0,"name":"RawReentrantMutex","span":{"filename":"src/remutex.rs","begin":[67,0],"end":[72,1]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.\n\n[`RawMutex`]: trait.RawMutex.html\n[`ReentrantMutex`]: struct.ReentrantMutex.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"a:1:9534:3082-0:5:1642":{"id":"a:1:9534:3082-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9534:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3484:2561":{"id":"1:3484:2561","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3485:183","1:3486:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23102:2934":{"id":"1:23102:2934","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23103:2939","1:23104:28530","1:23105:1238","1:23106:1239","1:23107:28587","1:23108:28588","1:23109:28589","1:23110:28590","1:23111:28591","1:23112:28592","1:23113:28531","1:23114:28532","1:23115:28533","1:23116:28534","1:23117:28535","1:23118:28536","1:23119:28537"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23151:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:529:2124":{"id":"0:529:2124","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[160,4],"end":[160,31]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:267:1980":{"id":"0:267:1980","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[54,4],"end":[54,48]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"1:24953:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3530:2567":{"id":"1:3530:2567","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3532:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:554:2183":{"id":"0:554:2183","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[289,4],"end":[289,45]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3491:2558":{"id":"1:3491:2558","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3493:183","1:3494:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3248:116":{"id":"1:3248:116","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3249:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11205:218":{"id":"1:11205:218","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:11207:183","1:11208:1853","1:11209:1852","1:11210:30151","1:11211:30152","1:11212:757","1:11213:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:11196:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:8:1644":{"id":"0:8:1644","crate_id":0,"name":"GuardNoSend","span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,32]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3405:2537-0:8:1644","a:1:9533:3080-0:8:1644","a:1:9534:3082-0:8:1644","a:1:3364:215-0:8:1644","b:1:3201-0:8:1644","b:1:3197-0:8:1644","b:1:3207-0:8:1644","b:1:2868-0:8:1644","b:1:4097-0:8:1644","b:1:2865-0:8:1644","b:1:3212-0:8:1644","0:11"]}},"0:548:2167":{"id":"0:548:2167","crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[246,4],"end":[246,41]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:519:2098":{"id":"0:519:2098","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[66,4],"end":[66,41]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:543:2155":{"id":"0:543:2155","crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"src/rwlock.rs","begin":[219,0],"end":[247,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:544:2157","0:545:2159","0:546:2162","0:547:2164","0:548:2167"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3526:2566":{"id":"1:3526:2566","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3528:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:4097-0:8:1644":{"id":"b:1:4097-0:8:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3442:2549":{"id":"1:3442:2549","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3444:183","1:3445:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:552:2179":{"id":"0:552:2179","crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"src/rwlock.rs","begin":[276,0],"end":[290,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:553:2181","0:554:2183"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:543:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:528:2121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:551:2176":{"id":"0:551:2176","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/rwlock.rs","begin":[268,4],"end":[271,5]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3471:2555":{"id":"1:3471:2555","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3473:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4099:1443":{"id":"1:4099:1443","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46336:2956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:164":{"id":"0:103:164","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":["#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"b:1:3201-0:5:1642":{"id":"b:1:3201-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3432:2547":{"id":"1:3432:2547","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3434:183","1:3435:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2867:2443":{"id":"1:2867:2443","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2963:186":{"id":"1:2963:186","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2965:1004","1:2966:832","1:2967:797","1:2968:716","1:2969:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:527:2118":{"id":"0:527:2118","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/rwlock.rs","begin":[145,4],"end":[148,5]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:556:2188":{"id":"0:556:2188","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/rwlock.rs","begin":[296,4],"end":[296,71]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2126","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:553:2181":{"id":"0:553:2181","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/rwlock.rs","begin":[282,4],"end":[282,42]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:518:2096":{"id":"0:518:2096","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[63,4],"end":[63,29]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23435:3090":{"id":"1:23435:3090","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"1:24072:2941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23426:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3364:215-0:5:1642":{"id":"a:1:3364:215-0:5:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:8673:152":{"id":"1:8673:152","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8674:2702","1:8675:2703","1:8676:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3535:2568":{"id":"1:3535:2568","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3537:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:5:1642":{"id":"0:5:1642","crate_id":0,"name":"GuardSend","span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,25]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3376:224-0:5:1642","a:1:3405:2537-0:5:1642","a:1:9533:3080-0:5:1642","a:1:9534:3082-0:5:1642","a:1:3364:215-0:5:1642","b:1:3201-0:5:1642","b:1:3197-0:5:1642","b:1:3207-0:5:1642","b:1:2868-0:5:1642","b:1:4097-0:5:1642","b:1:2865-0:5:1642","b:1:3212-0:5:1642"]}},"0:520:2101":{"id":"0:520:2101","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/rwlock.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:23049:3160":{"id":"1:23049:3160","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23050:2939","1:23051:28530","1:23052:28849","1:23053:28850","1:23054:28851","1:23055:28587","1:23056:28853","1:23057:28854","1:23058:28855","1:23059:28856","1:23060:28857","1:23061:28858","1:23062:28859","1:23063:28860","1:23064:28861","1:23065:28862","1:23066:28592","1:23067:28863","1:23068:28864","1:23069:28865","1:23070:28866","1:23071:28531","1:23072:28532","1:23073:28533","1:23074:28534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23151:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:760:2330":{"id":"0:760:2330","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[1862,0],"end":[1865,1]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:543:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:42:1810":{"id":"0:42:1810","crate_id":0,"name":"RawMutexTimed","span":{"filename":"src/mutex.rs","begin":[120,0],"end":[132,1]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:43:122","0:44:1813","0:45:1815","0:46:1817"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3453:2551":{"id":"1:3453:2551","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3455:183","1:3456:1110"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3211:1431":{"id":"1:3211:1431","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2917:185":{"id":"1:2917:185","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2919:608","1:2920:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13362:2998":{"id":"1:13362:2998","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:539:2143":{"id":"0:539:2143","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[199,4],"end":[199,48]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8717:121":{"id":"1:8717:121","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8718:2692","1:8719:2693","1:8720:2694","1:8721:2695","1:8725:2696","1:8728:2697"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3177:233":{"id":"1:3177:233","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3179:128","1:3180:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3907:2580":{"id":"1:3907:2580","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34:1774":{"id":"0:34:1774","crate_id":0,"name":"GuardMarker","span":{"filename":"src/mutex.rs","begin":[45,4],"end":[45,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:12772:3490":{"id":"1:12772:3490","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12773:2702","1:12774:30280"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:532:1813":{"id":"0:532:1813","crate_id":0,"name":"Instant","span":{"filename":"src/rwlock.rs","begin":[172,4],"end":[172,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3654:2578":{"id":"1:3654:2578","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3656:242","1:3657:208","1:3658:30396"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23768:27780":{"id":"1:23768:27780","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23769:28865","1:23770:28864","1:23771:28866"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"1:23763:2942","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3824:229":{"id":"1:3824:229","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3825:183","1:3826:2575","1:3827:690","1:3828:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"1:3829:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:36:1779":{"id":"0:36:1779","crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[52,4],"end":[52,31]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"paths":{"1:47984:2914":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:23974:29017":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:50169:2995":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4:985":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:3522:2565":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:46645:3477":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:32640:29932":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:13073:3319":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:46187:196":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:11477:3283":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:53779:3785":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:58160:2472":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:10523:135":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:51376:4028":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:50081:3329":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:11627:3287":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:53684:3774":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3506:2562":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:49775:3312":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47840:2702":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:32626:2814":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10576:2770":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:24887:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8449:2513":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:24513:2609":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:25019:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2953:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:53704:3772":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8127:3207":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:50397:3396":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5147:2515":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:47849:2913":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:48808:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:13351:2996":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4161:2954":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:2884:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:8717:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:50504:3338":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:47286:3958":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"0:0:1648":{"crate_id":0,"path":["lock_api"],"kind":"module"},"1:24311:3964":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:50237:3006":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:47916:2677":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:58153:2465":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:49152:3707":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:52875:3117":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:58155:2467":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:47933:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:47311:4014":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8022:3038":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:49765:3311":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:4095:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:48026:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:50692:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:47033:3181":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:23138:3205":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:3611:1946":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:50349:3009":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:52455:3131":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:48110:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:46858:4007":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:3824:229":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:23291:2939":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:25052:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:51601:3114":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:5753:784":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:46329:2574":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:49578:3294":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:46231:200":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:53535:3094":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:32792:29931":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:51801:3123":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:13271:2603":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:50748:159":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:39144:3990":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:10563:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:47015:3179":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:49644:3165":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:56651:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49857:3317":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:2765:584":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:58144:2458":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:48568:2769":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:23380:2937":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:51530:3122":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:50727:3353":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3102:2937":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:53695:3783":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11589:3286":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:4146:2955":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:58150:2462":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:52661:3108":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:10846:3069":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:37928:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:46972:4008":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:46773:3388":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:39148:2953":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:3496:2559":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:23228:2937":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:46728:3475":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:53871:4085":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:51977:3107":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:58163:2475":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:24423:3968":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:24953:1969":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:50528:3345":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:37952:2989":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:3374:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:10718:3961":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:5152:2516":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:3812:2573":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:48001:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:24068:2937":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:49142:4018":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:46275:201":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:51422:3121":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:5269:2523":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:49839:3316":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:39184:2538":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:10580:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:13124:3283":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:5321:2525":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3829:138":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:9157:2916":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3526:2566":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:12195:3304":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:50285:3007":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:2917:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:50540:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:14183:3963":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:13362:2998":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:58164:2476":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:52045:3095":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:53081:3137":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:23437:2939":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:53832:4084":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:3392:2536":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:51690:3091":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:51400:3133":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:58139:2454":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:13408:3001":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:23151:2937":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:58145:2459":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:24240:3367":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8874:158":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:11434:3282":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:50363:3010":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11668:3289":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:23426:2937":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:49105:3073":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:46594:3993":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:46253:199":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:32632:2815":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:46925:3168":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:49689:3302":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:7936:2711":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:47095:3187":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2277:2980":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:50684:3637":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"3:0:2504":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:49597:3296":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:50191:2999":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:53473:3129":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:3841:2577":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:50508:3341":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:6900:30224":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:57952:4092":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:2502:3085":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:14369:3355":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:47043:3182":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:24400:3217":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:46754:3242":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:49993:3323":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2922:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:32592:1754":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:24332:3221":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3484:2561":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:46878:3165":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:53730:3784":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:48404:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11710:3292":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:14107:30045":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:51947:3103":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:57973:4093":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:5224:2522":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:3168:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:24072:2941":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:5278:2524":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:52198:4034":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:53223:3105":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:51552:3126":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:13560:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:8673:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:11516:3284":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:6717:3175":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:48362:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:46655:3478":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:28330:2605":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:5143:2514":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:3364:215":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:52615:3104":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:32988:2816":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:24364:3700":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:3459:2550":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:13342:2993":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:46211:197":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:51631:3102":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:3405:2537":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:48893:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:5078:1967":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:47808:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:0:1639":{"crate_id":4,"path":["scopeguard"],"kind":"module"},"1:32446:2597":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:49893:3289":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:58157:2469":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:58165:2477":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:8742:2681":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10570:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:48236:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:24920:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:49618:3298":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:25085:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:46995:3178":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:48194:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:50573:3409":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:46615:3238":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:49657:3299":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:10245:3268":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:3907:2580":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:56625:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9535:3083":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:5214:2521":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:51708:4031":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3467:2557":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:23102:2934":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:23232:2938":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:23763:2942":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:51999:3110":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2963:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:49733:3392":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:52301:3136":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:50512:3343":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:22879:29600":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:48446:2614":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3376:224":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:3370:2527":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:22902:29595":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:23768:27780":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:58158:2470":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:50043:3325":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:49518:3288":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3512:2563":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:3447:2548":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3654:2578":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:23962:2940":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8632:3075":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:52537:3116":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:13089:3322":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:24854:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:46721:3474":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:24821:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:46171:198":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:46667:3332":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:3501:2560":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11682:3290":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:14359:3086":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:48859:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:46735:3476":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:22847:29019":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:51446:3113":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3870:2528":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:24527:2607":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:32692:29943":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:47857:2914":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:10801:143":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:50011:3324":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:24169:3364":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:50417:3397":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:50072:3328":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:46097:2581":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:49807:3286":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:58151:2463":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"4:33:2509":{"crate_id":4,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"1:51570:4029":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:4896:3084":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:58156:2468":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:10578:2771":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:9161:2949":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:48320:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:48826:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:47331:3959":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:49587:3295":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3463:2553":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:48575:2768":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:46801:3390":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:3442:2549":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:52069:3096":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:47907:2904":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:46916:3167":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:56242:3065":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:2263:2976":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:50220:3005":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:50053:3326":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:5298:1750":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:50777:3157":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:47302:4012":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3600:1753":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10190:664":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:52725:3093":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:47992:2703":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:3530:2567":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:58141:2456":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:46603:3237":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3676:2570":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:47084:3186":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3471:2555":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:50088:3330":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3620:133":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:46692:3331":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:23435:3090":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:3491:2558":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3475:2554":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:49747:3204":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:53581:3112":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:49113:3706":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:46934:3169":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:58161:2473":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:14540:3155":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:46588:3331":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:56612:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:52691:3111":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:13050:3318":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:47976:2913":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:1926:1752":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:9154:2915":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:49356:3494":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:47024:3180":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:50063:3327":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:47074:3185":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:46698:3473":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:39108:2972":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:56677:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49607:3297":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:51468:3101":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:0:493":{"crate_id":1,"path":["core"],"kind":"module"},"1:13013:3315":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:22900:29597":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:48589:2771":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8636:3077":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:51853:3130":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11205:218":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:13357:2997":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:22834:2989":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:11196:2937":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5727:3200":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:46903:3166":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:53715:3775":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4489:2703":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:50312:3008":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:7159:3177":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:2286:2981":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4998:2530":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:48945:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10250:3269":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:46768:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:49352:3495":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3614:131":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:52023:3092":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:22881:29598":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:47925:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:8682:2682":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:50524:3344":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:56664:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12228:3305":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:10574:2769":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:48278:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:46363:3054":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:47115:3040":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:3248:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:46963:3172":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:46944:3170":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:46336:2956":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:2859:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:46986:3173":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:3535:2568":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3587:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:56599:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12328:3579":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:23175:3161":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:47052:3183":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:5706:10607":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:47004:3176":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3853:3061":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:24539:2610":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:51901:3115":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:24388:2606":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2188:2812":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:58140:2455":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:11696:3291":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:2044:3570":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:50384:3012":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:53657:3097":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2862:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:321:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:49789:3282":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:23238:2943":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:46894:3164":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:50520:3346":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:3272:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:51653:3106":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:3432:2547":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:3373:221":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:47293:4011":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:3103:2973":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:58162:2474":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:10512:207":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:46356:3053":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:24506:4759":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:48871:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:8376:3692":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:10513:2763":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:3672:2569":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:4783:3570":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:47874:2903":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:52379:3124":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:14072:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8197:2951":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:10811:147":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:11554:3285":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:14420:203":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:53809:4083":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:24477:4760":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3743:2572":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:48152:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10851:3071":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10572:2768":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:58146:2460":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:25118:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:50765:3159":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3453:2551":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:3165:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:50561:3408":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:47064:3184":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:58152:2464":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:24788:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:49670:3300":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:47865:2703":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:3181:232":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:24415:3967":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46675:3472":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:51500:3134":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:24461:4750":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:58143:2457":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:49911:3290":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:46848:3573":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:14057:139":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:46954:3171":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:53756:3776":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:50516:3342":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:51356:4027":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:58154:2466":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"4:28:2507":{"crate_id":4,"path":["scopeguard","Strategy"],"kind":"trait"},"1:11409:2914":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:53333:3125":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3174:136":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:2391:2529":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:49569:3293":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:56638:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12772:3490":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:50536:3340":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:46370:2522":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"2:0:436":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:53675:3771":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2181:583":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:23049:3160":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:3171:150":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:11385:2913":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9533:3080":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:10584:2773":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:50532:3339":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:49759:3310":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:50374:3011":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3177:233":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:4853:3035":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8669:137":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:46785:3389":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:50674:203":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4865:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:46631:3240":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:58138:2453":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:25520:2604":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:50735:3354":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3835:2575":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:58159:2471":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:46297:2571":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:53741:3773":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:74:2508":{"crate_id":4,"path":["scopeguard","Always"],"kind":"enum"},"1:3369:1826":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:51831:3127":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:48929:2767":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:23387:27761":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:25151:2608":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:53619:3132":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:48068:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:48832:134":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:9534:3082":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:46124:2579":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:3382:1751":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:22862:29019":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:48582:2770":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:51671:4030":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:46714:3330":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:47320:4016":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:51755:3135":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10582:2772":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:49160:3708":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:50106:3332":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:52167:4033":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:50206:3002":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:9655:2993":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3479:2556":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"0:8:1644":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"1:46415:3248":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:14253:30046":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:24440:4758":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8433:31818":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:47105:3188":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:49121:3072":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:53794:4082":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:49957:3321":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:52120:4032":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:5034:2531":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:49130:147":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:50097:3331":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:49679:3301":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:6640:3174":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3617:132":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:52221:4035":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10034:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:10039:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:3372:222":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:52425:3128":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:58147:2461":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:24348:3687":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:3518:2564":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:24986:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:4841:3034":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:48841:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:49939:3320":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:53411:3109":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:14:2233":{"crate_id":1,"path":["core","write"],"kind":"macro"},"0:5:1642":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"1:49699:3303":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:3437:2552":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:14148:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"}},"external_crates":{"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}