{"root":"0:0:1631","crate_version":"0.4.7","includes_private":false,"index":{"1:10310:2752":{"id":"1:10310:2752","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7927:2984":{"id":"1:7927:2984","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7928:31605","1:7929:31606","1:7930:31603","1:7931:31601","1:7932:31607","1:7933:31604","1:7934:31602"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:928":{"id":"0:928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::rwlock","name":"rwlock","id":"0:492:1630","glob":true}},"b:1:2871-0:8:1627":{"id":"b:1:2871-0:8:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"1:2865:3026","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:2873:28858"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3197-0:8:1627":{"id":"b:1:3197-0:8:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3200:2672"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10298:119":{"id":"1:10298:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8362:2967":{"id":"1:8362:2967","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8364:2733"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:547:2144":{"id":"0:547:2144","crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[238,4],"end":[238,29]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3504:1735":{"id":"1:3504:1735","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3215:127":{"id":"1:3215:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:38805:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"1:3426:2545":{"id":"1:3426:2545","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:517:2074":{"id":"0:517:2074","crate_id":0,"name":"unlock_shared","span":{"filename":"src/rwlock.rs","begin":[60,4],"end":[60,35]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:103:1820":{"id":"0:103:1820","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":["#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1750","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:542:2129":{"id":"0:542:2129","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/rwlock.rs","begin":[210,4],"end":[210,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8472:2662":{"id":"1:8472:2662","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8473:793","1:8474:2679"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:540:2125":{"id":"0:540:2125","crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"src/rwlock.rs","begin":[203,0],"end":[211,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:541:2128","0:542:2129"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockRecursive","id":"0:537:2119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockTimed","id":"0:530:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2865:3026":{"id":"1:2865:3026","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2867:28858"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1631":{"id":"0:0:1631","crate_id":0,"name":"lock_api","span":{"filename":"src/lib.rs","begin":[8,0],"end":[113,25]},"visibility":"public","docs":"This library provides type-safe and fully-featured `Mutex` and `RwLock`\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for RwLocks, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{},"attrs":["#![no_std]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5:1625","0:8:1627","0:219","0:491","0:928"],"is_stripped":false}},"1:9258:3042":{"id":"1:9258:3042","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:12:1628":{"id":"0:12:1628","crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[8,0],"end":[924,97]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:32:1750","0:39:1778","0:42:1792","0:47:162","0:103:1820","0:163:1903"],"is_stripped":true}},"1:13766:138":{"id":"1:13766:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13767:181","1:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3422:2544":{"id":"1:3422:2544","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8879:2899":{"id":"1:8879:2899","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12992:2584":{"id":"1:12992:2584","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12993:126","1:12994:31546"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22837:3119":{"id":"1:22837:3119","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22838:28985","1:22839:1226","1:22840:1227","1:22841:29004","1:22842:29005","1:22843:29006","1:22844:29007","1:22845:31784","1:22846:31785","1:22847:31786"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22850:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:9258:3042-0:5:1625":{"id":"a:1:9258:3042-0:5:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"1:9258:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:10291:109":{"id":"1:10291:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10539:146":{"id":"1:10539:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10540:652","1:10541:2216","1:10542:28874","1:10543:28875","1:10544:28876","1:10545:28877","1:10546:28878","1:10547:28879","1:10548:28880","1:10549:28881","1:10550:28882","1:10551:28883","1:10552:28884","1:10553:28885","1:10554:28886","1:10555:1532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:872:2372":{"id":"0:872:2372","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[2469,0],"end":[2473,1]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:12500:3468":{"id":"1:12500:3468","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12501:2683","1:12502:31024"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:546:2142":{"id":"0:546:2142","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/rwlock.rs","begin":[231,4],"end":[231,39]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:10241:2743":{"id":"1:10241:2743","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10242:1532","1:10243:31438","1:10245:31439"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3379:2534":{"id":"1:3379:2534","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:268:1969":{"id":"0:268:1969","crate_id":0,"name":"RawReentrantMutex","span":{"filename":"src/remutex.rs","begin":[67,0],"end":[72,1]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.\n\n[`RawMutex`]: trait.RawMutex.html\n[`ReentrantMutex`]: struct.ReentrantMutex.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:557:2169":{"id":"0:557:2169","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/rwlock.rs","begin":[299,4],"end":[299,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:525:2090":{"id":"0:525:2090","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/rwlock.rs","begin":[120,4],"end":[120,43]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3716:2553":{"id":"1:3716:2553","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3647:2552","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:556:2168":{"id":"0:556:2168","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/rwlock.rs","begin":[296,4],"end":[296,71]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3405:2540":{"id":"1:3405:2540","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3407:181","1:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:5:1625":{"id":"0:5:1625","crate_id":0,"name":"GuardSend","span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,25]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:3268:211-0:5:1625","a:1:3309:2517-0:5:1625","a:1:9258:3042-0:5:1625","a:1:3280:220-0:5:1625","a:1:9259:3044-0:5:1625","b:1:3212-0:5:1625","b:1:3207-0:5:1625","b:1:2871-0:5:1625","b:1:4001-0:5:1625","b:1:2868-0:5:1625","b:1:3197-0:5:1625","b:1:3201-0:5:1625"]}},"b:1:2871-0:5:1625":{"id":"b:1:2871-0:5:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"1:2865:3026","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:2873:28858"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3207-0:8:1627":{"id":"b:1:3207-0:8:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"1:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3210:127","1:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:555:2166":{"id":"0:555:2166","crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"src/rwlock.rs","begin":[294,0],"end":[316,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:556:2168","0:557:2169","0:558:2172","0:559:2173"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockUpgrade","id":"0:543:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockTimed","id":"0:530:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:41:1788":{"id":"0:41:1788","crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[110,4],"end":[113,5]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3309:2517":{"id":"1:3309:2517","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3341:2532":{"id":"1:3341:2532","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3343:181","1:3344:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3273:1809":{"id":"1:3273:1809","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2956:177":{"id":"1:2956:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2957:415","1:2958:2668","1:2959:2669","1:2960:2670"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10304:2750":{"id":"1:10304:2750","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8412:2663":{"id":"1:8412:2663","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8414:2680","1:8416:2681","1:8417:2682"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:543:2135":{"id":"0:543:2135","crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"src/rwlock.rs","begin":[219,0],"end":[247,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:544:2137","0:545:2139","0:546:2142","0:547:2144","0:548:2147"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:266:1753":{"id":"0:266:1753","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[50,4],"end":[50,21]},"visibility":"default","docs":"Initial value.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"0:532:1795":{"id":"0:532:1795","crate_id":0,"name":"Instant","span":{"filename":"src/rwlock.rs","begin":[172,4],"end":[172,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:4782:3046":{"id":"1:4782:3046","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4783:2683","1:4784:30462","1:4785:2686"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3346:2529":{"id":"1:3346:2529","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3348:181","1:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13078:3057":{"id":"1:13078:3057","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13080:2673","1:13081:31682","1:13082:31683"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13072:3056","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:33:1753":{"id":"0:33:1753","crate_id":0,"name":"INIT","span":{"filename":"src/mutex.rs","begin":[41,4],"end":[41,21]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"0:36:1761":{"id":"0:36:1761","crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[52,4],"end":[52,31]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:533:2108":{"id":"0:533:2108","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/rwlock.rs","begin":[175,4],"end":[175,67]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9258:3042-0:8:1627":{"id":"a:1:9258:3042-0:8:1627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"1:9258:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:695:2195":{"id":"0:695:2195","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[1474,0],"end":[1477,1]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:535:2111":{"id":"0:535:2111","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/rwlock.rs","begin":[181,4],"end":[181,70]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3363:2530":{"id":"1:3363:2530","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3364:181","1:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39:1778":{"id":"0:39:1778","crate_id":0,"name":"RawMutexFair","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[114,1]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:40:1783","0:41:1788"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1750","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10302:2749":{"id":"1:10302:2749","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3197-0:5:1625":{"id":"b:1:3197-0:5:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3200:2672"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:515:2069":{"id":"0:515:2069","crate_id":0,"name":"lock_shared","span":{"filename":"src/rwlock.rs","begin":[50,4],"end":[50,26]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3276:218":{"id":"1:3276:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:558:2172":{"id":"0:558:2172","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[307,4],"end":[307,70]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:527:2098":{"id":"0:527:2098","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/rwlock.rs","begin":[145,4],"end":[148,5]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8886:2983":{"id":"1:8886:2983","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7927:2984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3739:2555":{"id":"1:3739:2555","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3741:29717"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3811:2560":{"id":"1:3811:2560","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2925:124":{"id":"1:2925:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3280:220-0:5:1625":{"id":"a:1:3280:220-0:5:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3400:2539":{"id":"1:3400:2539","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3402:181","1:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3515:1930":{"id":"1:3515:1930","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3336:2527":{"id":"1:3336:2527","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3338:181","1:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8882:2900":{"id":"1:8882:2900","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,0],"end":[104,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,0],"end":[107,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::mutex","name":"mutex","id":"0:12:1628","glob":true}},"b:1:4001-0:5:1625":{"id":"b:1:4001-0:5:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"1:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:267:1960":{"id":"0:267:1960","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[54,4],"end":[54,48]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"1:24666:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3171:149":{"id":"1:3171:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3173:2672"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3647:2552":{"id":"1:3647:2552","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3649:31480","1:3650:31481","1:3651:31482"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:523:2086":{"id":"0:523:2086","crate_id":0,"name":"RawRwLockFair","span":{"filename":"src/rwlock.rs","begin":[107,0],"end":[149,1]},"visibility":"public","docs":"Additional methods for RwLocks which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:524:2088","0:525:2090","0:526:2094","0:527:2098"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8399:136":{"id":"1:8399:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:220:1629":{"id":"0:220:1629","crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[8,0],"end":[1036,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:265:1956","0:268:1969","0:306:1997","0:374:2003","0:436:2042"],"is_stripped":true}},"1:3439:2548":{"id":"1:3439:2548","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3441:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13083:3058":{"id":"1:13083:3058","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:3057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3268:211":{"id":"1:3268:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3491:116":{"id":"1:3491:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3492:221","1:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:42:1792":{"id":"0:42:1792","crate_id":0,"name":"RawMutexTimed","span":{"filename":"src/mutex.rs","begin":[120,0],"end":[132,1]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:43:121","0:44:1795","0:45:1797","0:46:1799"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1750","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:821:2345":{"id":"0:821:2345","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[2334,0],"end":[2338,1]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:8366:2965":{"id":"1:8366:2965","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8368:2734"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23771:3002":{"id":"1:23771:3002","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23772:3130"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23767:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3103:2987":{"id":"1:3103:2987","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3102:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3309:2517-0:5:1625":{"id":"a:1:3309:2517-0:5:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"1:3309:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:9259:3044":{"id":"1:9259:3044","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:524:2088":{"id":"0:524:2088","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/rwlock.rs","begin":[113,4],"end":[113,40]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3774:2508":{"id":"1:3774:2508","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:46:1799":{"id":"0:46:1799","crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[131,4],"end":[131,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:42:1792","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10933:214":{"id":"1:10933:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10935:181","1:10936:1837","1:10937:1836","1:10938:30682","1:10939:30683","1:10940:753","1:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10924:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:3201-0:5:1625":{"id":"b:1:3201-0:5:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3518:130":{"id":"1:3518:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:4001-0:8:1627":{"id":"b:1:4001-0:8:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"1:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:551:2156":{"id":"0:551:2156","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/rwlock.rs","begin":[268,4],"end":[271,5]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:23134:3133":{"id":"1:23134:3133","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23771:3002","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23125:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10529:142":{"id":"1:10529:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10530:715","1:10532:4565"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10306:2751":{"id":"1:10306:2751","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3367:2533":{"id":"1:3367:2533","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:536:2112":{"id":"0:536:2112","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/rwlock.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:539:2123":{"id":"0:539:2123","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[199,4],"end":[199,48]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:521:1771":{"id":"0:521:1771","crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[77,4],"end":[86,5]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9259:3044-0:8:1627":{"id":"a:1:9259:3044-0:8:1627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"1:9259:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3212-0:5:1625":{"id":"b:1:3212-0:5:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3215:127","1:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:530:2106":{"id":"0:530:2106","crate_id":0,"name":"RawRwLockTimed","span":{"filename":"src/rwlock.rs","begin":[167,0],"end":[185,1]},"visibility":"public","docs":"Additional methods for RwLocks which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:531:121","0:532:1795","0:533:2108","0:534:2109","0:535:2111","0:536:2112"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2862:97":{"id":"1:2862:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2864:2424"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3430:2546":{"id":"1:3430:2546","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3246:115":{"id":"1:3246:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3576:2549":{"id":"1:3576:2549","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3578:181","1:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:23086:28111":{"id":"1:23086:28111","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23087:29071","1:23088:31676","1:23089:31677"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23079:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:14239:3184":{"id":"1:14239:3184","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14240:31378","1:14241:31379","1:14242:31380","1:14243:31381","1:14244:31382","1:14245:31383","1:14246:2709"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:538:2121":{"id":"0:538:2121","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[196,4],"end":[196,36]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:45:1797":{"id":"0:45:1797","crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[128,4],"end":[128,60]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:42:1792","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:519:2078":{"id":"0:519:2078","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[66,4],"end":[66,41]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8403:151":{"id":"1:8403:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8404:2683","1:8405:2684","1:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:374:2003":{"id":"0:374:2003","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[603,0],"end":[606,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":["#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1750","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"GetThreadId","id":"0:265:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3181:227":{"id":"1:3181:227","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3183:127","1:3184:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:531:121":{"id":"0:531:121","crate_id":0,"name":"Duration","span":{"filename":"src/rwlock.rs","begin":[169,4],"end":[169,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:541:2128":{"id":"0:541:2128","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/rwlock.rs","begin":[206,4],"end":[206,77]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3201-0:8:1627":{"id":"b:1:3201-0:8:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:520:2081":{"id":"0:520:2081","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/rwlock.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3558:2558":{"id":"1:3558:2558","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3560:237","1:3561:206","1:3562:31807"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3733:137":{"id":"1:3733:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3168:74":{"id":"1:3168:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3170:2671"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8601:157":{"id":"1:8601:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8602:2683","1:8603:922","1:8604:2685","1:8607:2686","1:8608:495","1:8610:2687","1:8613:2688","1:8614:2689","1:8615:2690","1:8616:2691","1:8618:2692","1:8620:2693","1:8621:2694","1:8623:841","1:8626:2695","1:8633:2696","1:8635:2697","1:8638:2698","1:8639:2699","1:8640:2700","1:8642:2701","1:8644:2702","1:8647:1307","1:8648:2703","1:8649:2704","1:8653:2705","1:8656:2706","1:8657:2707","1:8658:2708","1:8660:2709","1:8661:2666","1:8663:2710","1:8666:2711","1:8668:2712","1:8678:2713","1:8693:2714","1:8695:2715","1:8699:2716","1:8708:2717","1:8711:2718","1:8713:2719","1:8716:276","1:8723:294","1:8730:2720","1:8737:2721","1:8746:2722","1:8756:1014","1:8763:2723","1:8770:2668","1:8771:2669","1:8772:2724","1:8784:2725","1:8791:2726","1:8803:2727","1:8810:2728","1:8811:2729","1:8816:2730","1:8819:2731","1:8822:2732","1:8823:2733","1:8825:2734","1:8827:415","1:8830:2735","1:8833:997","1:8836:2736","1:8839:604","1:8842:2737","1:8845:907","1:8847:826","1:8849:792","1:8851:713","1:8853:696","1:8855:2738","1:8856:2739","1:8864:2740"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:552:2159":{"id":"0:552:2159","crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"src/rwlock.rs","begin":[276,0],"end":[290,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:553:2161","0:554:2163"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockUpgrade","id":"0:543:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockDowngrade","id":"0:528:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:514:1756":{"id":"0:514:1756","crate_id":0,"name":"GuardMarker","span":{"filename":"src/rwlock.rs","begin":[47,4],"end":[47,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"a:1:3309:2517-0:8:1627":{"id":"a:1:3309:2517-0:8:1627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"1:3309:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:529:2104":{"id":"0:529:2104","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[160,4],"end":[160,31]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:544:2137":{"id":"0:544:2137","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[221,4],"end":[221,30]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3371:2537":{"id":"1:3371:2537","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3373:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3383:2536":{"id":"1:3383:2536","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23462:3131":{"id":"1:23462:3131","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23463:1269","1:23464:1268","1:23465:1266","1:23466:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"1:22874:3183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13072:3056":{"id":"1:13072:3056","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13074:3077","1:13075:922","1:13076:30558","1:13077:30559"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2966:184":{"id":"1:2966:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2968:997","1:2969:826","1:2970:792","1:2971:713","1:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2920:183":{"id":"1:2920:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2922:604","1:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:38:1771":{"id":"0:38:1771","crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3211:1416":{"id":"1:3211:1416","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:559:2173":{"id":"0:559:2173","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[315,4],"end":[315,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"4:28:2487":{"id":"4:28:2487","crate_id":4,"name":"Strategy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:29:31976"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:306:1997":{"id":"0:306:1997","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](struct.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"b:1:3207-0:5:1625":{"id":"b:1:3207-0:5:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"1:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3210:127","1:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3999:68":{"id":"1:3999:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4000:1428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:512:2066":{"id":"0:512:2066","crate_id":0,"name":"RawRwLock","span":{"filename":"src/rwlock.rs","begin":[38,0],"end":[99,1]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:513:1753","0:514:1756","0:515:2069","0:516:2071","0:517:2074","0:518:2076","0:519:2078","0:520:2081","0:521:1771","0:522:2084"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13063:3053":{"id":"1:13063:3053","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13065:3056","1:13066:30271","1:13067:30272","1:13068:30273","1:13069:30275","1:13070:30274","1:13071:30276"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:44:1795":{"id":"0:44:1795","crate_id":0,"name":"Instant","span":{"filename":"src/mutex.rs","begin":[125,4],"end":[125,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:537:2119":{"id":"0:537:2119","crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"src/rwlock.rs","begin":[194,0],"end":[200,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:538:2121","0:539:2123"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3174:135":{"id":"1:3174:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:35:1758":{"id":"0:35:1758","crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:163:1903":{"id":"0:163:1903","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[794,0],"end":[798,1]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1750","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3416:2543":{"id":"1:3416:2543","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3418:181","1:3419:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:37:1769":{"id":"0:37:1769","crate_id":0,"name":"unlock","span":{"filename":"src/mutex.rs","begin":[65,4],"end":[65,28]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: #tymethod.lock\n[`try_lock`]: #tymethod.try_lock\n[`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for\n[`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:43:121":{"id":"0:43:121","crate_id":0,"name":"Duration","span":{"filename":"src/mutex.rs","begin":[122,4],"end":[122,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:760:2313":{"id":"0:760:2313","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[1862,0],"end":[1865,1]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockUpgrade","id":"0:543:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:32:1750":{"id":"0:32:1750","crate_id":0,"name":"RawMutex","span":{"filename":"src/mutex.rs","begin":[36,0],"end":[79,1]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:33:1753","0:34:1756","0:35:1758","0:36:1761","0:37:1769","0:38:1771"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23467:28130":{"id":"1:23467:28130","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23468:29002","1:23469:29001","1:23470:29003"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"1:23462:3131","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3177:228":{"id":"1:3177:228","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3179:127","1:3180:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2868-0:5:1625":{"id":"b:1:2868-0:5:1625","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:2870:2424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:516:2071":{"id":"0:516:2071","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/rwlock.rs","begin":[53,4],"end":[53,38]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:40:1783":{"id":"0:40:1783","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[96,4],"end":[96,33]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:2873:28858":{"id":"1:2873:28858","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3268:211-0:8:1627":{"id":"a:1:3268:211-0:8:1627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"1:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:492:1630":{"id":"0:492:1630","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[8,0],"end":[2604,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:512:2066","0:523:2086","0:528:2101","0:530:2106","0:537:2119","0:540:2125","0:543:2135","0:549:2150","0:552:2159","0:555:2166","0:560:2184","0:645:2193","0:695:2195","0:760:2313","0:821:2345","0:872:2372"],"is_stripped":true}},"1:3728:224":{"id":"1:3728:224","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3729:181","1:3730:2555","1:3731:686","1:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3277:217":{"id":"1:3277:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3351:2528":{"id":"1:3351:2528","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3353:181","1:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:560:2184":{"id":"0:560:2184","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[330,0],"end":[333,1]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:548:2147":{"id":"0:548:2147","crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[246,4],"end":[246,41]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:22748:3182":{"id":"1:22748:3182","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22749:3130","1:22750:28985","1:22751:28986","1:22752:28987","1:22753:28988","1:22754:28989","1:22755:28990","1:22756:28991","1:22757:28992","1:22758:28993","1:22759:28994","1:22760:28995","1:22761:28996","1:22762:28997","1:22763:4591","1:22764:28998","1:22765:28999","1:22766:29000","1:22767:29001","1:22768:29002","1:22769:29003","1:22770:29004","1:22771:29005","1:22772:29006","1:22773:29007"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22850:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3268:211-0:5:1625":{"id":"a:1:3268:211-0:5:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"1:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:10574:3112":{"id":"1:10574:3112","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10575:146","1:10576:4236","1:10577:31027"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:513:1753":{"id":"0:513:1753","crate_id":0,"name":"INIT","span":{"filename":"src/rwlock.rs","begin":[43,4],"end":[43,21]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"1:22937:3003":{"id":"1:22937:3003","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22927:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:8:1627":{"id":"0:8:1627","crate_id":0,"name":"GuardNoSend","span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,32]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:3268:211-0:8:1627","a:1:3309:2517-0:8:1627","a:1:9258:3042-0:8:1627","a:1:9259:3044-0:8:1627","b:1:3212-0:8:1627","b:1:3207-0:8:1627","b:1:2871-0:8:1627","b:1:4001-0:8:1627","b:1:2868-0:8:1627","b:1:3197-0:8:1627","b:1:3201-0:8:1627","0:11"]}},"0:34:1756":{"id":"0:34:1756","crate_id":0,"name":"GuardMarker","span":{"filename":"src/mutex.rs","begin":[45,4],"end":[45,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:554:2163":{"id":"0:554:2163","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[289,4],"end":[289,45]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:2870:2424":{"id":"1:2870:2424","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2887:104":{"id":"1:2887:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2888:408","1:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:550:2152":{"id":"0:550:2152","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/rwlock.rs","begin":[257,4],"end":[257,44]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3165:75":{"id":"1:3165:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:10312:2753":{"id":"1:10312:2753","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3203:681":{"id":"1:3203:681","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3278:106":{"id":"1:3278:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::remutex","name":"remutex","id":"0:220:1629","glob":true}},"1:22801:3129":{"id":"1:22801:3129","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22802:3130","1:22803:28985","1:22804:1226","1:22805:1227","1:22806:28989","1:22807:31864","1:22808:4765","1:22809:31865","1:22810:31866","1:22811:28999","1:22812:29004","1:22813:29005","1:22814:29006","1:22815:29007","1:22816:31784","1:22817:31785","1:22818:31786"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22850:3051","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3524:132":{"id":"1:3524:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3526:181","1:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3216:1415":{"id":"1:3216:1415","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10308:189":{"id":"1:10308:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3357:2531":{"id":"1:3357:2531","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3359:181","1:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:522:2084":{"id":"0:522:2084","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[89,4],"end":[98,5]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:526:2094":{"id":"0:526:2094","crate_id":0,"name":"bump_shared","span":{"filename":"src/rwlock.rs","begin":[131,4],"end":[134,5]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:4003:1428":{"id":"1:4003:1428","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46028:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:553:2161":{"id":"0:553:2161","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/rwlock.rs","begin":[282,4],"end":[282,42]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3375:2535":{"id":"1:3375:2535","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3210:127":{"id":"1:3210:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"0:549:2150":{"id":"0:549:2150","crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"src/rwlock.rs","begin":[251,0],"end":[272,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:550:2152","0:551:2156"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockUpgrade","id":"0:543:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLockFair","id":"0:523:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:518:2076":{"id":"0:518:2076","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[63,4],"end":[63,29]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13781:150":{"id":"1:13781:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13782:181","1:13783:150","1:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3212-0:8:1627":{"id":"b:1:3212-0:8:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:3215:127","1:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2868-0:8:1627":{"id":"b:1:2868-0:8:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["1:2870:2424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3388:2541":{"id":"1:3388:2541","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3389:181","1:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:436:2042":{"id":"0:436:2042","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[901,0],"end":[905,1]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:32:1750","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"GetThreadId","id":"0:265:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:528:2101":{"id":"0:528:2101","crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"src/rwlock.rs","begin":[153,0],"end":[161,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:529:2104"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:534:2109":{"id":"0:534:2109","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/rwlock.rs","begin":[178,4],"end":[178,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:530:2106","args":null,"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3434:2547":{"id":"1:3434:2547","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3436:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3395:2538":{"id":"1:3395:2538","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3397:181","1:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:545:2139":{"id":"0:545:2139","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[224,4],"end":[224,42]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3200:2672":{"id":"1:3200:2672","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3174:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22874:3183":{"id":"1:22874:3183","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22875:3130","1:22876:1246","1:22877:1271"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:645:2193":{"id":"0:645:2193","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[1186,0],"end":[1189,1]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:512:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3280:220":{"id":"1:3280:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3410:2542":{"id":"1:3410:2542","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3412:181","1:3413:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3580:2550":{"id":"1:3580:2550","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3576:2549","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:9259:3044-0:5:1625":{"id":"a:1:9259:3044-0:5:1625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"1:9259:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:265:1956":{"id":"0:265:1956","crate_id":0,"name":"GetThreadId","span":{"filename":"src/remutex.rs","begin":[45,0],"end":[55,1]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:266:1753","0:267:1960"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10300:2748":{"id":"1:10300:2748","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3521:131":{"id":"1:3521:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8447:120":{"id":"1:8447:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8448:2673","1:8449:2674","1:8450:2675","1:8451:2676","1:8455:2677","1:8458:2678"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:47:162":{"id":"0:47:162","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[142,0],"end":[145,1]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}}},"paths":{"1:53553:4066":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:37648:2989":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8886:2983":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:51336:3149":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:46340:3455":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11424:3272":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:32397:30668":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:56348:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46727:2936":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3426:2545":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:32337:2795":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:57887:2456":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:10529:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:3174:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:47550:2684":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:10579:3113":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:56335:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:45857:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:53477:3754":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:53405:3752":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:24118:3947":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46325:3217":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:46350:3456":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3367:2533":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:50171:3323":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3379:2534":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:22850:3051":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:48808:3114":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:52400:3154":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:3103:2987":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:3728:224":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:57878:2447":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:32296:1736":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:23673:30343":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:50418:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:57870:2441":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:49336:3281":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:49891:3065":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:46995:3993":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3757:2988":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5207:2505":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:46977:3990":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:49877:3062":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:57877:2446":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:12734:3297":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:7755:2952":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10291:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:32156:2578":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:45919:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3181:227":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:46388:3313":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:48632:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:24166:5387":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:50238:3384":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:24212:5396":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:2291:3013":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2186:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:48792:3115":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:10446:3939":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:3524:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3422:2544":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:24032:3241":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:46558:3986":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:48262:2748":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:6892:2949":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:53436:3753":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:22599:30387":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:50395:3335":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:56387:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:24530:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:5110:2502":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:3580:2550":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:49358:3283":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:46748:2938":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:3400:2539":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:8399:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:49286:3278":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3416:2543":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:48091:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:5604:3117":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:46309:3215":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:52793:3180":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:49509:3298":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10933:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:74:2488":{"crate_id":4,"path":["scopeguard","Always"],"kind":"enum"},"1:49477:3267":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:3286:1733":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:10310:2752":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:49266:3276":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:46483:3371":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:56322:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6633:31466":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:9260:3045":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:51520:3170":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11956:3287":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:46465:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:57884:2453":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:9978:3250":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11923:3286":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:46028:3032":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:46699:2934":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:11162:3263":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:52160:3174":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:3504:1735":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:47619:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:32331:2794":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:22580:30382":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"0:5:1625":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"4:0:1622":{"crate_id":4,"path":["scopeguard"],"kind":"module"},"1:46108:3194":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:22927:3051":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:51866:4015":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8366:2965":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:6510:2946":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:25240:2585":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:3439:2548":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:13078:3057":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:46758:2939":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2887:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:46548:3551":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:46986:3991":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"0:8:1627":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"1:49039:3473":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:14078:3337":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:7857:2923":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:46799:2942":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:52129:3171":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3371:2537":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:53451:3762":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:22931:3000":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:57880:2449":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:46779:2940":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:3395:2538":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:53500:3763":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:47797:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:10298:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:49435:3293":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:51144:3144":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:10306:2751":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:23467:28130":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:4751:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:24126:3948":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3246:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:33:2489":{"crate_id":4,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"1:48519:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:24247:2591":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:46431:3454":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:46708:2950":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:13962:30451":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:24103:3237":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:55964:2996":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:32693:2796":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:57881:2450":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:45942:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:51693:3153":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:46587:2926":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3405:2540":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:57863:2435":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:3168:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:51741:3138":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:24144:5395":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12500:3468":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:23079:3051":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:51121:3156":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:52082:3167":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:24219:2590":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:38868:2518":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3274:2507":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:50055:3072":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:50187:3326":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:49908:3066":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2507:3047":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11396:3270":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:45873:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:46417:3452":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:48558:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:51375:3134":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:49527:3299":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8106:3670":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:3558:2558":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:57888:2457":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:48829:3997":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:47881:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:47965:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:12771:3300":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:57874:2443":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:57675:4074":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:51177:3177":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:7669:2692":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:50351:3615":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:47755:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2193:2792":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2768:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:24836:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:4065:3038":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:49429:3292":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:23767:3051":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:49349:3282":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8879:2899":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:56374:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:13063:3053":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:50195:3321":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:57879:2448":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:48513:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:3518:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:50045:3071":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2966:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:13892:3943":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8882:2900":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:14239:3184":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:8179:2493":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:5184:1732":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12810:3304":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:48255:2749":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:24182:5397":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:49197:3269":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:13781:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:23086:28111":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:46470:3370":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:32497:30666":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:51048:4010":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9767:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:3346:2529":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:2062:3548":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:8412:2663":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:49323:3280":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:4377:2684":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:57875:2444":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:51282:3157":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10240:205":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:10308:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:52003:3179":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:52322:3147":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:48276:2751":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:48495:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:32345:30617":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:14:2216":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:46638:2929":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3410:2542":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"3:0:2484":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:50179:3324":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:9258:3042":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:46717:2935":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:2920:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:53396:3749":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3375:2535":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:11317:3267":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:47671:2898":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:3774:2508":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:13278:3940":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:23136:3130":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:24632:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:46287:3972":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:46394:3451":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:48839:3685":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3357:2531":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:9762:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3273:1809":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:1944:1734":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:49681:3306":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:57873:2442":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:46371:3450":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:46736:2937":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:2282:3012":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:51898:4016":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3277:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:8362:2967":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3434:2547":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:46063:2502":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:48817:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:46628:2928":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:53047:3168":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3999:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:24666:1949":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:50191:3327":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3351:2528":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:49417:2919":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:51766:3139":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:57696:4075":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:3383:2536":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:28:2487":{"crate_id":4,"path":["scopeguard","Strategy"],"kind":"trait"},"1:49609:3302":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:24234:2588":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:50175:3325":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:46056:3128":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:8447:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11113:2897":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2268:3006":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:48133:2595":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:37624:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:24010:3944":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:53299:3155":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:48546:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:14068:3048":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:46021:2554":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:11205:3264":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:47679:2684":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:3647:2552":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:56361:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:22748:3182":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:49751:3311":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:24090:2587":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:51394:4013":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:14129:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:3177:228":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:23462:3131":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:9918:660":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:10300:2748":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:22578:30384":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2862:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:48269:2750":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:5630:779":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:47663:2897":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:3576:2549":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:3278:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:49983:3068":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:12056:3557":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:46647:2930":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:24768:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:4884:2510":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:47559:2887":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:13129:3061":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:51639:3146":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:46500:3372":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:24700:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:49248:3274":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:49402:3374":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:22801:3129":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:47839:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9380:3053":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:56400:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:24598:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:24049:3665":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:3280:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:8601:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:3363:2530":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:49663:3305":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3102:3051":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2925:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:51231:3169":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:53462:3751":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5155:2503":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:22990:3130":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:46578:2943":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:49723:3308":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"1:5164:2504":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:49378:3285":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:12845:3264":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:49459:3263":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:24870:2589":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:4782:3046":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:24065:3678":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:23868:3346":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8163:30261":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:46670:2932":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:6437:2931":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:49839:3055":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:49627:3303":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:57867:2438":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:9973:3249":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:47593:2888":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:48049:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:57864:2436":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:3341:2532":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:53252:3137":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:49758:3312":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:5038:2496":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:47492:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:52936:3148":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:24496:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:13857:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3171:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3388:2541":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:57883:2452":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:11137:2898":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:22546:30340":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:45988:2551":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:22837:3119":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:49257:3275":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:57866:2437":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:49767:3313":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:46768:2945":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:5029:2494":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:11438:3273":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:47602:2658":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:47688:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:47534:2897":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:47713:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:45898:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:51096:3164":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:47004:3995":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3811:2560":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3521:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:48580:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:38805:2986":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:51313:3145":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:5100:2501":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:49862:3059":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:51027:4009":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:12992:2584":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:12794:3301":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:46296:3214":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:51442:3178":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:49563:3270":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:3733:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:51818:4014":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10924:3051":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3716:2553":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:4964:1947":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:3336:2527":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:48528:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:3268:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:52586:3160":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:49956:3067":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:10304:2750":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:57868:2439":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:57862:2434":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:50183:3328":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:49742:3310":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:46609:2947":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:22937:3003":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:49368:3284":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:53425:3750":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:9259:3044":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:46688:2948":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:46679:2933":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:50404:3336":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:23661:3001":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:51355:4012":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3276:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:53515:4064":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:24802:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:7927:2984":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:57882:2451":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:13283:13960":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:51543:3173":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:3309:2517":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:49713:3307":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:53189:3172":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:2865:3026":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:10312:2753":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:45809:2559":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:23939:3349":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:47015:3937":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:13083:3058":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:52435:3136":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:23771:3002":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:49581:3271":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3739:2555":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:45965:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:57876:2445":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:46618:2927":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:57869:2440":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:50068:4004":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:50034:3070":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3296:2516":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:49276:3277":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4727:3022":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:48007:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:48616:2747":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:51922:4017":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10251:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10302:2749":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:22533:2989":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:49445:3294":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:51670:3150":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:50341:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:23134:3133":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:48800:3684":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:49043:3472":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:3515:1930":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:23125:3051":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:24734:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:28051:2586":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:48847:3686":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:50203:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:50020:3069":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:13816:30449":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:46281:3313":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:5033:2495":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:52369:3151":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:50199:3322":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:51208:3165":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11282:3266":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:13072:3056":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:22874:3183":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:46410:3312":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:52243:3159":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:51073:3176":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:11410:3271":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:51489:3166":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:2396:2509":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4920:2511":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:45781:2561":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2956:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:11355:3268":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:50436:3188":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:53126:3152":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:46970:3936":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:300:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:47542:2898":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:8403:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3430:2546":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"0:0:1631":{"crate_id":0,"path":["lock_api"],"kind":"module"},"1:5583:11097":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:53416:3761":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:50448:3186":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:46424:3453":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:46600:2944":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:22601:30385":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:22561:30340":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:50225:3383":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:46363:3314":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:49297:3279":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10574:3112":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:53530:4065":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10539:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:3491:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:46450:3219":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:24564:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:57885:2454":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:46789:2941":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:53592:4067":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:13766:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:57861:2433":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:47525:2683":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:50167:3320":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:46049:3127":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:3745:2557":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8472:2662":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:47923:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46656:3987":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:53338:3175":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:51718:3135":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:49776:3314":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4669:3548":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:49733:3309":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:11244:3265":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:51592:3158":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:50359:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3165:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:10241:2743":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:4739:3023":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:47611:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:53377:3140":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:57886:2455":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:51250:4011":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"}},"external_crates":{"4":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}