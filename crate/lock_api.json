{"root":"0:0:1632","crate_version":"0.4.7","includes_private":false,"index":{"0:514:1757":{"id":"0:514:1757","crate_id":0,"name":"GuardMarker","span":{"filename":"src/rwlock.rs","begin":[47,4],"end":[47,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:436:2043":{"id":"0:436:2043","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[901,0],"end":[905,1]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:265:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3427:2546":{"id":"1:3427:2546","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23237:27696":{"id":"1:23237:27696","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23238:30857","1:23239:30858","1:23240:30859"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23230:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:9408:2937-0:5:1626":{"id":"a:1:9408:2937-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9408:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:9407:2935-0:8:1628":{"id":"a:1:9407:2935-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9407:2935","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:266:1754":{"id":"0:266:1754","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[50,4],"end":[50,21]},"visibility":"default","docs":"Initial value.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"0:265:1957":{"id":"0:265:1957","crate_id":0,"name":"GetThreadId","span":{"filename":"src/remutex.rs","begin":[45,0],"end":[55,1]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:266:1754","0:267:1961"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:558:2173":{"id":"0:558:2173","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[307,4],"end":[307,70]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3208-0:8:1628":{"id":"b:1:3208-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3211:127","1:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:33:1754":{"id":"0:33:1754","crate_id":0,"name":"INIT","span":{"filename":"src/mutex.rs","begin":[41,4],"end":[41,21]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"1:4783:2939":{"id":"1:4783:2939","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4784:2684","1:4785:31139","1:4786:2687"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:374:2004":{"id":"0:374:2004","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[603,0],"end":[606,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":["#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:265:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:41:1789":{"id":"0:41:1789","crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[110,4],"end":[113,5]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:10390:2745":{"id":"1:10390:2745","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10391:1533","1:10392:29100","1:10394:29101"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:163:1904":{"id":"0:163:1904","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[794,0],"end":[798,1]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:8556:2664":{"id":"1:8556:2664","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8558:2681","1:8560:2682","1:8561:2683"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:32:1751":{"id":"0:32:1751","crate_id":0,"name":"RawMutex","span":{"filename":"src/mutex.rs","begin":[36,0],"end":[79,1]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:33:1754","0:34:1757","0:35:1759","0:36:1762","0:37:1770","0:38:1772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22899:3180":{"id":"1:22899:3180","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22900:3064","1:22901:30871","1:22902:31586","1:22903:31587","1:22904:31588","1:22905:31051","1:22906:31589","1:22907:31590","1:22908:31591","1:22909:31592","1:22910:31593","1:22911:31594","1:22912:31595","1:22913:31596","1:22914:31597","1:22915:31598","1:22916:31056","1:22917:31599","1:22918:29160","1:22919:29159","1:22920:29161","1:22921:30872","1:22922:30873","1:22923:30874","1:22924:30875"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23001:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3169:74":{"id":"1:3169:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3171:2672"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:10447:119":{"id":"1:10447:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10448:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:42:1793":{"id":"0:42:1793","crate_id":0,"name":"RawMutexTimed","span":{"filename":"src/mutex.rs","begin":[120,0],"end":[132,1]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:43:121","0:44:1796","0:45:1798","0:46:1800"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8547:151":{"id":"1:8547:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8548:2684","1:8549:2685","1:8550:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22952:3192":{"id":"1:22952:3192","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22953:3064","1:22954:30871","1:22955:1227","1:22956:1228","1:22957:31051","1:22958:31052","1:22959:31053","1:22960:31054","1:22961:31055","1:22962:31056","1:22963:30872","1:22964:30873","1:22965:30874","1:22966:30875","1:22967:30876","1:22968:30877","1:22969:30878"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23001:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:645:2194":{"id":"0:645:2194","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[1186,0],"end":[1189,1]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:12649:3471":{"id":"1:12649:3471","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12650:2684","1:12651:28783"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:520:2082":{"id":"0:520:2082","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/rwlock.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3178:228":{"id":"1:3178:228","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3180:127","1:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:523:2087":{"id":"0:523:2087","crate_id":0,"name":"RawRwLockFair","span":{"filename":"src/rwlock.rs","begin":[107,0],"end":[149,1]},"visibility":"public","docs":"Additional methods for RwLocks which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:524:2089","0:525:2091","0:526:2095","0:527:2099"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:5:1626":{"id":"0:5:1626","crate_id":0,"name":"GuardSend","span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,25]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:9407:2935-0:5:1626","a:1:3269:211-0:5:1626","a:1:9408:2937-0:5:1626","a:1:3310:2518-0:5:1626","a:1:3281:220-0:5:1626","b:1:2869-0:5:1626","b:1:4002-0:5:1626","b:1:3202-0:5:1626","b:1:3213-0:5:1626","b:1:3198-0:5:1626","b:1:2872-0:5:1626","b:1:3208-0:5:1626"]}},"1:3352:2529":{"id":"1:3352:2529","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3354:181","1:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2863:97":{"id":"1:2863:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2865:2425"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3204:681":{"id":"1:3204:681","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3525:132":{"id":"1:3525:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3527:181","1:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:695:2196":{"id":"0:695:2196","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[1474,0],"end":[1477,1]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"b:1:3213-0:8:1628":{"id":"b:1:3213-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3216:127","1:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13930:150":{"id":"1:13930:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13931:181","1:13932:150","1:13933:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3211:127":{"id":"1:3211:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"1:10451:2751":{"id":"1:10451:2751","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10452:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3198-0:5:1626":{"id":"b:1:3198-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3201:2673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:542:2130":{"id":"0:542:2130","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/rwlock.rs","begin":[210,4],"end":[210,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3648:2553":{"id":"1:3648:2553","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3650:28985","1:3651:28986","1:3652:28987"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:516:2072":{"id":"0:516:2072","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/rwlock.rs","begin":[53,4],"end":[53,38]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:543:2136":{"id":"0:543:2136","crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"src/rwlock.rs","begin":[219,0],"end":[247,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:544:2138","0:545:2140","0:546:2143","0:547:2145","0:548:2148"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:534:2110":{"id":"0:534:2110","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/rwlock.rs","begin":[178,4],"end":[178,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3812:2561":{"id":"1:3812:2561","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9028:2901":{"id":"1:9028:2901","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3372:2538":{"id":"1:3372:2538","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:9407:2935-0:5:1626":{"id":"a:1:9407:2935-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9407:2935","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:39:1779":{"id":"0:39:1779","crate_id":0,"name":"RawMutexFair","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[114,1]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:40:1784","0:41:1789"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:541:2129":{"id":"0:541:2129","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/rwlock.rs","begin":[206,4],"end":[206,77]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3216:127":{"id":"1:3216:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:38930:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:220:1630":{"id":"0:220:1630","crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[8,0],"end":[1036,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:265:1957","0:268:1970","0:306:1998","0:374:2004","0:436:2043"],"is_stripped":true}},"1:10440:109":{"id":"1:10440:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10441:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3342:2533":{"id":"1:3342:2533","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3344:181","1:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:492:1631":{"id":"0:492:1631","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[8,0],"end":[2604,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:512:2067","0:523:2087","0:528:2102","0:530:2107","0:537:2120","0:540:2126","0:543:2136","0:549:2151","0:552:2160","0:555:2167","0:560:2185","0:645:2194","0:695:2196","0:760:2314","0:821:2346","0:872:2373"],"is_stripped":true}},"1:2866:2908":{"id":"1:2866:2908","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2868:28448"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:14390:3175":{"id":"1:14390:3175","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14391:29258","1:14392:29259","1:14393:29260","1:14394:29261","1:14395:29262","1:14396:29263","1:14397:2710"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:536:2113":{"id":"0:536:2113","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/rwlock.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8543:136":{"id":"1:8543:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8545:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:530:2107":{"id":"0:530:2107","crate_id":0,"name":"RawRwLockTimed","span":{"filename":"src/rwlock.rs","begin":[167,0],"end":[185,1]},"visibility":"public","docs":"Additional methods for RwLocks which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:531:121","0:532:1796","0:533:2109","0:534:2110","0:535:2112","0:536:2113"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8616:2663":{"id":"1:8616:2663","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8617:793","1:8618:2680"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23285:3065":{"id":"1:23285:3065","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"1:23922:3062","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23276:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13221:2985":{"id":"1:13221:2985","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13223:3005","1:13224:922","1:13225:28581","1:13226:28582"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:821:2346":{"id":"0:821:2346","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[2334,0],"end":[2338,1]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"a:1:3269:211-0:5:1626":{"id":"a:1:3269:211-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:513:1754":{"id":"0:513:1754","crate_id":0,"name":"INIT","span":{"filename":"src/rwlock.rs","begin":[43,4],"end":[43,21]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":["#[allow(clippy :: declare_interior_mutable_const)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":null}},"1:3440:2549":{"id":"1:3440:2549","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:40:1784":{"id":"0:40:1784","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[96,4],"end":[96,33]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3380:2535":{"id":"1:3380:2535","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3492:116":{"id":"1:3492:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3493:221","1:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:36:1762":{"id":"0:36:1762","crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[52,4],"end":[52,31]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:0:1632":{"id":"0:0:1632","crate_id":0,"name":"lock_api","span":{"filename":"src/lib.rs","begin":[8,0],"end":[113,25]},"visibility":"public","docs":"This library provides type-safe and fully-featured `Mutex` and `RwLock`\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for RwLocks, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{},"attrs":["#![no_std]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5:1626","0:8:1628","0:219","0:491","0:928"],"is_stripped":false}},"1:3175:135":{"id":"1:3175:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9408:2937":{"id":"1:9408:2937","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3364:2531":{"id":"1:3364:2531","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3365:181","1:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3104:2961":{"id":"1:3104:2961","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:3103:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:528:2102":{"id":"0:528:2102","crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"src/rwlock.rs","begin":[153,0],"end":[161,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:529:2105"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3522:131":{"id":"1:3522:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2871:2425":{"id":"1:2871:2425","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268:1970":{"id":"0:268:1970","crate_id":0,"name":"RawReentrantMutex","span":{"filename":"src/remutex.rs","begin":[67,0],"end":[72,1]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.\n\n[`RawMutex`]: trait.RawMutex.html\n[`ReentrantMutex`]: struct.ReentrantMutex.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:10723:2963":{"id":"1:10723:2963","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10724:146","1:10725:13074","1:10726:28787"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:518:2077":{"id":"0:518:2077","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[63,4],"end":[63,29]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10453:2752":{"id":"1:10453:2752","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10454:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13212:2983":{"id":"1:13212:2983","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13214:2985","1:13215:31107","1:13216:31108","1:13217:31109","1:13218:31111","1:13219:31110","1:13220:31112"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3775:2509":{"id":"1:3775:2509","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:539:2124":{"id":"0:539:2124","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[199,4],"end":[199,48]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3384:2537":{"id":"1:3384:2537","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10461:2755":{"id":"1:10461:2755","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10462:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10678:142":{"id":"1:10678:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10679:715","1:10681:31283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:559:2174":{"id":"0:559:2174","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[315,4],"end":[315,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3281:220-0:5:1626":{"id":"a:1:3281:220-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:517:2075":{"id":"0:517:2075","crate_id":0,"name":"unlock_shared","span":{"filename":"src/rwlock.rs","begin":[60,4],"end":[60,35]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3208-0:5:1626":{"id":"b:1:3208-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3211:127","1:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:555:2167":{"id":"0:555:2167","crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"src/rwlock.rs","begin":[294,0],"end":[316,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:556:2169","0:557:2170","0:558:2173","0:559:2174"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:543:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:530:2107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3581:2551":{"id":"1:3581:2551","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"1:3577:2550","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3274:1810":{"id":"1:3274:1810","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:8:1628":{"id":"0:8:1628","crate_id":0,"name":"GuardNoSend","span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,32]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:9407:2935-0:8:1628","a:1:3269:211-0:8:1628","a:1:9408:2937-0:8:1628","a:1:3310:2518-0:8:1628","b:1:2869-0:8:1628","b:1:4002-0:8:1628","b:1:3202-0:8:1628","b:1:3213-0:8:1628","b:1:3198-0:8:1628","b:1:2872-0:8:1628","b:1:3208-0:8:1628","0:11"]}},"1:8591:120":{"id":"1:8591:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8592:2674","1:8593:2675","1:8594:2676","1:8595:2677","1:8599:2678","1:8602:2679"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:44:1796":{"id":"0:44:1796","crate_id":0,"name":"Instant","span":{"filename":"src/mutex.rs","begin":[125,4],"end":[125,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3740:2556":{"id":"1:3740:2556","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3742:30351"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:37:1770":{"id":"0:37:1770","crate_id":0,"name":"unlock","span":{"filename":"src/mutex.rs","begin":[65,4],"end":[65,28]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: #tymethod.lock\n[`try_lock`]: #tymethod.try_lock\n[`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for\n[`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:45:1798":{"id":"0:45:1798","crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[128,4],"end":[128,60]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:42:1793","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3368:2534":{"id":"1:3368:2534","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:525:2091":{"id":"0:525:2091","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/rwlock.rs","begin":[120,4],"end":[120,43]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3516:1931":{"id":"1:3516:1931","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3310:2518-0:8:1628":{"id":"a:1:3310:2518-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3310:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:47:162":{"id":"0:47:162","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[142,0],"end":[145,1]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3729:224":{"id":"1:3729:224","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3730:181","1:3731:2556","1:3732:686","1:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"1:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:872:2373":{"id":"0:872:2373","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[2469,0],"end":[2473,1]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:8748:157":{"id":"1:8748:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8749:2684","1:8750:922","1:8751:2686","1:8754:2687","1:8755:495","1:8757:2688","1:8760:2689","1:8761:2690","1:8762:2691","1:8763:2692","1:8765:2693","1:8767:2694","1:8768:2695","1:8770:841","1:8773:2696","1:8780:2697","1:8782:2698","1:8785:2699","1:8786:2700","1:8787:2701","1:8789:2702","1:8791:2703","1:8794:1308","1:8795:2704","1:8796:2705","1:8800:2706","1:8803:2707","1:8804:2708","1:8805:2709","1:8807:2710","1:8808:2667","1:8810:2711","1:8813:2712","1:8815:2713","1:8825:2714","1:8840:2715","1:8842:2716","1:8846:2717","1:8855:2718","1:8858:2719","1:8860:2720","1:8863:276","1:8870:294","1:8877:2721","1:8884:2722","1:8893:2723","1:8903:1014","1:8910:2724","1:8917:2669","1:8918:2670","1:8919:2725","1:8931:2726","1:8938:2727","1:8950:2728","1:8957:2729","1:8958:2730","1:8963:2731","1:8966:2732","1:8969:2733","1:8970:2734","1:8972:2735","1:8974:2736","1:8976:415","1:8979:2737","1:8982:997","1:8985:2738","1:8988:604","1:8991:2739","1:8994:907","1:8996:826","1:8998:792","1:9000:713","1:9002:696","1:9004:2740","1:9005:2741","1:9013:2742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8510:3026":{"id":"1:8510:3026","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8512:2736"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3182:227":{"id":"1:3182:227","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3184:127","1:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3396:2539":{"id":"1:3396:2539","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3398:181","1:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3278:217":{"id":"1:3278:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9407:2935":{"id":"1:9407:2935","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:556:2169":{"id":"0:556:2169","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/rwlock.rs","begin":[296,4],"end":[296,71]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:548:2148":{"id":"0:548:2148","crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[246,4],"end":[246,41]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:2921:183":{"id":"1:2921:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2923:604","1:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:547:2145":{"id":"0:547:2145","crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[238,4],"end":[238,29]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3172:149":{"id":"1:3172:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3174:2673"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10449:2750":{"id":"1:10449:2750","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10450:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:535:2112":{"id":"0:535:2112","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/rwlock.rs","begin":[181,4],"end":[181,70]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2872-0:5:1626":{"id":"b:1:2872-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2866:2908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2874:28448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:760:2314":{"id":"0:760:2314","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[1862,0],"end":[1865,1]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":["#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:543:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:10688:146":{"id":"1:10688:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10689:652","1:10690:2217","1:10691:30904","1:10692:30905","1:10693:30906","1:10694:30907","1:10695:30908","1:10696:30909","1:10697:30910","1:10698:30911","1:10699:30912","1:10700:30913","1:10701:30914","1:10702:30915","1:10703:30916","1:10704:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:551:2157":{"id":"0:551:2157","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/rwlock.rs","begin":[268,4],"end":[271,5]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8071:2907":{"id":"1:8071:2907","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8072:29558","1:8073:29559","1:8074:29556","1:8075:29554","1:8076:29560","1:8077:29557","1:8078:29555"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3247:115":{"id":"1:3247:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23613:3066":{"id":"1:23613:3066","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23614:1270","1:23615:1269","1:23616:1267","1:23617:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"1:23025:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3423:2545":{"id":"1:3423:2545","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:526:2095":{"id":"0:526:2095","crate_id":0,"name":"bump_shared","span":{"filename":"src/rwlock.rs","begin":[131,4],"end":[134,5]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13915:138":{"id":"1:13915:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13916:181","1:13917:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:553:2162":{"id":"0:553:2162","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/rwlock.rs","begin":[282,4],"end":[282,42]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:557:2170":{"id":"0:557:2170","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/rwlock.rs","begin":[299,4],"end":[299,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3269:211":{"id":"1:3269:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3337:2528":{"id":"1:3337:2528","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3339:181","1:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13227:2986":{"id":"1:13227:2986","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13229:2674","1:13230:29541","1:13231:29542"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13221:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3577:2550":{"id":"1:3577:2550","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3579:181","1:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3431:2547":{"id":"1:3431:2547","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3411:2543":{"id":"1:3411:2543","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3413:181","1:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3166:75":{"id":"1:3166:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:533:2109":{"id":"0:533:2109","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/rwlock.rs","begin":[175,4],"end":[175,67]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:530:2107","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3376:2536":{"id":"1:3376:2536","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22988:3031":{"id":"1:22988:3031","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22989:30871","1:22990:1227","1:22991:1228","1:22992:30872","1:22993:30873","1:22994:30874","1:22995:30875","1:22996:30876","1:22997:30877","1:22998:30878"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23001:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3310:2518-0:5:1626":{"id":"a:1:3310:2518-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3310:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3202-0:5:1626":{"id":"b:1:3202-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3734:137":{"id":"1:3734:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4004:1429":{"id":"1:4004:1429","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46145:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10457:189":{"id":"1:10457:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10458:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:560:2185":{"id":"0:560:2185","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[330,0],"end":[333,1]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:3505:1736":{"id":"1:3505:1736","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3717:2554":{"id":"1:3717:2554","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3648:2553","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3401:2540":{"id":"1:3401:2540","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3403:181","1:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:537:2120":{"id":"0:537:2120","crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"src/rwlock.rs","begin":[194,0],"end":[200,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:538:2122","0:539:2124"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:512:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3269:211-0:8:1628":{"id":"a:1:3269:211-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:3519:130":{"id":"1:3519:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::remutex","name":"remutex","id":"0:220:1630","glob":true}},"0:540:2126":{"id":"0:540:2126","crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"src/rwlock.rs","begin":[203,0],"end":[211,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:541:2129","0:542:2130"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursive","id":"0:537:2120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:530:2107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8506:3028":{"id":"1:8506:3028","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8508:2735"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:928":{"id":"0:928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::rwlock","name":"rwlock","id":"0:492:1631","glob":true}},"1:10459:2754":{"id":"1:10459:2754","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10460:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:267:1961":{"id":"0:267:1961","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[54,4],"end":[54,48]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"1:24803:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23922:3062":{"id":"1:23922:3062","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23923:3064"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23918:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:3213-0:5:1626":{"id":"b:1:3213-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3216:127","1:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:512:2067":{"id":"0:512:2067","crate_id":0,"name":"RawRwLock","span":{"filename":"src/rwlock.rs","begin":[38,0],"end":[99,1]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:513:1754","0:514:1757","0:515:2070","0:516:2072","0:517:2075","0:518:2077","0:519:2079","0:520:2082","0:521:1772","0:522:2085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:524:2089":{"id":"0:524:2089","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/rwlock.rs","begin":[113,4],"end":[113,40]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3277:218":{"id":"1:3277:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11082:214":{"id":"1:11082:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:11084:181","1:11085:1838","1:11086:1837","1:11087:28674","1:11088:28675","1:11089:753","1:11090:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:11073:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:549:2151":{"id":"0:549:2151","crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"src/rwlock.rs","begin":[251,0],"end":[272,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:550:2153","0:551:2157"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:543:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:523:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:538:2122":{"id":"0:538:2122","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[196,4],"end":[196,36]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:35:1759":{"id":"0:35:1759","crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3435:2548":{"id":"1:3435:2548","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,0],"end":[107,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::mutex","name":"mutex","id":"0:12:1629","glob":true}},"0:527:2099":{"id":"0:527:2099","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/rwlock.rs","begin":[145,4],"end":[148,5]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13141:2585":{"id":"1:13141:2585","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13142:126","1:13143:29379"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3347:2530":{"id":"1:3347:2530","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3349:181","1:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:9408:2937-0:8:1628":{"id":"a:1:9408:2937-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9408:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3198-0:8:1628":{"id":"b:1:3198-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3201:2673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13232:2981":{"id":"1:13232:2981","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:306:1998":{"id":"0:306:1998","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](struct.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:10455:2753":{"id":"1:10455:2753","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10456:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:522:2085":{"id":"0:522:2085","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[89,4],"end":[98,5]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2957:177":{"id":"1:2957:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2958:415","1:2959:2669","1:2960:2670","1:2961:2671"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3358:2532":{"id":"1:3358:2532","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3360:181","1:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2888:104":{"id":"1:2888:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2889:408","1:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:544:2138":{"id":"0:544:2138","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[221,4],"end":[221,30]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:28:2488":{"id":"4:28:2488","crate_id":4,"name":"Strategy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:29:31722"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:521:1772":{"id":"0:521:1772","crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[77,4],"end":[86,5]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23088:3038":{"id":"1:23088:3038","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23078:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,0],"end":[104,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:552:2160":{"id":"0:552:2160","crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"src/rwlock.rs","begin":[276,0],"end":[290,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:553:2162","0:554:2164"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:543:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:528:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:529:2105":{"id":"0:529:2105","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[160,4],"end":[160,31]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3279:106":{"id":"1:3279:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:532:1796":{"id":"0:532:1796","crate_id":0,"name":"Instant","span":{"filename":"src/rwlock.rs","begin":[172,4],"end":[172,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:1:2869-0:5:1626":{"id":"b:1:2869-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2871:2425"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23618:27715":{"id":"1:23618:27715","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23619:29159","1:23620:29160","1:23621:29161"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"1:23613:3066","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2967:184":{"id":"1:2967:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2969:997","1:2970:826","1:2971:792","1:2972:713","1:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3417:2544":{"id":"1:3417:2544","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3419:181","1:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3406:2541":{"id":"1:3406:2541","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3408:181","1:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:12:1629":{"id":"0:12:1629","crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[8,0],"end":[924,97]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:32:1751","0:39:1779","0:42:1793","0:47:162","0:103:1821","0:163:1904"],"is_stripped":true}},"0:545:2140":{"id":"0:545:2140","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[224,4],"end":[224,42]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:550:2153":{"id":"0:550:2153","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/rwlock.rs","begin":[257,4],"end":[257,44]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:38:1772":{"id":"0:38:1772","crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3202-0:8:1628":{"id":"b:1:3202-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:4002-0:5:1626":{"id":"b:1:4002-0:5:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardSend","id":"0:5:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:519:2079":{"id":"0:519:2079","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[66,4],"end":[66,41]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23025:3181":{"id":"1:23025:3181","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23026:3064","1:23027:1247","1:23028:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34:1757":{"id":"0:34:1757","crate_id":0,"name":"GuardMarker","span":{"filename":"src/mutex.rs","begin":[45,4],"end":[45,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:546:2143":{"id":"0:546:2143","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/rwlock.rs","begin":[231,4],"end":[231,39]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3201:2673":{"id":"1:3201:2673","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3175:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3212:1417":{"id":"1:3212:1417","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1821":{"id":"0:103:1821","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":["#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:32:1751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"b:1:4002-0:8:1628":{"id":"b:1:4002-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3389:2542":{"id":"1:3389:2542","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3390:181","1:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2869-0:8:1628":{"id":"b:1:2869-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2871:2425"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3310:2518":{"id":"1:3310:2518","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2874:28448":{"id":"1:2874:28448","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:515:2070":{"id":"0:515:2070","crate_id":0,"name":"lock_shared","span":{"filename":"src/rwlock.rs","begin":[50,4],"end":[50,26]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3217:1416":{"id":"1:3217:1416","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1800":{"id":"0:46:1800","crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[131,4],"end":[131,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:42:1793","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9035:2906":{"id":"1:9035:2906","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"1:8071:2907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2926:124":{"id":"1:2926:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4000:68":{"id":"1:4000:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:43:121":{"id":"0:43:121","crate_id":0,"name":"Duration","span":{"filename":"src/mutex.rs","begin":[122,4],"end":[122,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:554:2164":{"id":"0:554:2164","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[289,4],"end":[289,45]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:531:121":{"id":"0:531:121","crate_id":0,"name":"Duration","span":{"filename":"src/rwlock.rs","begin":[169,4],"end":[169,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:9031:2902":{"id":"1:9031:2902","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3559:2559":{"id":"1:3559:2559","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3561:237","1:3562:206","1:3563:29315"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3281:220":{"id":"1:3281:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2872-0:8:1628":{"id":"b:1:2872-0:8:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2866:2908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"0:8:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2874:28448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"1:50561:3177":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3729:224":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:46781:3990":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11073:3035":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:53655:4070":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:49863:3313":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:48398:2753":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3364:2531":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11393:3269":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:50165:2999":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:50175:3000":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:50511:3338":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3519:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:48961:3688":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:46577:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:13427:3943":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:48951:4000":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:46833:3148":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:57947:2456":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:8071:2907":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:5156:2504":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:52475:3088":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2283:3049":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3104:2961":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:24090:3352":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:24356:4742":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:51853:3073":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:51539:3112":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:22731:28760":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:24935:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3522:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:45980:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4378:2685":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:51385:3091":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8506:3028":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:7896:3150":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:5631:779":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:49370:3278":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:3274:1810":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:3516:1931":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:10451:2751":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:23078:3035":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:51160:4013":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:50154:2998":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:46804:3130":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:24638:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:24968:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:22684:3022":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:51731:3080":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:10390:2745":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:9916:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:57925:2437":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:1944:1735":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:4783:2939":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:3734:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11286:2900":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"0:0:1632":{"crate_id":0,"path":["lock_api"],"kind":"module"},"1:3342:2533":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:48922:3687":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:25001:2590":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:51585:3100":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:57928:2439":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:2957:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:3281:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:48255:2596":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3103:3035":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3717:2554":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:3406:2541":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:49379:3279":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3175:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:46904:3137":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:47111:3994":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:14006:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:28180:2587":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:51206:3098":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:51284:3111":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:49161:3476":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3396:2539":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:49408:3282":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:46563:3200":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:53441:3074":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:13227:2986":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:53365:3089":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:24161:3947":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:47666:2900":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:49834:3310":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:57930:2441":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:24290:4741":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:57939:2448":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:12205:3560":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:2921:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:3368:2534":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:50532:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:47716:2890":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:2967:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5030:2495":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:46224:3216":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:49784:3308":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3812:2561":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:28:2488":{"crate_id":4,"path":["scopeguard","Strategy"],"kind":"trait"},"1:3440:2549":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:5101:2502":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:13232:2981":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11545:3274":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2194:2794":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:57929:2440":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:2397:2510":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8591:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:48377:2751":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:14111:29540":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:52209:3105":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:49480:3286":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:46165:3166":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:9911:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:5034:2496":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:50298:3327":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:24327:4743":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4066:2931":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:46743:3124":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:6514:3128":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:46763:3126":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:13141:2585":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:12105:3290":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:8001:3121":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:13278:2989":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:23237:27696":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:50549:3179":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:51982:4019":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:24311:4733":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:49997:2990":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:46397:3316":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:46403:3975":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:51761:3084":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:50302:3331":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"0:8:1628":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"1:57931:2442":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:57934:2443":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:49598:3271":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:12883:3300":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:50322:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:46914:3138":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:57923:2435":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:8510:3026":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:3347:2530":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:56396:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:24265:3950":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46062:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:12959:3307":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:46040:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:10122:3253":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:22729:28764":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:46667:3989":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:50306:3329":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:48650:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:57736:4077":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:3275:2508":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:48680:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:57945:2454":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:46145:2925":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:51829:3072":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:47742:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:48754:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:24737:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:5208:2506":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:50519:3339":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:49879:3315":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:51437:3083":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:46734:3145":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:12994:3268":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:3182:227":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:24836:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:9529:2983":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:8547:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:24704:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:53578:4067":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:49888:3316":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:6774:29134":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:57940:2449":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:3423:2545":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:10678:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:48171:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:46594:3374":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3758:3042":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:3746:2558":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:14:2217":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:3492:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:47725:2659":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10440:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:4885:2511":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:47919:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:49388:3280":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:24377:2589":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:49844:3311":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:10447:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:52399:3081":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3166:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:49872:3314":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3505:1736":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11311:3267":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:57942:2451":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:48668:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:46772:3127":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:3310:2518":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:22750:28765":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7033:3147":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:57944:2453":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:9408:2937":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:2926:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:37750:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:47140:3940":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:47810:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:46454:3458":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:53117:3102":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:53499:3756":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:24019:3349":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:53616:4069":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8250:3673":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"0:5:1626":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"1:11559:3275":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:24389:2592":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:51492:4016":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:14217:2941":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:23025:3181":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11573:3276":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:53319:3071":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3269:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:53540:3757":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:23824:28613":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:51140:4012":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9035:2906":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:3247:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:10400:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:32820:2798":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:50103:2996":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:47801:2685":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:2187:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:49165:3475":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:47877:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:57943:2452":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:46703:3141":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:45906:2562":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:32472:29449":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:23088:3038":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:23618:27715":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:57949:2458":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:2062:3551":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:46687:3140":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:3172:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:10453:2752":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:49702:3275":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3287:1734":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:46582:3373":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:23922:3062":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:23287:3064":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:46795:3129":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:2866:2908":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:24671:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:11466:3271":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:3169:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:32464:2797":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:52239:3108":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:46873:3135":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:3352:2529":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:46424:3196":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11262:2899":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9028:2901":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:9031:2902":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3279:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:50140:2997":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:45996:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:38930:2960":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"3:0:2485":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:47658:2899":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:51415:3079":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:5584:10579":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:52321:3093":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:49802:3309":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:23812:3037":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:3337:2528":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:24803:1950":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:51685:3092":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:10449:2750":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:5605:3190":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:49490:3287":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:3740:2556":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:13965:31585":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:22712:28610":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:49524:3377":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:49471:3285":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:24273:3951":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3525:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:47785:2899":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:3431:2547":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:11082:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3581:2551":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3372:2538":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:52659:3094":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:46712:3123":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:12920:3303":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:46852:3133":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10455:2753":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8616:2663":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:48213:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:48129:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3297:2517":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:46484:3453":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:3411:2543":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:52509:3070":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:23918:3035":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:46020:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2769:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:51336:3103":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:57937:2446":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:8556:2664":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:50294:3328":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:10067:660":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:46893:3143":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:56435:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:0:1623":{"crate_id":4,"path":["scopeguard"],"kind":"module"},"1:25370:2586":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4000:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:49648:3302":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:52085:3113":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:46106:2552":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:14227:3340":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10459:2754":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:46440:3198":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:50314:3324":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:50011:2993":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:50458:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:57938:2447":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:2269:3043":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:53403:3109":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9407:2935":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:46924:3139":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:50076:2995":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:48939:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:47102:3993":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:46537:3456":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3178:228":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:53459:3752":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:321:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4740:3059":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:52445:3085":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:51807:3069":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"4:33:2490":{"crate_id":4,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"1:23230:3035":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:3559:2559":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:53488:3753":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:49566:3297":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47095:3939":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:49458:3284":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:49630:3301":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:47793:2900":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:51252:3078":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:47835:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:24770:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:5039:2497":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:53195:3086":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:48969:3689":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:51615:3104":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3376:2536":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:48384:2750":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3401:2540":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:51951:4018":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:11587:3277":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:53563:3766":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:46725:3142":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8543:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:50355:3387":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:50318:3325":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:48391:2752":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:46824:3131":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:46507:3454":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:48930:2965":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:13221:2985":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:57948:2457":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:50286:3323":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:51904:4017":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:52163:3101":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:53525:3754":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:53593:4068":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:12649:3471":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:48003:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:10723:2963":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:47674:2685":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:56409:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:45933:2560":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:49684:3274":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:51474:3068":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11504:3272":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2292:3050":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:49556:3296":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5185:1733":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:51637:3107":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:23613:3066":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:57935:2444":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:49398:3281":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:57924:2436":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:56461:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:48045:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:53007:3082":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:46523:3315":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:46172:3167":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:10688:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:46883:3136":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:12943:3304":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:48617:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:22988:3031":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:46657:3554":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:14041:3946":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:53514:3765":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:56448:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4921:2512":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:49748:3306":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:51783:3087":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:57927:2438":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:13212:2983":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:51455:4015":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3380:2535":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10127:3254":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:24198:3668":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:23141:3064":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:50468:3618":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:32458:2796":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:3389:2542":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:49854:3312":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:47683:2889":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:48641:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:13930:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4752:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:8323:2494":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:24250:3234":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:50310:3330":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:46476:3317":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:51184:3110":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:5111:2503":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:47961:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2888:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:46813:3146":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:50188:4007":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:12072:3289":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:49982:2987":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:50343:3386":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:32424:1737":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:51314:3099":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:46464:3459":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:32524:29500":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:24214:3681":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7810:2693":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:4728:3058":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:37774:3022":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8307:30816":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:23001:3035":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:46501:3316":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:49538:3183":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:46544:3457":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:49897:3317":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:24363:2591":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:57946:2455":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:56383:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49580:3267":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:22697:28610":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:46861:3134":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:13432:13512":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:23082:3036":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:24182:3238":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:49419:3283":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:53257:3106":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:49445:3140":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3278:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:48635:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:3775:2509":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:46179:2503":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:4965:1948":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:57936:2445":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:10728:2964":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:47617:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:8748:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:5165:2505":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:47129:3998":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3384:2537":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:46530:3455":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:22952:3192":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:74:2489":{"crate_id":4,"path":["scopeguard","Always"],"kind":"enum"},"1:51230:3090":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:14390:3175":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:22899:3180":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:11354:3268":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:46084:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:10595:3942":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:48738:2749":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:53479:3764":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:24869:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:53468:3755":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3435:2548":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:32624:29498":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:51354:4014":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3648:2553":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:49730:3305":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:10389:205":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:10461:2755":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:23285:3065":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:56422:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46412:3195":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:14278:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:47649:2684":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:24238:2588":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:22752:28762":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:47734:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:13915:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:46753:3125":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:56026:3170":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:48914:2966":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:57941:2450":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:48702:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:2863:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6591:3144":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:46842:3132":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:46610:3375":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:3277:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:4670:3551":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:23276:3035":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:47120:3996":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:49319:3273":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:32284:2579":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:49500:3288":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:9409:2938":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:2508:2940":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11431:3270":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3427:2546":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10457:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:52865:3114":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:3417:2544":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:46138:2555":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:52005:4020":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:57922:2434":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:50028:2994":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:24902:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:57757:4078":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:38993:2519":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:50290:3326":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:48087:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3358:2532":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:49550:3295":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:50476:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:49960:2984":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3577:2550":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}