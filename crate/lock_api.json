{"root":"0:0:2014","crate_version":"0.4.11","includes_private":false,"index":{"a:1:32044:2958-0:217:2375":{"id":"a:1:32044:2958-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:29:2187":{"id":"0:29:2187","crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[110,4],"end":[113,5]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1019,0],"end":[1029,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:412:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:50:2210":{"id":"0:50:2210","crate_id":0,"name":"into_inner","span":{"filename":"src/mutex.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445:2495":{"id":"0:445:2495","crate_id":0,"name":"RawRwLockFair","span":{"filename":"src/rwlock.rs","begin":[107,0],"end":[149,1]},"visibility":"public","docs":"Additional methods for RwLocks which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:446:2497","0:447:2499","0:448:2503","0:449:2507"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:575:1030":{"id":"0:575:1030","crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[1245,4],"end":[1257,5]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449:2507":{"id":"0:449:2507","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/rwlock.rs","begin":[145,4],"end":[148,5]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:5147-0:841:186":{"id":"a:1:41602:5147-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1009,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:405:248","0:406:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:617":{"id":"0:617","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1520,0],"end":[1592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:621:2013","0:622:1030","0:625:2309","0:628:2313"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2902-0:849:2305":{"id":"b:1:2902-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:865:2449":{"id":"b:1:3720-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:908:2789":{"id":"b:1:2897-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61:2235":{"id":"0:61:2235","crate_id":0,"name":"get_mut","span":{"filename":"src/mutex.rs","begin":[246,4],"end":[248,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `Mutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[845,0],"end":[895,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:157:1030","0:160:2309"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:881:234":{"id":"b:1:2887-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:348:2182":{"id":"0:348:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[719,4],"end":[725,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:889:2727":{"id":"b:1:2897-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:824:612":{"id":"0:824:612","crate_id":0,"name":"deref_mut","span":{"filename":"src/rwlock.rs","begin":[2848,4],"end":[2850,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[75,0],"end":[75,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:418:779":{"id":"0:418:779","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[1034,4],"end":[1036,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457:2520":{"id":"0:457:2520","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/rwlock.rs","begin":[181,4],"end":[181,70]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2891-0:255:2403":{"id":"b:1:2891-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1377,0],"end":[1381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:608:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[760,0],"end":[768,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:358:248","0:359:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:459:2528":{"id":"0:459:2528","crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"src/rwlock.rs","begin":[194,0],"end":[200,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:460:2530","0:461:2532"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"b:1:2902-0:35:185":{"id":"b:1:2902-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:455:2517":{"id":"0:455:2517","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/rwlock.rs","begin":[175,4],"end":[175,67]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:41603:5146-0:908:2789":{"id":"a:1:41603:5146-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[655,0],"end":[660,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3331:2134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:129:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:527:2684":{"id":"0:527:2684","crate_id":0,"name":"try_read_until","span":{"filename":"src/rwlock.rs","begin":[745,4],"end":[752,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1594,0],"end":[1613,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:450:2510","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:635:2513"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:509:2627":{"id":"0:509:2627","crate_id":0,"name":"write","span":{"filename":"src/rwlock.rs","begin":[490,4],"end":[494,5]},"visibility":"public","docs":"Locks this `RwLock` with exclusive write access, blocking the current\nthread until it can be acquired.\n\nThis function will not return while other writers or other readers\ncurrently have access to the lock.\n\nReturns an RAII guard which will drop the write access of this `RwLock`\nwhen dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2267":{"id":"0:69:2267","crate_id":0,"name":"force_unlock_fair","span":{"filename":"src/mutex.rs","begin":[360,4],"end":[362,5]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2894-0:35:185":{"id":"b:1:2894-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2896:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:247:2187":{"id":"0:247:2187","crate_id":0,"name":"bump","span":{"filename":"src/remutex.rs","begin":[182,4],"end":[191,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:438:2480":{"id":"0:438:2480","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/rwlock.rs","begin":[53,4],"end":[53,38]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:539:2717":{"id":"0:539:2717","crate_id":0,"name":"try_read_recursive_until","span":{"filename":"src/rwlock.rs","begin":[961,4],"end":[971,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:2955-0:849:2305":{"id":"a:1:3145:2955-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:25:2168":{"id":"0:25:2168","crate_id":0,"name":"unlock","span":{"filename":"src/mutex.rs","begin":[65,4],"end":[65,28]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: #tymethod.lock\n[`try_lock`]: #tymethod.try_lock\n[`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for\n[`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:521:2675":{"id":"0:521:2675","crate_id":0,"name":"force_unlock_read_fair","span":{"filename":"src/rwlock.rs","begin":[700,4],"end":[702,5]},"visibility":"public","docs":"Forcibly unlocks a read lock using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:447:2499":{"id":"0:447:2499","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/rwlock.rs","begin":[120,4],"end":[120,43]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:830":{"id":"0:830","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2863,0],"end":[2869,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:834:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:2955-0:5:2008":{"id":"a:1:3145:2955-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:873:233":{"id":"b:1:2891-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:770":{"id":"0:770","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2699,0],"end":[2705,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:774:248","0:775:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:482:232":{"id":"b:1:2612-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:675:779":{"id":"0:675:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1725,4],"end":[1727,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:873:233":{"id":"b:1:3720-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:835":{"id":"0:835","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2871,0],"end":[2877,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:839:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:481:2582":{"id":"0:481:2582","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[315,4],"end":[315,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:3720-0:908:2789":{"id":"b:1:3720-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:507:2340":{"id":"0:507:2340","crate_id":0,"name":"read","span":{"filename":"src/rwlock.rs","begin":[458,4],"end":[462,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nNote that attempts to recursively acquire a read lock on a `RwLock` when\nthe current thread already holds one may result in a deadlock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:650":{"id":"0:365:650","crate_id":0,"name":"drop","span":{"filename":"src/remutex.rs","begin":[774,4],"end":[779,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:2578":{"id":"0:479:2578","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/rwlock.rs","begin":[299,4],"end":[299,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2615-0:482:232":{"id":"b:1:2615-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[928,0],"end":[933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3331:2134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:178:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2891-0:849:2305":{"id":"b:1:2891-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:549:2745":{"id":"0:549:2745","crate_id":0,"name":"try_upgradable_read_for","span":{"filename":"src/rwlock.rs","begin":[1117,4],"end":[1127,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:2160":{"id":"0:238:2160","crate_id":0,"name":"try_lock","span":{"filename":"src/remutex.rs","begin":[120,4],"end":[122,5]},"visibility":"public","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:849:2305":{"id":"b:1:2615-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:695:2331":{"id":"0:695:2331","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[2000,4],"end":[2010,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:8:2010":{"id":"b:1:2891-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:441:2487":{"id":"0:441:2487","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[66,4],"end":[66,41]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:406:610":{"id":"0:406:610","crate_id":0,"name":"deref","span":{"filename":"src/remutex.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:703:2513":{"id":"0:703:2513","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[2034,4],"end":[2045,5]},"visibility":"public","docs":"Atomically downgrades an upgradable read lock lock into a shared read lock\nwithout allowing any writers to take exclusive access of the lock in the\nmeantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2313":{"id":"0:106:2313","crate_id":0,"name":"unlocked","span":{"filename":"src/mutex.rs","begin":[568,4],"end":[578,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512:2170":{"id":"0:512:2170","crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[524,4],"end":[526,5]},"visibility":"public","docs":"Checks whether this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:60":{"id":"0:78:60","crate_id":0,"name":"default","span":{"filename":"src/mutex.rs","begin":[432,4],"end":[434,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[836,0],"end":[839,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:2152":{"id":"0:215:2152","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[50,4],"end":[50,21]},"visibility":"default","docs":"Initial value.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"b:1:2902-0:255:2403":{"id":"b:1:2902-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[935,0],"end":[943,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:183:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:255:2403":{"id":"b:1:2612-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:645:2182":{"id":"0:645:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1650,4],"end":[1656,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockWriteGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:217:2375":{"id":"b:1:2891-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240:2168":{"id":"0:240:2168","crate_id":0,"name":"unlock","span":{"filename":"src/remutex.rs","begin":[131,4],"end":[138,5]},"visibility":"public","docs":"Unlocks this mutex. The inner mutex may not be unlocked if\nthis mutex was acquired previously in the current thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:217:2375":{"id":"b:1:2615-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:5:2008":{"id":"b:1:2612-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:625:2309":{"id":"0:625:2309","crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[1559,4],"end":[1574,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:799":{"id":"0:799","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2763,0],"end":[2813,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:803:1030","0:806:2309"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:337:2309":{"id":"0:337:2309","crate_id":0,"name":"try_map","span":{"filename":"src/remutex.rs","begin":[665,4],"end":[683,5]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:5147-0:482:232":{"id":"a:1:41602:5147-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:468:2551":{"id":"0:468:2551","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/rwlock.rs","begin":[231,4],"end":[231,39]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:340:2313":{"id":"0:340:2313","crate_id":0,"name":"unlocked","span":{"filename":"src/remutex.rs","begin":[690,4],"end":[700,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:889:2727":{"id":"b:1:2902-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:742":{"id":"0:742","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2237,0],"end":[2243,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:746:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:2958-0:908:2789":{"id":"a:1:32044:2958-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:901:2760":{"id":"b:1:2902-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285:2157":{"id":"0:285:2157","crate_id":0,"name":"lock","span":{"filename":"src/remutex.rs","begin":[319,4],"end":[323,5]},"visibility":"public","docs":"Acquires a reentrant mutex, blocking the current thread until it is able\nto do so.\n\nIf the mutex is held by another thread then this function will block the\nlocal thread until it is available to acquire the mutex. If the mutex is\nalready held by the current thread then this function will increment the\nlock reference count and return immediately. Upon returning,\nthe thread is the only thread with the mutex held. An RAII guard is\nreturned to allow scoped unlock of the lock. When the guard goes out of\nscope, the mutex will be unlocked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:841:186":{"id":"a:1:31987:236-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:543:2726":{"id":"0:543:2726","crate_id":0,"name":"make_upgradable_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[1021,4],"end":[1026,5]},"visibility":"public","docs":"Creates a new `RwLockUpgradableReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds an upgradable read lock.\n\nThis function does not increment the read count of the lock. Calling this function when a\nguard has already been produced is undefined behaviour unless the guard was forgotten\nwith `mem::forget`.`","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2011":{"id":"0:99:2011","crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[509,4],"end":[511,5]},"visibility":"public","docs":"Returns a reference to the original `Mutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463:2537":{"id":"0:463:2537","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/rwlock.rs","begin":[206,4],"end":[206,77]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:3145:2955-0:889:2727":{"id":"a:1:3145:2955-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:785:779":{"id":"0:785:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2720,4],"end":[2722,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2187":{"id":"0:118:2187","crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[639,4],"end":[644,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:522:2677":{"id":"0:522:2677","crate_id":0,"name":"force_unlock_write_fair","span":{"filename":"src/rwlock.rs","begin":[716,4],"end":[718,5]},"visibility":"public","docs":"Forcibly unlocks a write lock using a fair unlock procotol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:35:185":{"id":"b:1:3720-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:255:2403":{"id":"b:1:2615-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:5146-0:5:2008":{"id":"a:1:41603:5146-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:881:234":{"id":"b:1:2897-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:584":{"id":"0:584","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1304,0],"end":[1357,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:588:2182","0:589:2331","0:592:2187"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:318:779":{"id":"0:318:779","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[556,4],"end":[575,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:825":{"id":"0:825","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2853,0],"end":[2861,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:829:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:5146-0:8:2010":{"id":"a:1:41603:5146-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:670:779":{"id":"0:670:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1717,4],"end":[1719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:5146-0:482:232":{"id":"a:1:41603:5146-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:592:2187":{"id":"0:592:2187","crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[1351,4],"end":[1356,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426:2013":{"id":"0:426:2013","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[8,0],"end":[2883,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:434:2475","0:445:2495","0:450:2510","0:452:2515","0:459:2528","0:462:2534","0:465:2544","0:471:2559","0:474:2568","0:477:2575","0:482:232","0:873:233","0:881:234","0:889:2727","0:901:2760","0:908:2789"],"is_stripped":true}}},"0:562:779":{"id":"0:562:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1200,4],"end":[1216,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597:248":{"id":"0:597:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[1360,4],"end":[1360,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:506:2606":{"id":"0:506:2606","crate_id":0,"name":"make_write_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[438,4],"end":[443,5]},"visibility":"public","docs":"Creates a new `RwLockReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds a write lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2894-0:255:2403":{"id":"b:1:2894-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2896:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:515:2643":{"id":"0:515:2643","crate_id":0,"name":"force_unlock_write","span":{"filename":"src/rwlock.rs","begin":[562,4],"end":[564,5]},"visibility":"public","docs":"Forcibly unlocks a write lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:482:232":{"id":"b:1:2887-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:829:650":{"id":"0:829:650","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2855,4],"end":[2860,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461:2532":{"id":"0:461:2532","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[199,4],"end":[199,48]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:450:2510":{"id":"0:450:2510","crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"src/rwlock.rs","begin":[153,0],"end":[161,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:451:2513"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:795":{"id":"0:795","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2758,0],"end":[2761,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:434:2475","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:865:2449":{"id":"b:1:2887-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:714:2581":{"id":"0:714:2581","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[2104,4],"end":[2119,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:2331":{"id":"0:349:2331","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/remutex.rs","begin":[734,4],"end":[744,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:849:2305":{"id":"0:849:2305","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[830,0],"end":[834,1]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:153","0:163","a:1:41603:5146-0:849:2305","a:1:32044:2958-0:849:2305","a:1:41602:5147-0:849:2305","a:1:3145:2955-0:849:2305","b:1:2891-0:849:2305","b:1:2612-0:849:2305","b:1:2887-0:849:2305","b:1:2902-0:849:2305","b:1:2897-0:849:2305","b:1:3720-0:849:2305","b:1:2615-0:849:2305","0:149","0:174","0:189","0:145","0:179","0:184","0:168"]}}},"0:646:2331":{"id":"0:646:2331","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[1665,4],"end":[1675,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:217:2375":{"id":"b:1:2887-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:534:2705":{"id":"0:534:2705","crate_id":0,"name":"try_read_recursive","span":{"filename":"src/rwlock.rs","begin":[893,4],"end":[900,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis method is guaranteed to succeed if another read lock is held at the\ntime of the call. See the documentation for `read_recursive` for details.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[687,0],"end":[719,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:521:2675","0:522:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:746:779":{"id":"0:746:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2240,4],"end":[2242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:5147-0:889:2727":{"id":"a:1:41602:5147-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:413":{"id":"0:413","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1031,0],"end":[1037,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:418:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:437:2478":{"id":"0:437:2478","crate_id":0,"name":"lock_shared","span":{"filename":"src/rwlock.rs","begin":[50,4],"end":[50,26]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[626,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:333:2012","0:334:1030","0:337:2309","0:340:2313"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3720-0:841:186":{"id":"b:1:3720-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:241:2170":{"id":"0:241:2170","crate_id":0,"name":"is_locked","span":{"filename":"src/remutex.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460:2530":{"id":"0:460:2530","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[196,4],"end":[196,36]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[74,0],"end":[74,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:528:2687":{"id":"0:528:2687","crate_id":0,"name":"try_write_for","span":{"filename":"src/rwlock.rs","begin":[761,4],"end":[768,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:598:610":{"id":"0:598:610","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[1362,4],"end":[1364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:901:2760":{"id":"b:1:2612-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:2254":{"id":"0:65:2254","crate_id":0,"name":"data_ptr","span":{"filename":"src/mutex.rs","begin":[298,4],"end":[300,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns\na `MutexGuard` but that guard has been discarded using `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1030":{"id":"0:100:1030","crate_id":0,"name":"map","span":{"filename":"src/mutex.rs","begin":[522,4],"end":[534,5]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469:2553":{"id":"0:469:2553","crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[238,4],"end":[238,29]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:3110:246-0:5:2008":{"id":"a:1:3110:246-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:63:2244":{"id":"0:63:2244","crate_id":0,"name":"force_unlock","span":{"filename":"src/mutex.rs","begin":[268,4],"end":[270,5]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:558:809":{"id":"0:558:809","crate_id":0,"name":"from","span":{"filename":"src/rwlock.rs","begin":[1194,4],"end":[1196,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:881:234":{"id":"b:1:2891-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:901:2760":{"id":"b:1:2615-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:22:2155":{"id":"0:22:2155","crate_id":0,"name":"GuardMarker","span":{"filename":"src/mutex.rs","begin":[45,4],"end":[45,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:167:2182":{"id":"0:167:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[911,4],"end":[917,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501:2213":{"id":"0:501:2213","crate_id":0,"name":"const_new","span":{"filename":"src/rwlock.rs","begin":[403,4],"end":[408,5]},"visibility":"public","docs":"Creates a new new instance of an `RwLock<T>` based on a pre-existing\n`RawRwLock<T>`.\n\nThis allows creating a `RwLock<T>` in a constant context on stable\nRust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_rwlock",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:2375":{"id":"0:217:2375","crate_id":0,"name":"RawReentrantMutex","span":{"filename":"src/remutex.rs","begin":[67,0],"end":[72,1]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.\n\n[`RawMutex`]: trait.RawMutex.html\n[`ReentrantMutex`]: struct.ReentrantMutex.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:230","0:243","0:248","a:1:41603:5146-0:217:2375","a:1:32044:2958-0:217:2375","a:1:41602:5147-0:217:2375","a:1:3145:2955-0:217:2375","b:1:2891-0:217:2375","b:1:2612-0:217:2375","b:1:2887-0:217:2375","b:1:2902-0:217:2375","b:1:2897-0:217:2375","b:1:3720-0:217:2375","b:1:2615-0:217:2375","0:224","0:227"]}}},"b:1:2897-0:841:186":{"id":"b:1:2897-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[505,0],"end":[505,96]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:2955-0:856:2410":{"id":"a:1:3145:2955-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41603:5146-0:856:2410":{"id":"a:1:41603:5146-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:470:2556":{"id":"0:470:2556","crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[246,4],"end":[246,41]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1192,0],"end":[1197,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:558:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1359,0],"end":[1365,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:597:248","0:598:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[77,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:233:2152","0:236:2157","0:238:2160","0:240:2168","0:241:2170","0:242:2391"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:841:186":{"id":"b:1:2615-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:2955-0:908:2789":{"id":"a:1:3145:2955-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:35:185":{"id":"b:1:2897-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:144:779":{"id":"0:144:779","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2197":{"id":"0:74:2197","crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[387,4],"end":[394,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2191","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[840,0],"end":[843,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:20:2149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[672,0],"end":[676,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:139:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:217:2375":{"id":"b:1:2612-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:195:2012":{"id":"0:195:2012","crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[8,0],"end":[1051,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"atomic_usize\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:214:2362","0:217:2375","0:255:2403","0:856:2410","0:865:2449"],"is_stripped":true}}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[647,0],"end":[653,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:123:248","0:124:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[621,0],"end":[624,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:454:161":{"id":"0:454:161","crate_id":0,"name":"Instant","span":{"filename":"src/rwlock.rs","begin":[172,4],"end":[172,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:588:2182":{"id":"0:588:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1318,4],"end":[1324,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:609":{"id":"0:609","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1383,0],"end":[1389,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:613:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:472:2561":{"id":"0:472:2561","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/rwlock.rs","begin":[257,4],"end":[257,44]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:762:2309":{"id":"0:762:2309","crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[2658,4],"end":[2673,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:908:2789":{"id":"b:1:2887-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:5147-0:5:2008":{"id":"a:1:41602:5147-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5:2008":{"id":"0:5:2008","crate_id":0,"name":"GuardSend","span":{"filename":"src/lib.rs","begin":[100,0],"end":[100,25]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:41603:5146-0:5:2008","a:1:3110:246-0:5:2008","a:1:32044:2958-0:5:2008","a:1:31987:236-0:5:2008","a:1:41602:5147-0:5:2008","a:1:3145:2955-0:5:2008","b:1:2891-0:5:2008","b:1:2612-0:5:2008","b:1:2887-0:5:2008","b:1:2902-0:5:2008","b:1:2897-0:5:2008","b:1:3720-0:5:2008","b:1:2615-0:5:2008"]}}},"0:172:248":{"id":"0:172:248","crate_id":0,"name":"Target","span":{"filename":"src/mutex.rs","begin":[921,4],"end":[921,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:41603:5146-0:873:233":{"id":"a:1:41603:5146-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:841:186":{"id":"b:1:2891-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1518,0],"end":[1518,89]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434:2475":{"id":"0:434:2475","crate_id":0,"name":"RawRwLock","span":{"filename":"src/rwlock.rs","begin":[38,0],"end":[99,1]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:435:2152","0:436:2155","0:437:2478","0:438:2480","0:439:2483","0:440:2485","0:441:2487","0:442:2490","0:443:2170","0:444:2493"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:523":{"id":"0:523","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[721,0],"end":[857,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:452:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:526:2683","0:527:2684","0:528:2687","0:529:2688"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:814":{"id":"0:814","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2838,0],"end":[2844,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:818:248","0:819:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:21:2152":{"id":"0:21:2152","crate_id":0,"name":"INIT","span":{"filename":"src/mutex.rs","begin":[41,4],"end":[41,21]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"0:841:186":{"id":"0:841:186","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[500,0],"end":[503,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:95","0:110","a:1:41603:5146-0:841:186","a:1:32044:2958-0:841:186","a:1:31987:236-0:841:186","a:1:41602:5147-0:841:186","a:1:3145:2955-0:841:186","b:1:2891-0:841:186","b:1:2612-0:841:186","b:1:2887-0:841:186","b:1:2902-0:841:186","b:1:2897-0:841:186","b:1:3720-0:841:186","b:1:2615-0:841:186","0:91","0:130","0:135","0:140","0:125","0:119"]}}},"b:1:2897-0:873:233":{"id":"b:1:2897-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:655:610":{"id":"0:655:610","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[1694,4],"end":[1696,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[945,0],"end":[949,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:188:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:2958-0:482:232":{"id":"a:1:32044:2958-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2890:3112":{"id":"1:2890:3112","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2864:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279:2213":{"id":"0:279:2213","crate_id":0,"name":"const_new","span":{"filename":"src/remutex.rs","begin":[278,4],"end":[288,5]},"visibility":"public","docs":"Creates a new reentrant mutex based on a pre-existing raw mutex and a\nhelper to get the thread ID.\n\nThis allows creating a reentrant mutex in a constant context on stable\nRust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_mutex",{"generic":"R"}],["get_thread_id",{"generic":"G"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:716":{"id":"0:716","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2145,0],"end":[2209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:477:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:474:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:720:2835","0:723:2837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:2955-0:841:186":{"id":"a:1:3145:2955-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:157:1030":{"id":"0:157:1030","crate_id":0,"name":"map","span":{"filename":"src/mutex.rs","begin":[855,4],"end":[867,5]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:526:2683":{"id":"0:526:2683","crate_id":0,"name":"try_read_for","span":{"filename":"src/rwlock.rs","begin":[729,4],"end":[736,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:5147-0:908:2789":{"id":"a:1:41602:5147-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:839:779":{"id":"0:839:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2874,4],"end":[2876,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:5:2008":{"id":"a:1:31987:236-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:425-0:195:2012":{"id":"0:425-0:195:2012","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"atomic_usize\")]"],"deprecation":null,"inner":{"import":{"source":"crate::remutex","name":"remutex","id":"0:195:2012","glob":true}}},"0:723:2837":{"id":"0:723:2837","crate_id":0,"name":"try_with_upgraded_until","span":{"filename":"src/rwlock.rs","begin":[2191,4],"end":[2208,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_until` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314":{"id":"0:314","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[555,0],"end":[576,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:318:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[662,0],"end":[670,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:134:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:352:2187":{"id":"0:352:2187","crate_id":0,"name":"bump","span":{"filename":"src/remutex.rs","begin":[752,4],"end":[757,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1199,0],"end":[1217,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:562:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2906:1754":{"id":"1:2906:1754","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621:2013":{"id":"0:621:2013","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1522,4],"end":[1524,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2331":{"id":"0:115:2331","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/mutex.rs","begin":[621,4],"end":[631,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked using a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:889:2727":{"id":"b:1:3720-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:841:186":{"id":"b:1:2887-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:774:248":{"id":"0:774:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2700,4],"end":[2700,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:451:2513":{"id":"0:451:2513","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[160,4],"end":[160,31]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:366":{"id":"0:366","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[782,0],"end":[788,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:371:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:641":{"id":"0:641","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1636,0],"end":[1689,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:645:2182","0:646:2331","0:649:2187"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:581:2313":{"id":"0:581:2313","crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1291,4],"end":[1301,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:865:2449":{"id":"b:1:2902-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[233,0],"end":[269,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:273:1152","0:274:2210"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:698:2187":{"id":"0:698:2187","crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[2018,4],"end":[2023,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `upgradable_read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:5146-0:841:186":{"id":"a:1:41603:5146-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1109,0],"end":[1183,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:477:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:549:2745","0:550:2746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2902-0:217:2375":{"id":"b:1:2902-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:2955-0:881:234":{"id":"a:1:3145:2955-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:480:2581":{"id":"0:480:2581","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[307,4],"end":[307,70]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:806:2309":{"id":"0:806:2309","crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[2797,4],"end":[2812,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:2958-0:8:2010":{"id":"a:1:32044:2958-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:856:2410":{"id":"b:1:2897-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:650":{"id":"0:650","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1691,0],"end":[1697,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:654:248","0:655:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:2955-0:865:2449":{"id":"a:1:3145:2955-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[148,0],"end":[148,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:5146-0:217:2375":{"id":"a:1:41603:5146-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:554:60":{"id":"0:554:60","crate_id":0,"name":"default","span":{"filename":"src/rwlock.rs","begin":[1187,4],"end":[1189,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:232":{"id":"0:482:232","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[330,0],"end":[333,1]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:493","0:498","0:502","0:518","0:523","0:530","0:535","0:540","0:546","a:1:41603:5146-0:482:232","a:1:32044:2958-0:482:232","a:1:41602:5147-0:482:232","a:1:3145:2955-0:482:232","b:1:2891-0:482:232","b:1:2894-0:482:232","b:1:2612-0:482:232","b:1:2887-0:482:232","b:1:2902-0:482:232","b:1:2897-0:482:232","b:1:3720-0:482:232","b:1:2615-0:482:232","0:559","0:490","0:487","0:551","0:555"]}}},"0:8:2010":{"id":"0:8:2010","crate_id":0,"name":"GuardNoSend","span":{"filename":"src/lib.rs","begin":[103,0],"end":[103,32]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:41603:5146-0:8:2010","a:1:32044:2958-0:8:2010","a:1:31987:236-0:8:2010","a:1:41602:5147-0:8:2010","a:1:3145:2955-0:8:2010","b:1:2891-0:8:2010","b:1:2612-0:8:2010","b:1:2887-0:8:2010","b:1:2902-0:8:2010","b:1:2897-0:8:2010","b:1:3720-0:8:2010","b:1:2615-0:8:2010","0:11"]}}},"0:248":{"id":"0:248","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[194,0],"end":[206,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:30:2191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:251:2197","0:253:2195"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:462:2534":{"id":"0:462:2534","crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"src/rwlock.rs","begin":[203,0],"end":[211,1]},"visibility":"public","docs":"Additional methods for RwLocks which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:463:2537","0:464:2538"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursive","id":"0:459:2528","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:452:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"b:1:2615-0:881:234":{"id":"b:1:2615-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:865:2449":{"id":"b:1:2897-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:5146-0:881:234":{"id":"a:1:41603:5146-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:715:2582":{"id":"0:715:2582","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[2127,4],"end":[2142,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:656":{"id":"0:656","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1699,0],"end":[1704,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3331:2134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:660:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:308:60":{"id":"0:308:60","crate_id":0,"name":"default","span":{"filename":"src/remutex.rs","begin":[543,4],"end":[545,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2614:2863":{"id":"1:2614:2863","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:841:186":{"id":"b:1:2612-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:533:2702":{"id":"0:533:2702","crate_id":0,"name":"read_recursive","span":{"filename":"src/rwlock.rs","begin":[876,4],"end":[880,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nUnlike `read`, this method is guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2905:136":{"id":"1:2905:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31915:5053","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:41603:5146-0:35:185":{"id":"a:1:41603:5146-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:649:2187":{"id":"0:649:2187","crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[1683,4],"end":[1688,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `write`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1185,0],"end":[1190,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2939:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2939:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:554:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:654:248":{"id":"0:654:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[1692,4],"end":[1692,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:3720-0:881:234":{"id":"b:1:3720-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:482:232":{"id":"b:1:2891-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:574:2013":{"id":"0:574:2013","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1232,4],"end":[1234,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:610":{"id":"0:173:610","crate_id":0,"name":"deref","span":{"filename":"src/mutex.rs","begin":[923,4],"end":[925,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[922,0],"end":[925,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:214:2362":{"id":"0:214:2362","crate_id":0,"name":"GetThreadId","span":{"filename":"src/remutex.rs","begin":[45,0],"end":[55,1]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:215:2152","0:216:2366"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:665:650":{"id":"0:665:650","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[1708,4],"end":[1713,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[224,0],"end":[227,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:751":{"id":"0:751","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2619,0],"end":[2622,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:434:2475","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114:2182":{"id":"0:114:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[606,4],"end":[612,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[365,0],"end":[365,82]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:791":{"id":"0:791","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2754,0],"end":[2757,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2902-0:881:234":{"id":"b:1:2902-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[920,0],"end":[926,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:172:248","0:173:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2902-0:841:186":{"id":"b:1:2902-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:2955-0:35:185":{"id":"a:1:3145:2955-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:865:2449":{"id":"b:1:2615-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:453:130":{"id":"0:453:130","crate_id":0,"name":"Duration","span":{"filename":"src/rwlock.rs","begin":[169,4],"end":[169,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:514:2638":{"id":"0:514:2638","crate_id":0,"name":"force_unlock_read","span":{"filename":"src/rwlock.rs","begin":[546,4],"end":[548,5]},"visibility":"public","docs":"Forcibly unlocks a read lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:529:2688":{"id":"0:529:2688","crate_id":0,"name":"try_write_until","span":{"filename":"src/rwlock.rs","begin":[777,4],"end":[784,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:685:2313":{"id":"0:685:2313","crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1926,4],"end":[1936,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:2958-0:5:2008":{"id":"a:1:32044:2958-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3720-0:5:2008":{"id":"b:1:3720-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:2958-0:881:234":{"id":"a:1:32044:2958-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:253:2195":{"id":"0:253:2195","crate_id":0,"name":"try_lock_for","span":{"filename":"src/remutex.rs","begin":[203,4],"end":[205,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2191","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:690":{"id":"0:690","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1971,0],"end":[2024,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeFair","id":"0:471:2559","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:694:2182","0:695:2331","0:698:2187"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:889:2727":{"id":"b:1:2615-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:54:2213":{"id":"0:54:2213","crate_id":0,"name":"const_new","span":{"filename":"src/mutex.rs","begin":[183,4],"end":[188,5]},"visibility":"public","docs":"Creates a new mutex based on a pre-existing raw mutex.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw_mutex",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458:2521":{"id":"0:458:2521","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/rwlock.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:41603:5146-0:901:2760":{"id":"a:1:41603:5146-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:865:2449":{"id":"0:865:2449","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[916,0],"end":[920,1]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:383","0:394","a:1:41603:5146-0:865:2449","a:1:32044:2958-0:865:2449","a:1:31987:236-0:865:2449","a:1:41602:5147-0:865:2449","a:1:3145:2955-0:865:2449","b:1:2891-0:865:2449","b:1:2612-0:865:2449","b:1:2887-0:865:2449","b:1:2902-0:865:2449","b:1:2897-0:865:2449","b:1:3720-0:865:2449","b:1:2615-0:865:2449","0:407","0:413","0:378","0:419","0:400"]}}},"0:478:2577":{"id":"0:478:2577","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/rwlock.rs","begin":[296,4],"end":[296,71]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:246:2182":{"id":"0:246:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[163,4],"end":[170,5]},"visibility":"public","docs":"Unlocks this mutex using a fair unlock protocol. The inner mutex\nmay not be unlocked if this mutex was acquired previously in the\ncurrent thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:856:2410":{"id":"b:1:2902-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:2157":{"id":"0:59:2157","crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[218,4],"end":[222,5]},"visibility":"public","docs":"Acquires a mutex, blocking the current thread until it is able to do so.\n\nThis function will block the local thread until it is available to acquire\nthe mutex. Upon returning, the thread is the only thread with the mutex\nheld. An RAII guard is returned to allow scoped unlock of the lock. When\nthe guard goes out of scope, the mutex will be unlocked.\n\nAttempts to lock a mutex in the thread which already holds the lock will\nresult in a deadlock.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465:2544":{"id":"0:465:2544","crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"src/rwlock.rs","begin":[219,0],"end":[247,1]},"visibility":"public","docs":"Additional methods for RwLocks which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:466:2546","0:467:2548","0:468:2551","0:469:2553","0:470:2556"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:497:2210":{"id":"0:497:2210","crate_id":0,"name":"into_inner","span":{"filename":"src/rwlock.rs","begin":[391,4],"end":[393,5]},"visibility":"public","docs":"Consumes this `RwLock`, returning the underlying data.","links":{},"attrs":["#[inline]","#[allow(unused_unsafe)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:849:2305":{"id":"b:1:3720-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:865:2449":{"id":"b:1:2891-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:747":{"id":"0:747","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2618,0],"end":[2618,101]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124:610":{"id":"0:124:610","crate_id":0,"name":"deref","span":{"filename":"src/mutex.rs","begin":[650,4],"end":[652,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:248":{"id":"0:123:248","crate_id":0,"name":"Target","span":{"filename":"src/mutex.rs","begin":[648,4],"end":[648,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2887-0:255:2403":{"id":"b:1:2887-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:161":{"id":"0:32:161","crate_id":0,"name":"Instant","span":{"filename":"src/mutex.rs","begin":[125,4],"end":[125,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[347,0],"end":[363,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:69:2267"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:889:2727":{"id":"b:1:2612-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:856:2410":{"id":"b:1:3720-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:704:2823":{"id":"0:704:2823","crate_id":0,"name":"with_upgraded","span":{"filename":"src/rwlock.rs","begin":[2057,4],"end":[2070,5]},"visibility":"public","docs":"First, atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.\n\nThen, calls the provided closure with an exclusive reference to the lock's data.\n\nFinally, atomically downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"Ret"},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2170":{"id":"0:26:2170","crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:737":{"id":"0:737","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2229,0],"end":[2235,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:741:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:2958-0:35:185":{"id":"a:1:32044:2958-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:35:185":{"id":"b:1:2615-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443:2170":{"id":"0:443:2170","crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[77,4],"end":[86,5]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:790:779":{"id":"0:790:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2728,4],"end":[2730,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:820":{"id":"0:820","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2846,0],"end":[2851,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3331:2134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:824:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:412:650":{"id":"0:412:650","crate_id":0,"name":"drop","span":{"filename":"src/remutex.rs","begin":[1023,4],"end":[1028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[191,0],"end":[345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:58:2219","0:59:2157","0:60:2160","0:61:2235","0:62:2170","0:63:2244","0:64:63","0:65:2254"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:516:63":{"id":"0:516:63","crate_id":0,"name":"raw","span":{"filename":"src/rwlock.rs","begin":[576,4],"end":[578,5]},"visibility":"public","docs":"Returns the underlying raw reader-writer lock object.\n\nNote that you will most likely need to import the `RawRwLock` trait from\n`lock_api` to be able to call functions on the raw\nreader-writer lock.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a lock guard.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:865:2449":{"id":"b:1:2612-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:901:2760":{"id":"b:1:3720-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:873:233":{"id":"b:1:2615-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[897,0],"end":[918,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:167:2182"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:818:248":{"id":"0:818:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2839,4],"end":[2839,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:31987:236-0:8:2010":{"id":"a:1:31987:236-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2612-0:8:2010":{"id":"b:1:2612-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:849:2305":{"id":"b:1:2897-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[541,0],"end":[546,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2939:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2939:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:308:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:840-0:426:2013":{"id":"0:840-0:426:2013","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,0],"end":[116,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::rwlock","name":"rwlock","id":"0:426:2013","glob":true}}},"0:399:2182":{"id":"0:399:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[1000,4],"end":[1006,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:889:2727":{"id":"0:889:2727","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[1905,0],"end":[1908,1]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:680","0:690","0:699","0:710","0:716","a:1:41603:5146-0:889:2727","a:1:32044:2958-0:889:2727","a:1:31987:236-0:889:2727","a:1:41602:5147-0:889:2727","a:1:3145:2955-0:889:2727","b:1:2891-0:889:2727","b:1:2612-0:889:2727","b:1:2887-0:889:2727","b:1:2902-0:889:2727","b:1:2897-0:889:2727","b:1:3720-0:889:2727","b:1:2615-0:889:2727","0:732","0:737","0:676","0:726","0:742"]}}},"0:188:779":{"id":"0:188:779","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[946,4],"end":[948,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:2170":{"id":"0:288:2170","crate_id":0,"name":"is_locked","span":{"filename":"src/remutex.rs","begin":[353,4],"end":[355,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:482:232":{"id":"b:1:2902-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:334:1030":{"id":"0:334:1030","crate_id":0,"name":"map","span":{"filename":"src/remutex.rs","begin":[641,4],"end":[653,5]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[548,0],"end":[553,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:313:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:834:779":{"id":"0:834:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2866,4],"end":[2868,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:2620":{"id":"0:508:2620","crate_id":0,"name":"try_read","span":{"filename":"src/rwlock.rs","begin":[472,4],"end":[479,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:901:2760":{"id":"b:1:2897-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:5:2008":{"id":"b:1:2615-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:688:2553":{"id":"0:688:2553","crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[1940,4],"end":[1951,5]},"visibility":"public","docs":"Atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:2012":{"id":"0:333:2012","crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[628,4],"end":[630,5]},"visibility":"public","docs":"Returns a reference to the original `ReentrantMutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:2493":{"id":"0:444:2493","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[89,4],"end":[98,5]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:482:232":{"id":"b:1:3720-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:780:650":{"id":"0:780:650","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2709,4],"end":[2714,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2617:10543":{"id":"1:2617:10543","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:2157":{"id":"0:236:2157","crate_id":0,"name":"lock","span":{"filename":"src/remutex.rs","begin":[110,4],"end":[115,5]},"visibility":"public","docs":"Acquires this mutex, blocking if it's held by another thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:856:2410":{"id":"b:1:2615-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:5:2008":{"id":"b:1:2891-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,0],"end":[105,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2014":{"id":"0:0:2014","crate_id":0,"name":"lock_api","span":{"filename":"src/lib.rs","begin":[8,0],"end":[116,25]},"visibility":"public","docs":"This library provides type-safe and fully-featured `Mutex` and `RwLock`\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for RwLocks, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{},"attrs":["#![no_std]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5:2008","0:8:2010","0:194-0:12:2011","0:425-0:195:2012","0:840-0:426:2013"],"is_stripped":false}}},"0:405:248":{"id":"0:405:248","crate_id":0,"name":"Target","span":{"filename":"src/remutex.rs","begin":[1012,4],"end":[1012,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:41603:5146-0:865:2449":{"id":"a:1:41603:5146-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:856:2410":{"id":"0:856:2410","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[616,0],"end":[619,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:328","0:343","a:1:41603:5146-0:856:2410","a:1:32044:2958-0:856:2410","a:1:31987:236-0:856:2410","a:1:41602:5147-0:856:2410","a:1:3145:2955-0:856:2410","b:1:2891-0:856:2410","b:1:2612-0:856:2410","b:1:2887-0:856:2410","b:1:2902-0:856:2410","b:1:2897-0:856:2410","b:1:3720-0:856:2410","b:1:2615-0:856:2410","0:366","0:353","0:360","0:323","0:372"]}}},"0:710":{"id":"0:710","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2098,0],"end":[2143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeTimed","id":"0:477:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:714:2581","0:715:2582"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:289:2391":{"id":"0:289:2391","crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"src/remutex.rs","begin":[359,4],"end":[361,5]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:765":{"id":"0:765","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2676,0],"end":[2697,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:769:2182"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2901:1756":{"id":"1:2901:1756","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2267":{"id":"0:297:2267","crate_id":0,"name":"force_unlock_fair","span":{"filename":"src/remutex.rs","begin":[468,4],"end":[470,5]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:865:2449":{"id":"a:1:31987:236-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:435:2152":{"id":"0:435:2152","crate_id":0,"name":"INIT","span":{"filename":"src/rwlock.rs","begin":[43,4],"end":[43,21]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":null}}},"0:49:1152":{"id":"0:49:1152","crate_id":0,"name":"new","span":{"filename":"src/mutex.rs","begin":[154,4],"end":[159,5]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511:2235":{"id":"0:511:2235","crate_id":0,"name":"get_mut","span":{"filename":"src/rwlock.rs","begin":[518,4],"end":[520,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `RwLock` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589:2331":{"id":"0:589:2331","crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[1333,4],"end":[1343,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:809":{"id":"0:313:809","crate_id":0,"name":"from","span":{"filename":"src/remutex.rs","begin":[550,4],"end":[552,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:720:2835":{"id":"0:720:2835","crate_id":0,"name":"try_with_upgraded_for","span":{"filename":"src/rwlock.rs","begin":[2160,4],"end":[2177,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_for` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:726":{"id":"0:726","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2211,0],"end":[2217,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3318:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:730:248","0:731:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[147,0],"end":[147,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:496:1152":{"id":"0:496:1152","crate_id":0,"name":"new","span":{"filename":"src/rwlock.rs","begin":[371,4],"end":[376,5]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:2955-0:217:2375":{"id":"a:1:3145:2955-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:360":{"id":"0:360","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[770,0],"end":[780,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:365:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:660:612":{"id":"0:660:612","crate_id":0,"name":"deref_mut","span":{"filename":"src/rwlock.rs","begin":[1701,4],"end":[1703,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:63":{"id":"0:64:63","crate_id":0,"name":"raw","span":{"filename":"src/mutex.rs","begin":[282,4],"end":[284,5]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `MutexGuard`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:2958-0:841:186":{"id":"a:1:32044:2958-0:841:186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3720-0:255:2403":{"id":"b:1:3720-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:694:2182":{"id":"0:694:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1985,4],"end":[1991,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockUpgradableReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:730:248":{"id":"0:730:248","crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2212,4],"end":[2212,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:613:779":{"id":"0:613:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1386,4],"end":[1388,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:8:2010":{"id":"b:1:2887-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2896:809":{"id":"1:2896:809","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:759:1030":{"id":"0:759:1030","crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[2634,4],"end":[2646,5]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:908:2789":{"id":"b:1:2891-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[364,0],"end":[364,75]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:303:2197":{"id":"0:303:2197","crate_id":0,"name":"try_lock_until","span":{"filename":"src/remutex.rs","begin":[495,4],"end":[502,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2191","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:2958-0:255:2403":{"id":"a:1:32044:2958-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[271,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:279:2213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:856:2410":{"id":"b:1:2612-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:545:2734":{"id":"0:545:2734","crate_id":0,"name":"try_upgradable_read","span":{"filename":"src/rwlock.rs","begin":[1052,4],"end":[1059,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2191":{"id":"0:30:2191","crate_id":0,"name":"RawMutexTimed","span":{"filename":"src/mutex.rs","begin":[120,0],"end":[132,1]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:31:130","0:32:161","0:33:2195","0:34:2197"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"a:1:31987:236-0:889:2727":{"id":"a:1:31987:236-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:755":{"id":"0:755","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2624,0],"end":[2674,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:759:1030","0:762:2309"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:242:2391":{"id":"0:242:2391","crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"src/remutex.rs","begin":[148,4],"end":[151,5]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:908:2789":{"id":"0:908:2789","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[2748,0],"end":[2752,1]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:799","0:809","a:1:41603:5146-0:908:2789","a:1:32044:2958-0:908:2789","a:1:41602:5147-0:908:2789","a:1:3145:2955-0:908:2789","b:1:2891-0:908:2789","b:1:2612-0:908:2789","b:1:2887-0:908:2789","b:1:2902-0:908:2789","b:1:2897-0:908:2789","b:1:3720-0:908:2789","b:1:2615-0:908:2789","0:791","0:835","0:830","0:795","0:825","0:820","0:814"]}}},"0:62:2170":{"id":"0:62:2170","crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[252,4],"end":[254,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:2160":{"id":"0:286:2160","crate_id":0,"name":"try_lock","span":{"filename":"src/remutex.rs","begin":[333,4],"end":[340,5]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:2955-0:873:233":{"id":"a:1:3145:2955-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:889:2727":{"id":"b:1:2891-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12:2011":{"id":"0:12:2011","crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[8,0],"end":[960,97]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:20:2149","0:27:2177","0:30:2191","0:35:185","0:841:186","0:849:2305"],"is_stripped":true}}},"0:622:1030":{"id":"0:622:1030","crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[1535,4],"end":[1547,5]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:2958-0:856:2410":{"id":"a:1:32044:2958-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:464:2538":{"id":"0:464:2538","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/rwlock.rs","begin":[210,4],"end":[210,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:302:2195":{"id":"0:302:2195","crate_id":0,"name":"try_lock_for","span":{"filename":"src/remutex.rs","begin":[480,4],"end":[487,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2191","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[790,0],"end":[796,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:377:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:769:2182":{"id":"0:769:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[2690,4],"end":[2696,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:466:2546":{"id":"0:466:2546","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[221,4],"end":[221,30]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2902-0:5:2008":{"id":"b:1:2902-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:471:2559":{"id":"0:471:2559","crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"src/rwlock.rs","begin":[251,0],"end":[272,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:472:2561","0:473:2565"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"a:1:3145:2955-0:482:232":{"id":"a:1:3145:2955-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:809":{"id":"0:809","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2815,0],"end":[2836,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockFair","id":"0:445:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:813:2182"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377:779":{"id":"0:377:779","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[793,4],"end":[795,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:650":{"id":"0:134:650","crate_id":0,"name":"drop","span":{"filename":"src/mutex.rs","begin":[664,4],"end":[669,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:217:2375":{"id":"b:1:2897-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58:2219":{"id":"0:58:2219","crate_id":0,"name":"make_guard_unchecked","span":{"filename":"src/mutex.rs","begin":[201,4],"end":[206,5]},"visibility":"public","docs":"Creates a new `MutexGuard` without checking if the mutex is locked.\n\n# Safety\n\nThis method must only be called if the thread logically holds the lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:2493":{"id":"0:513:2493","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[530,4],"end":[532,5]},"visibility":"public","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:1152":{"id":"0:273:1152","crate_id":0,"name":"new","span":{"filename":"src/remutex.rs","begin":[237,4],"end":[247,5]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:2958-0:865:2449":{"id":"a:1:32044:2958-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:505:2604":{"id":"0:505:2604","crate_id":0,"name":"make_read_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[422,4],"end":[427,5]},"visibility":"public","docs":"Creates a new `RwLockReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds a read lock.\n\nThis function does not increment the read count of the lock. Calling this function when a\nguard has already been produced is undefined behaviour unless the guard was forgotten\nwith `mem::forget`.`","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:510:2631":{"id":"0:510:2631","crate_id":0,"name":"try_write","span":{"filename":"src/rwlock.rs","begin":[504,4],"end":[511,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with exclusive write access.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the lock when\nit is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[396,0],"end":[409,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:501:2213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31987:236-0:881:234":{"id":"a:1:31987:236-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41602:5147-0:849:2305":{"id":"a:1:41602:5147-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:32044:2958-0:889:2727":{"id":"a:1:32044:2958-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41602:5147-0:901:2760":{"id":"a:1:41602:5147-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:908:2789":{"id":"b:1:2615-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:5:2008":{"id":"b:1:2887-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290:2244":{"id":"0:290:2244","crate_id":0,"name":"force_unlock","span":{"filename":"src/remutex.rs","begin":[375,4],"end":[377,5]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:255:2403":{"id":"b:1:2897-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[291,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:284:2219","0:285:2157","0:286:2160","0:287:2235","0:288:2170","0:289:2391","0:290:2244","0:291:63","0:292:2254"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[444,0],"end":[462,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:86:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:255:2403":{"id":"0:255:2403","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[219,0],"end":[222,1]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](struct.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:269","0:275","0:280","0:293","0:298","a:1:41603:5146-0:255:2403","a:1:32044:2958-0:255:2403","a:1:41602:5147-0:255:2403","a:1:3145:2955-0:255:2403","b:1:2891-0:255:2403","b:1:2894-0:255:2403","b:1:2612-0:255:2403","b:1:2887-0:255:2403","b:1:2902-0:255:2403","b:1:2897-0:255:2403","b:1:3720-0:255:2403","b:1:2615-0:255:2403","0:304","0:309","0:265","0:261","0:314"]}}},"a:1:41602:5147-0:865:2449":{"id":"a:1:41602:5147-0:865:2449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:567":{"id":"0:567","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1228,0],"end":[1228,88]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41602:5147-0:873:233":{"id":"a:1:41602:5147-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:707:2829":{"id":"0:707:2829","crate_id":0,"name":"try_with_upgraded","span":{"filename":"src/rwlock.rs","begin":[2082,4],"end":[2095,5]},"visibility":"public","docs":"First, tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then `None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:248":{"id":"0:358:248","crate_id":0,"name":"Target","span":{"filename":"src/remutex.rs","begin":[763,4],"end":[763,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:689:2556":{"id":"0:689:2556","crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[1956,4],"end":[1968,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then the current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:2955-0:8:2010":{"id":"a:1:3145:2955-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:803:1030":{"id":"0:803:1030","crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[2773,4],"end":[2785,5]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:736:650":{"id":"0:736:650","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2221,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:813:2182":{"id":"0:813:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[2829,4],"end":[2835,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockWriteGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[437,0],"end":[442,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:82:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41602:5147-0:35:185":{"id":"a:1:41602:5147-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:908:2789":{"id":"b:1:2902-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:2160":{"id":"0:24:2160","crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[52,4],"end":[52,31]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2891-0:35:185":{"id":"b:1:2891-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1615,0],"end":[1634,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:474:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:640:2572"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:741:779":{"id":"0:741:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2232,4],"end":[2234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:856:2410":{"id":"a:1:31987:236-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:3722:1769":{"id":"1:3722:1769","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39286:4264","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:640:2572":{"id":"0:640:2572","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[1622,4],"end":[1633,5]},"visibility":"public","docs":"Atomically downgrades a write lock into an upgradable read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:779":{"id":"0:371:779","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[785,4],"end":[787,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:732":{"id":"0:732","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2219,0],"end":[2227,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:736:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:388:1030":{"id":"0:388:1030","crate_id":0,"name":"map","span":{"filename":"src/remutex.rs","begin":[939,4],"end":[951,5]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[150,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:49:1152","0:50:2210"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[365,0],"end":[428,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:30:2191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:73:2195","0:74:2197"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:216:2366":{"id":"0:216:2366","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[54,4],"end":[54,48]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"1:23239:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:34:2197":{"id":"0:34:2197","crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[131,4],"end":[131,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:30:2191","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2891-0:856:2410":{"id":"b:1:2891-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:436:2155":{"id":"0:436:2155","crate_id":0,"name":"GuardMarker","span":{"filename":"src/rwlock.rs","begin":[47,4],"end":[47,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:20:2149":{"id":"0:20:2149","crate_id":0,"name":"RawMutex","span":{"filename":"src/mutex.rs","begin":[36,0],"end":[79,1]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:21:2152","0:22:2155","0:23:2157","0:24:2160","0:25:2168","0:26:2170"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:391:2309":{"id":"0:391:2309","crate_id":0,"name":"try_map","span":{"filename":"src/remutex.rs","begin":[963,4],"end":[981,5]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2894-0:482:232":{"id":"b:1:2894-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2896:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:193:779":{"id":"0:193:779","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[954,4],"end":[956,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2893:809":{"id":"1:2893:809","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[678,0],"end":[682,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:144:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:635:2513":{"id":"0:635:2513","crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[1601,4],"end":[1612,5]},"visibility":"public","docs":"Atomically downgrades a write lock into a read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:5146-0:849:2305":{"id":"a:1:41603:5146-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:439:2483":{"id":"0:439:2483","crate_id":0,"name":"unlock_shared","span":{"filename":"src/rwlock.rs","begin":[60,4],"end":[60,35]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:73:2195":{"id":"0:73:2195","crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[372,4],"end":[379,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2191","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:699":{"id":"0:699","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2026,0],"end":[2096,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgradeDowngrade","id":"0:474:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:703:2513","0:704:2823","0:707:2829"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:849:2305":{"id":"b:1:2887-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1010,0],"end":[1107,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:543:2726","0:544:2732","0:545:2734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[473,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexTimed","id":"0:30:2191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:302:2195","0:303:2197"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:2195":{"id":"0:33:2195","crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[128,4],"end":[128,60]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:30:2191","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:27:2177":{"id":"0:27:2177","crate_id":0,"name":"RawMutexFair","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[114,1]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:28:2182","0:29:2187"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[430,0],"end":[435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2939:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2939:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:78:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[154,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["0:246:2182","0:247:2187"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41602:5147-0:255:2403":{"id":"a:1:41602:5147-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:901:2760":{"id":"b:1:2887-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:775:610":{"id":"0:775:610","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2702,4],"end":[2704,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424:779":{"id":"0:424:779","crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[1042,4],"end":[1044,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:8:2010":{"id":"b:1:3720-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:274:2210":{"id":"0:274:2210","crate_id":0,"name":"into_inner","span":{"filename":"src/remutex.rs","begin":[266,4],"end":[268,5]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544:2732":{"id":"0:544:2732","crate_id":0,"name":"upgradable_read","span":{"filename":"src/rwlock.rs","begin":[1038,4],"end":[1042,5]},"visibility":"public","docs":"Locks this `RwLock` with upgradable read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers or other\nupgradable reads which hold the lock. There may be other readers currently\ninside the lock when this method returns.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:5:2008":{"id":"b:1:2897-0:5:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardSend","id":"0:5:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:2318":{"id":"0:109:2318","crate_id":0,"name":"leak","span":{"filename":"src/mutex.rs","begin":[585,4],"end":[589,5]},"visibility":"public","docs":"Leaks the mutex guard and returns a mutable reference to the data\nprotected by the mutex.\n\nThis will leave the `Mutex` in a locked state.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440:2485":{"id":"0:440:2485","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[63,4],"end":[63,29]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:446:2497":{"id":"0:446:2497","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/rwlock.rs","begin":[113,4],"end":[113,40]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:628:2313":{"id":"0:628:2313","crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1581,4],"end":[1591,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:873:233":{"id":"b:1:2612-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:493":{"id":"0:493","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[367,0],"end":[394,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:496:1152","0:497:2210"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:776":{"id":"0:776","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2707,0],"end":[2715,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:780:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:538:2716":{"id":"0:538:2716","crate_id":0,"name":"try_read_recursive_for","span":{"filename":"src/rwlock.rs","begin":[942,4],"end":[952,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.\n\nThis method is guaranteed to succeed without blocking if another read\nlock is held at the time of the call. See the documentation for\n`read_recursive` for details.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:130":{"id":"0:31:130","crate_id":0,"name":"Duration","span":{"filename":"src/mutex.rs","begin":[122,4],"end":[122,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:35:185":{"id":"0:35:185","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[142,0],"end":[145,1]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:46","0:51","0:55","0:66","0:70","a:1:41603:5146-0:35:185","a:1:32044:2958-0:35:185","a:1:41602:5147-0:35:185","a:1:3145:2955-0:35:185","b:1:2891-0:35:185","b:1:2894-0:35:185","b:1:2612-0:35:185","b:1:2887-0:35:185","b:1:2902-0:35:185","b:1:2897-0:35:185","b:1:3720-0:35:185","b:1:2615-0:35:185","0:83","0:75","0:40","0:43","0:79"]}}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[507,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:99:2011","0:100:1030","0:103:2309","0:106:2313","0:109:2318"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:476:2572":{"id":"0:476:2572","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[289,4],"end":[289,45]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[859,0],"end":[928,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursive","id":"0:459:2528","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:533:2702","0:534:2705"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:608:779":{"id":"0:608:779","crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1378,4],"end":[1380,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473:2565":{"id":"0:473:2565","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/rwlock.rs","begin":[268,4],"end":[271,5]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:873:233":{"id":"0:873:233","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[1223,0],"end":[1226,1]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:570","0:584","a:1:41603:5146-0:873:233","a:1:32044:2958-0:873:233","a:1:31987:236-0:873:233","a:1:41602:5147-0:873:233","a:1:3145:2955-0:873:233","b:1:2891-0:873:233","b:1:2612-0:873:233","b:1:2887-0:873:233","b:1:2902-0:873:233","b:1:2897-0:873:233","b:1:3720-0:873:233","b:1:2615-0:873:233","0:609","0:593","0:567","0:599","0:604"]}}},"0:103:2309":{"id":"0:103:2309","crate_id":0,"name":"try_map","span":{"filename":"src/mutex.rs","begin":[546,4],"end":[561,5]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:610":{"id":"0:359:610","crate_id":0,"name":"deref","span":{"filename":"src/remutex.rs","begin":[765,4],"end":[767,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:650":{"id":"0:183:650","crate_id":0,"name":"drop","span":{"filename":"src/mutex.rs","begin":[937,4],"end":[942,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:2197":{"id":"0:251:2197","crate_id":0,"name":"try_lock_until","span":{"filename":"src/remutex.rs","begin":[197,4],"end":[199,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:30:2191","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:2309":{"id":"0:160:2309","crate_id":0,"name":"try_map","span":{"filename":"src/mutex.rs","begin":[879,4],"end":[894,5]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:452:2515":{"id":"0:452:2515","crate_id":0,"name":"RawRwLockTimed","span":{"filename":"src/rwlock.rs","begin":[167,0],"end":[185,1]},"visibility":"public","docs":"Additional methods for RwLocks which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:453:130","0:454:161","0:455:2517","0:456:2518","0:457:2520","0:458:2521"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"a:1:41602:5147-0:856:2410":{"id":"a:1:41602:5147-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:8:2010":{"id":"b:1:2902-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:217:2375":{"id":"b:1:3720-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:873:233":{"id":"b:1:2887-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:779":{"id":"0:86:779","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[445,4],"end":[461,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:809":{"id":"0:82:809","crate_id":0,"name":"from","span":{"filename":"src/mutex.rs","begin":[439,4],"end":[441,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:578:2309":{"id":"0:578:2309","crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[1269,4],"end":[1284,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. Returns the original guard if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3352:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[951,0],"end":[957,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:193:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31987:236-0:873:233":{"id":"a:1:31987:236-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:28:2182":{"id":"0:28:2182","crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[96,4],"end":[96,33]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`].\n\n[`unlock`]: trait.RawMutex.html#tymethod.unlock","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:292:2254":{"id":"0:292:2254","crate_id":0,"name":"data_ptr","span":{"filename":"src/remutex.rs","begin":[406,4],"end":[408,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example\nwhen dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has been discarded using\n`mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:442:2490":{"id":"0:442:2490","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/rwlock.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:32044:2958-0:873:233":{"id":"a:1:32044:2958-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[927,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:388:1030","0:391:2309"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:680":{"id":"0:680","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1915,0],"end":[1969,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:684:2013","0:685:2313","0:688:2553","0:689:2556"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[703,0],"end":[758,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:348:2182","0:349:2331","0:352:2187"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:2958-0:849:2305":{"id":"a:1:32044:2958-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1910,0],"end":[1913,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[930,0],"end":[1008,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockRecursiveTimed","id":"0:462:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:538:2716","0:539:2717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:849:2305":{"id":"b:1:2612-0:849:2305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedMutexGuard","id":"0:849:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:5147-0:8:2010":{"id":"a:1:41602:5147-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:603:650":{"id":"0:603:650","crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[1369,4],"end":[1374,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[178,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:54:2213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2900:136":{"id":"1:2900:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:661":{"id":"0:661","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1706,0],"end":[1714,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:665:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[592,0],"end":[645,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:114:2182","0:115:2331","0:118:2187"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:456:2518":{"id":"0:456:2518","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/rwlock.rs","begin":[178,4],"end":[178,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:394":{"id":"0:394","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[984,0],"end":[1007,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:399:2182"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:233:2152":{"id":"0:233:2152","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[80,4],"end":[85,6]},"visibility":"public","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:467:2548":{"id":"0:467:2548","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[224,4],"end":[224,42]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:23:2157":{"id":"0:23:2157","crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:477:2575":{"id":"0:477:2575","crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"src/rwlock.rs","begin":[294,0],"end":[316,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:478:2577","0:479:2578","0:480:2581","0:481:2582"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockTimed","id":"0:452:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"b:1:2897-0:482:232":{"id":"b:1:2897-0:482:232","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:873:233":{"id":"b:1:2902-0:873:233","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:5147-0:881:234":{"id":"a:1:41602:5147-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:41603:5146-0:255:2403":{"id":"a:1:41603:5146-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:671":{"id":"0:671","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1722,0],"end":[1728,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:675:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:517:2254":{"id":"0:517:2254","crate_id":0,"name":"data_ptr","span":{"filename":"src/rwlock.rs","begin":[593,4],"end":[595,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object\nalive, for example when dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded\nusing `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:881:234":{"id":"b:1:2612-0:881:234","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:666":{"id":"0:666","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1716,0],"end":[1720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockWriteGuard","id":"0:881:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:670:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129:612":{"id":"0:129:612","crate_id":0,"name":"deref_mut","span":{"filename":"src/mutex.rs","begin":[657,4],"end":[659,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:2955-0:901:2760":{"id":"a:1:3145:2955-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:287:2235":{"id":"0:287:2235","crate_id":0,"name":"get_mut","span":{"filename":"src/remutex.rs","begin":[347,4],"end":[349,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `ReentrantMutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2160":{"id":"0:60:2160","crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[232,4],"end":[239,5]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MutexGuard","id":"0:841:186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:781":{"id":"0:781","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2717,0],"end":[2723,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:785:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:901:2760":{"id":"0:901:2760","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[2612,0],"end":[2616,1]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:755","0:765","a:1:41603:5146-0:901:2760","a:1:32044:2958-0:901:2760","a:1:41602:5147-0:901:2760","a:1:3145:2955-0:901:2760","b:1:2891-0:901:2760","b:1:2612-0:901:2760","b:1:2887-0:901:2760","b:1:2902-0:901:2760","b:1:2897-0:901:2760","b:1:3720-0:901:2760","b:1:2615-0:901:2760","0:786","0:781","0:776","0:747","0:751","0:770"]}}},"0:448:2503":{"id":"0:448:2503","crate_id":0,"name":"bump_shared","span":{"filename":"src/rwlock.rs","begin":[131,4],"end":[134,5]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:8:2010":{"id":"b:1:2615-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:10543"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[411,0],"end":[685,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:505:2604","0:506:2606","0:507:2340","0:508:2620","0:509:2627","0:510:2631","0:511:2235","0:512:2170","0:513:2493","0:514:2638","0:515:2643","0:516:63","0:517:2254"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:570":{"id":"0:570","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1230,0],"end":[1302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:574:2013","0:575:1030","0:578:2309","0:581:2313"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:786":{"id":"0:786","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2725,0],"end":[2731,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:790:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:35:185":{"id":"b:1:2887-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:35:185":{"id":"b:1:2612-0:35:185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Mutex","id":"0:35:185","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:881:234":{"id":"0:881:234","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[1513,0],"end":[1516,1]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:617","0:631","0:636","0:641","a:1:41603:5146-0:881:234","a:1:32044:2958-0:881:234","a:1:31987:236-0:881:234","a:1:41602:5147-0:881:234","a:1:3145:2955-0:881:234","b:1:2891-0:881:234","b:1:2612-0:881:234","b:1:2887-0:881:234","b:1:2902-0:881:234","b:1:2897-0:881:234","b:1:3720-0:881:234","b:1:2615-0:881:234","0:656","0:671","0:666","0:650","0:661","0:614"]}}},"a:1:32044:2958-0:901:2760":{"id":"a:1:32044:2958-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:8:2010":{"id":"b:1:2897-0:8:2010","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GuardNoSend","id":"0:8:2010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:291:63":{"id":"0:291:63","crate_id":0,"name":"raw","span":{"filename":"src/remutex.rs","begin":[389,4],"end":[391,5]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `ReentrantMutexGuard`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:599":{"id":"0:599","crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1367,0],"end":[1375,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawRwLock","id":"0:434:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3342:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockReadGuard","id":"0:873:233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:603:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:293":{"id":"0:293","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[455,0],"end":[471,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutexFair","id":"0:27:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:297:2267"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:474:2568":{"id":"0:474:2568","crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"src/rwlock.rs","begin":[276,0],"end":[290,1]},"visibility":"public","docs":"Additional methods for RwLocks which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":false,"items":["0:475:2570","0:476:2572"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"RawRwLockUpgrade","id":"0:465:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RawRwLockDowngrade","id":"0:450:2510","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:139:779":{"id":"0:139:779","crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[673,4],"end":[675,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:731:610":{"id":"0:731:610","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:901:2760":{"id":"b:1:2891-0:901:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockReadGuard","id":"0:901:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:178:612":{"id":"0:178:612","crate_id":0,"name":"deref_mut","span":{"filename":"src/mutex.rs","begin":[930,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:550:2746":{"id":"0:550:2746","crate_id":0,"name":"try_upgradable_read_until","span":{"filename":"src/rwlock.rs","begin":[1136,4],"end":[1146,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:452:2515","args":null}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:5146-0:889:2727":{"id":"a:1:41603:5146-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:5146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:856:2410":{"id":"b:1:2887-0:856:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:194-0:12:2011":{"id":"0:194-0:12:2011","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,0],"end":[108,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::mutex","name":"mutex","id":"0:12:2011","glob":true}}},"a:1:3145:2955-0:255:2403":{"id":"a:1:3145:2955-0:255:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1039,0],"end":[1045,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedReentrantMutexGuard","id":"0:865:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:424:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41602:5147-0:217:2375":{"id":"a:1:41602:5147-0:217:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:5147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawReentrantMutex","id":"0:217:2375","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[228,0],"end":[231,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RawMutex","id":"0:20:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"GetThreadId","id":"0:214:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReentrantMutex","id":"0:255:2403","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:684:2013":{"id":"0:684:2013","crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1917,4],"end":[1919,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"RwLock","id":"0:482:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:819:610":{"id":"0:819:610","crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2841,4],"end":[2843,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:475:2570":{"id":"0:475:2570","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/rwlock.rs","begin":[282,4],"end":[282,42]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2612-0:908:2789":{"id":"b:1:2612-0:908:2789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:2206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MappedRwLockWriteGuard","id":"0:908:2789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2614:2863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:284:2219":{"id":"0:284:2219","crate_id":0,"name":"make_guard_unchecked","span":{"filename":"src/remutex.rs","begin":[301,4],"end":[306,5]},"visibility":"public","docs":"Creates a new `ReentrantMutexGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds the lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReentrantMutexGuard","id":"0:856:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:889:2727":{"id":"b:1:2887-0:889:2727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RwLockUpgradableReadGuard","id":"0:889:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2890:3112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"1:3183:2993":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:31989:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:52082:1781":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:39286:4264":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:11863:4197":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:21481:10776":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:32076:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:52069:1637":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:3171:2974":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:22835:3025":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:45558:4435":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:5143:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:46268:4509":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:32836:2975":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:41603:5146":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:39960:4273":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:4344:4150":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:4539:2353":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:45387:4417":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:2861:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:32650:2972":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:44112:5195":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:10252:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:43669:4274":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:4682:2942":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:3152:2957":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:46371:4512":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:22704:3024":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:21680:10913":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:43538:4351":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:8625:3319":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:46655:4534":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:13482:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:1933:650":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:40084:4275":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:40291:4163":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:734:3026":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:42957:11171":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:31971:2943":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:41669:3318":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:52062:405":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:12843:5203":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:41604:3096":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:12832:5205":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:40745:3466":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:43420:4348":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:40009:5092":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:41602:5147":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:13631:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:52081:1799":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:39117:2996":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:43329:4345":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:12595:4207":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:21962:10913":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:3381:2997":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:33306:2980":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:41248:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:2050:11050":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2858:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:44347:4395":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10688:3472":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:3342:2332":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:3331:2134":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2507:5029":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:40261:3654":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:22200:10364":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:13051:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:10898:10913":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:22597:4220":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:10720:3478":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4737:2944":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:41686:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:43966:4381":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:5955:3452":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:45287:4405":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:39149:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:8622:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:21479:10768":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:10476:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:10908:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:41561:3310":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:2939:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:42718:3810":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:2991:4145":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:43205:3582":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:44369:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:42749:3811":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:44104:5200":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:39229:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:12633:4188":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:7709:5121":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:21689:10278":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:40178:3645":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8631:5131":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:42214:3189":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:43997:4212":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:44084:5194":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:8257:3100":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4356:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:43287:4341":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:45771:4446":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:52087:1860":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:46468:4049":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8162:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:44281:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:44298:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:45742:4445":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:46578:4516":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10257:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:46223:4508":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:22753:11153":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:6850:13132":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:9296:3657":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:39939:4270":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:43116:4333":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:40122:4287":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:43167:4334":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:43802:4370":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:22904:4239":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:12823:4180":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:46048:4473":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:12579:4206":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:45471:4422":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:42200:3188":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:40348:4300":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:40323:3655":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:30458:3221":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:4465:2951":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:21572:10280":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:44396:4400":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:30201:3022":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:9915:3658":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:25877:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:43492:4194":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:41544:3318":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:43867:4373":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:43297:3584":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:41508:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:4:1230":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:46421:4514":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8669:11618":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:39299:4029":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:21691:3668":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:41470:4040":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"0:5:2008":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"1:10226:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:52071:1759":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:41621:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:2662:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:52080:861":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:42961:4184":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:40238:4156":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:45981:4470":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:21967:10283":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:23014:4249":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:23003:4248":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:10263:3189":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:22737:4223":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:45486:4423":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:22544:4218":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:52074:716":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:40200:3651":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:43176:4335":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:40730:4175":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2834:4854":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:3161:2976":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:0:2005":{"crate_id":4,"path":["scopeguard"],"kind":"module"},"1:3110:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:21564:10913":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:41944:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:22822:3038":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:22373:10368":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:39121:2998":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:45710:4443":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:0:543":{"crate_id":1,"path":["core"],"kind":"module"},"1:41749:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:41613:3320":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:3475:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4746:2945":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:1857:3452":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:39976:4274":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4766:2130":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:21493:10774":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:42221:3190":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:41448:5143":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:6032:4157":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:42542:3198":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:35838:2987":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:33443:2982":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:40362:4168":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2509:5030":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:22650:3670":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3115:2131":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:21566:10277":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:40332:4166":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:10055:3205":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:5859:3452":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:45515:4425":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:1759:2132":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:42504:3197":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3349:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:21447:10761":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:38458:2992":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:45824:4449":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:23239:2355":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"1:3241:2985":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:43678:4147":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"0:8:2010":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"1:41905:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:40247:4294":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:3578:12994":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:41677:3123":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:45725:4444":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9723:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3318:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:22959:4244":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:45611:4438":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:40191:3648":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:3191:2995":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:40002:4278":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:45454:4421":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:39209:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10516:3665":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:37824:2990":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:22915:4240":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:7941:2933":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3186:2994":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:12556:4205":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11378:4196":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:32074:2959":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:45529:4426":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:52079:880":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:46563:4060":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:43773:4360":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:52083:1787":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:41552:3123":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:40072:4286":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:43819:4371":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:6855:3464":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:30452:3220":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10511:5149":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:44100:5202":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:11222:4190":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:42495:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:45919:4468":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:43216:4337":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:21425:3676":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:22867:10913":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:42757:3812":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:39884:4147":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:52063:1148":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:42207:3187":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:43242:4289":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2606:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:8313:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:46400:4513":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:40521:4171":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:3548:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:41302:5142":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:43931:4374":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:41488:4043":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:10207:225":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:8129:5132":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4618:2935":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:3346:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:22926:4241":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:43346:4346":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:3630:2950":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:7881:3656":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:46488:4047":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:40169:4291":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:7657:12980":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:11295:4192":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10622:3469":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:46616:4518":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:21991:3669":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:4496:2952":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:21435:10761":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:12333:5157":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:52078:874":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:43752:5219":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:33188:2979":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:45351:4411":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:44138:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:43979:4387":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:42450:3197":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:13507:4215":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:21584:3668":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:39890:4265":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:4793:2946":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:44284:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:30827:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:21464:10764":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:2864:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:11336:4193":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:46593:4517":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:30854:3676":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:11896:4198":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:43316:4342":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:40149:4289":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:40763:4178":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:44385:4399":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:45272:4402":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:39073:3006":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:2855:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:22465:10358":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:15:2627":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:22460:10360":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:22282:10366":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:22815:13129":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:2867:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:46479:4058":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:42710:3809":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:2667:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:22937:4242":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:31957:4255":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:40219:3652":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:33962:2986":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:22334:5029":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:39968:4147":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:41866:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:30420:2135":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:43945:5220":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:40755:4176":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:12:2928":{"crate_id":4,"path":["scopeguard","Strategy"],"kind":"trait"},"1:5202:4030":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:45433:4420":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:22320:10367":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:46146:4507":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:43195:4336":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:40714:4174":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2833:10913":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:40041:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"0:0:2014":{"crate_id":0,"path":["lock_api"],"kind":"module"},"1:5164:11037":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:2036:5044":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:43592:4353":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:31988:2206":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:42739:4328":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:6146:3653":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:43687:4273":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:13669:3485":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:22729:4222":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:37769:2989":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:33247:2978":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:33616:2983":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:22418:10913":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:4609:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:10468:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:42479:11147":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:45596:4437":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:22332:13675":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:737:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:10271:3192":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:10705:3473":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:46525:4048":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:4379:5075":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:45319:4409":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:45869:4466":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:3300:3005":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:43255:4339":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:39134:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2698:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:39900:4266":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:22773:11131":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:22846:3039":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:32045:2960":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:52076:886":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:45366:4412":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:22981:4246":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:4398:5076":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:41527:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:40721:4306":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:45302:4406":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:33129:2981":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:43388:4191":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:1940:3217":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:45936:4469":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:52068:333":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:41436:4321":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3593:2949":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:52088:1370":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:8166:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:45419:4419":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:9889:779":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:8204:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:23025:4250":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:46499:4050":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:44092:5199":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:31978:4257":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:45334:4410":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:23477:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:6655:4159":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:5244:953":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:3827:3454":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:9406:4180":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3961:3123":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:9910:11619":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:44173:5230":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:12519:4202":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:44120:3667":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:46010:4471":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:43356:4275":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3352:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:46540:4051":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:22115:10279":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:31964:4256":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:43185:3580":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:22715:11231":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:2609:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:41592:3311":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11364:4195":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:40229:4153":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2246:3576":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11184:4189":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:39911:11054":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46069:4474":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:52077:868":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:41788:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:45898:4467":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:46313:4510":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:41270:4037":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:7487:3131":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:12777:3023":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:41286:4039":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:58:2930":{"crate_id":4,"path":["scopeguard","Always"],"kind":"enum"},"1:39037:3007":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:42942:4332":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:39995:4277":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:40046:4283":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:45678:4441":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:45693:4442":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:43634:4355":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:22306:10913":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:42102:3042":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11350:4194":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4692:2943":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:32044:2958":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44360:4398":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:43653:4357":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9728:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:13649:3483":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:40028:4282":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:40279:4297":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:44088:5197":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:8125:5133":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:43894:4211":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:31987:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:44408:4401":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:45640:4439":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:40497:4305":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:52065:1821":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:2628:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:43370:4185":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:22992:4247":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:39926:4269":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:22432:10359":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:43277:3583":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:32464:2973":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:33070:2977":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10265:3190":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3565:3004":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:22665:3640":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:39171:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:22244:10365":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:37879:2991":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:39983:5091":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:39949:4271":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:45404:4418":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:4332:4149":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:52070:1671":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:44339:4393":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:41414:11229":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:30484:11123":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:3538:3000":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:22788:11135":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:22387:5029":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:2950:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:22948:4243":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:3156:2971":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2704:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3105:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:41827:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:21511:10913":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:45661:4440":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:31953:4254":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"2:0:485":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:43644:4356":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:13761:5255":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:40209:4292":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11102:4185":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:4255:3452":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:41536:3317":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:22681:3671":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:43474:4193":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10259:3187":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:44288:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3559:3002":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:13455:13964":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:44108:5201":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8175:3101":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:41661:3317":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:43574:4352":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:52075:732":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:43956:4377":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:44162:4390":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2059:3572":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:3145:2955":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:31915:5053":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:45500:4424":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4613:2934":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:46459:4046":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:22113:10913":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:42702:3807":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:22003:10766":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:40372:4302":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:42467:11151":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12838:5204":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:2125:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:43268:4340":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:40057:5116":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:39472:5054":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:52085:1775":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:41983:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:40112:3457":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:45792:4447":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:11145:4188":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:44096:5198":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:40736:4307":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:45579:4436":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:44306:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:46342:4511":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:39279:3001":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:40270:4158":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:6844:4165":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:42063:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:10269:3191":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:46514:4059":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:12891:5213":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:40313:4298":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:46031:4472":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:41330:3806":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:39249:2999":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:30473:3197":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:43438:4349":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:11077:3318":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:43624:4354":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:52067:1268":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:3103:2948":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:10267:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:42440:11162":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:45809:4448":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10261:3188":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:41710:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:43788:4367":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:42024:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:52089:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:40300:4164":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:52084:1793":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:43340:4201":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:39189:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:11053:3317":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:40507:4170":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:43662:4208":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:21462:10772":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10208:3186":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:11257:4191":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7593:5136":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:37714:2988":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:44116:5196":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:21513:10281":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:2871:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2493:651":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:43520:4350":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:22970:4245":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:46442:4515":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:7592:5135":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:40707:4173":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:17:2929":{"crate_id":4,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"1:3718:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:52064:458":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:52086:942":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:40142:4288":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:33789:2984":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3553:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"3:0:2927":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:12349:4199":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:42727:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:42521:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}