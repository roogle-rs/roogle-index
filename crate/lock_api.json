{"root":650,"crate_version":"0.4.12","includes_private":false,"index":{"0":{"id":0,"crate_id":0,"name":"INIT","span":{"filename":"src/mutex.rs","begin":[41,4],"end":[41,21]},"visibility":"default","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"value":null}}},"302":{"id":302,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"604":{"id":604,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2761,0],"end":[2764,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":327,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"25":{"id":25,"crate_id":0,"name":"make_guard_unchecked","span":{"filename":"src/mutex.rs","begin":[205,4],"end":[210,5]},"visibility":"public","docs":"Creates a new `MutexGuard` without checking if the mutex is locked.\n\n# Safety\n\nThis method must only be called if the thread logically holds the lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"327":{"id":327,"crate_id":0,"name":"RawRwLock","span":{"filename":"src/rwlock.rs","begin":[38,0],"end":[99,1]},"visibility":"public","docs":"Basic operations for a reader-writer lock.\n\nTypes implementing this trait can be used by `RwLock` to form a safe and\nfully-functioning `RwLock` type.\n\n# Safety\n\nImplementations of this trait must ensure that the `RwLock` is actually\nexclusive: an exclusive lock can't be acquired while an exclusive or shared\nlock exists, and a shared lock can't be acquire while an exclusive lock\nexists.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[317,318,319,320,321,322,323,324,325,326],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"629":{"id":629,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"50":{"id":50,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"352":{"id":352,"crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[246,4],"end":[246,41]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock without\nblocking.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"75":{"id":75,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"377":{"id":377,"crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[1516,0],"end":[1519,1]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[474,476,478,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,499,501,503,505,507]}}},"100":{"id":100,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[511,0],"end":[594,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[93,94,97,98,99],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"402":{"id":402,"crate_id":0,"name":"try_read_recursive_until","span":{"filename":"src/rwlock.rs","begin":[970,4],"end":[980,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"125":{"id":125,"crate_id":0,"name":"deref_mut","span":{"filename":"src/mutex.rs","begin":[661,4],"end":[663,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"427":{"id":427,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1194,0],"end":[1199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Default","id":83,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Default","id":83,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[426],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"150":{"id":150,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"452":{"id":452,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"477":{"id":477,"crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[1625,4],"end":[1636,5]},"visibility":"public","docs":"Atomically downgrades a write lock into an upgradable read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"200":{"id":200,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"502":{"id":502,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[1711,4],"end":[1716,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"225":{"id":225,"crate_id":0,"name":"force_unlock_fair","span":{"filename":"src/remutex.rs","begin":[474,4],"end":[476,5]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"527":{"id":527,"crate_id":0,"name":"try_with_upgraded_until","span":{"filename":"src/rwlock.rs","begin":[2194,4],"end":[2211,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_until` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"275":{"id":275,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[627,0],"end":[630,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"577":{"id":577,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2712,4],"end":[2717,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"300":{"id":300,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"602":{"id":602,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"23":{"id":23,"crate_id":0,"name":"const_new","span":{"filename":"src/mutex.rs","begin":[190,4],"end":[192,5]},"visibility":"public","docs":"Creates a new mutex based on a pre-existing raw mutex.\n\nThis allows creating a mutex in a constant context on stable Rust.\n\nThis method is a legacy alias for [`from_raw`](Self::from_raw).","links":{"Self::from_raw":22},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_mutex",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"325":{"id":325,"crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[77,4],"end":[86,5]},"visibility":"default","docs":"Checks if this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"627":{"id":627,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"350":{"id":350,"crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/rwlock.rs","begin":[231,4],"end":[231,39]},"visibility":"default","docs":"Releases an upgradable lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"73":{"id":73,"crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"TypeId","id":74,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"375":{"id":375,"crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[1226,0],"end":[1229,1]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[439,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,460,462,464,466]}}},"98":{"id":98,"crate_id":0,"name":"unlocked","span":{"filename":"src/mutex.rs","begin":[572,4],"end":[582,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"400":{"id":400,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[868,0],"end":[937,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockRecursive","id":344,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[398,399],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"123":{"id":123,"crate_id":0,"name":"deref","span":{"filename":"src/mutex.rs","begin":[654,4],"end":[656,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"425":{"id":425,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[365,0],"end":[365,82]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"148":{"id":148,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"450":{"id":450,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"173":{"id":173,"crate_id":0,"name":"GetThreadId","span":{"filename":"src/remutex.rs","begin":[45,0],"end":[55,1]},"visibility":"public","docs":"Helper trait which returns a non-zero thread ID.\n\nThe simplest way to implement this trait is to return the address of a\nthread-local variable.\n\n# Safety\n\nImplementations of this trait must ensure that no two active threads share\nthe same thread ID. However the ID of a thread that has exited can be\nre-used since that thread is no longer active.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[170,171],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"475":{"id":475,"crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[1604,4],"end":[1615,5]},"visibility":"public","docs":"Atomically downgrades a write lock into a read lock without allowing any\nwriters to take exclusive access of the lock in the meantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"198":{"id":198,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"500":{"id":500,"crate_id":0,"name":"deref_mut","span":{"filename":"src/rwlock.rs","begin":[1704,4],"end":[1706,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"223":{"id":223,"crate_id":0,"name":"data_ptr","span":{"filename":"src/remutex.rs","begin":[412,4],"end":[414,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example\nwhen dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has been discarded using\n`mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"525":{"id":525,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2101,0],"end":[2146,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeTimed","id":364,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[523,524],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"248":{"id":248,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[562,4],"end":[581,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"550":{"id":550,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2243,4],"end":[2245,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"273":{"id":273,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"575":{"id":575,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2705,4],"end":[2707,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"298":{"id":298,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"600":{"id":600,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"21":{"id":21,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[146,0],"end":[172,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[19,20],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"323":{"id":323,"crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[66,4],"end":[66,41]},"visibility":"default","docs":"Attempts to acquire an exclusive lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"625":{"id":625,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"348":{"id":348,"crate_id":0,"name":"lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[221,4],"end":[221,30]},"visibility":"default","docs":"Acquires an upgradable lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"650":{"id":650,"crate_id":0,"name":"lock_api","span":{"filename":"src/lib.rs","begin":[8,0],"end":[116,25]},"visibility":"public","docs":"This library provides type-safe and fully-featured [`Mutex`] and [`RwLock`]\ntypes which wrap a simple raw mutex or rwlock type. This has several\nbenefits: not only does it eliminate a large portion of the work in\nimplementing custom lock types, it also allows users to write code which is\ngeneric with regards to different lock implementations.\n\nBasic usage of this crate is very straightforward:\n\n1. Create a raw lock type. This should only contain the lock state, not any\n   data protected by the lock.\n2. Implement the `RawMutex` trait for your custom lock type.\n3. Export your mutex as a type alias for `lock_api::Mutex`, and\n   your mutex guard as a type alias for `lock_api::MutexGuard`.\n   See the [example](#example) below for details.\n\nThis process is similar for [`RwLock`]s, except that two guards need to be\nexported instead of one. (Or 3 guards if your type supports upgradable read\nlocks, see [extension traits](#extension-traits) below for details)\n\n# Example\n\n```\nuse lock_api::{RawMutex, Mutex, GuardSend};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\n// 1. Define our raw lock type\npub struct RawSpinlock(AtomicBool);\n\n// 2. Implement RawMutex for this type\nunsafe impl RawMutex for RawSpinlock {\n    const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));\n\n    // A spinlock guard can be sent to another thread and unlocked there\n    type GuardMarker = GuardSend;\n\n    fn lock(&self) {\n        // Note: This isn't the best way of implementing a spinlock, but it\n        // suffices for the sake of this example.\n        while !self.try_lock() {}\n    }\n\n    fn try_lock(&self) -> bool {\n        self.0\n            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)\n            .is_ok()\n    }\n\n    unsafe fn unlock(&self) {\n        self.0.store(false, Ordering::Release);\n    }\n}\n\n// 3. Export the wrappers. This are the types that your users will actually use.\npub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;\npub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;\n```\n\n# Extension traits\n\nIn addition to basic locking & unlocking functionality, you have the option\nof exposing additional functionality in your lock types by implementing\nadditional traits for it. Examples of extension features include:\n\n- Fair unlocking (`RawMutexFair`, `RawRwLockFair`)\n- Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)\n- Downgradable write locks (`RawRwLockDowngradable`)\n- Recursive read locks (`RawRwLockRecursive`)\n- Upgradable read locks (`RawRwLockUpgrade`)\n\nThe `Mutex` and `RwLock` wrappers will automatically expose this additional\nfunctionality if the raw lock type implements these extension traits.\n\n# Cargo features\n\nThis crate supports three cargo features:\n\n- `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.\n- `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this\n  requires the `alloc` crate to be present.","links":{"`RwLock`":367,"`Mutex`":17},"attrs":["#![no_std]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[618,633,647,648,649],"is_stripped":false}}},"71":{"id":71,"crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"373":{"id":373,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[396,0],"end":[418,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[371,372],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"398":{"id":398,"crate_id":0,"name":"read_recursive","span":{"filename":"src/rwlock.rs","begin":[885,4],"end":[889,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nUnlike `read`, this method is guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"121":{"id":121,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[509,0],"end":[509,96]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"423":{"id":423,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"146":{"id":146,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"448":{"id":448,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"171":{"id":171,"crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[54,4],"end":[54,48]},"visibility":"default","docs":"Returns a non-zero thread ID which identifies the current thread of\nexecution.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"NonZeroUsize","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"473":{"id":473,"crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1584,4],"end":[1594,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"196":{"id":196,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"498":{"id":498,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[1697,4],"end":[1699,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"221":{"id":221,"crate_id":0,"name":"force_unlock","span":{"filename":"src/remutex.rs","begin":[381,4],"end":[383,5]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `ReentrantMutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"523":{"id":523,"crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[2107,4],"end":[2122,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"246":{"id":246,"crate_id":0,"name":"from","span":{"filename":"src/remutex.rs","begin":[556,4],"end":[558,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"548":{"id":548,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2235,4],"end":[2237,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"271":{"id":271,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"573":{"id":573,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2622,0],"end":[2625,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":327,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"296":{"id":296,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"598":{"id":598,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"19":{"id":19,"crate_id":0,"name":"new","span":{"filename":"src/mutex.rs","begin":[150,4],"end":[155,5]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"321":{"id":321,"crate_id":0,"name":"unlock_shared","span":{"filename":"src/rwlock.rs","begin":[60,4],"end":[60,35]},"visibility":"default","docs":"Releases a shared lock.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"623":{"id":623,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"346":{"id":346,"crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/rwlock.rs","begin":[210,4],"end":[210,78]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"648":{"id":648,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"atomic_usize\")]"],"deprecation":null,"inner":{"use":{"source":"crate::remutex","name":"remutex","id":316,"is_glob":true}}},"69":{"id":69,"crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"path":"Infallible","id":70,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"371":{"id":371,"crate_id":0,"name":"from_raw","span":{"filename":"src/rwlock.rs","begin":[400,4],"end":[405,5]},"visibility":"public","docs":"Creates a new new instance of an `RwLock<T>` based on a pre-existing\n`RawRwLock<T>`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_rwlock",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"94":{"id":94,"crate_id":0,"name":"map","span":{"filename":"src/mutex.rs","begin":[526,4],"end":[538,5]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"396":{"id":396,"crate_id":0,"name":"try_write_until","span":{"filename":"src/rwlock.rs","begin":[786,4],"end":[793,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"421":{"id":421,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"144":{"id":144,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"446":{"id":446,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"169":{"id":169,"crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[8,0],"end":[964,97]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[8,11,14,17,26,95],"is_stripped":true}}},"471":{"id":471,"crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[2751,0],"end":[2755,1]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[588,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,607,609,611,613,615]}}},"194":{"id":194,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"496":{"id":496,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1521,0],"end":[1521,89]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"219":{"id":219,"crate_id":0,"name":"is_locked","span":{"filename":"src/remutex.rs","begin":[359,4],"end":[361,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"521":{"id":521,"crate_id":0,"name":"try_with_upgraded","span":{"filename":"src/rwlock.rs","begin":[2085,4],"end":[2098,5]},"visibility":"public","docs":"First, tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then `None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"244":{"id":244,"crate_id":0,"name":"default","span":{"filename":"src/remutex.rs","begin":[549,4],"end":[551,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"546":{"id":546,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2224,4],"end":[2229,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"269":{"id":269,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"571":{"id":571,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"294":{"id":294,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"596":{"id":596,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"17":{"id":17,"crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[138,0],"end":[141,1]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can also be statically initialized or created via a `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[21,24,35,37,40,41,43,45,47,50,53,57,60,62,67,72,75,77,79,82,85,89]}}},"319":{"id":319,"crate_id":0,"name":"lock_shared","span":{"filename":"src/rwlock.rs","begin":[50,4],"end":[50,26]},"visibility":"default","docs":"Acquires a shared lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"621":{"id":621,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"344":{"id":344,"crate_id":0,"name":"RawRwLockRecursive","span":{"filename":"src/rwlock.rs","begin":[194,0],"end":[200,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support recursive read locks.\n\nThese are guaranteed to succeed without blocking if\nanother read lock is held at the time of the call. This allows a thread\nto recursively lock a `RwLock`. However using this method can cause\nwriters to starve since readers no longer block if a writer is waiting\nfor the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[342,343],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"646":{"id":646,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,0],"end":[105,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"67":{"id":67,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"369":{"id":369,"crate_id":0,"name":"into_inner","span":{"filename":"src/rwlock.rs","begin":[391,4],"end":[393,5]},"visibility":"public","docs":"Consumes this `RwLock`, returning the underlying data.","links":{},"attrs":["#[inline]","#[allow(unused_unsafe)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"394":{"id":394,"crate_id":0,"name":"try_read_until","span":{"filename":"src/rwlock.rs","begin":[754,4],"end":[761,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"117":{"id":117,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"419":{"id":419,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"142":{"id":142,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[915,4],"end":[921,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"444":{"id":444,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"167":{"id":167,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[958,4],"end":[960,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"469":{"id":469,"crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1525,4],"end":[1527,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"192":{"id":192,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexTimed","id":14,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[190,191],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"494":{"id":494,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"217":{"id":217,"crate_id":0,"name":"try_lock","span":{"filename":"src/remutex.rs","begin":[339,4],"end":[346,5]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"519":{"id":519,"crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[2037,4],"end":[2048,5]},"visibility":"public","docs":"Atomically downgrades an upgradable read lock lock into a shared read lock\nwithout allowing any writers to take exclusive access of the lock in the\nmeantime.\n\nNote that if there are any writers currently waiting to take the lock\nthen other readers may not be able to acquire the lock even if it was\ndowngraded.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"242":{"id":242,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[221,0],"end":[224,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"544":{"id":544,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2217,4],"end":[2219,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"267":{"id":267,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"569":{"id":569,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"292":{"id":292,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[990,0],"end":[1013,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[291],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"594":{"id":594,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"317":{"id":317,"crate_id":0,"name":"INIT","span":{"filename":"src/rwlock.rs","begin":[43,4],"end":[43,21]},"visibility":"default","docs":"Initial value for an unlocked `RwLock`.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"value":null}}},"619":{"id":619,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"40":{"id":40,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[369,0],"end":[432,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexTimed","id":14,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[38,39],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"342":{"id":342,"crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[196,4],"end":[196,36]},"visibility":"default","docs":"Acquires a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"644":{"id":644,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"65":{"id":65,"crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"367":{"id":367,"crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[330,0],"end":[333,1]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[370,373,389,392,397,400,403,408,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,427,429,431]}}},"392":{"id":392,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[696,0],"end":[728,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":332,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[390,391],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"115":{"id":115,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"417":{"id":417,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"140":{"id":140,"crate_id":0,"name":"try_map","span":{"filename":"src/mutex.rs","begin":[883,4],"end":[898,5]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"442":{"id":442,"crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[1354,4],"end":[1359,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"165":{"id":165,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[950,4],"end":[952,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"190":{"id":190,"crate_id":0,"name":"try_lock_until","span":{"filename":"src/remutex.rs","begin":[194,4],"end":[196,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"492":{"id":492,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"215":{"id":215,"crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[622,0],"end":[625,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[257,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,278,280,282,284]}}},"517":{"id":517,"crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[2021,4],"end":[2026,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `upgradable_read`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"240":{"id":240,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"542":{"id":542,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1913,0],"end":[1916,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"265":{"id":265,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"567":{"id":567,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"290":{"id":290,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[933,0],"end":[988,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[288,289],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"592":{"id":592,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"13":{"id":13,"crate_id":0,"name":"Instant","span":{"filename":"src/mutex.rs","begin":[121,4],"end":[121,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"315":{"id":315,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1045,0],"end":[1051,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[314],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"38":{"id":38,"crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[376,4],"end":[383,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"340":{"id":340,"crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/rwlock.rs","begin":[181,4],"end":[181,70]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"642":{"id":642,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"63":{"id":63,"crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"390":{"id":390,"crate_id":0,"name":"force_unlock_read_fair","span":{"filename":"src/rwlock.rs","begin":[709,4],"end":[711,5]},"visibility":"public","docs":"Forcibly unlocks a read lock using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"113":{"id":113,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"415":{"id":415,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"440":{"id":440,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1321,4],"end":[1327,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"163":{"id":163,"crate_id":0,"name":"drop","span":{"filename":"src/mutex.rs","begin":[941,4],"end":[946,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"465":{"id":465,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1389,4],"end":[1391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"188":{"id":188,"crate_id":0,"name":"bump","span":{"filename":"src/remutex.rs","begin":[179,4],"end":[188,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"490":{"id":490,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"213":{"id":213,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[268,0],"end":[295,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[211,212],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"515":{"id":515,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1988,4],"end":[1994,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockUpgradableReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"238":{"id":238,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[61],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"540":{"id":540,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"263":{"id":263,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"565":{"id":565,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"288":{"id":288,"crate_id":0,"name":"map","span":{"filename":"src/remutex.rs","begin":[945,4],"end":[957,5]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"590":{"id":590,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2818,0],"end":[2839,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":332,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[589],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"11":{"id":11,"crate_id":0,"name":"RawMutexFair","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[110,1]},"visibility":"public","docs":"Additional methods for mutexes which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[9,10],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"313":{"id":313,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1037,0],"end":[1043,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[312],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"615":{"id":615,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2874,0],"end":[2880,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[614],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"36":{"id":36,"crate_id":0,"name":"force_unlock_fair","span":{"filename":"src/mutex.rs","begin":[364,4],"end":[366,5]},"visibility":"public","docs":"Forcibly unlocks the mutex using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"338":{"id":338,"crate_id":0,"name":"RawRwLockTimed","span":{"filename":"src/rwlock.rs","begin":[167,0],"end":[185,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[335,336,337,339,340,341],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"640":{"id":640,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"61":{"id":61,"crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"363":{"id":363,"crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[315,4],"end":[315,71]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"86":{"id":86,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[449,4],"end":[465,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"388":{"id":388,"crate_id":0,"name":"data_ptr","span":{"filename":"src/rwlock.rs","begin":[602,4],"end":[604,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object\nalive, for example when dealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns a\n`RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded\nusing `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"111":{"id":111,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"413":{"id":413,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"438":{"id":438,"crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1294,4],"end":[1304,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"161":{"id":161,"crate_id":0,"name":"deref_mut","span":{"filename":"src/mutex.rs","begin":[934,4],"end":[936,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"463":{"id":463,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1381,4],"end":[1383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"186":{"id":186,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[74,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[180,181,182,183,184,185],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"488":{"id":488,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"211":{"id":211,"crate_id":0,"name":"from_raw","span":{"filename":"src/remutex.rs","begin":[272,4],"end":[282,5]},"visibility":"public","docs":"Creates a new reentrant mutex based on a pre-existing raw mutex and a\nhelper to get the thread ID.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_mutex",{"generic":"R"}],["get_thread_id",{"generic":"G"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"513":{"id":513,"crate_id":0,"name":"try_upgrade","span":{"filename":"src/rwlock.rs","begin":[1959,4],"end":[1971,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive write lock.\n\nIf the access could not be granted at this time, then the current guard is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"236":{"id":236,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"538":{"id":538,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"261":{"id":261,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[709,0],"end":[764,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[258,259,260],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"563":{"id":563,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"588":{"id":588,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2766,0],"end":[2816,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[586,587],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"9":{"id":9,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[94,4],"end":[94,33]},"visibility":"default","docs":"Unlocks this mutex using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`](RawMutex::unlock).","links":{"RawMutex::unlock":6},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"311":{"id":311,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1025,0],"end":[1035,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[310],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"613":{"id":613,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2866,0],"end":[2872,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[612],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"34":{"id":34,"crate_id":0,"name":"data_ptr","span":{"filename":"src/mutex.rs","begin":[302,4],"end":[304,5]},"visibility":"public","docs":"Returns a raw pointer to the underlying data.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nYou must ensure that there are no data races when dereferencing the\nreturned pointer, for example if the current thread logically owns\na `MutexGuard` but that guard has been discarded using `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"336":{"id":336,"crate_id":0,"name":"Instant","span":{"filename":"src/rwlock.rs","begin":[172,4],"end":[172,17]},"visibility":"default","docs":"Instant type used for `try_lock_until`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"638":{"id":638,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"59":{"id":59,"crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"361":{"id":361,"crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/rwlock.rs","begin":[299,4],"end":[299,72]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"84":{"id":84,"crate_id":0,"name":"from","span":{"filename":"src/mutex.rs","begin":[443,4],"end":[445,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"386":{"id":386,"crate_id":0,"name":"force_unlock_write","span":{"filename":"src/rwlock.rs","begin":[571,4],"end":[573,5]},"visibility":"public","docs":"Forcibly unlocks a write lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"109":{"id":109,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"411":{"id":411,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1118,0],"end":[1192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeTimed","id":364,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[409,410],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"134":{"id":134,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[682,0],"end":[686,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[133],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"436":{"id":436,"crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[2615,0],"end":[2619,1]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,576,578,580,582]}}},"159":{"id":159,"crate_id":0,"name":"deref","span":{"filename":"src/mutex.rs","begin":[927,4],"end":[929,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"461":{"id":461,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[1372,4],"end":[1377,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"184":{"id":184,"crate_id":0,"name":"is_locked","span":{"filename":"src/remutex.rs","begin":[139,4],"end":[141,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"486":{"id":486,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"209":{"id":209,"crate_id":0,"name":"into_inner","span":{"filename":"src/remutex.rs","begin":[263,4],"end":[265,5]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"511":{"id":511,"crate_id":0,"name":"unlocked","span":{"filename":"src/rwlock.rs","begin":[1929,4],"end":[1939,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"234":{"id":234,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"536":{"id":536,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"259":{"id":259,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/remutex.rs","begin":[740,4],"end":[750,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"561":{"id":561,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"284":{"id":284,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[796,0],"end":[802,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[283],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"586":{"id":586,"crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[2776,4],"end":[2788,5]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"7":{"id":7,"crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"309":{"id":309,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[1015,0],"end":[1023,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[307,308],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"611":{"id":611,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2856,0],"end":[2864,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[610],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"32":{"id":32,"crate_id":0,"name":"force_unlock","span":{"filename":"src/mutex.rs","begin":[272,4],"end":[274,5]},"visibility":"public","docs":"Forcibly unlocks the mutex.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `MutexGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`MutexGuard` but that guard has been discarded using `mem::forget`.\nBehavior is undefined if a mutex is unlocked when not locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"334":{"id":334,"crate_id":0,"name":"RawRwLockDowngrade","span":{"filename":"src/rwlock.rs","begin":[153,0],"end":[161,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support atomically downgrading an\nexclusive lock to a shared lock.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[333],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"636":{"id":636,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"57":{"id":57,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"359":{"id":359,"crate_id":0,"name":"RawRwLockUpgradeDowngrade","span":{"filename":"src/rwlock.rs","begin":[276,0],"end":[290,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support upgradable locks and lock\ndowngrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[357,358],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockDowngrade","id":334,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"82":{"id":82,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[434,0],"end":[439,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Default","id":83,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Default","id":83,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[81],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"384":{"id":384,"crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[539,4],"end":[541,5]},"visibility":"public","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"107":{"id":107,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"409":{"id":409,"crate_id":0,"name":"try_upgradable_read_for","span":{"filename":"src/rwlock.rs","begin":[1126,4],"end":[1136,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"132":{"id":132,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[676,0],"end":[680,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[131],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"434":{"id":434,"crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1235,4],"end":[1237,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"157":{"id":157,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[844,0],"end":[847,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":8,"args":null}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"459":{"id":459,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[1365,4],"end":[1367,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"182":{"id":182,"crate_id":0,"name":"try_lock","span":{"filename":"src/remutex.rs","begin":[117,4],"end":[119,5]},"visibility":"public","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"484":{"id":484,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"232":{"id":232,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"534":{"id":534,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"257":{"id":257,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[632,0],"end":[707,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[252,253,255,256],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"559":{"id":559,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2679,0],"end":[2700,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":332,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[558],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"282":{"id":282,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[788,0],"end":[794,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[281],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"5":{"id":5,"crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[127,4],"end":[127,61]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"307":{"id":307,"crate_id":0,"name":"Target","span":{"filename":"src/remutex.rs","begin":[1018,4],"end":[1018,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"609":{"id":609,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2849,0],"end":[2854,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"DerefMut","id":127,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[608],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"30":{"id":30,"crate_id":0,"name":"get_mut","span":{"filename":"src/mutex.rs","begin":[250,4],"end":[252,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `Mutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"332":{"id":332,"crate_id":0,"name":"RawRwLockFair","span":{"filename":"src/rwlock.rs","begin":[107,0],"end":[149,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support fair unlocking.\n\nFair unlocking means that a lock is handed directly over to the next waiting\nthread if there is one, without giving other threads the opportunity to\n\"steal\" the lock in the meantime. This is typically slower than unfair\nunlocking, but may be necessary in certain circumstances.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[328,329,330,331],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"634":{"id":634,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"357":{"id":357,"crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/rwlock.rs","begin":[282,4],"end":[282,42]},"visibility":"default","docs":"Downgrades an upgradable lock to a shared lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"382":{"id":382,"crate_id":0,"name":"get_mut","span":{"filename":"src/rwlock.rs","begin":[527,4],"end":[529,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `RwLock` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"105":{"id":105,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"407":{"id":407,"crate_id":0,"name":"try_upgradable_read","span":{"filename":"src/rwlock.rs","begin":[1061,4],"end":[1068,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"155":{"id":155,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"457":{"id":457,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1231,0],"end":[1231,88]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"180":{"id":180,"crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[77,4],"end":[82,6]},"visibility":"public","docs":"Initial value for an unlocked mutex.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"value":"_"}}},"482":{"id":482,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1639,0],"end":[1692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":332,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[479,480,481],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"205":{"id":205,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[72,0],"end":[72,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"507":{"id":507,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1725,0],"end":[1731,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[506],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"230":{"id":230,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"532":{"id":532,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"255":{"id":255,"crate_id":0,"name":"try_map","span":{"filename":"src/remutex.rs","begin":[671,4],"end":[689,5]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"557":{"id":557,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2627,0],"end":[2677,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[555,556],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"280":{"id":280,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[776,0],"end":[786,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[279],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"582":{"id":582,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2728,0],"end":[2734,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[581],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"3":{"id":3,"crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[52,4],"end":[52,31]},"visibility":"default","docs":"Attempts to acquire this mutex without blocking. Returns `true`\nif the lock was successfully acquired and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"305":{"id":305,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"607":{"id":607,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2841,0],"end":[2847,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[605,606],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"28":{"id":28,"crate_id":0,"name":"try_lock","span":{"filename":"src/mutex.rs","begin":[236,4],"end":[243,5]},"visibility":"public","docs":"Attempts to acquire this lock.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"330":{"id":330,"crate_id":0,"name":"bump_shared","span":{"filename":"src/rwlock.rs","begin":[131,4],"end":[134,5]},"visibility":"default","docs":"Temporarily yields a shared lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_shared_fair` followed\nby `lock_shared`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"53":{"id":53,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"355":{"id":355,"crate_id":0,"name":"bump_upgradable","span":{"filename":"src/rwlock.rs","begin":[268,4],"end":[271,5]},"visibility":"default","docs":"Temporarily yields an upgradable lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_upgradable_fair` followed\nby `lock_upgradable`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"380":{"id":380,"crate_id":0,"name":"write","span":{"filename":"src/rwlock.rs","begin":[499,4],"end":[503,5]},"visibility":"public","docs":"Locks this `RwLock` with exclusive write access, blocking the current\nthread until it can be acquired.\n\nThis function will not return while other writers or other readers\ncurrently have access to the lock.\n\nReturns an RAII guard which will drop the write access of this `RwLock`\nwhen dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"103":{"id":103,"crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[643,4],"end":[648,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"405":{"id":405,"crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[1908,0],"end":[1911,1]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the RwLock will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[514,518,522,525,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,545,547,549,551]}}},"128":{"id":128,"crate_id":0,"name":"drop","span":{"filename":"src/mutex.rs","begin":[668,4],"end":[673,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"430":{"id":430,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1209,4],"end":[1219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"153":{"id":153,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"455":{"id":455,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"178":{"id":178,"crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](crate::Mutex) for more details about the underlying mutex\nprimitive.","links":{"crate::Mutex":17},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[210,213,224,226,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,245,247,249]}}},"480":{"id":480,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[1668,4],"end":[1678,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"203":{"id":203,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"505":{"id":505,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1719,0],"end":[1723,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[504],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"228":{"id":228,"crate_id":0,"name":"try_lock_until","span":{"filename":"src/remutex.rs","begin":[501,4],"end":[508,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"530":{"id":530,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"253":{"id":253,"crate_id":0,"name":"map","span":{"filename":"src/remutex.rs","begin":[647,4],"end":[659,5]},"visibility":"public","docs":"Makes a new `MappedReentrantMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `ReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"555":{"id":555,"crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[2637,4],"end":[2649,5]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"278":{"id":278,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[766,0],"end":[774,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[276,277],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"580":{"id":580,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2720,0],"end":[2726,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[579],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"1":{"id":1,"crate_id":0,"name":"GuardMarker","span":{"filename":"src/mutex.rs","begin":[45,4],"end":[45,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"303":{"id":303,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"605":{"id":605,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2842,4],"end":[2842,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"26":{"id":26,"crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[504,0],"end":[507,1]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[100,104,105,106,107,108,109,110,111,112,113,114,115,117,120,121,124,126,129,132,134]}}},"328":{"id":328,"crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/rwlock.rs","begin":[113,4],"end":[113,40]},"visibility":"default","docs":"Releases a shared lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if a shared lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"630":{"id":630,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"353":{"id":353,"crate_id":0,"name":"RawRwLockUpgrade","span":{"filename":"src/rwlock.rs","begin":[219,0],"end":[247,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support atomically upgrading a shared\nlock to an exclusive lock.\n\nThis requires acquiring a special \"upgradable read lock\" instead of a\nnormal shared lock. There may only be one upgradable lock at any time,\notherwise deadlocks could occur when upgrading.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[348,349,350,351,352],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"378":{"id":378,"crate_id":0,"name":"read","span":{"filename":"src/rwlock.rs","begin":[467,4],"end":[471,5]},"visibility":"public","docs":"Locks this `RwLock` with shared read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns.\n\nNote that attempts to recursively acquire a read lock on a `RwLock` when\nthe current thread already holds one may result in a deadlock.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"101":{"id":101,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/mutex.rs","begin":[610,4],"end":[616,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"403":{"id":403,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[939,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockRecursiveTimed","id":347,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[401,402],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"126":{"id":126,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[659,0],"end":[664,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"DerefMut","id":127,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[125],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"428":{"id":428,"crate_id":0,"name":"from","span":{"filename":"src/rwlock.rs","begin":[1203,4],"end":[1205,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"151":{"id":151,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"453":{"id":453,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"478":{"id":478,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1618,0],"end":[1637,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeDowngrade","id":359,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[477],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"201":{"id":201,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"503":{"id":503,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1709,0],"end":[1717,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[502],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"226":{"id":226,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[461,0],"end":[477,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[225],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"528":{"id":528,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2148,0],"end":[2212,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeTimed","id":364,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockUpgradeDowngrade","id":359,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[526,527],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"276":{"id":276,"crate_id":0,"name":"Target","span":{"filename":"src/remutex.rs","begin":[769,4],"end":[769,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"578":{"id":578,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2710,0],"end":[2718,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[577],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"301":{"id":301,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"603":{"id":603,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2757,0],"end":[2760,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"24":{"id":24,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[174,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[22,23],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"326":{"id":326,"crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/rwlock.rs","begin":[89,4],"end":[98,5]},"visibility":"default","docs":"Check if this `RwLock` is currently exclusively locked.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"628":{"id":628,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"49":{"id":49,"crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"351":{"id":351,"crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[238,4],"end":[238,29]},"visibility":"default","docs":"Upgrades an upgradable lock to an exclusive lock.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"376":{"id":376,"crate_id":0,"name":"make_write_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[447,4],"end":[452,5]},"visibility":"public","docs":"Creates a new `RwLockReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds a write lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"99":{"id":99,"crate_id":0,"name":"leak","span":{"filename":"src/mutex.rs","begin":[589,4],"end":[593,5]},"visibility":"public","docs":"Leaks the mutex guard and returns a mutable reference to the data\nprotected by the mutex.\n\nThis will leave the `Mutex` in a locked state.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"401":{"id":401,"crate_id":0,"name":"try_read_recursive_for","span":{"filename":"src/rwlock.rs","begin":[951,4],"end":[961,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.\n\nThis method is guaranteed to succeed without blocking if another read\nlock is held at the time of the call. See the documentation for\n`read_recursive` for details.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"124":{"id":124,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[651,0],"end":[657,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[122,123],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"426":{"id":426,"crate_id":0,"name":"default","span":{"filename":"src/rwlock.rs","begin":[1196,4],"end":[1198,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"149":{"id":149,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"451":{"id":451,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"476":{"id":476,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1597,0],"end":[1616,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockDowngrade","id":334,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[475],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"199":{"id":199,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"501":{"id":501,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1702,0],"end":[1707,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"DerefMut","id":127,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[500],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"224":{"id":224,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[297,0],"end":[459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[214,216,217,218,219,220,221,222,223],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"526":{"id":526,"crate_id":0,"name":"try_with_upgraded_for","span":{"filename":"src/rwlock.rs","begin":[2163,4],"end":[2180,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned.\n\nOtherwise, calls the provided closure with an exclusive reference to the lock's data,\nand finally downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`try_upgrade_for` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Ret"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"249":{"id":249,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[561,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[248],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"551":{"id":551,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2240,0],"end":[2246,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[550],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"274":{"id":274,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"576":{"id":576,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2702,0],"end":[2708,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[574,575],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"299":{"id":299,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"601":{"id":601,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"22":{"id":22,"crate_id":0,"name":"from_raw","span":{"filename":"src/mutex.rs","begin":[177,4],"end":[182,5]},"visibility":"public","docs":"Creates a new mutex based on a pre-existing raw mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_mutex",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"324":{"id":324,"crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/rwlock.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Releases an exclusive lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"626":{"id":626,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"47":{"id":47,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"349":{"id":349,"crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/rwlock.rs","begin":[224,4],"end":[224,42]},"visibility":"default","docs":"Attempts to acquire an upgradable lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"72":{"id":72,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"374":{"id":374,"crate_id":0,"name":"make_read_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[431,4],"end":[436,5]},"visibility":"public","docs":"Creates a new `RwLockReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds a read lock.\n\nThis function does not increment the read count of the lock. Calling this function when a\nguard has already been produced is undefined behaviour unless the guard was forgotten\nwith `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"97":{"id":97,"crate_id":0,"name":"try_map","span":{"filename":"src/mutex.rs","begin":[550,4],"end":[565,5]},"visibility":"public","docs":"Attempts to make a new `MappedMutexGuard` for a component of the\nlocked data. The original guard is returned if the closure returns `None`.\n\nThis operation cannot fail as the `MutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"399":{"id":399,"crate_id":0,"name":"try_read_recursive","span":{"filename":"src/rwlock.rs","begin":[902,4],"end":[909,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis method is guaranteed to succeed if another read lock is held at the\ntime of the call. See the documentation for `read_recursive` for details.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"122":{"id":122,"crate_id":0,"name":"Target","span":{"filename":"src/mutex.rs","begin":[652,4],"end":[652,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"424":{"id":424,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[364,0],"end":[364,75]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"147":{"id":147,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"449":{"id":449,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"474":{"id":474,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1523,0],"end":[1595,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[469,470,472,473],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"197":{"id":197,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"499":{"id":499,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1694,0],"end":[1700,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[497,498],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"222":{"id":222,"crate_id":0,"name":"raw","span":{"filename":"src/remutex.rs","begin":[395,4],"end":[397,5]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `ReentrantMutexGuard`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"R"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"524":{"id":524,"crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/rwlock.rs","begin":[2130,4],"end":[2145,5]},"visibility":"public","docs":"Tries to atomically upgrade an upgradable read lock into an exclusive\nwrite lock, until a timeout is reached.\n\nIf the access could not be granted before the timeout expires, then\nthe current guard is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"247":{"id":247,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[554,0],"end":[559,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[246],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"549":{"id":549,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2232,0],"end":[2238,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[548],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"272":{"id":272,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"574":{"id":574,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2703,4],"end":[2703,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"297":{"id":297,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"599":{"id":599,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"20":{"id":20,"crate_id":0,"name":"into_inner","span":{"filename":"src/mutex.rs","begin":[169,4],"end":[171,5]},"visibility":"public","docs":"Consumes this mutex, returning the underlying data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"322":{"id":322,"crate_id":0,"name":"lock_exclusive","span":{"filename":"src/rwlock.rs","begin":[63,4],"end":[63,29]},"visibility":"default","docs":"Acquires an exclusive lock, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"624":{"id":624,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"45":{"id":45,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"347":{"id":347,"crate_id":0,"name":"RawRwLockRecursiveTimed","span":{"filename":"src/rwlock.rs","begin":[203,0],"end":[211,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support recursive read locks and timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[345,346],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockRecursive","id":344,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockTimed","id":338,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"649":{"id":649,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,0],"end":[116,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::rwlock","name":"rwlock","id":616,"is_glob":true}}},"372":{"id":372,"crate_id":0,"name":"const_new","span":{"filename":"src/rwlock.rs","begin":[415,4],"end":[417,5]},"visibility":"public","docs":"Creates a new new instance of an `RwLock<T>` based on a pre-existing\n`RawRwLock<T>`.\n\nThis allows creating a `RwLock<T>` in a constant context on stable\nRust.\n\nThis method is a legacy alias for [`from_raw`](Self::from_raw).","links":{"Self::from_raw":371},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_rwlock",{"generic":"R"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"95":{"id":95,"crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[834,0],"end":[838,1]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the Mutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,160,162,164,166,168]}}},"397":{"id":397,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[730,0],"end":[866,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockTimed","id":338,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[393,394,395,396],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"120":{"id":120,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"422":{"id":422,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"145":{"id":145,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"447":{"id":447,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"170":{"id":170,"crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[50,4],"end":[50,21]},"visibility":"default","docs":"Initial value.","links":{},"attrs":["#[allow(clippy::declare_interior_mutable_const)]"],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"value":null}}},"472":{"id":472,"crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[1562,4],"end":[1577,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"195":{"id":195,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"497":{"id":497,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[1695,4],"end":[1695,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"220":{"id":220,"crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"src/remutex.rs","begin":[365,4],"end":[367,5]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"522":{"id":522,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2029,0],"end":[2099,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeDowngrade","id":359,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[519,520,521],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"245":{"id":245,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[547,0],"end":[552,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Default","id":83,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Default","id":83,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[244],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"547":{"id":547,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2222,0],"end":[2230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[546],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"270":{"id":270,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"572":{"id":572,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2621,0],"end":[2621,101]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"295":{"id":295,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"597":{"id":597,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"320":{"id":320,"crate_id":0,"name":"try_lock_shared","span":{"filename":"src/rwlock.rs","begin":[53,4],"end":[53,38]},"visibility":"default","docs":"Attempts to acquire a shared lock without blocking.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"622":{"id":622,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"43":{"id":43,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"345":{"id":345,"crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/rwlock.rs","begin":[206,4],"end":[206,77]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached, without\ndeadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"647":{"id":647,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,0],"end":[108,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::mutex","name":"mutex","id":169,"is_glob":true}}},"370":{"id":370,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[367,0],"end":[394,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[368,369],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"93":{"id":93,"crate_id":0,"name":"mutex","span":{"filename":"src/mutex.rs","begin":[513,4],"end":[515,5]},"visibility":"public","docs":"Returns a reference to the original `Mutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"395":{"id":395,"crate_id":0,"name":"try_write_for","span":{"filename":"src/rwlock.rs","begin":[770,4],"end":[777,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with exclusive write access until a\ntimeout is reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the exclusive access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"420":{"id":420,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[61],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"143":{"id":143,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[901,0],"end":[922,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[142],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"445":{"id":445,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"168":{"id":168,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[955,0],"end":[961,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[167],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"470":{"id":470,"crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[1538,4],"end":[1550,5]},"visibility":"public","docs":"Make a new `MappedRwLockWriteGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockWriteGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"193":{"id":193,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"495":{"id":495,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"218":{"id":218,"crate_id":0,"name":"get_mut","span":{"filename":"src/remutex.rs","begin":[353,4],"end":[355,5]},"visibility":"public","docs":"Returns a mutable reference to the underlying data.\n\nSince this call borrows the `ReentrantMutex` mutably, no actual locking needs to\ntake place---the mutable borrow statically guarantees no locks exist.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"520":{"id":520,"crate_id":0,"name":"with_upgraded","span":{"filename":"src/rwlock.rs","begin":[2060,4],"end":[2073,5]},"visibility":"public","docs":"First, atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.\n\nThen, calls the provided closure with an exclusive reference to the lock's data.\n\nFinally, atomically downgrades the lock back to an upgradable read lock.\nThe closure's return value is wrapped in `Some` and returned.\n\nThis function only requires a mutable reference to the guard, unlike\n`upgrade` which takes the guard by value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"Ret"},"is_c_variadic":false},"generics":{"params":[{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"Ret"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"243":{"id":243,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[225,0],"end":[228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"545":{"id":545,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[2214,0],"end":[2220,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[543,544],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"268":{"id":268,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"570":{"id":570,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"293":{"id":293,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"595":{"id":595,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"318":{"id":318,"crate_id":0,"name":"GuardMarker","span":{"filename":"src/rwlock.rs","begin":[47,4],"end":[47,21]},"visibility":"default","docs":"Marker type which determines whether a lock guard should be `Send`. Use\none of the `GuardSend` or `GuardNoSend` helper types here.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"620":{"id":620,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"41":{"id":41,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"343":{"id":343,"crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/rwlock.rs","begin":[199,4],"end":[199,48]},"visibility":"default","docs":"Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"645":{"id":645,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"368":{"id":368,"crate_id":0,"name":"new","span":{"filename":"src/rwlock.rs","begin":[371,4],"end":[376,5]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"393":{"id":393,"crate_id":0,"name":"try_read_for","span":{"filename":"src/rwlock.rs","begin":[738,4],"end":[745,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"116":{"id":116,"crate_id":1,"name":"Target","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"418":{"id":418,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"141":{"id":141,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[849,0],"end":[899,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[139,140],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"443":{"id":443,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1307,0],"end":[1360,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockFair","id":332,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[440,441,442],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"166":{"id":166,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[949,0],"end":[953,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[165],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"191":{"id":191,"crate_id":0,"name":"try_lock_for","span":{"filename":"src/remutex.rs","begin":[200,4],"end":[202,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"493":{"id":493,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"216":{"id":216,"crate_id":0,"name":"lock","span":{"filename":"src/remutex.rs","begin":[325,4],"end":[329,5]},"visibility":"public","docs":"Acquires a reentrant mutex, blocking the current thread until it is able\nto do so.\n\nIf the mutex is held by another thread then this function will block the\nlocal thread until it is available to acquire the mutex. If the mutex is\nalready held by the current thread then this function will increment the\nlock reference count and return immediately. Upon returning,\nthe thread is the only thread with the mutex held. An RAII guard is\nreturned to allow scoped unlock of the lock. When the guard goes out of\nscope, the mutex will be unlocked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"518":{"id":518,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1974,0],"end":[2027,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgradeFair","id":356,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[515,516,517],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"241":{"id":241,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"543":{"id":543,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[2215,4],"end":[2215,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"266":{"id":266,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"568":{"id":568,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"291":{"id":291,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[1006,4],"end":[1012,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"593":{"id":593,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"14":{"id":14,"crate_id":0,"name":"RawMutexTimed","span":{"filename":"src/mutex.rs","begin":[116,0],"end":[128,1]},"visibility":"public","docs":"Additional methods for mutexes which support locking with timeouts.\n\nThe `Duration` and `Instant` types are specified as associated types so that\nthis trait is usable even in `no_std` environments.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[12,13,4,5],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"316":{"id":316,"crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[8,0],"end":[1057,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"atomic_usize\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[173,179,178,215,254],"is_stripped":true}}},"618":{"id":618,"crate_id":0,"name":"GuardSend","span":{"filename":"src/lib.rs","begin":[100,0],"end":[100,25]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[619,620,621,622,623,624,625,626,627,628,629,630,631]}}},"39":{"id":39,"crate_id":0,"name":"try_lock_until","span":{"filename":"src/mutex.rs","begin":[391,4],"end":[398,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"341":{"id":341,"crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/rwlock.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Attempts to acquire an exclusive lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"643":{"id":643,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"89":{"id":89,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[448,0],"end":[466,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[86],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"391":{"id":391,"crate_id":0,"name":"force_unlock_write_fair","span":{"filename":"src/rwlock.rs","begin":[725,4],"end":[727,5]},"visibility":"public","docs":"Forcibly unlocks a write lock using a fair unlock protocol.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockWriteGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockWriteGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is write-unlocked when not write-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"114":{"id":114,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"416":{"id":416,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"139":{"id":139,"crate_id":0,"name":"map","span":{"filename":"src/mutex.rs","begin":[859,4],"end":[871,5]},"visibility":"public","docs":"Makes a new `MappedMutexGuard` for a component of the locked data.\n\nThis operation cannot fail as the `MappedMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedMutexGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"441":{"id":441,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[1336,4],"end":[1346,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"164":{"id":164,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[939,0],"end":[947,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[163],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"466":{"id":466,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1386,0],"end":[1392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Display","id":135,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[465],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"189":{"id":189,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[151,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[187,188],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"491":{"id":491,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"214":{"id":214,"crate_id":0,"name":"make_guard_unchecked","span":{"filename":"src/remutex.rs","begin":[307,4],"end":[312,5]},"visibility":"public","docs":"Creates a new `ReentrantMutexGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds the lock.\n\nCalling this function when a guard has already been produced is undefined behaviour unless\nthe guard was forgotten with `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"516":{"id":516,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/rwlock.rs","begin":[2003,4],"end":[2013,5]},"visibility":"public","docs":"Temporarily unlocks the `RwLock` to execute the given function.\n\nThe `RwLock` is unlocked a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the `RwLock`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"239":{"id":239,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"541":{"id":541,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"264":{"id":264,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"566":{"id":566,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"289":{"id":289,"crate_id":0,"name":"try_map","span":{"filename":"src/remutex.rs","begin":[969,4],"end":[987,5]},"visibility":"public","docs":"Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedReentrantMutexGuard` passed\nin already locked the mutex.\n\nThis is an associated function that needs to be\nused as `MappedReentrantMutexGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"591":{"id":591,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"12":{"id":12,"crate_id":0,"name":"Duration","span":{"filename":"src/mutex.rs","begin":[118,4],"end":[118,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"314":{"id":314,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[1048,4],"end":[1050,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"616":{"id":616,"crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[8,0],"end":[2886,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[327,332,334,338,344,347,353,356,359,364,367,375,377,405,436,471],"is_stripped":true}}},"37":{"id":37,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[351,0],"end":[367,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[36],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"339":{"id":339,"crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/rwlock.rs","begin":[178,4],"end":[178,68]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"641":{"id":641,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"62":{"id":62,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[61],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"364":{"id":364,"crate_id":0,"name":"RawRwLockUpgradeTimed","span":{"filename":"src/rwlock.rs","begin":[294,0],"end":[316,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support upgradable locks and locking\nwith timeouts.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[360,361,362,363],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockTimed","id":338,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"389":{"id":389,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[420,0],"end":[694,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[374,376,378,379,380,381,382,383,384,385,386,387,388],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"112":{"id":112,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[56],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"414":{"id":414,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"439":{"id":439,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1233,0],"end":[1305,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[434,435,437,438],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"162":{"id":162,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[932,0],"end":[937,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"DerefMut","id":127,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[161],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"464":{"id":464,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1380,0],"end":[1384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[463],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"187":{"id":187,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[160,4],"end":[167,5]},"visibility":"public","docs":"Unlocks this mutex using a fair unlock protocol. The inner mutex\nmay not be unlocked if this mutex was acquired previously in the\ncurrent thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"489":{"id":489,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"212":{"id":212,"crate_id":0,"name":"const_new","span":{"filename":"src/remutex.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Creates a new reentrant mutex based on a pre-existing raw mutex and a\nhelper to get the thread ID.\n\nThis allows creating a reentrant mutex in a constant context on stable\nRust.\n\nThis method is a legacy alias for [`from_raw`](Self::from_raw).","links":{"Self::from_raw":211},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["raw_mutex",{"generic":"R"}],["get_thread_id",{"generic":"G"}],["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"514":{"id":514,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1918,0],"end":[1972,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[510,511,512,513],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"237":{"id":237,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"539":{"id":539,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"262":{"id":262,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"564":{"id":564,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"589":{"id":589,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[2832,4],"end":[2838,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockWriteGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"10":{"id":10,"crate_id":0,"name":"bump","span":{"filename":"src/mutex.rs","begin":[106,4],"end":[109,5]},"visibility":"default","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, see\nthe documentation of [`unlock`](RawMutex::unlock).","links":{"RawMutex::unlock":6},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"312":{"id":312,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[1040,4],"end":[1042,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"614":{"id":614,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2877,4],"end":[2879,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"35":{"id":35,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[195,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[25,27,28,30,31,32,33,34],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"337":{"id":337,"crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/rwlock.rs","begin":[175,4],"end":[175,67]},"visibility":"default","docs":"Attempts to acquire a shared lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"639":{"id":639,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"60":{"id":60,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"362":{"id":362,"crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/rwlock.rs","begin":[307,4],"end":[307,70]},"visibility":"default","docs":"Attempts to upgrade an upgradable lock to an exclusive lock until a\ntimeout is reached.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"85":{"id":85,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[441,0],"end":[446,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[84],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"387":{"id":387,"crate_id":0,"name":"raw","span":{"filename":"src/rwlock.rs","begin":[585,4],"end":[587,5]},"visibility":"public","docs":"Returns the underlying raw reader-writer lock object.\n\nNote that you will most likely need to import the `RawRwLock` trait from\n`lock_api` to be able to call functions on the raw\nreader-writer lock.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a lock guard.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"R"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"110":{"id":110,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":51,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[49],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"412":{"id":412,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"437":{"id":437,"crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[1272,4],"end":[1287,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. Returns the original guard if the closure returns `None`.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"160":{"id":160,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[924,0],"end":[930,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[158,159],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"462":{"id":462,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1370,0],"end":[1378,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[461],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"185":{"id":185,"crate_id":0,"name":"is_owned_by_current_thread","span":{"filename":"src/remutex.rs","begin":[145,4],"end":[148,5]},"visibility":"public","docs":"Checks whether the mutex is currently held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"487":{"id":487,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"210":{"id":210,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[230,0],"end":[266,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[208,209],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"512":{"id":512,"crate_id":0,"name":"upgrade","span":{"filename":"src/rwlock.rs","begin":[1943,4],"end":[1954,5]},"visibility":"public","docs":"Atomically upgrades an upgradable read lock lock into an exclusive write lock,\nblocking the current thread until it can be acquired.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"235":{"id":235,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"537":{"id":537,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[59],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"260":{"id":260,"crate_id":0,"name":"bump","span":{"filename":"src/remutex.rs","begin":[758,4],"end":[763,5]},"visibility":"public","docs":"Temporarily yields the mutex to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `lock`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"562":{"id":562,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"587":{"id":587,"crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[2800,4],"end":[2815,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockWriteGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockWriteGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockWriteGuard","id":471,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"8":{"id":8,"crate_id":0,"name":"RawMutex","span":{"filename":"src/mutex.rs","begin":[36,0],"end":[79,1]},"visibility":"public","docs":"Basic operations for a mutex.\n\nTypes implementing this trait can be used by `Mutex` to form a safe and\nfully-functioning mutex type.\n\n# Safety\n\nImplementations of this trait must ensure that the mutex is actually\nexclusive: a lock can't be acquired while the mutex is already locked.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[0,1,2,3,6,7],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"310":{"id":310,"crate_id":0,"name":"drop","span":{"filename":"src/remutex.rs","begin":[1029,4],"end":[1034,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"612":{"id":612,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2869,4],"end":[2871,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"33":{"id":33,"crate_id":0,"name":"raw","span":{"filename":"src/mutex.rs","begin":[286,4],"end":[288,5]},"visibility":"public","docs":"Returns the underlying raw mutex object.\n\nNote that you will most likely need to import the `RawMutex` trait from\n`lock_api` to be able to call functions on the raw mutex.\n\n# Safety\n\nThis method is unsafe because it allows unlocking a mutex while\nstill holding a reference to a `MutexGuard`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"R"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"335":{"id":335,"crate_id":0,"name":"Duration","span":{"filename":"src/rwlock.rs","begin":[169,4],"end":[169,18]},"visibility":"default","docs":"Duration type used for `try_lock_for`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":null}}},"637":{"id":637,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"360":{"id":360,"crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/rwlock.rs","begin":[296,4],"end":[296,71]},"visibility":"default","docs":"Attempts to acquire an upgradable lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"385":{"id":385,"crate_id":0,"name":"force_unlock_read","span":{"filename":"src/rwlock.rs","begin":[555,4],"end":[557,5]},"visibility":"public","docs":"Forcibly unlocks a read lock.\n\nThis is useful when combined with `mem::forget` to hold a lock without\nthe need to maintain a `RwLockReadGuard` object alive, for example when\ndealing with FFI.\n\n# Safety\n\nThis method must only be called if the current thread logically owns a\n`RwLockReadGuard` but that guard has be discarded using `mem::forget`.\nBehavior is undefined if a rwlock is read-unlocked when not read-locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"108":{"id":108,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":46,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"410":{"id":410,"crate_id":0,"name":"try_upgradable_read_until","span":{"filename":"src/rwlock.rs","begin":[1145,4],"end":[1155,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with upgradable read access until a timeout\nis reached.\n\nIf the access could not be granted before the timeout expires, then\n`None` is returned. Otherwise, an RAII guard is returned which will\nrelease the shared access when it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":338,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"133":{"id":133,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[683,4],"end":[685,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"435":{"id":435,"crate_id":0,"name":"map","span":{"filename":"src/rwlock.rs","begin":[1248,4],"end":[1260,5]},"visibility":"public","docs":"Make a new `MappedRwLockReadGuard` for a component of the locked data.\n\nThis operation cannot fail as the `RwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `RwLockReadGuard::map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"158":{"id":158,"crate_id":0,"name":"Target","span":{"filename":"src/mutex.rs","begin":[925,4],"end":[925,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"460":{"id":460,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1362,0],"end":[1368,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[458,459],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"183":{"id":183,"crate_id":0,"name":"unlock","span":{"filename":"src/remutex.rs","begin":[128,4],"end":[135,5]},"visibility":"public","docs":"Unlocks this mutex. The inner mutex may not be unlocked if\nthis mutex was acquired previously in the current thread.\n\n# Safety\n\nThis method may only be called if the mutex is held by the current thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"485":{"id":485,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"208":{"id":208,"crate_id":0,"name":"new","span":{"filename":"src/remutex.rs","begin":[234,4],"end":[244,5]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.","links":{},"attrs":["#[cfg(has_const_fn_trait_bound)]","#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"510":{"id":510,"crate_id":0,"name":"rwlock","span":{"filename":"src/rwlock.rs","begin":[1920,4],"end":[1922,5]},"visibility":"public","docs":"Returns a reference to the original reader-writer lock object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"233":{"id":233,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"535":{"id":535,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":54,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[52],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"258":{"id":258,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/remutex.rs","begin":[725,4],"end":[731,5]},"visibility":"public","docs":"Unlocks the mutex using a fair unlock protocol.\n\nBy default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `ReentrantMutexGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"560":{"id":560,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"283":{"id":283,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[799,4],"end":[801,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"6":{"id":6,"crate_id":0,"name":"unlock","span":{"filename":"src/mutex.rs","begin":[65,4],"end":[65,28]},"visibility":"default","docs":"Unlocks this mutex.\n\n# Safety\n\nThis method may only be called if the mutex is held in the current context, i.e. it must\nbe paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].\n\n[`lock`]: RawMutex::lock\n[`try_lock`]: RawMutex::try_lock\n[`try_lock_for`]: RawMutexTimed::try_lock_for\n[`try_lock_until`]: RawMutexTimed::try_lock_until","links":{"RawMutex::lock":2,"RawMutex::try_lock":3,"RawMutexTimed::try_lock_until":5,"RawMutexTimed::try_lock_for":4},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"308":{"id":308,"crate_id":0,"name":"deref","span":{"filename":"src/remutex.rs","begin":[1020,4],"end":[1022,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"610":{"id":610,"crate_id":0,"name":"drop","span":{"filename":"src/rwlock.rs","begin":[2858,4],"end":[2863,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"31":{"id":31,"crate_id":0,"name":"is_locked","span":{"filename":"src/mutex.rs","begin":[256,4],"end":[258,5]},"visibility":"public","docs":"Checks whether the mutex is currently locked.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"333":{"id":333,"crate_id":0,"name":"downgrade","span":{"filename":"src/rwlock.rs","begin":[160,4],"end":[160,31]},"visibility":"default","docs":"Atomically downgrades an exclusive lock into a shared lock without\nallowing any thread to take an exclusive lock in the meantime.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"635":{"id":635,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardNoSend","id":633,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"56":{"id":56,"crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":55},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"358":{"id":358,"crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/rwlock.rs","begin":[289,4],"end":[289,45]},"visibility":"default","docs":"Downgrades an exclusive lock to an upgradable lock.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"81":{"id":81,"crate_id":0,"name":"default","span":{"filename":"src/mutex.rs","begin":[436,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"383":{"id":383,"crate_id":0,"name":"is_locked","span":{"filename":"src/rwlock.rs","begin":[533,4],"end":[535,5]},"visibility":"public","docs":"Checks whether this `RwLock` is currently locked in any way.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"106":{"id":106,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":42,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"408":{"id":408,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1019,0],"end":[1116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[404,406,407],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"131":{"id":131,"crate_id":0,"name":"fmt","span":{"filename":"src/mutex.rs","begin":[677,4],"end":[679,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"156":{"id":156,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[840,0],"end":[843,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"458":{"id":458,"crate_id":0,"name":"Target","span":{"filename":"src/rwlock.rs","begin":[1363,4],"end":[1363,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"181":{"id":181,"crate_id":0,"name":"lock","span":{"filename":"src/remutex.rs","begin":[107,4],"end":[112,5]},"visibility":"public","docs":"Acquires this mutex, blocking if it's held by another thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"483":{"id":483,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"231":{"id":231,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"533":{"id":533,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":48,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"256":{"id":256,"crate_id":0,"name":"unlocked","span":{"filename":"src/remutex.rs","begin":[696,4],"end":[706,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"558":{"id":558,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[2693,4],"end":[2699,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `MappedRwLockReadGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"281":{"id":281,"crate_id":0,"name":"fmt","span":{"filename":"src/remutex.rs","begin":[791,4],"end":[793,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"4":{"id":4,"crate_id":0,"name":"try_lock_for","span":{"filename":"src/mutex.rs","begin":[124,4],"end":[124,60]},"visibility":"default","docs":"Attempts to acquire this lock until a timeout is reached.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"306":{"id":306,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[928,0],"end":[931,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"608":{"id":608,"crate_id":0,"name":"deref_mut","span":{"filename":"src/rwlock.rs","begin":[2851,4],"end":[2853,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"331":{"id":331,"crate_id":0,"name":"bump_exclusive","span":{"filename":"src/rwlock.rs","begin":[145,4],"end":[148,5]},"visibility":"default","docs":"Temporarily yields an exclusive lock to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_exclusive_fair` followed\nby `lock_exclusive`, however it can be much more efficient in the case where there\nare no waiting threads.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"633":{"id":633,"crate_id":0,"name":"GuardNoSend","span":{"filename":"src/lib.rs","begin":[103,0],"end":[103,32]},"visibility":"public","docs":"Marker type which indicates that the Guard type for a lock is not `Send`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[634,635,636,637,638,639,640,641,642,643,644,645,646]}}},"356":{"id":356,"crate_id":0,"name":"RawRwLockUpgradeFair","span":{"filename":"src/rwlock.rs","begin":[251,0],"end":[272,1]},"visibility":"public","docs":"Additional methods for `RwLock`s which support upgradable locks and fair\nunlocking.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_dyn_compatible":false,"items":[354,355],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"RawRwLockUpgrade","id":353,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"RawRwLockFair","id":332,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"79":{"id":79,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[144,0],"end":[144,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"381":{"id":381,"crate_id":0,"name":"try_write","span":{"filename":"src/rwlock.rs","begin":[513,4],"end":[520,5]},"visibility":"public","docs":"Attempts to lock this `RwLock` with exclusive write access.\n\nIf the lock could not be acquired at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the lock when\nit is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockWriteGuard","id":377,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"104":{"id":104,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[596,0],"end":[649,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexFair","id":11,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[101,102,103],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"406":{"id":406,"crate_id":0,"name":"upgradable_read","span":{"filename":"src/rwlock.rs","begin":[1047,4],"end":[1051,5]},"visibility":"public","docs":"Locks this `RwLock` with upgradable read access, blocking the current thread\nuntil it can be acquired.\n\nThe calling thread will be blocked until there are no more writers or other\nupgradable reads which hold the lock. There may be other readers currently\ninside the lock when this method returns.\n\nReturns an RAII guard which will release this thread's shared access\nonce it is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"129":{"id":129,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[666,0],"end":[674,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":130,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[128],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"431":{"id":431,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1208,0],"end":[1220,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"fmt::Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":90,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[430],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"154":{"id":154,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"456":{"id":456,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"179":{"id":179,"crate_id":0,"name":"RawReentrantMutex","span":{"filename":"src/remutex.rs","begin":[64,0],"end":[69,1]},"visibility":"public","docs":"A raw mutex type that wraps another raw mutex to provide reentrancy.\n\nAlthough this has the same methods as the [`RawMutex`] trait, it does\nnot implement it, and should not be used in the same way, since this\nmutex can successfully acquire a lock multiple times in the same thread.\nOnly use this when you know you want a raw mutex that can be locked\nreentrantly; you probably want [`ReentrantMutex`] instead.","links":{"`ReentrantMutex`":178,"`RawMutex`":8},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[186,189,192,193,194,195,196,197,198,199,200,201,202,203,204,205]}}},"481":{"id":481,"crate_id":0,"name":"bump","span":{"filename":"src/rwlock.rs","begin":[1686,4],"end":[1691,5]},"visibility":"public","docs":"Temporarily yields the `RwLock` to a waiting thread if there is one.\n\nThis method is functionally equivalent to calling `unlock_fair` followed\nby `write`, however it can be much more efficient in the case where there\nare no waiting threads.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"204":{"id":204,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[71,0],"end":[71,90]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"506":{"id":506,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1728,4],"end":[1730,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"229":{"id":229,"crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[479,0],"end":[545,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutexTimed","id":14,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[227,228],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"531":{"id":531,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"bounds":[{"trait_bound":{"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":44,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"254":{"id":254,"crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[922,0],"end":[926,1]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":["#[clippy::has_significant_drop]","#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"GetThreadId","id":173,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[290,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,309,311,313,315]}}},"556":{"id":556,"crate_id":0,"name":"try_map","span":{"filename":"src/rwlock.rs","begin":[2661,4],"end":[2676,5]},"visibility":"public","docs":"Attempts to make  a new `MappedRwLockReadGuard` for a component of the\nlocked data. The original guard is return if the closure returns `None`.\n\nThis operation cannot fail as the `MappedRwLockReadGuard` passed\nin already locked the data.\n\nThis is an associated function that needs to be\nused as `MappedRwLockReadGuard::try_map(...)`. A method would interfere with methods of\nthe same name on the contents of the locked data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"path":"Result","id":66,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"MappedRwLockReadGuard","id":436,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"U"}}],"constraints":[]}}}}},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"U"}}}}],"constraints":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"279":{"id":279,"crate_id":0,"name":"drop","span":{"filename":"src/remutex.rs","begin":[780,4],"end":[785,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"581":{"id":581,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2731,4],"end":[2733,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2":{"id":2,"crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Acquires this mutex, blocking the current thread until it is able to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"304":{"id":304,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":118,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":119,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedReentrantMutexGuard","id":254,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"606":{"id":606,"crate_id":0,"name":"deref","span":{"filename":"src/rwlock.rs","begin":[2844,4],"end":[2846,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"27":{"id":27,"crate_id":0,"name":"lock","span":{"filename":"src/mutex.rs","begin":[222,4],"end":[226,5]},"visibility":"public","docs":"Acquires a mutex, blocking the current thread until it is able to do so.\n\nThis function will block the local thread until it is available to acquire\nthe mutex. Upon returning, the thread is the only thread with the mutex\nheld. An RAII guard is returned to allow scoped unlock of the lock. When\nthe guard goes out of scope, the mutex will be unlocked.\n\nAttempts to lock a mutex in the thread which already holds the lock will\nresult in a deadlock.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"MutexGuard","id":26,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"329":{"id":329,"crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/rwlock.rs","begin":[120,4],"end":[120,43]},"visibility":"default","docs":"Releases an exclusive lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an exclusive lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"631":{"id":631,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":76,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"GuardSend","id":618,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[73],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"52":{"id":52,"crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"354":{"id":354,"crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/rwlock.rs","begin":[257,4],"end":[257,44]},"visibility":"default","docs":"Releases an upgradable lock using a fair unlock protocol.\n\n# Safety\n\nThis method may only be called if an upgradable lock is held in the current context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":false}}},"77":{"id":77,"crate_id":0,"name":null,"span":{"filename":"src/mutex.rs","begin":[143,0],"end":[143,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawMutex","id":8,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"Mutex","id":17,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"379":{"id":379,"crate_id":0,"name":"try_read","span":{"filename":"src/rwlock.rs","begin":[481,4],"end":[488,5]},"visibility":"public","docs":"Attempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `None` is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.\n\nThis function does not block.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"102":{"id":102,"crate_id":0,"name":"unlocked_fair","span":{"filename":"src/mutex.rs","begin":[625,4],"end":[635,5]},"visibility":"public","docs":"Temporarily unlocks the mutex to execute the given function.\n\nThe mutex is unlocked using a fair unlock protocol.\n\nThis is safe because `&mut` guarantees that there exist no other\nreferences to the data protected by the mutex.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":96,"args":{"parenthesized":{"inputs":[],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"404":{"id":404,"crate_id":0,"name":"make_upgradable_guard_unchecked","span":{"filename":"src/rwlock.rs","begin":[1030,4],"end":[1035,5]},"visibility":"public","docs":"Creates a new `RwLockUpgradableReadGuard` without checking if the lock is held.\n\n# Safety\n\nThis method must only be called if the thread logically holds an upgradable read lock.\n\nThis function does not increment the read count of the lock. Calling this function when a\nguard has already been produced is undefined behaviour unless the guard was forgotten\nwith `mem::forget`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"429":{"id":429,"crate_id":0,"name":null,"span":{"filename":"src/rwlock.rs","begin":[1201,0],"end":[1206,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":55,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLock","id":367,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[428],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"152":{"id":152,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":68,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"MappedMutexGuard","id":95,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[63,65],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"454":{"id":454,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockReadGuard","id":375,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"479":{"id":479,"crate_id":0,"name":"unlock_fair","span":{"filename":"src/rwlock.rs","begin":[1653,4],"end":[1659,5]},"visibility":"public","docs":"Unlocks the `RwLock` using a fair unlock protocol.\n\nBy default, `RwLock` is unfair and allow the current thread to re-lock\nthe `RwLock` before another has the chance to acquire the lock, even if\nthat thread has been blocked on the `RwLock` for a long time. This is\nthe default because it allows much higher throughput as it avoids\nforcing a context switch on every `RwLock` unlock. This can result in one\nthread acquiring a `RwLock` many more times than other threads.\n\nHowever in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the `RwLockWriteGuard` normally.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"generic":"Self"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"202":{"id":202,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":58,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":64,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"RawReentrantMutex","id":179,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}}],"constraints":[]}}}},"items":[69,71],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"504":{"id":504,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[1720,4],"end":[1722,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"227":{"id":227,"crate_id":0,"name":"try_lock_for","span":{"filename":"src/remutex.rs","begin":[486,4],"end":[493,5]},"visibility":"public","docs":"Attempts to acquire this lock until a timeout is reached.\n\nIf the lock could not be acquired before the timeout expired, then\n`None` is returned. Otherwise, an RAII guard is returned. The lock will\nbe unlocked when the guard is dropped.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"","id":14,"args":null}}}]],"output":{"resolved_path":{"path":"Option","id":29,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"ReentrantMutexGuard","id":215,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"529":{"id":529,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":80,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":18,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"R"},"trait":{"path":"RawRwLock","id":327,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":78,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"RwLockUpgradableReadGuard","id":405,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}},{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"252":{"id":252,"crate_id":0,"name":"remutex","span":{"filename":"src/remutex.rs","begin":[634,4],"end":[636,5]},"visibility":"public","docs":"Returns a reference to the original `ReentrantMutex` object.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"ReentrantMutex","id":178,"args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"G"}},{"type":{"generic":"T"}}],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"277":{"id":277,"crate_id":0,"name":"deref","span":{"filename":"src/remutex.rs","begin":[771,4],"end":[773,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"579":{"id":579,"crate_id":0,"name":"fmt","span":{"filename":"src/rwlock.rs","begin":[2723,4],"end":[2725,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":87,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":88,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1183":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"906":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"327":{"crate_id":0,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"1208":{"crate_id":1,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"931":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1233":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"654":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"956":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"377":{"crate_id":0,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"679":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"981":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1258":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"704":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1283":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1006":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1308":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"729":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1031":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1333":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"754":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1056":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"779":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1081":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"804":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1106":{"crate_id":1,"path":["core"],"kind":"module"},"829":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1131":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"854":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1156":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"879":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1181":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"904":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1206":{"crate_id":1,"path":["core","core_simd","vector","splat","splat_rt","Splat"],"kind":"struct"},"48":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"929":{"crate_id":1,"path":["core","num","niche_types","Nanoseconds"],"kind":"struct"},"652":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"954":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1231":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"375":{"crate_id":0,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"677":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"979":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1256":{"crate_id":1,"path":["core","write"],"kind":"macro"},"702":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1004":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1281":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1306":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"727":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1029":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1331":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"752":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1054":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"173":{"crate_id":0,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"777":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1079":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"802":{"crate_id":1,"path":["core","slice","private_get_disjoint_mut_index","Sealed"],"kind":"trait"},"1104":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"827":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1129":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"852":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1154":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"877":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1179":{"crate_id":1,"path":["core","num","niche_types","NonZeroI32Inner"],"kind":"struct"},"902":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1204":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"927":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"46":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1229":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"650":{"crate_id":0,"path":["lock_api"],"kind":"module"},"952":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1254":{"crate_id":1,"path":["core","marker","variance","Variance"],"kind":"trait"},"675":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"977":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"96":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1279":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"700":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1002":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1304":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"725":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"1027":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1329":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"750":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1052":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"775":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1077":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"800":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1102":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"825":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1127":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"850":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1152":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"875":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1177":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"900":{"crate_id":1,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"1202":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"925":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1227":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"44":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"950":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1252":{"crate_id":1,"path":["core","num","niche_types","NonZeroU8Inner"],"kind":"struct"},"673":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"975":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1277":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"698":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1000":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"119":{"crate_id":1,"path":["core","ops","deref","Receiver"],"kind":"trait"},"723":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1025":{"crate_id":1,"path":["core","num","niche_types","NonZeroU32Inner"],"kind":"struct"},"1302":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"748":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1327":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1050":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"471":{"crate_id":0,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"773":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1075":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1352":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"798":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1100":{"crate_id":4,"path":["scopeguard"],"kind":"module"},"823":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1125":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"848":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1150":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"873":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1175":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"898":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17":{"crate_id":0,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"1200":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"923":{"crate_id":1,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"344":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"42":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"948":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1225":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1250":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"671":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"973":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1275":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"696":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"998":{"crate_id":2,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"1300":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"721":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1023":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1325":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"746":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1048":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1350":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"771":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1073":{"crate_id":1,"path":["core","num","niche_types","NonZeroUsizeInner"],"kind":"struct"},"796":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1098":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"821":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1123":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"846":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1148":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"871":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1173":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"896":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1198":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"921":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1223":{"crate_id":1,"path":["core","fmt","FormattingOptions"],"kind":"struct"},"946":{"crate_id":1,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"367":{"crate_id":0,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"669":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"971":{"crate_id":1,"path":["core","num","niche_types","I64NotAllOnes"],"kind":"struct"},"90":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1248":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"694":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"996":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1273":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"719":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1021":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1298":{"crate_id":1,"path":["core","num","niche_types","NonZeroI16Inner"],"kind":"struct"},"1323":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"744":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1046":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1348":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"769":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1071":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"794":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"215":{"crate_id":0,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"1096":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"819":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1121":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"844":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1146":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"869":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1171":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"894":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1196":{"crate_id":1,"path":["core","num","niche_types","I32NotAllOnes"],"kind":"struct"},"919":{"crate_id":1,"path":["core","num","niche_types","NonZeroU64Inner"],"kind":"struct"},"1221":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"944":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1246":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"667":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"969":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"88":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1271":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"692":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"994":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1296":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"717":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1019":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1321":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"742":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1044":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1346":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"767":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1069":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"792":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1094":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"817":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"enum"},"1119":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"842":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1144":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"867":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1169":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"892":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"11":{"crate_id":0,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"1194":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"917":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"338":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"1219":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"942":{"crate_id":1,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"1244":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"665":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"967":{"crate_id":1,"path":["core","f128"],"kind":"primitive"},"1269":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"690":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"992":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1294":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"715":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1017":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1319":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"740":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1042":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1344":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"765":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1067":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"790":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1092":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"815":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1117":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"840":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1142":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"865":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1167":{"crate_id":2,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"890":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1192":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"915":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1217":{"crate_id":4,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"940":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1242":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"663":{"crate_id":1,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"965":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1267":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"688":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"990":{"crate_id":4,"path":["scopeguard","Always"],"kind":"enum"},"1292":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"713":{"crate_id":1,"path":["core","marker","variance","PhantomContravariant"],"kind":"struct"},"1015":{"crate_id":1,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"436":{"crate_id":0,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"738":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1040":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1317":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"763":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1065":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1342":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"788":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1090":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"813":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1115":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"838":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1140":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"863":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1165":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"888":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1190":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"913":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1215":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"334":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"938":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"359":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"661":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"963":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1240":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1265":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"686":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"988":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1290":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"711":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1013":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1315":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"736":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1038":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1340":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"761":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1063":{"crate_id":1,"path":["core","ops","range","IntoBounds"],"kind":"trait"},"786":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1088":{"crate_id":1,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"811":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1113":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"836":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1138":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"861":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1163":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"886":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1188":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"911":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"332":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"1213":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"936":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"55":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1238":{"crate_id":1,"path":["core","marker","variance","PhantomCovariant"],"kind":"struct"},"659":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"961":{"crate_id":1,"path":["core","num","niche_types","NonZeroIsizeInner"],"kind":"struct"},"80":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"684":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"986":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1263":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1288":{"crate_id":1,"path":["core","marker","variance","sealed","Sealed"],"kind":"trait"},"709":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"130":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1011":{"crate_id":1,"path":["core","intrinsics","disjoint_bitor"],"kind":"function"},"734":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1036":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1313":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1338":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"759":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1061":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"784":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1086":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"809":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1111":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"834":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1136":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"859":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1161":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"884":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1186":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"909":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1211":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"934":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1236":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"657":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"959":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"78":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"682":{"crate_id":1,"path":["core","marker","variance","PhantomContravariantLifetime"],"kind":"struct"},"984":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"405":{"crate_id":0,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"707":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1261":{"crate_id":1,"path":["core","str","pattern","Utf8Pattern"],"kind":"enum"},"1009":{"crate_id":1,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"1286":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"732":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1034":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1311":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"757":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1059":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"178":{"crate_id":0,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"1336":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"782":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1084":{"crate_id":1,"path":["core","num","niche_types","U64NotAllOnes"],"kind":"struct"},"807":{"crate_id":1,"path":["core","num","niche_types","NonZeroU128Inner"],"kind":"struct"},"1109":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"832":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1134":{"crate_id":1,"path":["core","num","niche_types","NonZeroU16Inner"],"kind":"struct"},"857":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1159":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"882":{"crate_id":1,"path":["core","marker","variance","PhantomInvariant"],"kind":"struct"},"1184":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"907":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"26":{"crate_id":0,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"1209":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"932":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"353":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"655":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"957":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"76":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"51":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"680":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"982":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1234":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"705":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1007":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1259":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1284":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"730":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1032":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1309":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"755":{"crate_id":1,"path":["core","random","RandomSource"],"kind":"trait"},"1057":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1334":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"780":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1082":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"805":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1107":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"830":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1132":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"855":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1157":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"880":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1182":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"905":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1207":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"930":{"crate_id":1,"path":["core","intrinsics","fallback","CarryingMulAdd"],"kind":"trait"},"1232":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"653":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"74":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"955":{"crate_id":1,"path":["core","num","niche_types","NonZeroI128Inner"],"kind":"struct"},"678":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"980":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1257":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1282":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"703":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1005":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1307":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"728":{"crate_id":1,"path":["core","random","Random"],"kind":"trait"},"1030":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1332":{"crate_id":1,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"753":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1055":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"778":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1080":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"803":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1105":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"828":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1130":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"853":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1155":{"crate_id":1,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"878":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1180":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"903":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1205":{"crate_id":1,"path":["core","core_simd","swizzle","shift_elements_left","Shift"],"kind":"struct"},"928":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1230":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"651":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"953":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1255":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"676":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"978":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1280":{"crate_id":1,"path":["core","slice","GetDisjointMutError"],"kind":"enum"},"701":{"crate_id":1,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"1003":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1305":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"726":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1028":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1330":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"751":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"172":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"1053":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"776":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1078":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"801":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1103":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"826":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1128":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"851":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1153":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"876":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1178":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"901":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1203":{"crate_id":1,"path":["core","iter"],"kind":"module"},"926":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"347":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"1228":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"951":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"70":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1253":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"674":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"95":{"crate_id":0,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"976":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"699":{"crate_id":1,"path":["core","num","niche_types","NonZeroI8Inner"],"kind":"struct"},"1001":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1278":{"crate_id":1,"path":["core","bstr","ByteStr"],"kind":"struct"},"1303":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"724":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1026":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1328":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"749":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1051":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"774":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1076":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"799":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1101":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"824":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1126":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"849":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1151":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"874":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1176":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"899":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1201":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"924":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1226":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"949":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"68":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"672":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"974":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"1251":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1276":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"697":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"999":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"118":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"722":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1024":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1301":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1326":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"747":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1049":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1351":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"772":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1074":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"797":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1099":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"822":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1124":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"847":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1149":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"872":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1174":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"897":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1199":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"922":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1224":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"66":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"947":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"670":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"972":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1249":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1274":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"695":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"997":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1299":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"720":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1022":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1324":{"crate_id":1,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"745":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1047":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1349":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"770":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1072":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"795":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1097":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"820":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1122":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"845":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1147":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"870":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1172":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"895":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"14":{"crate_id":0,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"1197":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"618":{"crate_id":0,"path":["lock_api","GuardSend"],"kind":"struct"},"920":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1222":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"945":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"64":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1247":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"668":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"970":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1272":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"693":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"995":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1297":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"718":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1020":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1322":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"743":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1045":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1347":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"768":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1070":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"793":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1095":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"818":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1120":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"843":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1145":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"868":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1170":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"893":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1195":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"918":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1220":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"943":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"364":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"666":{"crate_id":1,"path":["core","f16"],"kind":"primitive"},"968":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"87":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1245":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"691":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"993":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1270":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"716":{"crate_id":1,"path":["core","slice","GetDisjointMutIndex"],"kind":"trait"},"1018":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1295":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1320":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"741":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1043":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1345":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"766":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1068":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"791":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1093":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"816":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1118":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"841":{"crate_id":1,"path":["core","ptr","without_provenance"],"kind":"function"},"1143":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"866":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1168":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"891":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1193":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"916":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1218":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"941":{"crate_id":1,"path":["core","fmt","Sign"],"kind":"enum"},"1243":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"664":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"966":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1268":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"689":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"991":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1293":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"714":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"135":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1016":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1318":{"crate_id":1,"path":["core","num","niche_types","U32NotAllOnes"],"kind":"struct"},"739":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1041":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1343":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"764":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1066":{"crate_id":1,"path":["core","num","niche_types","NonZeroI64Inner"],"kind":"struct"},"789":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1091":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"814":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1116":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"839":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1141":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"864":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1166":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"889":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"8":{"crate_id":0,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"1191":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"914":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1216":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"939":{"crate_id":4,"path":["scopeguard","Strategy"],"kind":"trait"},"1241":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"58":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"662":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"83":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"964":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"687":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"989":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1266":{"crate_id":1,"path":["core","core_simd","swizzle","extract","Extract"],"kind":"struct"},"1291":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"712":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1014":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1316":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"737":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1039":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1341":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"762":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1064":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"787":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1089":{"crate_id":1,"path":["core","marker","variance","PhantomCovariantLifetime"],"kind":"struct"},"812":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"837":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1139":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"862":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1164":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"887":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1189":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"912":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1214":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"937":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1239":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"660":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"962":{"crate_id":1,"path":["core","marker","variance","PhantomInvariantLifetime"],"kind":"struct"},"1264":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"685":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"987":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1289":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"710":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1012":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1314":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"735":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1037":{"crate_id":1,"path":["core","core_simd","swizzle","shift_elements_right","Shift"],"kind":"struct"},"1339":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"760":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1062":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"785":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1087":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"810":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1112":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"835":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1137":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"860":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1162":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"885":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1187":{"crate_id":1,"path":["core","num","niche_types","UsizeNoHighBit"],"kind":"struct"},"910":{"crate_id":1,"path":["core","mem"],"kind":"module"},"29":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1212":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"633":{"crate_id":0,"path":["lock_api","GuardNoSend"],"kind":"struct"},"54":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"356":{"crate_id":0,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"658":{"crate_id":1,"path":["core","intrinsics","fallback","DisjointBitOr"],"kind":"trait"},"935":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"960":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1237":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"683":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"985":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1262":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"708":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1010":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1287":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1312":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"733":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1035":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1337":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"758":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"179":{"crate_id":0,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"1060":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"783":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1085":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"808":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1110":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"833":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"254":{"crate_id":0,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"1135":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"858":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1160":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"883":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1185":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"908":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1210":{"crate_id":1,"path":["core","marker","PointerLike"],"kind":"trait"},"933":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1235":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"656":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"958":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1260":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"681":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"983":{"crate_id":1,"path":["core","ops","range","OneSidedRangeBound"],"kind":"enum"},"1285":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"706":{"crate_id":1,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"1008":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"127":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"731":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1033":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1310":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1335":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"756":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1058":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"781":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1083":{"crate_id":1,"path":["core","fmt","DebugAsHex"],"kind":"enum"},"806":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1108":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"831":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1133":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"856":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1158":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"881":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"}},"external_crates":{"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":39}