{"root":"0:0:2478","crate_version":"0.8.11","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/event/source.rs","begin":[114,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Source","id":"0:159:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Source","id":"0:159:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:306:3361","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:165:2984","0:166:3012","0:167:3028"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3830-0:270:3180":{"id":"b:2:3830-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:144:958":{"id":"0:144:958","crate_id":0,"name":"into_iter","span":{"filename":"src/event/events.rs","begin":[198,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8295:165","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:28750":{"id":"2:13403:28750","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39544"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:27560":{"id":"2:13295:27560","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13296:27561"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2718-0:270:3180":{"id":"b:2:2718-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2720:3458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13281:336":{"id":"2:13281:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13282:26822","`u8`":"1:12384:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2995-0:274:3181":{"id":"b:2:2995-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110:2666":{"id":"0:110:2666","crate_id":0,"name":"is_writable","span":{"filename":"src/event/event.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Returns true if the event contains writable readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2995-0:246:2344":{"id":"b:2:2995-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2718-0:60:207":{"id":"b:2:2718-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2720:3458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:195":{"id":"0:195","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2804:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:196:482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2721-0:270:3180":{"id":"b:2:2721-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2723:27451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:148:1195":{"id":"0:148:1195","crate_id":0,"name":"next","span":{"filename":"src/event/events.rs","begin":[206,4],"end":[214,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8441:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:274:3181":{"id":"b:5:793-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:795:4011","5:796:4012","5:797:4013"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[81,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:3288","0:135:3289","0:136:3292","0:137:980","0:138:3299"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5686:15138":{"id":"5:5686:15138","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2718-0:62:2343":{"id":"b:2:2718-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2720:3458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2991-0:60:207":{"id":"b:2:2991-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2994:3946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3830-0:246:2344":{"id":"b:2:3830-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:2337":{"id":"0:212:2337","crate_id":0,"name":"event","span":{"filename":"src/sys/shell/selector.rs","begin":[78,0],"end":[78,13]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(clippy::trivially_copy_pass_by_ref)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"a:2:42262:3778-0:266:2345":{"id":"a:2:42262:3778-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42262:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:266:2345":{"id":"0:266:2345","crate_id":0,"name":"Waker","span":{"filename":"src/waker.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Waker allows cross-thread waking of [`Poll`].\n\nWhen created it will cause events with [`readable`] readiness and the\nprovided `token` if [`wake`] is called, possibly from another thread.\n\n[`Poll`]: struct.Poll.html\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`wake`]: struct.Waker.html#method.wake\n\n# Notes\n\n`Waker` events are only guaranteed to be delivered while the `Waker` value\nis alive.\n\nOnly a single `Waker` can be active per [`Poll`], if multiple threads need\naccess to the `Waker` it can be shared via for example an `Arc`. What\nhappens if multiple `Waker`s are registered with the same `Poll` is\nunspecified.\n\n# Implementation notes\n\nOn platforms that support kqueue this will use the `EVFILT_USER` event\nfilter, see [implementation notes of `Poll`] to see what platforms support\nkqueue. On Linux it uses [eventfd].\n\n[implementation notes of `Poll`]: struct.Poll.html#implementation-notes\n[eventfd]: https://man7.org/linux/man-pages/man2/eventfd.2.html\n\n# Examples\n\nWake a [`Poll`] instance from another thread.\n\n```ignore\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nuse std::thread;\nuse std::time::Duration;\nuse std::sync::Arc;\n\nuse mio::{Events, Token, Poll, Waker};\n\nconst WAKE_TOKEN: Token = Token(10);\n\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(2);\n\nlet waker = Arc::new(Waker::new(poll.registry(), WAKE_TOKEN)?);\n\n// We need to keep the Waker alive, so we'll create a clone for the\n// thread we create below.\nlet waker1 = waker.clone();\nlet handle = thread::spawn(move || {\n    // Working hard, or hardly working?\n    thread::sleep(Duration::from_millis(500));\n\n    // Now we'll wake the queue on the other thread.\n    waker1.wake().expect(\"unable to wake\");\n});\n\n// On our current thread we'll poll for events, without a timeout.\npoll.poll(&mut events, None)?;\n\n// After about 500 milliseconds we should be awoken by the other thread and\n// get a single event.\nassert!(!events.is_empty());\nlet waker_event = events.iter().next().unwrap();\nassert!(waker_event.is_readable());\nassert_eq!(waker_event.token(), WAKE_TOKEN);\n# handle.join().unwrap();\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:97","a:2:42262:3778-0:266:2345","a:2:32400:237-0:266:2345","a:2:32459:3591-0:266:2345","a:2:3249:3912-0:266:2345","a:2:42263:3777-0:266:2345","a:2:3214:247-0:266:2345","b:2:2995-0:266:2345","b:2:3006-0:266:2345","b:2:2718-0:266:2345","b:2:3830-0:266:2345","b:2:2721-0:266:2345","b:2:2991-0:266:2345","b:2:3001-0:266:2345","0:268"]}}},"2:13348:27572":{"id":"2:13348:27572","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[202,0],"end":[230,1]},"visibility":"default","docs":"When the [alternate] flag is enabled this will print platform specific\ndetails, for example the fields of the `kevent` structure on platforms that\nuse `kqueue(2)`. Note however that the output of this implementation is\n**not** consider a part of the stable API.\n\n[alternate]: fmt::Formatter::alternate","links":{"fmt::Formatter::alternate":"2:10438:3254"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:8299-0:274:3181":{"id":"b:2:8299-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8441:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:8301:173","2:8302:3301","2:8303:958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"2:13395:35108":{"id":"2:13395:35108","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12921:136","`FromStr`":"2:12920:3819"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42301:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12920:3819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12920:3819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:35098":{"id":"2:13366:35098","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2991-0:182:2342":{"id":"b:2:2991-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2994:3946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3006-0:182:2342":{"id":"b:2:3006-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3009:137","2:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:199":{"id":"0:36:199","crate_id":0,"name":"Output","span":{"filename":"src/interest.rs","begin":[128,4],"end":[128,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:84:804":{"id":"0:84:804","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[716,4],"end":[718,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:8303:958":{"id":"2:8303:958","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:27568":{"id":"2:13342:27568","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902","str::rsplitn":"2:13345:27570"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44153:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:27475":{"id":"2:13380:27475","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:8169":{"id":"2:13298:8169","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12365:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44019:8148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2344":{"id":"0:246:2344","crate_id":0,"name":"Token","span":{"filename":"src/token.rs","begin":[132,0],"end":[132,28]},"visibility":"public","docs":"Associates readiness events with [`event::Source`]s.\n\n`Token` is a wrapper around `usize` and is used as an argument to\n[`Registry::register`] and [`Registry::reregister`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[`Registry::register`]: struct.Registry.html#method.register\n[`Registry::reregister`]: struct.Registry.html#method.reregister\n\n# Example\n\nUsing `Token` to track which socket generated the event. In this example,\n`HashMap` is used, but usually something like [`slab`] is better.\n\n[`slab`]: https://crates.io/crates/slab\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Interest, Poll, Token};\nuse mio::net::TcpListener;\n\nuse std::thread;\nuse std::io::{self, Read};\nuse std::collections::HashMap;\n\n// After this number of sockets is accepted, the server will shutdown.\nconst MAX_SOCKETS: usize = 32;\n\n// Pick a token that will not be used by any other socket and use that one\n// for the listener.\nconst LISTENER: Token = Token(1024);\n\n// Used to store the sockets.\nlet mut sockets = HashMap::new();\n\n// This is used to generate a unique token for a socket\nlet mut next_socket_index = 0;\n\n// The `Poll` instance\nlet mut poll = Poll::new()?;\n\n// Tcp listener\nlet mut listener = TcpListener::bind(\"127.0.0.1:0\".parse()?)?;\n\n// Register the listener\npoll.registry().register(&mut listener, LISTENER, Interest::READABLE)?;\n\n// Spawn a thread that will connect a bunch of sockets then close them\nlet addr = listener.local_addr()?;\nthread::spawn(move || {\n    use std::net::TcpStream;\n\n    // +1 here is to connect an extra socket to signal the socket to close\n    for _ in 0..(MAX_SOCKETS+1) {\n        // Connect then drop the socket\n        let _ = TcpStream::connect(addr).unwrap();\n    }\n});\n\n// Event storage\nlet mut events = Events::with_capacity(1024);\n\n// Read buffer, this will never actually get filled\nlet mut buf = [0; 256];\n\n// The main event loop\nloop {\n    // Wait for events\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        match event.token() {\n            LISTENER => {\n                // Perform operations in a loop until `WouldBlock` is\n                // encountered.\n                loop {\n                    match listener.accept() {\n                        Ok((mut socket, _)) => {\n                            // Shutdown the server\n                            if next_socket_index == MAX_SOCKETS {\n                                return Ok(());\n                            }\n\n                            // Get the token for the socket\n                            let token = Token(next_socket_index);\n                            next_socket_index += 1;\n\n                            // Register the new socket w/ poll\n                            poll.registry().register(&mut socket, token, Interest::READABLE)?;\n\n                            // Store the socket\n                            sockets.insert(token, socket);\n                        }\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop accepting\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n            token => {\n                // Always operate in a loop\n                loop {\n                    match sockets.get_mut(&token).unwrap().read(&mut buf) {\n                        Ok(0) => {\n                            // Socket is closed, remove it from the map\n                            sockets.remove(&token);\n                            break;\n                        }\n                        // Data is not actually sent in this example\n                        Ok(_) => unreachable!(),\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop reading\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:248:1978"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42262:3778-0:246:2344","a:2:32400:237-0:246:2344","a:2:32459:3591-0:246:2344","a:2:3249:3912-0:246:2344","a:2:42263:3777-0:246:2344","a:2:3214:247-0:246:2344","b:2:2995-0:246:2344","b:2:3006-0:246:2344","b:2:2718-0:246:2344","b:2:3830-0:246:2344","b:2:2721-0:246:2344","b:2:2991-0:246:2344","b:2:3001-0:246:2344","b:5:793-0:246:2344","0:252","0:254","0:257","0:261","0:250","0:259","0:263","0:249","0:255","0:89"]}}},"b:2:3830-0:182:2342":{"id":"b:2:3830-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167:3028":{"id":"0:167:3028","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:796:4012":{"id":"5:796:4012","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:3012":{"id":"0:75:3012","crate_id":0,"name":"reregister","span":{"filename":"src/poll.rs","begin":[615,4],"end":[625,5]},"visibility":"public","docs":"Re-register an [`event::Source`] with the `Poll` instance.\n\nRe-registering an event source allows changing the details of the\nregistration. Specifically, it allows updating the associated `token`\nand `interests` specified in previous `register` and `reregister` calls.\n\nThe `reregister` arguments fully override the previous values. In other\nwords, if a socket is registered with [`readable`] interest and the call\nto `reregister` specifies [`writable`], then read interest is no longer\nrequested for the handle.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nSee the [`register`] documentation for details about the function\narguments and see the [`struct`] docs for a high level overview of\npolling.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\n\nlet poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`, requesting readable\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\n// Reregister the socket specifying write interest instead. Even though\n// the token is the same it must be specified.\npoll.registry().reregister(\n    &mut socket,\n    Token(0),\n    Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n[`event::Source`]: ./event/trait.Source.html\n[`struct`]: struct.Poll.html\n[`register`]: struct.Registry.html#method.register\n[`readable`]: ./event/struct.Event.html#is_readable\n[`writable`]: ./event/struct.Event.html#is_writable","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2934":{"id":"0:86:2934","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[727,4],"end":[729,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4922:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:875":{"id":"0:264:875","crate_id":0,"name":"hash","span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10610:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3249:3912-0:182:2342":{"id":"a:2:3249:3912-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3249:3912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3214:247-0:131:2341":{"id":"a:2:3214:247-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:160:2984":{"id":"0:160:2984","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[83,4],"end":[88,24]},"visibility":"default","docs":"Register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use [`Registry::register`]\ninstead. Implementors should handle registration by delegating the call\nto another `Source` type.\n\n[`Registry::register`]: ../struct.Registry.html#method.register","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2995-0:62:2343":{"id":"b:2:2995-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42263:3777-0:246:2344":{"id":"a:2:42263:3777-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42263:3777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32459:3591-0:131:2341":{"id":"a:2:32459:3591-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32459:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32459:3591-0:62:2343":{"id":"a:2:32459:3591-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32459:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3214:247-0:62:2343":{"id":"a:2:3214:247-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13283:2650":{"id":"2:13283:2650","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42170:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178-0:246:2344":{"id":"0:178-0:246:2344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"token::Token","name":"Token","id":"0:246:2344","glob":false}}},"2:13300:7605":{"id":"2:13300:7605","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44035:4119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:3991":{"id":"2:13319:3991","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42170:191","prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:28743":{"id":"2:13398:28743","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40069:14977","Self::is_ascii":"2:13397:28742"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40069:14977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:3233":{"id":"0:113:3233","crate_id":0,"name":"is_write_closed","span":{"filename":"src/event/event.rs","begin":[128,4],"end":[130,5]},"visibility":"public","docs":"Returns true if the event contains write closed readiness.\n\n# Notes\n\nOn [epoll] this is essentially a check for `EPOLLHUP` flag as the\nlocal stream shutting down its write half does not trigger this event.\n\nOn [kqueue] the local stream shutting down the write half of its\nsocket will trigger this event.\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when write half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | only `EPOLLERR`, or |\n|               | `EPOLLOUT` and `EPOLLERR` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:3012":{"id":"0:161:3012","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[97,4],"end":[102,24]},"visibility":"default","docs":"Re-register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::reregister`] instead. Implementors should handle\nre-registration by either delegating the call to another `Source` type.\n\n[`Registry::reregister`]: ../struct.Registry.html#method.reregister","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13402:28749":{"id":"2:13402:28749","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39544"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:273:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5689:35804":{"id":"5:5689:35804","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:3012":{"id":"0:166:3012","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[127,4],"end":[134,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3249:3912-0:266:2345":{"id":"a:2:3249:3912-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3249:3912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:108:2335":{"id":"0:108:2335","crate_id":0,"name":"token","span":{"filename":"src/event/event.rs","begin":[23,4],"end":[25,5]},"visibility":"public","docs":"Returns the event's token.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:3471":{"id":"2:13354:3471","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12960:14902","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::rmatches":"2:13357:35095"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44253:8163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[143,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:41:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37:410":{"id":"0:37:410","crate_id":0,"name":"bitor","span":{"filename":"src/interest.rs","begin":[131,4],"end":[133,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"Self"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:411":{"id":"0:39:411","crate_id":0,"name":"bitor_assign","span":{"filename":"src/interest.rs","begin":[138,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3006-0:266:2345":{"id":"b:2:3006-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3009:137","2:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13294:27557":{"id":"2:13294:27557","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13293:27556","str::split_at_mut_checked":"2:13296:27561"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:27532":{"id":"2:13287:27532","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13345:27570":{"id":"2:13345:27570","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12365:471","str::splitn":"2:13342:27568","self::pattern":"2:12960:14902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44171:8158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1319":{"id":"0:67:1319","crate_id":0,"name":"poll","span":{"filename":"src/poll.rs","begin":[425,4],"end":[427,5]},"visibility":"public","docs":"Wait for readiness events\n\nBlocks the current thread and waits for readiness events for any of the\n[`event::Source`]s that have been registered with this `Poll` instance.\nThe function will block until either at least one readiness event has\nbeen received or `timeout` has elapsed. A `timeout` of `None` means that\n`poll` will block until a readiness event has been received.\n\nThe supplied `events` will be cleared and newly received readiness events\nwill be pushed onto the end. At most `events.capacity()` events will be\nreturned. If there are further pending readiness events, they will be\nreturned on the next call to `poll`.\n\nA single call to `poll` may result in multiple readiness events being\nreturned for a single event source. For example, if a TCP socket becomes\nboth readable and writable, it may be possible for a single readiness\nevent to be returned with both [`readable`] and [`writable`] readiness\n**OR** two separate events may be returned, one with [`readable`] set\nand one with [`writable`] set.\n\nNote that the `timeout` will be rounded up to the system clock\ngranularity (usually 1ms), and kernel scheduling delays mean that\nthe blocking interval may be overrun by a small amount.\n\nSee the [struct] level documentation for a higher level discussion of\npolling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`readable`]: struct.Interest.html#associatedconstant.READABLE\n[`writable`]: struct.Interest.html#associatedconstant.WRITABLE\n[struct]: struct.Poll.html\n[`iter`]: ./event/struct.Events.html#method.iter\n\n# Notes\n\nThis returns any errors without attempting to retry, previous versions\nof Mio would automatically retry the poll call if it was interrupted\n(if `EINTR` was returned).\n\nCurrently if the `timeout` elapses without any readiness events\ntriggering this will return `Ok(())`. However we're not guaranteeing\nthis behaviour as this depends on the OS.\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{TcpListener, SocketAddr};\nuse std::thread;\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = TcpListener::bind(addr)?;\nlet addr = server.local_addr()?.clone();\n\n// Spawn a thread to accept the socket\nthread::spawn(move || {\n    let _ = server.accept();\n});\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(addr)?;\n\n// Register the stream with `Poll`\npoll.registry().register(\n    &mut stream,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n[struct]: #","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["events",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44700:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10602:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:875"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2995-0:60:207":{"id":"b:2:2995-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100:3177":{"id":"0:100:3177","crate_id":0,"name":"wake","span":{"filename":"src/waker.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Wake up the [`Poll`] associated with this `Waker`.\n\n[`Poll`]: struct.Poll.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2668":{"id":"0:115:2668","crate_id":0,"name":"is_aio","span":{"filename":"src/event/event.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns true if the event contains AIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms support AIO.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | *Not supported* |\n| [kqueue]<sup>1</sup> | `EVFILT_AIO` |\n\n1: Only supported on DragonFly BSD, FreeBSD, iOS and macOS.\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2991-0:274:3181":{"id":"b:2:2991-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2994:3946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:172-0:159:2988":{"id":"0:172-0:159:2988","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[10,0],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::source::Source","name":"Source","id":"0:159:2988","glob":false}}},"a:2:42262:3778-0:270:3180":{"id":"a:2:42262:3778-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42262:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13360:35096":{"id":"2:13360:35096","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12960:14902","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::rmatch_indices":"2:13363:35097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44199:8160","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2664":{"id":"0:30:2664","crate_id":0,"name":"is_readable","span":{"filename":"src/interest.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns true if the value includes readable readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:699":{"id":"0:188:699","crate_id":0,"name":"eq","span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[82,0],"end":[96,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:1181","0:100:3177"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:143:3301":{"id":"0:143:3301","crate_id":0,"name":"IntoIter","span":{"filename":"src/event/events.rs","begin":[196,4],"end":[196,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}},"a:2:32459:3591-0:274:3181":{"id":"a:2:32459:3591-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32459:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2718-0:246:2344":{"id":"b:2:2718-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2720:3458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13323:3952":{"id":"2:13323:3952","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42170:191","prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:27561":{"id":"2:13296:27561","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13295:27560"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[203,0],"end":[224,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["enumerate","zip","next_chunk","gt","partial_cmp_by","cmp","cloned","try_find","try_for_each","min_by","try_collect","flat_map","peekable","intersperse","last","eq_by","cycle","position","fold","min_by_key","collect_into","flatten","skip_while","intersperse_with","advance_by","is_sorted","map","array_chunks","rposition","skip","reduce","max","partition","collect","map_windows","take_while","for_each","nth","all","is_sorted_by","sum","rev","try_reduce","max_by","partition_in_place","fuse","any","map_while","count","filter","eq","step_by","is_sorted_by_key","product","unzip","find","max_by_key","is_partitioned","inspect","ne","take","filter_map","chain","__iterator_get_unchecked","size_hint","cmp_by","le","copied","find_map","ge","try_fold","min","by_ref","partial_cmp","scan","lt"],"trait":{"name":"Iterator","id":"2:8441:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:147:173","0:148:1195","0:149:3303","0:150:577"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:3224":{"id":"0:112:3224","crate_id":0,"name":"is_read_closed","span":{"filename":"src/event/event.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns true if the event contains read closed readiness.\n\n# Notes\n\nRead closed readiness can be expected after any of the following have\noccurred:\n* The local stream has shutdown the read half of its socket\n* The local stream has shutdown both the read half and the write half\n  of its socket\n* The peer stream has shutdown the write half its socket; this sends a\n  `FIN` packet that has been received by the local stream\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when read half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | `EPOLLIN` and `EPOLLRDHUP` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2721-0:274:3181":{"id":"b:2:2721-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2723:27451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13357:35095":{"id":"2:13357:35095","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12960:14902","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::matches":"2:13354:3471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44271:8164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:3181":{"id":"0:274:3181","crate_id":0,"name":"Iter","span":{"filename":"src/event/events.rs","begin":[76,0],"end":[79,1]},"visibility":"public","docs":"[`Events`] iterator.\n\nThis struct is created by the [`iter`] method on [`Events`].\n\n[`Events`]: struct.Events.html\n[`iter`]: struct.Events.html#method.iter\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:42262:3778-0:274:3181","a:2:32400:237-0:274:3181","a:2:32459:3591-0:274:3181","a:2:3249:3912-0:274:3181","a:2:42263:3777-0:274:3181","a:2:3214:247-0:274:3181","b:2:8299-0:274:3181","b:2:2995-0:274:3181","b:2:3006-0:274:3181","b:2:2718-0:274:3181","b:2:3830-0:274:3181","b:2:2721-0:274:3181","b:2:2991-0:274:3181","b:2:3001-0:274:3181","b:5:793-0:274:3181","0:278","0:281","0:145"]}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2768:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2810:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:260:1298"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:269:804":{"id":"0:269:804","crate_id":0,"name":"fmt","span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3249:3912-0:60:207":{"id":"a:2:3249:3912-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3249:3912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:246:2344":{"id":"b:5:793-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:4011","5:796:4012","5:797:4013"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3009:137":{"id":"2:3009:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32324:5814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2991-0:62:2343":{"id":"b:2:2991-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2994:3946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32459:3591-0:246:2344":{"id":"a:2:32459:3591-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32459:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2718-0:131:2341":{"id":"b:2:2718-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2720:3458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:2664":{"id":"0:109:2664","crate_id":0,"name":"is_readable","span":{"filename":"src/event/event.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Returns true if the event contains readable readiness.\n\n# Notes\n\nOut-of-band (OOB) data also triggers readable events. But must\napplication don't actually read OOB data, this could leave an\napplication open to a Denial-of-Service (Dos) attack, see\n<https://github.com/sandstorm-io/sandstorm-website/blob/58f93346028c0576e8147627667328eaaf4be9fa/_posts/2015-04-08-osx-security-bug.md>.\nHowever because Mio uses edge-triggers it will not result in an infinite\nloop as described in the article above.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3006-0:246:2344":{"id":"b:2:3006-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3009:137","2:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[269,0],"end":[428,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2857","0:67:1319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32400:237-0:182:2342":{"id":"a:2:32400:237-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3006-0:274:3181":{"id":"b:2:3006-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3009:137","2:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,40],"end":[131,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2773:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13271:1000":{"id":"2:13271:1000","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12365:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:1298":{"id":"0:194:1298","crate_id":0,"name":"partial_cmp","span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31160:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:482":{"id":"0:196:482","crate_id":0,"name":"cmp","span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31160:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2343":{"id":"0:62:2343","crate_id":0,"name":"Registry","span":{"filename":"src/poll.rs","begin":[262,0],"end":[267,1]},"visibility":"public","docs":"Registers I/O resources.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:72","a:2:42262:3778-0:62:2343","a:2:32400:237-0:62:2343","a:2:32459:3591-0:62:2343","a:2:3249:3912-0:62:2343","a:2:42263:3777-0:62:2343","a:2:3214:247-0:62:2343","b:2:2995-0:62:2343","b:2:3006-0:62:2343","b:2:2718-0:62:2343","b:2:3830-0:62:2343","b:2:2721-0:62:2343","b:2:2991-0:62:2343","b:2:3001-0:62:2343","0:85","0:83"]}}},"0:116:2670":{"id":"0:116:2670","crate_id":0,"name":"is_lio","span":{"filename":"src/event/event.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns true if the event contains LIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but only FreeBSD supports LIO. On\nFreeBSD this method checks the `EVFILT_LIO` flag.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:3288":{"id":"0:134:3288","crate_id":0,"name":"with_capacity","span":{"filename":"src/event/events.rs","begin":[92,4],"end":[96,5]},"visibility":"public","docs":"Return a new `Events` capable of holding up to `capacity` events.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13313:27575":{"id":"2:13313:27575","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:35101":{"id":"2:13372:35101","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:26822":{"id":"2:13282:26822","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12384:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:35106":{"id":"2:13389:35106","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3214:247-0:274:3181":{"id":"a:2:3214:247-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13399:28745":{"id":"2:13399:28745","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3214:247-0:246:2344":{"id":"a:2:3214:247-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2995-0:182:2342":{"id":"b:2:2995-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69:2934":{"id":"0:69:2934","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[436,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4922:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2984":{"id":"0:73:2984","crate_id":0,"name":"register","span":{"filename":"src/poll.rs","begin":[547,4],"end":[557,5]},"visibility":"public","docs":"Register an [`event::Source`] with the `Poll` instance.\n\nOnce registered, the `Poll` instance will monitor the event source for\nreadiness state changes. When it notices a state change, it will return\na readiness event for the handle the next time [`poll`] is called.\n\nSee [`Poll`] docs for a high level overview.\n\n# Arguments\n\n`source: &mut S: event::Source`: This is the source of events that the\n`Poll` instance should monitor for readiness state changes.\n\n`token: Token`: The caller picks a token to associate with the socket.\nWhen [`poll`] returns an event for the handle, this token is included.\nThis allows the caller to map the event to its source. The token\nassociated with the `event::Source` can be changed at any time by\ncalling [`reregister`].\n\nSee documentation on [`Token`] for an example showing how to pick\n[`Token`] values.\n\n`interest: Interest`: Specifies which operations `Poll` should monitor\nfor readiness. `Poll` will only return readiness events for operations\nspecified by this argument.\n\nIf a socket is registered with readable interest and the socket becomes\nwritable, no event will be returned from [`poll`].\n\nThe readiness interest for an `event::Source` can be changed at any time\nby calling [`reregister`].\n\n# Notes\n\nCallers must ensure that if a source being registered with a `Poll`\ninstance was previously registered with that `Poll` instance, then a\ncall to [`deregister`] has already occurred. Consecutive calls to\n`register` is unspecified behavior.\n\nUnless otherwise specified, the caller should assume that once an event\nsource is registered with a `Poll` instance, it is bound to that `Poll`\ninstance for the lifetime of the event source. This remains true even\nif the event source is deregistered from the poll instance using\n[`deregister`].\n\n[`event::Source`]: ./event/trait.Source.html\n[`poll`]: struct.Poll.html#method.poll\n[`reregister`]: struct.Registry.html#method.reregister\n[`deregister`]: struct.Registry.html#method.deregister\n[`Token`]: struct.Token.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::{Duration, Instant};\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\nlet mut events = Events::with_capacity(1024);\nlet start = Instant::now();\nlet timeout = Duration::from_millis(500);\n\nloop {\n    let elapsed = start.elapsed();\n\n    if elapsed >= timeout {\n        // Connection timed out\n        return Ok(());\n    }\n\n    let remaining = timeout - elapsed;\n    poll.poll(&mut events, Some(remaining))?;\n\n    for event in &events {\n        if event.token() == Token(0) {\n            // Something (probably) happened on the socket.\n            return Ok(());\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3249:3912-0:270:3180":{"id":"a:2:3249:3912-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3249:3912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2991-0:131:2341":{"id":"b:2:2991-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2994:3946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13292:35091":{"id":"2:13292:35091","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12371:1726","crate::ops::IndexMut":"2:3492:4048","str::slice_unchecked":"2:13291:35090"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:3303":{"id":"0:149:3303","crate_id":0,"name":"size_hint","span":{"filename":"src/event/events.rs","begin":[216,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32402:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13363:35097":{"id":"2:13363:35097","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12960:14902","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::match_indices":"2:13360:35096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44217:8161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:28742":{"id":"2:13397:28742","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:475":{"id":"0:192:475","crate_id":0,"name":"clone","span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:3289":{"id":"0:135:3289","crate_id":0,"name":"capacity","span":{"filename":"src/event/events.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Returns the number of `Event` values that `self` can hold.\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:27574":{"id":"2:13310:27574","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:3209":{"id":"0:111:3209","crate_id":0,"name":"is_error","span":{"filename":"src/event/event.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":"Returns true if the event contains error readiness.\n\nError events occur when the socket enters an error state. In this case,\nthe socket will also receive a readable or writable event. Reading or\nwriting to the socket will result in an error.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\nerror event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLERR`      |\n| [kqueue]      | `EV_ERROR` and `EV_EOF` with `fflags` set to `0`. |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32459:3591-0:182:2342":{"id":"a:2:32459:3591-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32459:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:797:4013":{"id":"5:797:4013","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3006-0:62:2343":{"id":"b:2:3006-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3009:137","2:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2721-0:266:2345":{"id":"b:2:2721-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2723:27451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:138:3299":{"id":"0:138:3299","crate_id":0,"name":"clear","span":{"filename":"src/event/events.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Clearing all `Event` values from container explicitly.\n\n# Notes\n\nEvents are cleared before every `poll`, so it is not required to call\nthis manually.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n// Clear all events.\nevents.clear();\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:3028":{"id":"0:162:3028","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[111,4],"end":[111,68]},"visibility":"default","docs":"Deregister `self` from the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::deregister`] instead. Implementors should handle\nderegistration by delegating the call to another `Source` type.\n\n[`Registry::deregister`]: ../struct.Registry.html#method.deregister","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:5700:35806":{"id":"5:5700:35806","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:35087":{"id":"2:13274:35087","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256:699":{"id":"0:256:699","crate_id":0,"name":"eq","span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173-0:131:2341":{"id":"0:173-0:131:2341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,0],"end":[65,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"event::Events","name":"Events","id":"0:131:2341","glob":false}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[715,0],"end":[719,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:29:2662":{"id":"0:29:2662","crate_id":0,"name":"remove","span":{"filename":"src/interest.rs","begin":[92,4],"end":[94,5]},"visibility":"public","docs":"Removes `other` `Interest` from `self`.\n\nReturns `None` if the set would be empty after removing `other`.\n\n```\nuse mio::Interest;\n\nconst RW_INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n\n// As long a one interest remain this will return `Some`.\nlet w_interest = RW_INTERESTS.remove(Interest::READABLE).unwrap();\nassert!(!w_interest.is_readable());\nassert!(w_interest.is_writable());\n\n// Removing all interests from the set will return `None`.\nassert_eq!(w_interest.remove(Interest::WRITABLE), None);\n\n// Its also possible to remove multiple interests at once.\nassert_eq!(RW_INTERESTS.remove(RW_INTERESTS), None);\n```","links":{},"attrs":["#[must_use =\n\"this returns the result of the operation, without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:60:207":{"id":"b:2:3001-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:3033":{"id":"0:79:3033","crate_id":0,"name":"try_clone","span":{"filename":"src/poll.rs","begin":[690,4],"end":[696,5]},"visibility":"public","docs":"Creates a new independently owned `Registry`.\n\nEvent sources registered with this `Registry` will be registered with\nthe original `Registry` and `Poll` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2721-0:246:2344":{"id":"b:2:2721-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2723:27451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2991-0:270:3180":{"id":"b:2:2991-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2994:3946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32459:3591-0:270:3180":{"id":"a:2:32459:3591-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32459:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:273:475":{"id":"0:273:475","crate_id":0,"name":"clone","span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:192:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:8301:173":{"id":"2:8301:173","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:8441:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"2:2723:27451":{"id":"2:2723:27451","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[136,0],"end":[141,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOrAssign","id":"2:38366:2674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:39:411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:25:2626":{"id":"0:25:2626","crate_id":0,"name":"READABLE","span":{"filename":"src/interest.rs","begin":[29,4],"end":[29,91]},"visibility":"public","docs":"Returns a `Interest` set representing readable interests.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:270:3180":{"id":"0:270:3180","crate_id":0,"name":"Event","span":{"filename":"src/event/event.rs","begin":[17,0],"end":[19,1]},"visibility":"public","docs":"A readiness event.\n\n`Event` is a readiness state paired with a [`Token`]. It is returned by\n[`Poll::poll`].\n\nFor more documentation on polling and events, see [`Poll`].\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n[`Token`]: ../struct.Token.html","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:107","a:2:42262:3778-0:270:3180","a:2:32400:237-0:270:3180","a:2:32459:3591-0:270:3180","a:2:3249:3912-0:270:3180","a:2:42263:3777-0:270:3180","a:2:3214:247-0:270:3180","b:2:2995-0:270:3180","b:2:3006-0:270:3180","b:2:2718-0:270:3180","b:2:3830-0:270:3180","b:2:2721-0:270:3180","b:2:2991-0:270:3180","b:2:3001-0:270:3180","b:5:793-0:270:3180","0:272","0:118"]}}},"0:152:804":{"id":"0:152:804","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[227,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2720:3458":{"id":"2:2720:3458","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2355":{"id":"0:180:2355","crate_id":0,"name":"features","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,16]},"visibility":"public","docs":"# Mio's optional features.\n\nThis document describes the available features in Mio.\n\n## `os-poll` (disabled)\n\nMio by default provides only a shell implementation that `panic!`s the\nmoment it is actually run. To run it requires OS support, this is\nenabled by activating the `os-poll` feature.\n\nThis makes `Poll`, `Registry` and `Waker` functional.\n\n## `os-ext` (disabled)\n\n`os-ext` enables additional OS specific facilities. These facilities can\nbe found in the `unix` and `windows` module.\n\n## Network types (disabled)\n\nThe `net` feature enables networking primitives in the `net` module.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"b:2:2721-0:182:2342":{"id":"b:2:2721-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2723:27451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3214:247-0:182:2342":{"id":"a:2:3214:247-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:137:980":{"id":"0:137:980","crate_id":0,"name":"iter","span":{"filename":"src/event/events.rs","begin":[148,4],"end":[153,5]},"visibility":"public","docs":"Returns an iterator over the `Event` values.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177-0:62:2343":{"id":"0:177-0:62:2343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,21],"end":[67,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"poll::Registry","name":"Registry","id":"0:62:2343","glob":false}}},"0:176-0:60:207":{"id":"0:176-0:60:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,15],"end":[67,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"poll::Poll","name":"Poll","id":"0:60:207","glob":false}}},"2:13280:35089":{"id":"2:13280:35089","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:35092":{"id":"2:13308:35092","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44313:8165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179-0:266:2345":{"id":"0:179-0:266:2345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[70,0],"end":[70,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"wasi\"))]"],"deprecation":null,"inner":{"import":{"source":"waker::Waker","name":"Waker","id":"0:266:2345","glob":false}}},"a:2:32400:237-0:266:2345":{"id":"a:2:32400:237-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42263:3777-0:131:2341":{"id":"a:2:42263:3777-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42263:3777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:1181":{"id":"0:98:1181","crate_id":0,"name":"new","span":{"filename":"src/waker.rs","begin":[84,4],"end":[88,5]},"visibility":"public","docs":"Create a new `Waker`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32400:237-0:60:207":{"id":"a:2:32400:237-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42263:3777-0:62:2343":{"id":"a:2:42263:3777-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42263:3777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:28:296":{"id":"0:28:296","crate_id":0,"name":"add","span":{"filename":"src/interest.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":"Add together two `Interest`.\n\nThis does the same thing as the `BitOr` implementation, but is a\nconstant function.\n\n```\nuse mio::Interest;\n\nconst INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n# fn silent_dead_code_warning(_: Interest) { }\n# silent_dead_code_warning(INTERESTS)\n```","links":{},"attrs":["#[allow(clippy::should_implement_trait)]","#[must_use =\n\"this returns the result of the operation, without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:182:2342":{"id":"b:2:3001-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:270:3180":{"id":"b:5:793-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:4011","5:796:4012","5:797:4013"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13272:3292":{"id":"2:13272:3292","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:246:2344":{"id":"b:2:3001-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2810:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:194:1298"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:2672":{"id":"0:34:2672","crate_id":0,"name":"is_priority","span":{"filename":"src/interest.rs","begin":[122,4],"end":[124,5]},"visibility":"public","docs":"Returns true if `Interest` contains priority readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:27533":{"id":"2:13289:27533","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:62:2343":{"id":"b:2:3001-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13370:35100":{"id":"2:13370:35100","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:35105":{"id":"2:13386:35105","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:4144":{"id":"5:5702:4144","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:2337":{"id":"0:101:2337","crate_id":0,"name":"event","span":{"filename":"src/event/mod.rs","begin":[1,0],"end":[10,29]},"visibility":"public","docs":"Readiness event types and utilities.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:168-0:270:3180","0:170-0:131:2341","0:171-0:274:3181","0:172-0:159:2988"],"is_stripped":false}}},"0:41:804":{"id":"0:41:804","crate_id":0,"name":"fmt","span":{"filename":"src/interest.rs","begin":[144,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[441,0],"end":[445,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:165:2984":{"id":"0:165:2984","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[118,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42262:3778-0:131:2341":{"id":"a:2:42262:3778-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42262:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3830-0:274:3181":{"id":"b:2:3830-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13291:35090":{"id":"2:13291:35090","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12371:1726","str::slice_mut_unchecked":"2:13292:35091","crate::ops::Index":"2:39714:4047"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:27573":{"id":"2:13351:27573","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,9],"end":[131,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3209:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13309:33610":{"id":"2:13309:33610","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44341:8168","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42263:3777-0:274:3181":{"id":"a:2:42263:3777-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42263:3777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32400:237-0:246:2344":{"id":"a:2:32400:237-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3214:247-0:266:2345":{"id":"a:2:3214:247-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3249:3912-0:274:3181":{"id":"a:2:3249:3912-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3249:3912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[194,0],"end":[201,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:142:173","0:143:3301","0:144:958"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5703:28817":{"id":"5:5703:28817","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13400:28746"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:28814":{"id":"2:13279:28814","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12507:14903"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13316:27576":{"id":"2:13316:27576","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:804":{"id":"0:119:804","crate_id":0,"name":"fmt","span":{"filename":"src/event/event.rs","begin":[203,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:35805":{"id":"5:5692:35805","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:28746":{"id":"2:13400:28746","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:28747":{"id":"2:13401:28747","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42263:3777-0:266:2345":{"id":"a:2:42263:3777-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42263:3777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2718-0:266:2345":{"id":"b:2:2718-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2720:3458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3249:3912-0:131:2341":{"id":"a:2:3249:3912-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3249:3912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13392:35107":{"id":"2:13392:35107","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[726,0],"end":[730,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(all(unix, not(mio_unsupported_force_poll_poll),\nnot(any(target_os = \"solaris\", target_os = \"vita\"))))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4923:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:2934"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:3292":{"id":"0:136:3292","crate_id":0,"name":"is_empty","span":{"filename":"src/event/events.rs","begin":[120,4],"end":[122,5]},"visibility":"public","docs":"Returns `true` if `self` contains no `Event` values.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert!(events.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:27564":{"id":"2:13330:27564","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12775:8081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174-0:182:2342":{"id":"0:174-0:182:2342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,0],"end":[66,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"interest::Interest","name":"Interest","id":"0:182:2342","glob":false}}},"b:2:2721-0:131:2341":{"id":"b:2:2721-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2723:27451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:251:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3249:3912-0:246:2344":{"id":"a:2:3249:3912-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3249:3912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:77:3028":{"id":"0:77:3028","crate_id":0,"name":"deregister","span":{"filename":"src/poll.rs","begin":[678,4],"end":[684,5]},"visibility":"public","docs":"Deregister an [`event::Source`] with the `Poll` instance.\n\nWhen an event source is deregistered, the `Poll` instance will no longer\nmonitor it for readiness state changes. Deregistering clears up any\ninternal resources needed to track the handle.  After an explicit call\nto this method completes, it is guaranteed that the token previously\nregistered to this handle will not be returned by a future poll, so long\nas a happens-before relationship is established between this call and\nthe poll.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nA handle can be passed back to `register` after it has been\nderegistered; however, it must be passed back to the **same** `Poll`\ninstance, otherwise the behavior is unspecified.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\npoll.registry().deregister(&mut socket)?;\n\nlet mut events = Events::with_capacity(1024);\n\n// Set a timeout because this poll should never receive any events.\npoll.poll(&mut events, Some(Duration::from_secs(1)))?;\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{"`event::Source`":"0:159:2988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3065:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:482":{"id":"0:262:482","crate_id":0,"name":"cmp","span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31160:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:1298":{"id":"0:260:1298","crate_id":0,"name":"partial_cmp","span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31160:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3214:247-0:60:207":{"id":"a:2:3214:247-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:168-0:270:3180":{"id":"0:168-0:270:3180","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[8,0],"end":[8,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::event::Event","name":"Event","id":"0:270:3180","glob":false}}},"0:248:1978":{"id":"0:248:1978","crate_id":0,"name":"0","span":{"filename":"src/token.rs","begin":[132,17],"end":[132,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"a:2:42262:3778-0:274:3181":{"id":"a:2:42262:3778-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42262:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[226,0],"end":[230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13270":{"id":"2:13270","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13271:1000","2:13272:3292","2:13273:35086","2:13274:35087","2:13276:35088","2:13279:28814","2:13280:35089","2:13281:336","2:13282:26822","2:13283:2650","2:13285:27531","2:13287:27532","2:13289:27533","2:13291:35090","2:13292:35091","2:13293:27556","2:13294:27557","2:13295:27560","2:13296:27561","2:13298:8169","2:13299:8179","2:13300:7605","2:13301:33190","2:13303:33189","2:13306:9472","2:13308:35092","2:13309:33610","2:13310:27574","2:13313:27575","2:13316:27576","2:13319:3991","2:13323:3952","2:13327:27562","2:13330:27564","2:13333:27566","2:13336:35093","2:13339:35094","2:13342:27568","2:13345:27570","2:13348:27572","2:13351:27573","2:13354:3471","2:13357:35095","2:13360:35096","2:13363:35097","2:13366:35098","2:13368:35099","2:13370:35100","2:13372:35101","2:13373:35102","2:13374:35103","2:13377:35104","2:13380:27475","2:13383:27577","2:13386:35105","2:13389:35106","2:13392:35107","2:13395:35108","2:13397:28742","2:13398:28743","2:13399:28745","2:13400:28746","2:13401:28747","2:13402:28749","2:13403:28750","2:13404:28751","2:13405:35109","2:13408:9563","2:13409:35110"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3830-0:131:2341":{"id":"b:2:3830-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13285:27531":{"id":"2:13285:27531","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42170:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32400:237-0:270:3180":{"id":"a:2:32400:237-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13339:35094":{"id":"2:13339:35094","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12960:14902","str::split":"2:13327:27562","prim@char":"1:12365:471","str::split_terminator":"2:13336:35093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44117:8155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5685:35803":{"id":"5:5685:35803","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3361","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:3361","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170-0:131:2341":{"id":"0:170-0:131:2341","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,23],"end":[9,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::events::Events","name":"Events","id":"0:131:2341","glob":false}}},"a:2:32459:3591-0:266:2345":{"id":"a:2:32459:3591-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32459:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3830-0:62:2343":{"id":"b:2:3830-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3006-0:131:2341":{"id":"b:2:3006-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3009:137","2:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3001-0:131:2341":{"id":"b:2:3001-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:2668":{"id":"0:32:2668","crate_id":0,"name":"is_aio","span":{"filename":"src/interest.rs","begin":[110,4],"end":[112,5]},"visibility":"public","docs":"Returns true if `Interest` contains AIO readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42263:3777-0:270:3180":{"id":"a:2:42263:3777-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42263:3777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13303:33189":{"id":"2:13303:33189","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13301:33190"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44332:8167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32400:237-0:62:2343":{"id":"a:2:32400:237-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:142:173":{"id":"0:142:173","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[195,4],"end":[195,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"2:8302:3301":{"id":"2:8302:3301","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"5:5684":{"id":"5:5684","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5685:35803","5:5686:15138","5:5689:35804","5:5692:35805","5:5700:35806","5:5701:35807","5:5702:4144","5:5703:28817","5:5704:28818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32459:3591-0:60:207":{"id":"a:2:32459:3591-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32459:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42262:3778-0:246:2344":{"id":"a:2:42262:3778-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42262:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42262:3778-0:60:207":{"id":"a:2:42262:3778-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42262:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3830-0:266:2345":{"id":"b:2:3830-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3005:1813":{"id":"2:3005:1813","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42301:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:35088":{"id":"2:13276:35088","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13274:35087"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,26],"end":[16,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2773:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13299:8179":{"id":"2:13299:8179","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12365:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44025:8149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185":{"id":"0:185","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,9],"end":[16,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3209:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[447,0],"end":[713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2984","0:75:3012","0:77:3028","0:79:3033"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:2857":{"id":"0:66:2857","crate_id":0,"name":"registry","span":{"filename":"src/poll.rs","begin":[324,4],"end":[326,5]},"visibility":"public","docs":"Create a separate `Registry` which can be used to register\n`event::Source`s.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2721-0:62:2343":{"id":"b:2:2721-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2723:27451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3001-0:274:3181":{"id":"b:2:3001-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3004:137","2:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13409:35110":{"id":"2:13409:35110","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5020:35110"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44366:8101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2995-0:131:2341":{"id":"b:2:2995-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32402:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2718-0:182:2342":{"id":"b:2:2718-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2720:3458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:280:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:2341":{"id":"0:131:2341","crate_id":0,"name":"Events","span":{"filename":"src/event/events.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"A collection of readiness events.\n\n`Events` is passed as an argument to [`Poll::poll`] and will be used to\nreceive any new readiness events received since the last poll. Usually, a\nsingle `Events` instance is created at the same time as a [`Poll`] and\nreused on each call to [`Poll::poll`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n#\n# assert!(events.is_empty());\n\n// Register `event::Source`s with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:133","a:2:42262:3778-0:131:2341","a:2:32400:237-0:131:2341","a:2:32459:3591-0:131:2341","a:2:3249:3912-0:131:2341","a:2:42263:3777-0:131:2341","a:2:3214:247-0:131:2341","b:2:2995-0:131:2341","b:2:3006-0:131:2341","b:2:2718-0:131:2341","b:2:3830-0:131:2341","b:2:2721-0:131:2341","b:2:2991-0:131:2341","b:2:3001-0:131:2341","0:140","0:151"]}}},"b:2:2995-0:270:3180":{"id":"b:2:2995-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:251:475":{"id":"0:251:475","crate_id":0,"name":"clone","span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:834":{"id":"0:90:834","crate_id":0,"name":"from","span":{"filename":"src/token.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:90:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13273:35086":{"id":"2:13273:35086","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2997:834":{"id":"2:2997:834","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:27556":{"id":"2:13293:27556","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13295:27560","str::split_at_mut":"2:13294:27557"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3830-0:60:207":{"id":"b:2:3830-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:27:2634":{"id":"0:27:2634","crate_id":0,"name":"PRIORITY","span":{"filename":"src/interest.rs","begin":[51,4],"end":[51,91]},"visibility":"public","docs":"Returns a `Interest` set representing priority completion interests.","links":{},"attrs":["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2804:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:262:482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2995-0:266:2345":{"id":"b:2:2995-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3001-0:270:3180":{"id":"b:2:3001-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3006-0:60:207":{"id":"b:2:3006-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3009:137","2:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:280:804":{"id":"0:280:804","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13404:28751":{"id":"2:13404:28751","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39544"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[435,0],"end":[439,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(all(unix, not(mio_unsupported_force_poll_poll),\nnot(any(target_os = \"solaris\", target_os = \"vita\"))))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4923:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:2934"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2768:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:188:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13377:35104":{"id":"2:13377:35104","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:28818":{"id":"5:5704:28818","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13401:28747"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:269:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3004:137":{"id":"2:3004:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:3249:3912-0:62:2343":{"id":"a:2:3249:3912-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3249:3912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5701:35807":{"id":"5:5701:35807","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:3361","`String`":"5:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3361","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42263:3777-0:182:2342":{"id":"a:2:42263:3777-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42263:3777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13373:35102":{"id":"2:13373:35102","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:27566":{"id":"2:13333:27566","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12960:14902","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::split":"2:13327:27562"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44067:8082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:2672":{"id":"0:114:2672","crate_id":0,"name":"is_priority","span":{"filename":"src/event/event.rs","begin":[150,4],"end":[152,5]},"visibility":"public","docs":"Returns true if the event contains priority readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\npriority event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLPRI`      |\n| [kqueue]      | *Not supported* |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13405:35109":{"id":"2:13405:35109","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5022:35109"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44348:8102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:207":{"id":"0:60:207","crate_id":0,"name":"Poll","span":{"filename":"src/poll.rs","begin":[257,0],"end":[259,1]},"visibility":"public","docs":"Polls for readiness events on all registered values.\n\n`Poll` allows a program to monitor a large number of [`event::Source`]s,\nwaiting until one or more become \"ready\" for some class of operations; e.g.\nreading and writing. An event source is considered ready if it is possible\nto immediately perform a corresponding operation; e.g. [`read`] or\n[`write`].\n\nTo use `Poll`, an `event::Source` must first be registered with the `Poll`\ninstance using the [`register`] method on its associated `Register`,\nsupplying readiness interest. The readiness interest tells `Poll` which\nspecific operations on the handle to monitor for readiness. A `Token` is\nalso passed to the [`register`] function. When `Poll` returns a readiness\nevent, it will include this token.  This associates the event with the\nevent source that generated the event.\n\n[`event::Source`]: ./event/trait.Source.html\n[`read`]: ./net/struct.TcpStream.html#method.read\n[`write`]: ./net/struct.TcpStream.html#method.write\n[`register`]: struct.Registry.html#method.register\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{self, SocketAddr};\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = net::TcpListener::bind(addr)?;\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(server.local_addr()?)?;\n\n// Register the stream with `Poll`\npoll.registry().register(&mut stream, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n# Portability\n\nUsing `Poll` provides a portable interface across supported platforms as\nlong as the caller takes the following into consideration:\n\n### Spurious events\n\n[`Poll::poll`] may return readiness events even if the associated\nevent source is not actually ready. Given the same code, this may\nhappen more on some platforms than others. It is important to never assume\nthat, just because a readiness event was received, that the associated\noperation will succeed as well.\n\nIf operation fails with [`WouldBlock`], then the caller should not treat\nthis as an error, but instead should wait until another readiness event is\nreceived.\n\n### Draining readiness\n\nOnce a readiness event is received, the corresponding operation must be\nperformed repeatedly until it returns [`WouldBlock`]. Unless this is done,\nthere is no guarantee that another readiness event will be delivered, even\nif further data is received for the event source.\n\n[`WouldBlock`]: std::io::ErrorKind::WouldBlock\n\n### Readiness operations\n\nThe only readiness operations that are guaranteed to be present on all\nsupported platforms are [`readable`] and [`writable`]. All other readiness\noperations may have false negatives and as such should be considered\n**hints**. This means that if a socket is registered with [`readable`]\ninterest and either an error or close is received, a readiness event will\nbe generated for the socket, but it **may** only include `readable`\nreadiness. Also note that, given the potential for spurious events,\nreceiving a readiness event with `read_closed`, `write_closed`, or `error`\ndoesn't actually mean that a `read` on the socket will return a result\nmatching the readiness event.\n\nIn other words, portable programs that explicitly check for [`read_closed`],\n[`write_closed`], or [`error`] readiness should be doing so as an\n**optimization** and always be able to handle an error or close situation\nwhen performing the actual read operation.\n\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`writable`]: ./event/struct.Event.html#method.is_writable\n[`error`]: ./event/struct.Event.html#method.is_error\n[`read_closed`]: ./event/struct.Event.html#method.is_read_closed\n[`write_closed`]: ./event/struct.Event.html#method.is_write_closed\n\n### Registering handles\n\nUnless otherwise noted, it should be assumed that types implementing\n[`event::Source`] will never become ready unless they are registered with\n`Poll`.\n\nFor example:\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\nuse std::thread;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut sock = TcpStream::connect(listener.local_addr()?)?;\n\nthread::sleep(Duration::from_secs(1));\n\nlet poll = Poll::new()?;\n\n// The connect is not guaranteed to have started until it is registered at\n// this point\npoll.registry().register(&mut sock, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n### Dropping `Poll`\n\nWhen the `Poll` instance is dropped it may cancel in-flight operations for\nthe registered [event sources], meaning that no further events for them may\nbe received. It also means operations on the registered event sources may no\nlonger work. It is up to the user to keep the `Poll` instance alive while\nregistered event sources are being used.\n\n[event sources]: ./event/trait.Source.html\n\n### Accessing raw fd/socket/handle\n\nMio makes it possible for many types to be converted into a raw file\ndescriptor (fd, Unix), socket (Windows) or handle (Windows). This makes it\npossible to support more operations on the type than Mio supports, for\nexample it makes [mio-aio] possible. However accessing the raw fd is not\nwithout it's pitfalls.\n\nSpecifically performing I/O operations outside of Mio on these types (via\nthe raw fd) has unspecified behaviour. It could cause no more events to be\ngenerated for the type even though it returned `WouldBlock` (in an operation\ndirectly accessing the fd). The behaviour is OS specific and Mio can only\nguarantee cross-platform behaviour if it can control the I/O.\n\n[mio-aio]: https://github.com/asomers/mio-aio\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being considered\na breaking change, don't depend on this, it's just here to inform the user.\nCurrently the kqueue and epoll implementation support direct I/O operations\non the fd without Mio's knowledge. Windows however needs **all** I/O\noperations to go through Mio otherwise it is not able to update it's\ninternal state properly and won't generate events.\n\n### Polling without registering event sources\n\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being\nconsidered a breaking change, don't depend on this, it's just here to inform\nthe user. On platforms that use epoll, kqueue or IOCP (see implementation\nnotes below) polling without previously registering [event sources] will\nresult in sleeping forever, only a process signal will be able to wake up\nthe thread.\n\nOn WASM/WASI this is different as it doesn't support process signals,\nfurthermore the WASI specification doesn't specify a behaviour in this\nsituation, thus it's up to the implementation what to do here. As an\nexample, the wasmtime runtime will return `EINVAL` in this situation, but\ndifferent runtimes may return different results. If you have further\ninsights or thoughts about this situation (and/or how Mio should handle it)\nplease add you comment to [pull request#1580].\n\n[event sources]: crate::event::Source\n[pull request#1580]: https://github.com/tokio-rs/mio/pull/1580\n\n# Implementation notes\n\n`Poll` is backed by the selector provided by the operating system.\n\n|      OS       |  Selector |\n|---------------|-----------|\n| Android       | [epoll]   |\n| DragonFly BSD | [kqueue]  |\n| FreeBSD       | [kqueue]  |\n| iOS           | [kqueue]  |\n| illumos       | [epoll]   |\n| Linux         | [epoll]   |\n| NetBSD        | [kqueue]  |\n| OpenBSD       | [kqueue]  |\n| Windows       | [IOCP]    |\n| macOS         | [kqueue]  |\n\nOn all supported platforms, socket operations are handled by using the\nsystem selector. Platform specific extensions (e.g. [`SourceFd`]) allow\naccessing other features provided by individual system selectors. For\nexample, Linux's [`signalfd`] feature can be used by registering the FD with\n`Poll` via [`SourceFd`].\n\nOn all platforms except windows, a call to [`Poll::poll`] is mostly just a\ndirect call to the system selector. However, [IOCP] uses a completion model\ninstead of a readiness model. In this case, `Poll` must adapt the completion\nmodel Mio's API. While non-trivial, the bridge layer is still quite\nefficient. The most expensive part being calls to `read` and `write` require\ndata to be copied into an intermediate buffer before it is passed to the\nkernel.\n\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2\n[IOCP]: https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports\n[`signalfd`]: https://man7.org/linux/man-pages/man2/signalfd.2.html\n[`SourceFd`]: unix/struct.SourceFd.html\n[`Poll::poll`]: struct.Poll.html#method.poll","links":{"std::io::ErrorKind::WouldBlock":"1:8367:4086"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:65","a:2:42262:3778-0:60:207","a:2:32400:237-0:60:207","a:2:32459:3591-0:60:207","a:2:3249:3912-0:60:207","a:2:42263:3777-0:60:207","a:2:3214:247-0:60:207","b:2:2995-0:60:207","b:2:3006-0:60:207","b:2:2718-0:60:207","b:2:3830-0:60:207","b:2:2721-0:60:207","b:2:2991-0:60:207","b:2:3001-0:60:207","0:70","0:68"]}}},"a:2:32400:237-0:131:2341":{"id":"a:2:32400:237-0:131:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13301:33190":{"id":"2:13301:33190","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13303:33189"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44323:8166","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2718-0:274:3181":{"id":"b:2:2718-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2720:3458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:283:475":{"id":"0:283:475","crate_id":0,"name":"clone","span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:9472":{"id":"2:13306:9472","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44303:4116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:577":{"id":"0:150:577","crate_id":0,"name":"count","span":{"filename":"src/event/events.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2666":{"id":"0:31:2666","crate_id":0,"name":"is_writable","span":{"filename":"src/interest.rs","begin":[104,4],"end":[106,5]},"visibility":"public","docs":"Returns true if the value includes writable readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2628":{"id":"0:26:2628","crate_id":0,"name":"WRITABLE","span":{"filename":"src/interest.rs","begin":[32,4],"end":[32,91]},"visibility":"public","docs":"Returns a `Interest` set representing writable interests.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"a:2:42262:3778-0:62:2343":{"id":"a:2:42262:3778-0:62:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42262:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:253:804":{"id":"0:253:804","crate_id":0,"name":"fmt","span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[21,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:2335","0:109:2664","0:110:2666","0:111:3209","0:112:3224","0:113:3233","0:114:2672","0:115:2668","0:116:2670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13383:27577":{"id":"2:13383:27577","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:14900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3832:1826":{"id":"2:3832:1826","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39883:7085","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[127,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:34213:2673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:199","0:37:410"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2994:3946":{"id":"2:2994:3946","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2968:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32400:237-0:274:3181":{"id":"a:2:32400:237-0:274:3181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2991-0:246:2344":{"id":"b:2:2991-0:246:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2994:3946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42263:3777-0:60:207":{"id":"a:2:42263:3777-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42263:3777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:159:2988":{"id":"0:159:2988","crate_id":0,"name":"Source","span":{"filename":"src/event/source.rs","begin":[75,0],"end":[112,1]},"visibility":"public","docs":"An event source that may be registered with [`Registry`].\n\nTypes that implement `event::Source` can be registered with\n`Registry`. Users of Mio **should not** use the `event::Source` trait\nfunctions directly. Instead, the equivalent functions on `Registry` should\nbe used.\n\nSee [`Registry`] for more details.\n\n[`Registry`]: ../struct.Registry.html\n\n# Implementing `event::Source`\n\nEvent sources are always backed by system handles, such as sockets or other\nsystem handles. These `event::Source`s will be monitored by the system\nselector. An implementation of `Source` will almost always delegates to a\nlower level handle. Examples of this are [`TcpStream`]s, or the *unix only*\n[`SourceFd`].\n\n[`TcpStream`]: ../net/struct.TcpStream.html\n[`SourceFd`]: ../unix/struct.SourceFd.html\n\n# Dropping `event::Source`s\n\nAll `event::Source`s, unless otherwise specified, need to be [deregistered]\nbefore being dropped for them to not leak resources. This goes against the\nnormal drop behaviour of types in Rust which cleanup after themselves, e.g.\na `File` will close itself. However since deregistering needs access to\n[`Registry`] this cannot be done while being dropped.\n\n[deregistered]: ../struct.Registry.html#method.deregister\n\n# Examples\n\nImplementing `Source` on a struct containing a socket:\n\n```ignore\nuse mio::{Interest, Registry, Token};\nuse mio::event::Source;\nuse mio::net::TcpStream;\n\nuse std::io;\n\n# #[allow(dead_code)]\npub struct MySource {\n    socket: TcpStream,\n}\n\nimpl Source for MySource {\n    fn register(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `register` call to `socket`\n        self.socket.register(registry, token, interests)\n    }\n\n    fn reregister(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `reregister` call to `socket`\n        self.socket.reregister(registry, token, interests)\n    }\n\n    fn deregister(&mut self, registry: &Registry) -> io::Result<()> {\n        // Delegate the `deregister` call to `socket`\n        self.socket.deregister(registry)\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:160:2984","0:161:3012","0:162:3028"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:163"]}}},"0:71:804":{"id":"0:71:804","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[442,4],"end":[444,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2478":{"id":"0:0:2478","crate_id":0,"name":"mio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[266,1]},"visibility":"public","docs":"Mio is a fast, low-level I/O library for Rust focusing on non-blocking APIs\nand event notification for building high performance I/O apps with as little\noverhead as possible over the OS abstractions.\n\n# Usage\n\nUsing Mio starts by creating a [`Poll`], which reads events from the OS and\nputs them into [`Events`]. You can handle I/O events from the OS with it.\n\nFor more detail, see [`Poll`].\n\n[`Poll`]: ../mio/struct.Poll.html\n[`Events`]: ../mio/event/struct.Events.html\n\n## Examples\n\nExamples can found in the `examples` directory of the source code, or [on\nGitHub].\n\n[on GitHub]: https://github.com/tokio-rs/mio/tree/master/examples\n\n## Guide\n\nA getting started guide is available in the [`guide`] module.\n\n## Available features\n\nThe available features are described in the [`features`] module.","links":{"`guide`":"0:181:2371","`features`":"0:180:2355"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms,\nunused_imports, dead_code)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:101:2337","0:180:2355","0:181:2371","0:173-0:131:2341","0:174-0:182:2342","0:176-0:60:207","0:177-0:62:2343","0:178-0:246:2344","0:179-0:266:2345"],"is_stripped":false}}},"2:13374:35103":{"id":"2:13374:35103","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:14902"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12986:14899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:2371":{"id":"0:181:2371","crate_id":0,"name":"guide","span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,13]},"visibility":"public","docs":"# Getting started guide.\n\nIn this guide we'll do the following:\n\n1. Create a [`Poll`] instance (and learn what it is).\n2. Register an [event source].\n3. Create an event loop.\n\nAt the end you'll have a very small (but quick) TCP server that accepts\nconnections and then drops (disconnects) them.\n\n## 1. Creating a `Poll` instance\n\nUsing Mio starts by creating a [`Poll`] instance, which monitors events\nfrom the OS and puts them into [`Events`]. This allows us to execute I/O\noperations based on what operations are ready.\n\n[`Poll`]: ../struct.Poll.html\n[`Events`]: ../event/struct.Events.html\n\n```ignore\n# use mio::{Poll, Events};\n# fn main() -> std::io::Result<()> {\n// `Poll` allows for polling of readiness events.\nlet poll = Poll::new()?;\n// `Events` is collection of readiness `Event`s and can be filled by\n// calling `Poll::poll`.\nlet events = Events::with_capacity(128);\n# drop((poll, events));\n# Ok(())\n# }\n```\n\nFor example if we're using a [`TcpListener`],  we'll only want to\nattempt to accept an incoming connection *iff* any connections are\nqueued and ready to be accepted. We don't want to waste our time if no\nconnections are ready.\n\n[`TcpListener`]: ../net/struct.TcpListener.html\n\n## 2. Registering event source\n\nAfter we've created a [`Poll`] instance that monitors events from the OS\nfor us, we need to provide it with a source of events. This is done by\nregistering an [event source]. As the name “event source” suggests it is\na source of events which can be polled using a `Poll` instance. On Unix\nsystems this is usually a file descriptor, or a socket/handle on\nWindows.\n\nIn the example below we'll use a [`TcpListener`] for which we'll receive\nan event (from [`Poll`]) once a connection is ready to be accepted.\n\n[event source]: ../event/trait.Source.html\n\n```ignore\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest};\n# fn main() -> std::io::Result<()> {\n# let poll = Poll::new()?;\n# let address = \"127.0.0.1:0\".parse().unwrap();\n// Create a `TcpListener`, binding it to `address`.\nlet mut listener = TcpListener::bind(address)?;\n\n// Next we register it with `Poll` to receive events for it. The `SERVER`\n// `Token` is used to determine that we received an event for the listener\n// later on.\nconst SERVER: Token = Token(0);\npoll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n# Ok(())\n# }\n```\n\nMultiple event sources can be [registered] (concurrently), so we can\nmonitor multiple sources at a time.\n\n[registered]: ../struct.Registry.html#method.register\n\n## 3. Creating the event loop\n\nAfter we've created a [`Poll`] instance and registered one or more\n[event sources] with it, we can [poll] it for events. Polling for events\nis simple, we need a container to store the events: [`Events`] and need\nto do something based on the polled events (this part is up to you, we\ncan't do it all!). If we do this in a loop we've got ourselves an event\nloop.\n\nThe example below shows the event loop in action, completing our small\nTCP server.\n\n[poll]: ../struct.Poll.html#method.poll\n[event sources]: ../event/trait.Source.html\n\n```ignore\n# use std::io;\n# use std::time::Duration;\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest, Events};\n# fn main() -> io::Result<()> {\n# let mut poll = Poll::new()?;\n# let mut events = Events::with_capacity(128);\n# let address = \"127.0.0.1:0\".parse().unwrap();\n# let mut listener = TcpListener::bind(address)?;\n# const SERVER: Token = Token(0);\n# poll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n// Start our event loop.\nloop {\n    // Poll the OS for events, waiting at most 100 milliseconds.\n    poll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n    // Process each event.\n    for event in events.iter() {\n        // We can use the token we previously provided to `register` to\n        // determine for which type the event is.\n        match event.token() {\n            SERVER => loop {\n                // One or more connections are ready, so we'll attempt to\n                // accept them (in a loop).\n                match listener.accept() {\n                    Ok((connection, address)) => {\n                        println!(\"Got a connection from: {}\", address);\n#                       drop(connection);\n                    },\n                    // A \"would block error\" is returned if the operation\n                    // is not ready, so we'll stop trying to accept\n                    // connections.\n                    Err(ref err) if would_block(err) => break,\n                    Err(err) => return Err(err),\n                }\n            }\n#           _ => unreachable!(),\n        }\n    }\n#   return Ok(());\n}\n\nfn would_block(err: &io::Error) -> bool {\n    err.kind() == io::ErrorKind::WouldBlock\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"a:2:42262:3778-0:182:2342":{"id":"a:2:42262:3778-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42262:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:182:2342":{"id":"0:182:2342","crate_id":0,"name":"Interest","span":{"filename":"src/interest.rs","begin":[17,0],"end":[17,31]},"visibility":"public","docs":"Interest used in registering.\n\nInterest are used in [registering] [`event::Source`]s with [`Poll`], they\nindicate what readiness should be monitored for. For example if a socket is\nregistered with [readable] interests and the socket becomes writable, no\nevent will be returned from a call to [`poll`].\n\n[registering]: struct.Registry.html#method.register\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[readable]: struct.Interest.html#associatedconstant.READABLE\n[`poll`]: struct.Poll.html#method.poll","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:42262:3778-0:182:2342","a:2:32400:237-0:182:2342","a:2:32459:3591-0:182:2342","a:2:3249:3912-0:182:2342","a:2:42263:3777-0:182:2342","a:2:3214:247-0:182:2342","b:2:2995-0:182:2342","b:2:3006-0:182:2342","b:2:2718-0:182:2342","b:2:3830-0:182:2342","b:2:2721-0:182:2342","b:2:2991-0:182:2342","b:2:3001-0:182:2342","b:5:793-0:182:2342","0:193","0:185","0:40","0:35","0:38","0:191","0:187","0:195","0:186","0:189"]}}},"b:2:2721-0:60:207":{"id":"b:2:2721-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32401:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2723:27451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:283:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3010:1811":{"id":"2:3010:1811","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42301:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2670":{"id":"0:33:2670","crate_id":0,"name":"is_lio","span":{"filename":"src/interest.rs","begin":[116,4],"end":[118,5]},"visibility":"public","docs":"Returns true if `Interest` contains LIO readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:795:4011":{"id":"5:795:4011","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[27,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:2626","0:26:2628","0:27:2634","0:28:296","0:29:2662","0:30:2664","0:31:2666","0:32:2668","0:33:2670","0:34:2672"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:793-0:182:2342":{"id":"b:5:793-0:182:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:4011","5:796:4012","5:797:4013"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3006-0:270:3180":{"id":"b:2:3006-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3009:137","2:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:147:173":{"id":"0:147:173","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[204,4],"end":[204,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"0:171-0:274:3181":{"id":"0:171-0:274:3181","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,31],"end":[9,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::events::Iter","name":"Iter","id":"0:274:3181","glob":false}}},"2:13336:35093":{"id":"2:13336:35093","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12960:14902","str::split":"2:13327:27562","prim@char":"1:12365:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13339:35094"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44099:8154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:35099":{"id":"2:13368:35099","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2991-0:266:2345":{"id":"b:2:2991-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2994:3946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3214:247-0:270:3180":{"id":"a:2:3214:247-0:270:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13327:27562":{"id":"2:13327:27562","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12960:14902","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::split_whitespace":"2:13301:33190","str::rsplit":"2:13333:27566"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44049:4120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:266:2345":{"id":"b:2:3001-0:266:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13408:9563":{"id":"2:13408:9563","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5023:9563"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44357:8098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:14968:5097":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15151:5137":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11089:8490":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10828:36605":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:7563:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7694:15196":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43175:33603":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:11492:8158":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4923:2683":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14051:4837":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4970:6221":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:597:4496":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6026:7525":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:2003:9625":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:4851:14954":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4896:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"11:785:8036":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:40673:8105":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:46561:7338":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:1098:8637":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:44624:14915":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:7484:3301":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:7919:30165":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:30813:33077":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:7473:5654":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14402:4907":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:2224:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:4142:8642":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11239:3577":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:12371:1726":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:43846:8083":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:14876:5061":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"20:117:3796":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"17:11799:8521":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:3656:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11723:8213":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:4504:14946":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:7648:8617":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11063:8489":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"13:0:3362":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:867:8463":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:16079:5395":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:507:4367":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:23059:33061":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:894:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:21945:9736":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:9731:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46066:7291":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:2566:7598":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11153:8483":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12824:22512":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:42349:4016":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:44965:7630":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:5756:8560":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:42894:4071":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14235:4883":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:11506:8695":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:7206:36201":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:1548:4016":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:3738:4059":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"14:40:4671":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6648:7984":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15342:5184":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:1956:4094":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:7539:5488":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6521:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:4856:5522":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:2275:8043":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:5289:8753":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1500:5976":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6442:7558":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:3661:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12251:8543":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:5981:4094":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:7469:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40838:4117":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:328:8033":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:22730:9818":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:6317:8587":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:46943:7379":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13089:4637":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6716:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:7514:8675":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:2318:4083":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:2495:9653":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:1132:36200":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:45914:7278":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:2594:6956":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8802:9721":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6758:5576":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44253:8163":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:7842:7644":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:44949:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:10397:4072":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6758:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:9544:8739":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:46273:7310":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:7686:8618":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:1601:8644":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12443:4595":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:11304:7465":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:10954:22520":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:2539:5811":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1481:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:1496:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7379:36598":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5638:8757":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:6874:36200":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:3214:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:1207:8468":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12584:8483":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:13601:8701":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:5179:6281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:1696:6098":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9175:7451":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:4821:8477":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:8476":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46351:7314":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:15720:5305":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:10645:4239":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10915:36604":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:42096:7622":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6412:22441":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:3436:4137":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3260:3579":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:16121:5406":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:2303:21550":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:1794:36200":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:299:8030":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:1589:6028":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:43213:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6231:7966":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:881:8635":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:39731:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:4377:3181":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:1893:8656":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:3318:36331":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:4860:4230":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43410:4241":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:7316:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:2175:22565":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:4337:4094":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:10712:4137":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:1625:6058":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:14587:4938":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12433:4592":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13972:4550":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:16069:5394":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:11048:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:15092:5125":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:6659:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6620:5553":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:3352:36335":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:3373:8040":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:5708:8758":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12851:7954":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:10341:8800":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:12348:27468":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11621:7924":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:1533:3181":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12557:4521":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:13116:4643":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:46034:7289":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8227:8198":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:44313:8165":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:47174:7390":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7231:36209":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8596:8200":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:8175:8619":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13855:4807":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:23000:6983":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11016:8486":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:2728:5466":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:40:9597":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:6704:36200":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4161:9670":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10284:4505":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:11326:8692":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:3925:5506":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:7524:7596":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:8273:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15289:5169":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:5541:6445":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11865:8529":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:111:309":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"2:41374:8137":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"20:342:3817":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"16:5914:7508":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2734:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:47096:7384":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5562:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:12005:8697":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"8:0:3364":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:6183:2350":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:7548:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:41167:8133":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:10905:8201":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:9531:8690":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:32402:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:16151:5414":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:7497:5655":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:11692:7647":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:3438:4138":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:14475:4923":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:44117:8155":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13064:4636":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:7391:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:8031:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15426:5208":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:22975:3495":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:43921:8086":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6708:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:13526:4730":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:15:2676":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:8008:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5533:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:6658:8642":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6494:7972":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5676:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2962:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10534:36606":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9396:4094":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:41181:8134":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:8199:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46590:7339":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13412:4706":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:22378:9737":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:835:8629":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5205:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:47330:7419":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:0:3372":{"crate_id":17,"path":["object"],"kind":"module"},"6:5165:6280":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:5846:7963":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12543:8550":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:1586:8035":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:1564:3301":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:4718:5517":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10997:4518":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:8249:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:12920:3819":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:5107:5530":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:2322:4104":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:47253:7401":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12707:8556":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:4802:5520":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4103:9667":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12808:4622":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:3457:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2712:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:40577:8101":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:3054:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:3729:4016":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3677:4109":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:42880:4062":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13594:4750":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:13886:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:523:5934":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7509:8610":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9383:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:42196:3181":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:42293:4018":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:2355:5444":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43895:7256":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:30787:7012":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"11:102:8028":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11313:7922":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:12384:1856":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:43956:8720":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:373:8723":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:5686:5475":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:8267:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:39670:4057":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:46694:7343":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:23748:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:3610:4105":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:34386:4035":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10350:4507":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5420:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9415:3546":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:306:3361":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5742:7957":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:23230:7001":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:9108:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:10982:27488":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7428:22447":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:7332:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:7767:8677":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:3899:5505":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3265:3581":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:14111:4845":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:39846:4050":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:46372:7315":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:21935:9656":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14994:5103":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6606:7982":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12189:8538":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:10706:4139":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:5428:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:532:5940":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14788:4998":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:8118:8018":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:7067:14934":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:9145:7450":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:10671:36609":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:6268:8064":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13581:4749":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:15778:5322":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:2466:8656":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:7306:36596":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:44645:8189":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:6682:3539":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:1011:3181":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7061:5602":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:3667:4053":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7584:3301":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:7397:36597":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:23285:7006":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:9161:8789":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11026:22522":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12300:22631":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:16093:5399":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:12370:1692":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:8525:4119":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:7998:8770":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:6796:3542":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:957:8629":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6882:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:1625:8628":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:7492:8054":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:651:4367":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:46988:7380":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:5817:7500":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:40869:8111":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"14:7:8623":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:32491:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:14021:9584":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:915:8036":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11655:7251":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"2:34213:2673":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:6037:3547":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:10886:8808":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:14341:4897":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12464:22632":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:685:4016":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:1049:8637":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40772:8057":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:5520:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:3258:2615":{"crate_id":2,"path":["core","ops"],"kind":"module"},"6:5357:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:23024:33075":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"14:165:21513":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6466:5550":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:21748:34112":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:7656:22448":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:2171:8657":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:4307:4094":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2148:6968":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:14147:4851":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8173:8773":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:8716:7439":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8601:9688":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13437:4708":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:7033:14932":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:7057:14933":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:2559:5815":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:1379:8006":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5400:4500":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:11096:30212":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:6282:30198":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:12368:1317":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:553:5950":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:6790:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11715:7932":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12127:4582":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6749:7988":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13015:4592":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6976:5597":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:3342:4140":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:43234:3849":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:5965:3534":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11877:4543":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:5395:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14575:4592":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:6090:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:23340:2614":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"type_alias"},"1:10945:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:6799:3543":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:7983:7424":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:15197:5149":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12363:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:39634:4019":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13899:4815":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:23186:6997":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:30781:7010":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:47268:7402":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:4672:9689":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:32460:3916":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:15456:5214":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:1494:5973":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:6678:3538":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"9:500:5879":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:41405:8139":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:6449:6558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8764:7251":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12597:4603":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:5093:14964":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:4730:8686":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:1643:6070":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12683:8554":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:9388:3537":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:3275:4029":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6473:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:6525:9830":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:3810:5503":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:9273:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:5366:980":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:3313:8038":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:47238:7400":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:12385:1838":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11764:7937":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:46404:7317":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:13730:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15655:5286":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:7709:7603":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11574:8041":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6691:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:1859:8736":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:2612:5461":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12647:8551":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:46138:7303":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:938:9582":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:12150:4583":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10720:36608":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:589:4375":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:3473:8475":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"9:176:21492":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:6358:2345":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14599:4945":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11730:7933":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:5958:3533":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6872:7578":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5366:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:1880:3181":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11142:4532":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:672:8729":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:44303:4116":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43995:7258":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:46080:7292":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:12038:8698":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:570:5958":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:46744:7345":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:1564:21507":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6504:7561":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:3465:8656":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:42148:7233":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8644:6800":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:0:1005":{"crate_id":6,"path":["libc"],"kind":"module"},"16:4424:5509":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:14449:4921":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7414:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2069:1361":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4807:9671":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:12408:4591":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6480:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12213:8540":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:4572:8684":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11497:8505":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11788:9498":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:842:9581":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:32370:5652":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"20:121:3797":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"16:7052:8600":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:2374:5450":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:5488:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:517:5931":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:4506:36226":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:5196:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:12391:1422":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7799:5481":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:22576:9656":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:42624:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:5534:14886":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:221:8648":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13455:4716":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:42887:4063":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:2380:3181":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:4487:8751":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47143:7387":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:40889:8113":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:43431:7251":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:32459:3591":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:45984:7286":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5635:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:40706:7614":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:12721:8159":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:6406:8762":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:43855:8084":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:10973:27470":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:12383:887":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:3219:3910":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5241:6313":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5288:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15376:5197":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11537:8508":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:2039:6967":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"19:0:1294":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:38311:4039":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7813:8013":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:938:8656":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:12737:8162":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:6433:7971":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12362:7947":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12478:4596":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12390:1916":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1514:5981":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13375:4700":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:7350:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:902:8035":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:11955:8215":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:23175:6996":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:34559:4037":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:2938:9656":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2971:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:8304:3594":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7132:8005":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:15206:5150":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"12:0:3368":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:6748:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"11:1888:8642":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:41367:8136":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:11033:7450":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5088:6274":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6849:7576":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:10403:4070":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43864:8717":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11841:8527":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:8155:8024":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5127:6277":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11242:8496":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:42252:3775":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12485:22633":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11214:8494":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:22936:8091":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8615:8783":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13252:4674":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6588:7974":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:4819:6813":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:2998:5496":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5700:5478":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:44610:8184":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:45899:7277":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:1657:6081":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:3014:21579":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:16212:5428":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:3329:5499":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:14489:4924":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:5004:3514":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:46305:7312":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:8284:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:10844:30191":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:9405:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46290:7311":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:3207:3909":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:994:9583":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:40566:7613":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5648:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13922:4820":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:12079:14895":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:11051:8488":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:1898:8656":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:7823:22449":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13363:4697":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:36435:4038":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5307:5531":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:42663:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5927:7509":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4223:9676":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:7650:9580":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:689:7909":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8589:3062":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:9204:9731":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:32377:8710":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:15646:5284":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8168:3811":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8330:8776":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3340:4139":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10710:8482":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:986:8635":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"15:0:3370":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:598:36616":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:16223:5430":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:44682:7263":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5462:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:8308:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12056:4577":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:318:3816":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"2:7610:3962":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:3669:4400":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:33143:4027":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10887:36603":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:14177:4870":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12572:4532":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:5415:5533":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14325:4895":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:2485:9648":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:7592:3301":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:1105:8638":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6599:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15138:5131":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5282:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:9153:3181":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:12376:740":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:40717:15196":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:568:9552":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:11128:4489":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:8003:4146":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7397:29421":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:44199:8160":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:7721:7606":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11755:7936":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:3614:5501":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:10993:8772":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:13929:8090":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:6005:8642":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:521:26691":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11367:4521":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:2315:8745":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4984:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"15:306:9471":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11324:8497":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:41990:7231":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:6098:22439":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13832:4804":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13986:4829":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11354:8501":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7549:8010":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:14298:4891":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:40585:8098":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:15400:5202":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:9119:7448":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:364:9479":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:531:7903":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:22:819":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:42357:3301":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5641:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:1631:8038":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:39876:4052":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8621:7430":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:8232:8199":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:6672:6672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:860:8559":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:13703:34212":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12516:8547":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"20:207:3813":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"1:8240:8775":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5265:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6948:5484":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8508:4117":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"14:214:8026":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:5588:8754":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:14066:4840":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:4008:8749":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:5324:4149":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:42187:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:14503:4927":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:8296:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:7475:4268":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:7361:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5349:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:10218:4503":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4902:6189":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:11195:3181":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4792:6116":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:21734:34123":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43976:8721":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12900:4625":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:1625:8037":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:8261:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12353:7946":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40487:8099":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12107:4532":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14372:4902":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:2073:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:22245:6977":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:21947:6976":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13999:4830":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:538:5943":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:10635:30195":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:7368:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:8386:3593":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:1580:8643":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7910:22450":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10399:4119":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:698:7910":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12076:8533":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10709:4141":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:5057:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6353:5543":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44735:15268":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:7717:33030":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:15992:5380":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:16105:5401":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:22986:33082":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:2357:36394":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:42262:3778":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"7:32:21411":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5019:6247":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43947:8087":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:41930:7222":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:698:3301":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:23274:7005":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:8330:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:0:3373":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:15814:5326":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13738:4786":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7168:7455":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"14:220:5801":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:41022:8129":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11688:7930":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:32366:8709":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:7733:8676":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11042:8487":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:6924:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2878:5473":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:10761:15226":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:12981:14900":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:8216:8025":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40907:8116":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:14386:4904":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:4561:8752":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:3277:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11001:8758":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:2614:15151":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:9286:27493":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13844:4806":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:43147:7249":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:12475:15215":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5831:7503":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:10044:33311":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2780:4132":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:45967:7285":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15324:5180":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:6077:4094":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:670:8462":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:1609:3181":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:44217:8161":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2635:4129":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5603:6471":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:15463:5216":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11166:4523":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:44341:8168":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:1613:3301":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13485:4720":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:43130:4060":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:42221:3774":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:586:5967":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:47215:7393":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11940:30987":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:1920:8739":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:6813:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5319:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5412:1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:2349:8637":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:4772:9707":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5477:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:47163:7389":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"9:390:21426":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2965:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:6398:5474":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12043:8531":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"9:236:7251":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:7518:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6419:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:10393:4062":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8479:4114":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:16235:5433":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"14:31:8623":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:41908:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:3809:36200":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:656:8728":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:44481:8180":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6543:7563":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:4940:5525":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42108:3062":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:12381:900":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:5037:5528":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:613:36615":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:12387:1850":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10926:7642":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:8852:3181":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:379:8725":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46191:7306":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:10827:34398":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:5089:9708":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:6143:15464":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:6506:9829":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6876:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"9:480:21424":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13946:4821":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1563:6012":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:9192:7452":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46051:7290":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43402:8144":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15368:5194":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5255:6319":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:4362:4094":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:953:8628":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:4603:7783":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:12316:7650":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:0:3371":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:3290:4045":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:2768:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:23138:9656":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"11:1005:8006":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:16165:5417":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"11:2301:8006":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:6047:8562":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6927:5592":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11811:4255":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:21819:9656":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:43884:8718":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1395:8637":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:0:3367":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"18:623:36614":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:3105:35891":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7681:7600":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:2148:8637":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2010:787":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:14723:4947":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:7144:22446":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:30526:3494":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10018:22489":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"18:706:7912":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:2182:8658":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:6740:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:3032:8747":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11293:22540":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:44049:4120":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:10650:4240":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15521:5258":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6917:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12399:7949":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7857:5673":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:8251:15129":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5551:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11348:8812":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:2323:21576":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:479:5906":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:15249:5158":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:1844:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:4804:4229":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:44676:8193":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:23197:6998":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:47046:7382":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13538:4733":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:44658:7624":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12030:8530":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:4976:5526":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:12975:7912":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:3435:4020":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:41381:3538":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:40973:8124":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:45931:7279":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:10184:4061":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15473:5221":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6066:7964":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3287:4044":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:14311:4892":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8178:8197":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:15214:5152":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:8544:8783":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4817:6811":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:8301:5724":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14246:4885":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:39718:4049":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:43642:8147":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7639:7598":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:7665:7599":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:5286:34476":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8340:4088":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:4172:36200":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:44271:8164":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:11478:8157":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15010:5104":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14284:4890":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3583:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:7986:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2636:5462":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:735:26689":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12724:22511":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:4201:9672":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:7534:36336":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:5375:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11595:4540":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:2959:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:9319:2344":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:42130:7232":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:10952:7461":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:44366:8101":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:11202:7449":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:2612:15150":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:45946:7280":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12318:4589":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4976:6224":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:23263:7004":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:7472:9496":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:33828:4031":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:44724:3585":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:46220:7307":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8531:4120":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:2028:3973":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"10:36:5817":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12949:4589":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:9219:9730":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5151:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:2157:4133":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14977:5101":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44700:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:6526:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:5722:5480":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15102:5126":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:4406:8750":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:42284:15208":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:7780:9491":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:47291:7403":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:47154:7388":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:44357:8098":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:623:9562":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:10910:8203":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:15760:5316":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:46499:7336":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5224:6303":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:4352:5508":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:10401:4069":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:22702:9817":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:43934:8719":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1424:8640":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:754:7919":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12386:1844":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13814:4803":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:42901:4072":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:2265:9547":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:5851:8195":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:485:5909":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:47075:7383":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13399:4704":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11501:30200":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:40960:8123":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:39055:4042":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:3463:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7528:8007":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6991:36593":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:5776:6721":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:871:3181":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:3094:4011":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1974:8741":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:12375:737":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:33761:4032":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:42263:3777":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12929:4626":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:10610:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12175:8534":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:46322:7313":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:7158:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:9459:3578":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:1907:8038":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:40732:7615":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5385:4499":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6731:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"18:643:4367":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11853:8528":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:3295:4046":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:7556:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13785:4798":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10068:22492":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:6154:8063":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:680:7906":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:4882:5523":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7755:5483":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6120:22440":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13325:4691":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12238:8542":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:10395:4071":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10877:8484":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:8202:5495":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:7559:8011":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40939:8121":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2719:30191":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10964:4114":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:6437:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:44976:7269":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12089:4580":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:10039:33521":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"14:187:21520":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:1829:15087":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:928:8642":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:3860:4133":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:559:5953":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:898:8650":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15445:5213":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5107:6275":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3935:8642":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:7454:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1259:9490":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:12392:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:44019:8148":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:33355:4030":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:44866:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10602:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:974:8632":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:671:3181":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:46478:7335":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:40556:8100":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"0:0:2478":{"crate_id":0,"path":["mio"],"kind":"module"},"11:2400:4016":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:5367:22436":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11898:4545":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:963:9581":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8607:8786":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:11678:7472":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:3451:3592":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13173:4655":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11605:4541":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11583:8515":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10759:4532":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4805:6125":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:4536:4094":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"15:327:21535":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:3940:8656":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13387:4701":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:21702:34115":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:11467:4539":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:9420:3776":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3649:4068":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:5593:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11189:4525":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5629:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:2902:21577":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:4651:4228":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:944:8641":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:3701:4058":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:7577:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:3404:4056":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:4913:4231":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13766:4793":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:4068:3301":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11341:8500":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:513:8466":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10661:8481":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11493:8504":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5405:6385":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:5960:7515":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5117:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:44939:8722":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:1584:6026":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6700:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:430:9483":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:12377:756":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:8538:4116":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:6777:8065":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:150:7767":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10170:4500":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:4905:804":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:8753:4017":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:6461:2350":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:13966:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5044:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9858:22504":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6342:36595":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:1597:6033":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:7580:8012":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11743:7934":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:9755:22485":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5325:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12887:7955":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:4438:8682":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4997:6234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:40543:7216":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:43419:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:9314:8796":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:2741:4121":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:1569:6014":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11405:8503":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11443:4537":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40517:7612":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:7448:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15023:5109":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2134:15160":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:12507:14903":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42341:3181":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10622:36602":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15582:5265":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:6718:3548":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13568:4745":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6300:8584":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8084:8772":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:15390:5199":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13292:4685":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:1614:8627":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:44856:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:10391:4063":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:11078:30207":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:5139:4094":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1703:6101":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:1711:6105":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2804:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:178:3810":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"1:758:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:14436:4920":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:6611:6648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:15608:5274":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12508:4601":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:4502:5511":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2032:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:11287:8081":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:4882:3573":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11557:8509":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:30749:7009":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:11219:4016":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14545:4931":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:8353:6954":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6443:6557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:355:21440":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:21717:34122":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6456:22442":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:1604:8641":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:13034:14908":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:7463:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:237:3814":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"11:1158:8640":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:21821:9735":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14189:4873":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:40701:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3529:4147":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:15734:5307":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:40983:8125":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:1023:8636":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:40879:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10752:4078":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:2788:5469":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:5490:36200":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7888:8014":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:22643:9827":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:40593:8102":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7633:36591":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8335:8777":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:7539:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:545:5945":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"0:101:2337":{"crate_id":0,"path":["mio","event"],"kind":"module"},"6:4842:6153":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11634:7926":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:21839:6976":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:41423:8140":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:8255:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14912:5091":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:6966:8073":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:44035:4119":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6532:7973":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:43441:8145":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:11038:9656":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:7548:3301":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:123:8029":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:6248:4094":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12201:8539":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:8226:22451":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:23086:8095":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:7431:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:1861:8737":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:15596:5271":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:31160:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10419:4509":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11115:8492":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4875:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:23296:7007":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:3673:4055":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10044:22509":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:2030:15138":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"1:5112:9710":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:1595:8036":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:256:8463":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:23044:33072":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:659:8458":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6638:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8221:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:1900:8037":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:12388:1832":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:22514:9822":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:12278:8545":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:46109:7294":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:884:4016":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:26148:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40600:14970":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5230:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:2705:4130":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:8093:5712":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:21680:3929":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:980:8634":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:14847:5050":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:2458:5454":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6385:5546":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:12698:8156":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15434:5209":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12768:22490":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5249:6317":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:46649:7342":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"18:515:4370":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6263:7969":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2808:5470":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3297:30411":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11674:7929":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11547:4442":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:2545:5812":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:8185:7426":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:8195:7640":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:14560:4935":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5441:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:12661:8151":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:7982:9656":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"9:445:21425":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:1884:3301":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:8073:5711":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2660:5463":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:2438:5453":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6534:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:113:9463":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:6564:6621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:22868:7787":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:4215:9674":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:2684:5464":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12454:7952":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:6962:5485":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:1642:8040":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:12372:1816":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:6507:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15058:5113":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:10859:33837":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:42507:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:15410:5205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:3043:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:7341:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:854:8632":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43795:8716":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:5098:9709":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:680:9565":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40481:8098":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:12151:27503":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11510:8506":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:809:8656":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:9423:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:15635:5283":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:11928:7473":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:15701:5300":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:7618:5657":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:12382:906":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:15748:5314":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:22552:9823":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:4341:9687":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:949:8627":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4890:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3646:4051":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:32391:2988":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11788:8520":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:1637:8039":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6823:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:40860:8110":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"10:44:5818":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14986:5102":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:5798:14932":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:872:8464":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:11419:4532":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"14:202:14916":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"0:181:2371":{"crate_id":0,"path":["mio","guide"],"kind":"module"},"6:5471:6426":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13235:4671":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:2773:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"18:563:4374":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:15616:5277":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6278:8569":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:3097:6960":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:14091:4842":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11227:8495":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14516:4928":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:5341:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:21690:34115":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11647:7927":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:9279:8792":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11102:8491":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:9709:8773":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:7098:8002":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:46449:7334":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:3475:5500":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:33694:3582":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:1064:21506":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:14868:5060":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:894:3301":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2936:21578":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:9702:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:41396:4147":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:2592:5460":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:3345:4036":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11269:22539":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:1107:8640":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:3095:8681":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:1690:6097":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:1089:8636":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:14463:4922":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12494:4597":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:1674:36576":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:4333:9494":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:12389:969":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:32400:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:2121:8006":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5217:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5658:6498":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:13211:4670":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:7879:8816":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:8797:33520":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:4771:5519":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1530:5989":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13497:4721":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4964:6219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8003:7425":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:8049:9568":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:38476:4041":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:47189:7391":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:22257:34109":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:16249:5434":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:22657:15150":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:16269:4706":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:10935:7426":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"20:0:1989":{"crate_id":20,"path":["log"],"kind":"module"},"2:23117:3510":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15281:5168":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15078:5121":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:8247:15130":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:2495:21502":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:1667:6087":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"6:6723:6692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:46389:7316":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:9327:7455":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6381:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:5622:8756":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:2234:8473":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:47134:7386":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7695:5661":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2598:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:2228:8041":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:2478:5455":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:44323:8166":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22218:9656":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:21766:9656":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:2975:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6462:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:44852:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3395:4142":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4914:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:765:26690":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:9340:27491":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:22590:9826":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:23008:6984":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10251:4504":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:261:8464":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5387:6373":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:10818:8483":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:4560:5513":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:2508:5456":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40069:14977":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5450:6411":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:4:1259":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:4922:2684":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"type_alias"},"6:7586:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4829:6143":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:1684:6094":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:2968:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:12775:8081":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:432:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:13641:8119":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:39826:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12671:8553":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:13674:4757":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:9255:3536":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:4485:14869":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:41946:7224":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6544:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:2304:8046":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:22376:9656":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2748:5467":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13424:4707":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:46611:7340":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41415:7218":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:5779:9726":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2394:5451":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11872:8749":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:15678:5299":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:830:8641":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4957:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6802:7989":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46628:7341":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:80:9459":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:32401:2989":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13146:4647":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:11437:8694":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5025:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:2541:2682":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:2076:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:3264:8474":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:43120:7239":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12289:4585":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:4303:9492":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4830:5521":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:5863:22438":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"9:422:21427":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5622:6485":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:7744:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:15039:5112":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:44067:8082":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11915:22607":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:22602:33211":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:16187:5423":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:12364:1177":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:4925:3516":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3300:32750":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10524:8479":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:42212:3301":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:23093:3497":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:39883:7085":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:43196:4060":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1920:8040":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:7504:8642":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6666:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:2483:9647":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:14271:4888":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"20:290:3811":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"1:4153:9669":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:22815:7786":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12969:4628":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:39896:7086":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44928:34511":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:10137:22486":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:4614:5515":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:8063:3526":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44874:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:32931:4028":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:2366:8647":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:10215:7619":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:4990:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:8759:15128":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1616:8642":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6411:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"14:0:3369":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2338:5442":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:7826:8656":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:42468:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:44348:8102":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:10409:9128":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:15301:5175":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:7831:15124":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:43188:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12369:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8869:7641":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:5570:6459":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:21827:9738":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7152:9733":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15944:4670":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:2708:5465":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"20:271:3812":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"17:14933:5096":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:11672:8813":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:10322:8738":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:5995:7519":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6652:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9410:3545":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:3778:5502":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:9268:8790":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:8259:5652":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4531:5512":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:3875:8657":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:351:9476":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:12332:33031":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5347:5532":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:5769:7961":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:12966:8690":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7741:5493":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12422:7950":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:1098:8467":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5186:6283":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:14752:4967":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13187:4656":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:5298:3531":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:6867:3550":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"11:873:8634":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5586:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:5006:5527":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:12365:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:14356:4901":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13774:4795":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:34040:4034":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:3440:4043":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:2157:6971":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5311:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5139:6278":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:5602:8755":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6940:5594":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2548:5458":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12378:735":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:9781:22503":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6665:22443":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9671:22488":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13553:4739":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:9737:22487":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"9:328:5856":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:3667:4106":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9984:22508":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:437:4449":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:2037:8469":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:7354:30465":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:1223:9489":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:22688:9656":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:6374:30213":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:675:8731":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46095:7293":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10343:8799":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:8063:9569":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8666:3515":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:8461:4146":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:6631:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1914:8039":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13959:4824":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:40680:8106":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:12328:7938":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10905:8485":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:32384:4229":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:46723:7344":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:6122:3531":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6560:5477":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:2572:5459":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:40639:8104":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:4570:36226":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:9400:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:2768:5468":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:44844:7266":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:13272:4684":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12695:8555":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"14:160:8623":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:22470:9821":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:1620:8656":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:2203:8470":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12792:4463":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3828:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:3716:3181":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46516:7337":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7604:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14212:4882":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:5897:5536":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:22921:6978":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:3339:8039":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45852:7270":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:13606:4753":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:15836:5332":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:8319:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9234:9732":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14038:4835":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:21768:9739":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:4721:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:10340:4068":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:42390:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:8343:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:14529:4929":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11706:7649":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:14079:4841":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:15799:5325":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:40809:8086":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4937:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:44573:8183":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11392:8502":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:5538:14887":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6770:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:3686:33730":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1645:8655":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:7604:5491":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11213:27476":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:40744:4119":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14012:4832":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:23252:7003":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11524:8507":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:3029:4395":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:1507:5979":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1539:5995":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6574:5494":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11851:4263":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:9169:3301":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1922:8740":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12225:8541":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2810:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:12491:8699":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:3306:3181":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:3486:4124":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:3559:4094":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:15333:5183":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:2345:6975":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:41390:8138":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:3347:8037":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:635:4387":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:4995:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5494:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:9102:8788":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4929:6205":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8518:4118":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10769:36607":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:9807:22493":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:23208:6999":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:12366:1878":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:23106:3496":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:481:7901":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:42168:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:5781:5479":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13024:22514":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3393:4141":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:44452:8171":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10185:4501":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11221:7263":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:5051:6262":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11666:8209":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:11244:4120":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15168:5142":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:5682:6510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11717:8212":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:1239:36326":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:40898:8115":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:4325:9493":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:735:8649":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:11274:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:3209:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:38366:2674":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:15266:5166":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13308:4689":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1410:8636":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2136:15161":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:43394:4242":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8842:7788":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:22952:6979":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:15190:5148":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44635:8185":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:592:8727":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:12986:14899":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:16050:4684":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:7564:7597":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:2440:8642":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:7869:4496":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:5935:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:15126:5128":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7727:5492":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13877:4814":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:11411:5876":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:39768:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4816:6133":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:5844:2350":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:40782:8711":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:32324:5814":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:4886:9689":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5069:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43634:7255":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10573:36610":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:608:8457":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11189:7448":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2418:5452":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9886:22505":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:3592:4103":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:45999:7287":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:8302:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:3256:3914":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5482:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10612:8480":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11773:4608":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:46013:7288":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:726:4391":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4869:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:32489:3915":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:5168:3766":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8858:7447":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:47200:7392":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:291:36200":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6813:7564":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:42546:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:39714:4047":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:12863:4624":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:3196:5441":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:96:9460":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5301:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:15313:5176":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12388:7948":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13344:4696":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"15:288:9467":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5036:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:6160:21549":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:708:8627":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:42782:3532":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:4217:4016":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11661:7928":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:7308:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43159:5688":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6335:8595":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"7:0:1906":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:2551:36575":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11016:27495":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"9:53:21443":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:14260:4887":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"20:347:3818":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"2:23219:7000":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:7111:7579":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:2533:5810":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:40829:8712":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:16259:4701":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"15:394:21541":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:4986:8478":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:5075:5529":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5381:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12342:7942":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:2467:6970":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9916:22506":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5670:6505":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3658:32828":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:40921:8119":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:41008:4385":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:44849:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:0:1718":{"crate_id":1,"path":["std"],"kind":"module"},"16:4468:5510":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10483:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:46176:7305":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:10500:30973":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:13509:4722":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7006:8599":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:0:3363":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:2137:8636":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:3101:35890":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:42585:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3492:4048":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"13:229:5809":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:44431:14914":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:5258:8753":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12379:912":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:44546:8182":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:2420:3301":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:40754:9628":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:564:5955":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:500:30205":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:16176:5422":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:12380:894":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4211:9673":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7321:3774":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40688:7217":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8787:7442":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:1075:8006":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:15624:5278":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8640:8787":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:44988:8194":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11567:8510":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:4062:5507":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44025:8149":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:491:7902":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:3842:5504":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:7325:30210":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:15116:5127":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6480:5476":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7590:5490":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11825:8525":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:473:5903":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9307:8795":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:8014:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:4913:5524":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11702:7931":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:9714:30197":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:44099:8154":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:8488:4115":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:5802:22437":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:740:8628":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:47017:7381":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:7487:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:6972:8072":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:8207:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:40951:8122":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:491:5911":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"9:0:3365":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5334:6356":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:10982:22521":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:13196:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5295:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:9132:7449":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:21736:34117":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:45867:7273":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:21719:34119":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:23241:7002":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:5992:3535":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8021:4078":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6634:5482":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46898:7378":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8550:8785":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:44467:8177":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:39786:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:38421:4040":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:44498:8181":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9441:3577":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:15957:5350":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:2377:8049":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12264:8544":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:7716:14974":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:2469:9643":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:465:5898":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6902:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:4743:5518":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:15383:5198":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:4587:5514":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:7757:7607":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:44332:8167":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5007:6241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:15273:5167":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:12960:14902":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10915:8197":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:44907:7628":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"7:79:21418":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:40802:4150":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:11399:8082":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12621:4604":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15822:5329":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:3906:4263":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13723:4782":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:11364:8693":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:4167:9671":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:43449:8146":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:44008:7623":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:15418:5206":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6765:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8248:4131":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:42743:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:8290:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:16198:5424":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:42704:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5507:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:1489:5971":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:798:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:4139:9668":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:44153:8157":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:527:9547":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13797:4800":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6782:22444":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:13909:2345":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8069:9615":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:1675:6088":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:33895:4033":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:9938:22507":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:1140:8639":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:22604:15150":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:4981:3518":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13473:4717":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:4927:3517":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:39806:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:1897:8738":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4947:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14414:4909":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4881:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4883:9711":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:44171:8158":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:7715:14973":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:497:5914":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:33627:3580":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:4109:9666":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10092:22510":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:13618:8704":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:44915:7267":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:6623:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15569:5259":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11090:30209":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10317:4506":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:41962:9664":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:3303:32753":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:4641:5516":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"13:110:36579":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7085:7999":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:4462:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43874:8085":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12659:8552":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"11:1085:36578":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:40930:8120":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5271:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11947:8215":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11256:7464":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:43966:8088":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10439:4510":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"0:180:2355":{"crate_id":0,"path":["mio","features"],"kind":"module"},"16:8136:8021":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:6785:3301":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:15222:5154":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:16032:4674":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:12993:22513":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8555:9663":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:6853:3549":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:40992:8126":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2000:816":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"2:4450:8683":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8699:3770":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"11:772:8035":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3065:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:10592:8788":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:42074:33067":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:6977:8070":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:396:9481":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4694:9690":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11075:4521":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:8188:8622":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:284:3815":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"2:42429:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:4725:8685":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:46159:7304":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13046:4633":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13753:4791":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"10:0:3366":{"crate_id":10,"path":["adler"],"kind":"module"},"2:42301:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"18:573:4367":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:542:7769":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:718:4388":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12371:4626":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:2838:5471":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:1727:6110":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8470:4148":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:45882:7274":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:434:9484":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:2528:5457":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12530:8549":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:7938:30194":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:3903:4255":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8256:4133":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3841:9665":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:538:4372":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7570:5489":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:46241:7308":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6680:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3249:3912":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:1521:5984":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7014:22445":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4921:6202":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:9360:7458":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1551:6004":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6777:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:6427:8598":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:2323:8636":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:3095:36330":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:41032:8130":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:581:3929":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3460:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:22735:9816":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:11256:7920":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:46821:7377":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14855:5053":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:22223:9741":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15769:5320":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15356:5191":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:47117:7385":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:40528:33064":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:31187:3929":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:798:8642":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:42366:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46258:7309":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:2825:6963":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12337:9570":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:14025:4833":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:13755:8705":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40851:8108":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14131:4846":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7355:5634":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:403:8465":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7769:5664":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:39746:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:15931:4656":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:11812:8523":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6079:7528":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:42204:4016":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:16138:5408":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:2939:14976":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2715:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:15176:5145":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:2854:5472":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:4354:9495":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:4794:8056":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:41157:4118":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:6493:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1632:6062":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10155:4499":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:11520:8696":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:30802:4060":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4821:6815":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:3422:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6895:5588":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:578:5963":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:816:3498":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"}},"external_crates":{"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.20/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}