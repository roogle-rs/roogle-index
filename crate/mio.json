{"root":"0:0:1809","crate_version":"0.8.8","includes_private":false,"index":{"0:190:1040":{"id":"0:190:1040","crate_id":0,"name":"partial_cmp","span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30913:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:2621":{"id":"0:137:2621","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[195,4],"end":[195,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"b:2:2541-0:268:2500":{"id":"b:2:2541-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2537-0:177:1671":{"id":"b:2:2537-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:29:1986":{"id":"0:29:1986","crate_id":0,"name":"remove","span":{"filename":"src/interest.rs","begin":[90,4],"end":[92,5]},"visibility":"public","docs":"Removes `other` `Interest` from `self`.\n\nReturns `None` if the set would be empty after removing `other`.\n\n```\nuse mio::Interest;\n\nconst RW_INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n\n// As long a one interest remain this will return `Some`.\nlet w_interest = RW_INTERESTS.remove(Interest::READABLE).unwrap();\nassert!(!w_interest.is_readable());\nassert!(w_interest.is_writable());\n\n// Removing all interests from the set will return `None`.\nassert_eq!(w_interest.remove(Interest::WRITABLE), None);\n\n// Its also possible to remove multiple interests at once.\nassert_eq!(RW_INTERESTS.remove(RW_INTERESTS), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2540:3186":{"id":"2:2540:3186","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2255":{"id":"0:64:2255","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[416,4],"end":[418,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4730:2007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174-0:264:1674":{"id":"0:174-0:264:1674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[70,0],"end":[70,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"wasi\"))]"],"deprecation":null,"inner":{"import":{"source":"waker::Waker","name":"Waker","id":"0:264:1674","glob":false}}},"2:12167:34658":{"id":"2:12167:34658","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:27801":{"id":"2:12194:27801","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:3372":{"id":"5:5445:3372","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:177:1671":{"id":"a:2:2681:220-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12192:34666":{"id":"2:12192:34666","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11737:127","`FromStr`":"2:11736:3066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11736:3066","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11736:3066","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:27806":{"id":"2:12198:27806","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:28306":{"id":"2:12098:28306","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12097:28305"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:2612":{"id":"2:12076:2612","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:58:1672":{"id":"b:2:2547-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:2501":{"id":"0:272:2501","crate_id":0,"name":"Iter","span":{"filename":"src/event/events.rs","begin":[76,0],"end":[79,1]},"visibility":"public","docs":"[`Events`] iterator.\n\nThis struct is created by the [`iter`] method on [`Events`].\n\n[`Events`]: struct.Events.html\n[`iter`]: struct.Events.html#method.iter\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:2698:228-0:272:2501","a:2:2681:220-0:272:2501","a:2:8313:3025-0:272:2501","a:2:2738:2842-0:272:2501","a:2:8314:3024-0:272:2501","b:2:2250-0:272:2501","b:2:2247-0:272:2501","b:2:2552-0:272:2501","b:2:3317-0:272:2501","b:2:2547-0:272:2501","b:2:7270-0:272:2501","b:2:2537-0:272:2501","b:2:2541-0:272:2501","b:5:680-0:272:2501","0:279","0:140","0:276"]}}},"5:5435:35320":{"id":"5:5435:35320","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:264:1674":{"id":"b:2:2541-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:268:2500":{"id":"0:268:2500","crate_id":0,"name":"Event","span":{"filename":"src/event/event.rs","begin":[17,0],"end":[19,1]},"visibility":"public","docs":"A readiness event.\n\n`Event` is a readiness state paired with a [`Token`]. It is returned by\n[`Poll::poll`].\n\nFor more documentation on polling and events, see [`Poll`].\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n[`Token`]: ../struct.Token.html","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:102","a:2:2698:228-0:268:2500","a:2:2681:220-0:268:2500","a:2:8313:3025-0:268:2500","a:2:2738:2842-0:268:2500","a:2:8314:3024-0:268:2500","b:2:2250-0:268:2500","b:2:2247-0:268:2500","b:2:2552-0:268:2500","b:2:3317-0:268:2500","b:2:2547-0:268:2500","b:2:2537-0:268:2500","b:2:2541-0:268:2500","b:5:680-0:268:2500","0:270","0:113"]}}},"b:2:2547-0:177:1671":{"id":"b:2:2547-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:126:1670":{"id":"b:2:2250-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25103"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:186":{"id":"0:36:186","crate_id":0,"name":"Output","span":{"filename":"src/interest.rs","begin":[121,4],"end":[121,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[415,0],"end":[419,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4731:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2255"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:671":{"id":"0:66:671","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[422,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:429":{"id":"0:260:429","crate_id":0,"name":"cmp","span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30913:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:248:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:142:2621":{"id":"0:142:2621","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[204,4],"end":[204,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"0:161:2333":{"id":"0:161:2333","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[127,4],"end":[134,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/event/source.rs","begin":[114,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Source","id":"0:154:2309","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Source","id":"0:154:2309","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:276:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:160:2305","0:161:2333","0:162:2349"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12087:1974":{"id":"2:12087:1974","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2698:228-0:272:2501":{"id":"a:2:2698:228-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12110:28323":{"id":"2:12110:28323","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:56:195":{"id":"b:2:2541-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:278:671":{"id":"0:278:671","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2698:228-0:58:1672":{"id":"a:2:2698:228-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:34:1996":{"id":"0:34:1996","crate_id":0,"name":"is_priority","span":{"filename":"src/interest.rs","begin":[115,4],"end":[117,5]},"visibility":"public","docs":"Returns true if `Interest` contains priority readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8313:3025-0:56:195":{"id":"a:2:8313:3025-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:7272:2621":{"id":"2:7272:2621","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:7382:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:2:2537-0:272:2501":{"id":"b:2:2537-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2540:3186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2552-0:58:1672":{"id":"b:2:2552-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:166-0:272:2501":{"id":"0:166-0:272:2501","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,31],"end":[9,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::events::Iter","name":"Iter","id":"0:272:2501","glob":false}}},"2:12197:27805":{"id":"2:12197:27805","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:2791":{"id":"2:12151:2791","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11776:13920","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:7387","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:243:1673":{"id":"b:5:680-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3249","5:683:3250","5:684:3251"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:251":{"id":"0:251","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2698:228-0:56:195":{"id":"a:2:2698:228-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2247-0:264:1674":{"id":"b:2:2247-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[82,0],"end":[96,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:944","0:95:2497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:272:2501":{"id":"b:2:2247-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2249:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2738:2842-0:58:1672":{"id":"a:2:2738:2842-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3317-0:177:1671":{"id":"b:2:3317-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:1990":{"id":"0:105:1990","crate_id":0,"name":"is_writable","span":{"filename":"src/event/event.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Returns true if the event contains writable readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[81,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:129:2608","0:130:2609","0:131:2612","0:132:799","0:133:2619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1809":{"id":"0:0:1809","crate_id":0,"name":"mio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[266,1]},"visibility":"public","docs":"Mio is a fast, low-level I/O library for Rust focusing on non-blocking APIs\nand event notification for building high performance I/O apps with as little\noverhead as possible over the OS abstractions.\n\n# Usage\n\nUsing Mio starts by creating a [`Poll`], which reads events from the OS and\nputs them into [`Events`]. You can handle I/O events from the OS with it.\n\nFor more detail, see [`Poll`].\n\n[`Poll`]: ../mio/struct.Poll.html\n[`Events`]: ../mio/event/struct.Events.html\n\n## Examples\n\nExamples can found in the `examples` directory of the source code, or [on\nGitHub].\n\n[on GitHub]: https://github.com/tokio-rs/mio/tree/master/examples\n\n## Guide\n\nA getting started guide is available in the [`guide`] module.\n\n## Available features\n\nThe available features are described in the [`features`] module.","links":{"`guide`":"0:176:1702","`features`":"0:175:1685"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms,\nunused_imports, dead_code)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:96:1665","0:175:1685","0:176:1702","0:168-0:126:1670","0:169-0:177:1671","0:171-0:56:195","0:172-0:58:1672","0:173-0:243:1673","0:174-0:264:1674"],"is_stripped":false}}},"2:12136:34650":{"id":"2:12136:34650","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11776:13920","str::split":"2:12124:25113","prim@char":"1:11978:418","str::split_terminator":"2:12133:34649"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:7379","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167-0:154:2309":{"id":"0:167-0:154:2309","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[10,0],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::source::Source","name":"Source","id":"0:154:2309","glob":false}}},"0:175:1685":{"id":"0:175:1685","crate_id":0,"name":"features","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,16]},"visibility":"public","docs":"# Mio's optional features.\n\nThis document describes the available features in Mio.\n\n## `os-poll` (disabled)\n\nMio by default provides only a shell implementation that `panic!`s the\nmoment it is actually run. To run it requires OS support, this is\nenabled by activating the `os-poll` feature.\n\nThis makes `Poll`, `Registry` and `Waker` functional.\n\n## `os-ext` (disabled)\n\n`os-ext` enables additional OS specific facilities. These facilities can\nbe found in the `unix` and `windows` module.\n\n## Network types (disabled)\n\nThe `net` feature enables networking primitives in the `net` module.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12195:29428":{"id":"2:12195:29428","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39626:29424","Self::is_ascii":"2:12194:27801"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39626:29424","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:7403":{"id":"2:12100:7403","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:7373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:28316":{"id":"2:12130:28316","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11776:13920","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split":"2:12124:25113"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:7302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:28320":{"id":"2:12142:28320","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11978:418","str::splitn":"2:12139:28318","self::pattern":"2:11776:13920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:7382","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[136,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:41:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[693,0],"end":[697,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:58:1672":{"id":"b:2:2247-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12160:34655":{"id":"2:12160:34655","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11776:13920","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::match_indices":"2:12157:34654"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12202:34668":{"id":"2:12202:34668","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:34668"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:7321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:58:1672":{"id":"b:2:2541-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2547-0:126:1670":{"id":"b:2:2547-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281:422":{"id":"0:281:422","crate_id":0,"name":"clone","span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:272:2501":{"id":"b:2:2250-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2252:25103"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2738:2842-0:243:1673":{"id":"a:2:2738:2842-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2247-0:243:1673":{"id":"b:2:2247-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8313:3025-0:272:2501":{"id":"a:2:8313:3025-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12199:34667":{"id":"2:12199:34667","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:34667"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:7322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12074":{"id":"2:12074","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12075:816","2:12076:2612","2:12077:34642","2:12078:34643","2:12080:34644","2:12083:25780","2:12084:34645","2:12085:314","2:12086:28283","2:12087:1974","2:12089:28280","2:12091:28281","2:12093:28282","2:12095:34646","2:12096:34647","2:12097:28305","2:12098:28306","2:12099:7393","2:12100:7403","2:12101:6875","2:12102:31766","2:12103:31765","2:12104:8373","2:12105:34648","2:12106:31762","2:12107:28322","2:12110:28323","2:12113:28324","2:12116:3230","2:12120:3192","2:12124:25113","2:12127:28314","2:12130:28316","2:12133:34649","2:12136:34650","2:12139:28318","2:12142:28320","2:12145:34651","2:12148:34652","2:12151:2791","2:12154:34653","2:12157:34654","2:12160:34655","2:12163:34656","2:12165:34657","2:12167:34658","2:12169:34659","2:12170:34660","2:12171:34661","2:12174:34662","2:12177:25391","2:12180:28325","2:12183:34663","2:12186:34664","2:12189:34665","2:12192:34666","2:12194:27801","2:12195:29428","2:12196:3042","2:12197:27805","2:12198:27806","2:12199:34667","2:12201:8543","2:12202:34668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:93:944":{"id":"0:93:944","crate_id":0,"name":"new","span":{"filename":"src/waker.rs","begin":[84,4],"end":[88,5]},"visibility":"public","docs":"Create a new `Waker`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32097:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:188:422":{"id":"0:188:422","crate_id":0,"name":"clone","span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:58:1672":{"id":"b:2:2537-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12139:28318":{"id":"2:12139:28318","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920","str::rsplitn":"2:12142:28320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:7381","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[427,0],"end":[691,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:2305","0:70:2333","0:72:2349","0:74:2354"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2547-0:268:2500":{"id":"b:2:2547-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,9],"end":[131,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2693:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12091:28281":{"id":"2:12091:28281","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:271:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:109:1996":{"id":"0:109:1996","crate_id":0,"name":"is_priority","span":{"filename":"src/event/event.rs","begin":[150,4],"end":[152,5]},"visibility":"public","docs":"Returns true if the event contains priority readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\npriority event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLPRI`      |\n| [kqueue]      | *Not supported* |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,40],"end":[131,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:281:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:260:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2543:697":{"id":"2:2543:697","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:34651":{"id":"2:12145:34651","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169-0:177:1671":{"id":"0:169-0:177:1671","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,0],"end":[66,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"interest::Interest","name":"Interest","id":"0:177:1671","glob":false}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[421,0],"end":[425,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:7273:2622":{"id":"2:7273:2622","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"2:12099:7393":{"id":"2:12099:7393","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:7372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:2612":{"id":"0:131:2612","crate_id":0,"name":"is_empty","span":{"filename":"src/event/events.rs","begin":[120,4],"end":[122,5]},"visibility":"public","docs":"Returns `true` if `self` contains no `Event` values.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert!(events.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:177:1671":{"id":"b:2:2247-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","ge","lt"],"trait":{"name":"PartialOrd","id":"2:2353:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:258:1040"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2681:220-0:126:1670":{"id":"a:2:2681:220-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:680-0:177:1671":{"id":"b:5:680-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3249","5:683:3250","5:684:3251"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:2305":{"id":"0:160:2305","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[118,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:816":{"id":"2:12075:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:1665":{"id":"0:209:1665","crate_id":0,"name":"event","span":{"filename":"src/sys/shell/selector.rs","begin":[83,0],"end":[83,13]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(clippy :: trivially_copy_pass_by_ref)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12148:34652":{"id":"2:12148:34652","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:34665":{"id":"2:12189:34665","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2544":{"id":"0:107:2544","crate_id":0,"name":"is_read_closed","span":{"filename":"src/event/event.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns true if the event contains read closed readiness.\n\n# Notes\n\nRead closed readiness can be expected after any of the following have\noccurred:\n* The local stream has shutdown the read half of its socket\n* The local stream has shutdown both the read half and the write half\n  of its socket\n* The peer stream has shutdown the write half its socket; this sends a\n  `FIN` packet that has been received by the local stream\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when read half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | `EPOLLIN` and `EPOLLRDHUP` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8314:3024-0:243:1673":{"id":"a:2:8314:3024-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:177:1671":{"id":"b:2:2552-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8314:3024-0:264:1674":{"id":"a:2:8314:3024-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:85:697"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8314:3024-0:268:2500":{"id":"a:2:8314:3024-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8314:3024-0:126:1670":{"id":"a:2:8314:3024-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[202,0],"end":[230,1]},"visibility":"default","docs":"When the [alternate] flag is enabled this will print platform specific\ndetails, for example the fields of the `kevent` structure on platforms that\nuse `kqueue(2)`. Note however that the output of this implementation is\n**not** consider a part of the stable API.\n\n[alternate]: fmt::Formatter::alternate","links":{"fmt::Formatter::alternate":"2:9260:2574"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:114:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:56:195":{"id":"0:56:195","crate_id":0,"name":"Poll","span":{"filename":"src/poll.rs","begin":[248,0],"end":[250,1]},"visibility":"public","docs":"Polls for readiness events on all registered values.\n\n`Poll` allows a program to monitor a large number of [`event::Source`]s,\nwaiting until one or more become \"ready\" for some class of operations; e.g.\nreading and writing. An event source is considered ready if it is possible\nto immediately perform a corresponding operation; e.g. [`read`] or\n[`write`].\n\nTo use `Poll`, an `event::Source` must first be registered with the `Poll`\ninstance using the [`register`] method on its associated `Register`,\nsupplying readiness interest. The readiness interest tells `Poll` which\nspecific operations on the handle to monitor for readiness. A `Token` is\nalso passed to the [`register`] function. When `Poll` returns a readiness\nevent, it will include this token.  This associates the event with the\nevent source that generated the event.\n\n[`event::Source`]: ./event/trait.Source.html\n[`read`]: ./net/struct.TcpStream.html#method.read\n[`write`]: ./net/struct.TcpStream.html#method.write\n[`register`]: struct.Registry.html#method.register\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{self, SocketAddr};\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = net::TcpListener::bind(addr)?;\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(server.local_addr()?)?;\n\n// Register the stream with `Poll`\npoll.registry().register(&mut stream, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n# Portability\n\nUsing `Poll` provides a portable interface across supported platforms as\nlong as the caller takes the following into consideration:\n\n### Spurious events\n\n[`Poll::poll`] may return readiness events even if the associated\nevent source is not actually ready. Given the same code, this may\nhappen more on some platforms than others. It is important to never assume\nthat, just because a readiness event was received, that the associated\noperation will succeed as well.\n\nIf operation fails with [`WouldBlock`], then the caller should not treat\nthis as an error, but instead should wait until another readiness event is\nreceived.\n\n### Draining readiness\n\nOnce a readiness event is received, the corresponding operation must be\nperformed repeatedly until it returns [`WouldBlock`]. Unless this is done,\nthere is no guarantee that another readiness event will be delivered, even\nif further data is received for the event source.\n\n[`WouldBlock`]: std::io::ErrorKind::WouldBlock\n\n### Readiness operations\n\nThe only readiness operations that are guaranteed to be present on all\nsupported platforms are [`readable`] and [`writable`]. All other readiness\noperations may have false negatives and as such should be considered\n**hints**. This means that if a socket is registered with [`readable`]\ninterest and either an error or close is received, a readiness event will\nbe generated for the socket, but it **may** only include `readable`\nreadiness. Also note that, given the potential for spurious events,\nreceiving a readiness event with `read_closed`, `write_closed`, or `error`\ndoesn't actually mean that a `read` on the socket will return a result\nmatching the readiness event.\n\nIn other words, portable programs that explicitly check for [`read_closed`],\n[`write_closed`], or [`error`] readiness should be doing so as an\n**optimization** and always be able to handle an error or close situation\nwhen performing the actual read operation.\n\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`writable`]: ./event/struct.Event.html#method.is_writable\n[`error`]: ./event/struct.Event.html#method.is_error\n[`read_closed`]: ./event/struct.Event.html#method.is_read_closed\n[`write_closed`]: ./event/struct.Event.html#method.is_write_closed\n\n### Registering handles\n\nUnless otherwise noted, it should be assumed that types implementing\n[`event::Source`] will never become ready unless they are registered with\n`Poll`.\n\nFor example:\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\nuse std::thread;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut sock = TcpStream::connect(listener.local_addr()?)?;\n\nthread::sleep(Duration::from_secs(1));\n\nlet poll = Poll::new()?;\n\n// The connect is not guaranteed to have started until it is registered at\n// this point\npoll.registry().register(&mut sock, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n### Dropping `Poll`\n\nWhen the `Poll` instance is dropped it may cancel in-flight operations for\nthe registered [event sources], meaning that no further events for them may\nbe received. It also means operations on the registered event sources may no\nlonger work. It is up to the user to keep the `Poll` instance alive while\nregistered event sources are being used.\n\n[event sources]: ./event/trait.Source.html\n\n### Accessing raw fd/socket/handle\n\nMio makes it possible for many types to be converted into a raw file\ndescriptor (fd, Unix), socket (Windows) or handle (Windows). This makes it\npossible to support more operations on the type than Mio supports, for\nexample it makes [mio-aio] possible. However accessing the raw fd is not\nwithout it's pitfalls.\n\nSpecifically performing I/O operations outside of Mio on these types (via\nthe raw fd) has unspecified behaviour. It could cause no more events to be\ngenerated for the type even though it returned `WouldBlock` (in an operation\ndirectly accessing the fd). The behaviour is OS specific and Mio can only\nguarantee cross-platform behaviour if it can control the I/O.\n\n[mio-aio]: https://github.com/asomers/mio-aio\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being considered\na breaking change, don't depend on this, it's just here to inform the user.\nCurrently the kqueue and epoll implementation support direct I/O operations\non the fd without Mio's knowledge. Windows however needs **all** I/O\noperations to go through Mio otherwise it is not able to update it's\ninternal state properly and won't generate events.\n\n### Polling without registering event sources\n\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being\nconsidered a breaking change, don't depend on this, it's just here to inform\nthe user. On platforms that use epoll, kqueue or IOCP (see implementation\nnotes below) polling without previously registering [event sources] will\nresult in sleeping forever, only a process signal will be able to wake up\nthe thread.\n\nOn WASM/WASI this is different as it doesn't support process signals,\nfurthermore the WASI specification doesn't specify a behaviour in this\nsituation, thus it's up to the implementation what to do here. As an\nexample, the wasmtime runtime will return `EINVAL` in this situation, but\ndifferent runtimes may return different results. If you have further\ninsights or thoughts about this situation (and/or how Mio should handle it)\nplease add you comment to [pull request#1580].\n\n[event sources]: crate::event::Source\n[pull request#1580]: https://github.com/tokio-rs/mio/pull/1580\n\n# Implementation notes\n\n`Poll` is backed by the selector provided by the operating system.\n\n|      OS       |  Selector |\n|---------------|-----------|\n| Android       | [epoll]   |\n| DragonFly BSD | [kqueue]  |\n| FreeBSD       | [kqueue]  |\n| iOS           | [kqueue]  |\n| illumos       | [epoll]   |\n| Linux         | [epoll]   |\n| NetBSD        | [kqueue]  |\n| OpenBSD       | [kqueue]  |\n| Windows       | [IOCP]    |\n| macOS         | [kqueue]  |\n\nOn all supported platforms, socket operations are handled by using the\nsystem selector. Platform specific extensions (e.g. [`SourceFd`]) allow\naccessing other features provided by individual system selectors. For\nexample, Linux's [`signalfd`] feature can be used by registering the FD with\n`Poll` via [`SourceFd`].\n\nOn all platforms except windows, a call to [`Poll::poll`] is mostly just a\ndirect call to the system selector. However, [IOCP] uses a completion model\ninstead of a readiness model. In this case, `Poll` must adapt the completion\nmodel Mio's API. While non-trivial, the bridge layer is still quite\nefficient. The most expensive part being calls to `read` and `write` require\ndata to be copied into an intermediate buffer before it is passed to the\nkernel.\n\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2\n[IOCP]: https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports\n[`signalfd`]: https://man7.org/linux/man-pages/man2/signalfd.2.html\n[`SourceFd`]: unix/struct.SourceFd.html\n[`Poll::poll`]: struct.Poll.html#method.poll","links":{"std::io::ErrorKind::WouldBlock":"1:8031:3321"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:60","a:2:2698:228-0:56:195","a:2:2681:220-0:56:195","a:2:8313:3025-0:56:195","a:2:2738:2842-0:56:195","a:2:8314:3024-0:56:195","b:2:2250-0:56:195","b:2:2247-0:56:195","b:2:2552-0:56:195","b:2:3317-0:56:195","b:2:2547-0:56:195","b:2:2537-0:56:195","b:2:2541-0:56:195","0:63","0:65"]}}},"0:133:2619":{"id":"0:133:2619","crate_id":0,"name":"clear","span":{"filename":"src/event/events.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Clearing all `Event` values from container explicitly.\n\n# Notes\n\nEvents are cleared before every `poll`, so it is not required to call\nthis manually.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n// Clear all events.\nevents.clear();\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:8373":{"id":"2:12104:8373","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:3345","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:3230":{"id":"2:12116:3230","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8314:3024-0:56:195":{"id":"a:2:8314:3024-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12196:3042":{"id":"2:12196:3042","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2305":{"id":"0:155:2305","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[83,4],"end":[88,24]},"visibility":"default","docs":"Register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use [`Registry::register`]\ninstead. Implementors should handle registration by delegating the call\nto another `Source` type.\n\n[`Registry::register`]: ../struct.Registry.html#method.register","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:2738:2842-0:177:1671":{"id":"a:2:2738:2842-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:37:364":{"id":"0:37:364","crate_id":0,"name":"bitor","span":{"filename":"src/interest.rs","begin":[124,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"Self"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:365":{"id":"0:39:365","crate_id":0,"name":"bitor_assign","span":{"filename":"src/interest.rs","begin":[131,4],"end":[133,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2252:25103":{"id":"2:2252:25103","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8314:3024-0:58:1672":{"id":"a:2:8314:3024-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:139:788":{"id":"0:139:788","crate_id":0,"name":"into_iter","span":{"filename":"src/event/events.rs","begin":[198,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7266:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:268:2500":{"id":"b:2:2247-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2541-0:272:2501":{"id":"b:2:2541-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12165:34657":{"id":"2:12165:34657","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:243:1673":{"id":"a:2:2681:220-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12177:25391":{"id":"2:12177:25391","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:34643":{"id":"2:12078:34643","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:56:195":{"id":"b:2:2552-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:243:1673":{"id":"b:2:2250-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25103"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8313:3025-0:58:1672":{"id":"a:2:8313:3025-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:272:2501":{"id":"b:2:2552-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12183:34663":{"id":"2:12183:34663","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:799":{"id":"0:132:799","crate_id":0,"name":"iter","span":{"filename":"src/event/events.rs","begin":[148,4],"end":[153,5]},"visibility":"public","docs":"Returns an iterator over the `Event` values.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5428:35318":{"id":"5:5428:35318","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2682","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:3478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2682","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:3478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:503":{"id":"0:145:503","crate_id":0,"name":"count","span":{"filename":"src/event/events.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2738:2842-0:272:2501":{"id":"a:2:2738:2842-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:162:2349":{"id":"0:162:2349","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:2609":{"id":"0:130:2609","crate_id":0,"name":"capacity","span":{"filename":"src/event/events.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Returns the number of `Event` values that `self` can hold.\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8313:3025-0:264:1674":{"id":"a:2:8313:3025-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:192:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:267:671":{"id":"0:267:671","crate_id":0,"name":"fmt","span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[129,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOrAssign","id":"2:2840:1998","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:39:365"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2681:220-0:56:195":{"id":"a:2:2681:220-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3317-0:243:1673":{"id":"b:2:3317-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:245:1616":{"id":"0:245:1616","crate_id":0,"name":"0","span":{"filename":"src/token.rs","begin":[132,17],"end":[132,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"b:2:2541-0:126:1670":{"id":"b:2:2541-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:138:2622":{"id":"0:138:2622","crate_id":0,"name":"IntoIter","span":{"filename":"src/event/events.rs","begin":[196,4],"end":[196,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}},"2:12105:34648":{"id":"2:12105:34648","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:7389","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2255":{"id":"0:81:2255","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[701,4],"end":[703,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4730:2007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2698:228-0:243:1673":{"id":"a:2:2698:228-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:243:1673":{"id":"b:2:2552-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12113:28324":{"id":"2:12113:28324","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[21,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:1662","0:104:1988","0:105:1990","0:106:2529","0:107:2544","0:108:2553","0:109:1996","0:110:1992","0:111:1994"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2738:2842-0:126:1670":{"id":"a:2:2738:2842-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[257,0],"end":[412,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:61:2180","0:62:1056"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:56:195":{"id":"b:2:2247-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:104:1988":{"id":"0:104:1988","crate_id":0,"name":"is_readable","span":{"filename":"src/event/event.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Returns true if the event contains readable readiness.\n\n# Notes\n\nOut-of-band (OOB) data also triggers readable events. But must\napplication don't actually read OOB data, this could leave an\napplication open to a Denial-of-Service (Dos) attack, see\n<https://github.com/sandstorm-io/sandstorm-website/blob/58f93346028c0576e8147627667328eaaf4be9fa/_posts/2015-04-08-osx-security-bug.md>.\nHowever because Mio uses edge-triggers it will not result in an infinite\nloop as described in the article above.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:34659":{"id":"2:12169:34659","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2698:228-0:264:1674":{"id":"a:2:2698:228-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12103:31765":{"id":"2:12103:31765","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12102:31766"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:7391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:34644":{"id":"2:12080:34644","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12078:34643"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8314:3024-0:272:2501":{"id":"a:2:8314:3024-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2537-0:243:1673":{"id":"b:2:2537-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:7270-0:272:2501":{"id":"b:2:7270-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7382:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7266:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7272:2621","2:7273:2622","2:7274:788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:176:1702":{"id":"0:176:1702","crate_id":0,"name":"guide","span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,13]},"visibility":"public","docs":"# Getting started guide.\n\nIn this guide we'll do the following:\n\n1. Create a [`Poll`] instance (and learn what it is).\n2. Register an [event source].\n3. Create an event loop.\n\nAt the end you'll have a very small (but quick) TCP server that accepts\nconnections and then drops (disconnects) them.\n\n## 1. Creating a `Poll` instance\n\nUsing Mio starts by creating a [`Poll`] instance, which monitors events\nfrom the OS and puts them into [`Events`]. This allows us to execute I/O\noperations based on what operations are ready.\n\n[`Poll`]: ../struct.Poll.html\n[`Events`]: ../event/struct.Events.html\n\n```ignore\n# use mio::{Poll, Events};\n# fn main() -> std::io::Result<()> {\n// `Poll` allows for polling of readiness events.\nlet poll = Poll::new()?;\n// `Events` is collection of readiness `Event`s and can be filled by\n// calling `Poll::poll`.\nlet events = Events::with_capacity(128);\n# drop((poll, events));\n# Ok(())\n# }\n```\n\nFor example if we're using a [`TcpListener`],  we'll only want to\nattempt to accept an incoming connection *iff* any connections are\nqueued and ready to be accepted. We don't want to waste our time if no\nconnections are ready.\n\n[`TcpListener`]: ../net/struct.TcpListener.html\n\n## 2. Registering event source\n\nAfter we've created a [`Poll`] instance that monitors events from the OS\nfor us, we need to provide it with a source of events. This is done by\nregistering an [event source]. As the name “event source” suggests it is\na source of events which can be polled using a `Poll` instance. On Unix\nsystems this is usually a file descriptor, or a socket/handle on\nWindows.\n\nIn the example below we'll use a [`TcpListener`] for which we'll receive\nan event (from [`Poll`]) once a connection is ready to be accepted.\n\n[event source]: ../event/trait.Source.html\n\n```ignore\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest};\n# fn main() -> std::io::Result<()> {\n# let poll = Poll::new()?;\n# let address = \"127.0.0.1:0\".parse().unwrap();\n// Create a `TcpListener`, binding it to `address`.\nlet mut listener = TcpListener::bind(address)?;\n\n// Next we register it with `Poll` to receive events for it. The `SERVER`\n// `Token` is used to determine that we received an event for the listener\n// later on.\nconst SERVER: Token = Token(0);\npoll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n# Ok(())\n# }\n```\n\nMultiple event sources can be [registered] (concurrently), so we can\nmonitor multiple sources at a time.\n\n[registered]: ../struct.Registry.html#method.register\n\n## 3. Creating the event loop\n\nAfter we've created a [`Poll`] instance and registered one or more\n[event sources] with it, we can [poll] it for events. Polling for events\nis simple, we need a container to store the events: [`Events`] and need\nto do something based on the polled events (this part is up to you, we\ncan't do it all!). If we do this in a loop we've got ourselves an event\nloop.\n\nThe example below shows the event loop in action, completing our small\nTCP server.\n\n[poll]: ../struct.Poll.html#method.poll\n[event sources]: ../event/trait.Source.html\n\n```ignore\n# use std::io;\n# use std::time::Duration;\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest, Events};\n# fn main() -> io::Result<()> {\n# let mut poll = Poll::new()?;\n# let mut events = Events::with_capacity(128);\n# let address = \"127.0.0.1:0\".parse().unwrap();\n# let mut listener = TcpListener::bind(address)?;\n# const SERVER: Token = Token(0);\n# poll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n// Start our event loop.\nloop {\n    // Poll the OS for events, waiting at most 100 milliseconds.\n    poll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n    // Process each event.\n    for event in events.iter() {\n        // We can use the token we previously provided to `register` to\n        // determine for which type the event is.\n        match event.token() {\n            SERVER => loop {\n                // One or more connections are ready, so we'll attempt to\n                // accept them (in a loop).\n                match listener.accept() {\n                    Ok((connection, address)) => {\n                        println!(\"Got a connection from: {}\", address);\n#                       drop(connection);\n                    },\n                    // A \"would block error\" is returned if the operation\n                    // is not ready, so we'll stop trying to accept\n                    // connections.\n                    Err(ref err) if would_block(err) => break,\n                    Err(err) => return Err(err),\n                }\n            }\n#           _ => unreachable!(),\n        }\n    }\n#   return Ok(());\n}\n\nfn would_block(err: &io::Error) -> bool {\n    err.kind() == io::ErrorKind::WouldBlock\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"a:2:8313:3025-0:268:2500":{"id":"a:2:8313:3025-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:271:422":{"id":"0:271:422","crate_id":0,"name":"clone","span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[194,0],"end":[201,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7266:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:137:2621","0:138:2622","0:139:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:172-0:58:1672":{"id":"0:172-0:58:1672","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,21],"end":[67,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"poll::Registry","name":"Registry","id":"0:58:1672","glob":false}}},"0:177:1671":{"id":"0:177:1671","crate_id":0,"name":"Interest","span":{"filename":"src/interest.rs","begin":[17,0],"end":[17,31]},"visibility":"public","docs":"Interest used in registering.\n\nInterest are used in [registering] [`event::Source`]s with [`Poll`], they\nindicate what readiness should be monitored for. For example if a socket is\nregistered with [readable] interests and the socket becomes writable, no\nevent will be returned from a call to [`poll`].\n\n[registering]: struct.Registry.html#method.register\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[readable]: struct.Interest.html#associatedconstant.READABLE\n[`poll`]: struct.Poll.html#method.poll","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:2698:228-0:177:1671","a:2:2681:220-0:177:1671","a:2:8313:3025-0:177:1671","a:2:2738:2842-0:177:1671","a:2:8314:3024-0:177:1671","b:2:2250-0:177:1671","b:2:2247-0:177:1671","b:2:2552-0:177:1671","b:2:3317-0:177:1671","b:2:2547-0:177:1671","b:2:2537-0:177:1671","b:2:2541-0:177:1671","b:5:680-0:177:1671","0:191","0:40","0:189","0:182","0:181","0:35","0:184","0:187","0:38","0:185","0:180"]}}},"2:12107:28322":{"id":"2:12107:28322","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:264:1674":{"id":"b:2:2250-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25103"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:250:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:2333":{"id":"0:156:2333","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[97,4],"end":[102,24]},"visibility":"default","docs":"Re-register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::reregister`] instead. Implementors should handle\nre-registration by either delegating the call to another `Source` type.\n\n[`Registry::reregister`]: ../struct.Registry.html#method.reregister","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:7274:788":{"id":"2:7274:788","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5447:27804":{"id":"5:5447:27804","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12198:27806"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[203,0],"end":[224,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["step_by","partial_cmp_by","collect","max_by_key","find_map","cloned","try_fold","by_ref","take","filter_map","chain","eq_by","cycle","try_find","min","try_for_each","try_collect","lt","scan","enumerate","zip","next_chunk","cmp","is_sorted","array_chunks","rposition","min_by","position","fold","collect_into","gt","flat_map","peekable","intersperse","size_hint","last","count","is_sorted_by","sum","eq","rev","skip","reduce","min_by_key","partition","ne","flatten","partial_cmp","skip_while","ge","intersperse_with","advance_by","le","is_sorted_by_key","product","unzip","map","try_reduce","all","partition_in_place","max","fuse","take_while","for_each","nth","any","__iterator_get_unchecked","cmp_by","copied","max_by","find","is_partitioned","inspect","map_while","filter"],"trait":{"name":"Iterator","id":"2:7382:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:142:2621","0:143:958","0:144:2624","0:145:503"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5432:35319":{"id":"5:5432:35319","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:28325":{"id":"2:12180:28325","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2698:228-0:126:1670":{"id":"a:2:2698:228-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3319:1500":{"id":"2:3319:1500","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39418:6408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,26],"end":[16,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2692:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2250-0:56:195":{"id":"b:2:2250-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25103"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12101:6875":{"id":"2:12101:6875","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:34653":{"id":"2:12154:34653","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11776:13920","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:7388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:34660":{"id":"2:12170:34660","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:422":{"id":"0:248:422","crate_id":0,"name":"clone","span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:264:1674":{"id":"a:2:2681:220-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[226,0],"end":[230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2537-0:126:1670":{"id":"b:2:2537-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2551:1487":{"id":"2:2551:1487","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8313:3025-0:243:1673":{"id":"a:2:8313:3025-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2537-0:56:195":{"id":"b:2:2537-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:1662":{"id":"0:103:1662","crate_id":0,"name":"token","span":{"filename":"src/event/event.rs","begin":[23,4],"end":[25,5]},"visibility":"public","docs":"Returns the event's token.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1944":{"id":"0:25:1944","crate_id":0,"name":"READABLE","span":{"filename":"src/interest.rs","begin":[29,4],"end":[29,91]},"visibility":"public","docs":"Returns a `Interest` set representing readable interests.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"a:2:2738:2842-0:268:2500":{"id":"a:2:2738:2842-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:268:2500":{"id":"b:2:2552-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61:2180":{"id":"0:61:2180","crate_id":0,"name":"registry","span":{"filename":"src/poll.rs","begin":[308,4],"end":[310,5]},"visibility":"public","docs":"Create a separate `Registry` which can be used to register\n`event::Source`s.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:34662":{"id":"2:12174:34662","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:272:2501":{"id":"b:5:680-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:682:3249","5:683:3250","5:684:3251"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5429:14146":{"id":"5:5429:14146","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:3192":{"id":"2:12120:3192","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:13918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:3249":{"id":"5:682:3249","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:171-0:56:195":{"id":"0:171-0:56:195","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,15],"end":[67,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"poll::Poll","name":"Poll","id":"0:56:195","glob":false}}},"2:12077:34642":{"id":"2:12077:34642","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:58:1672":{"id":"a:2:2681:220-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2681:220-0:272:2501":{"id":"a:2:2681:220-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:72:2349":{"id":"0:72:2349","crate_id":0,"name":"deregister","span":{"filename":"src/poll.rs","begin":[658,4],"end":[664,5]},"visibility":"public","docs":"Deregister an [`event::Source`] with the `Poll` instance.\n\nWhen an event source is deregistered, the `Poll` instance will no longer\nmonitor it for readiness state changes. Deregistering clears up any\ninternal resources needed to track the handle.  After an explicit call\nto this method completes, it is guaranteed that the token previously\nregistered to this handle will not be returned by a future poll, so long\nas a happens-before relationship is established between this call and\nthe poll.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nA handle can be passed back to `register` after it has been\nderegistered; however, it must be passed back to the **same** `Poll`\ninstance, otherwise the behavior is unspecified.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\npoll.registry().deregister(&mut socket)?;\n\nlet mut events = Events::with_capacity(1024);\n\n// Set a timeout because this poll should never receive any events.\npoll.poll(&mut events, Some(Duration::from_secs(1)))?;\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{"`event::Source`":"0:154:2309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:154:2309","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:243:1673":{"id":"b:2:2547-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114:671":{"id":"0:114:671","crate_id":0,"name":"fmt","span":{"filename":"src/event/event.rs","begin":[203,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:958":{"id":"0:143:958","crate_id":0,"name":"next","span":{"filename":"src/event/events.rs","begin":[206,4],"end":[214,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7382:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1992":{"id":"0:32:1992","crate_id":0,"name":"is_aio","span":{"filename":"src/interest.rs","begin":[105,4],"end":[107,5]},"visibility":"public","docs":"Returns true if `Interest` contains AIO readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163-0:268:2500":{"id":"0:163-0:268:2500","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[8,0],"end":[8,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::event::Event","name":"Event","id":"0:268:2500","glob":false}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12133:34649":{"id":"2:12133:34649","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11776:13920","str::split":"2:12124:25113","prim@char":"1:11978:418","`DoubleEndedIterator`":"2:7304:121","str::rsplit_terminator":"2:12136:34650"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:7378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276":{"id":"0:276","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:278:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,9],"end":[16,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2693:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:147:671":{"id":"0:147:671","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[227,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:3250":{"id":"5:683:3250","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:1670":{"id":"0:126:1670","crate_id":0,"name":"Events","span":{"filename":"src/event/events.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"A collection of readiness events.\n\n`Events` is passed as an argument to [`Poll::poll`] and will be used to\nreceive any new readiness events received since the last poll. Usually, a\nsingle `Events` instance is created at the same time as a [`Poll`] and\nreused on each call to [`Poll::poll`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n#\n# assert!(events.is_empty());\n\n// Register `event::Source`s with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:128","a:2:2698:228-0:126:1670","a:2:2681:220-0:126:1670","a:2:8313:3025-0:126:1670","a:2:2738:2842-0:126:1670","a:2:8314:3024-0:126:1670","b:2:2250-0:126:1670","b:2:2247-0:126:1670","b:2:2552-0:126:1670","b:2:3317-0:126:1670","b:2:2547-0:126:1670","b:2:2537-0:126:1670","b:2:2541-0:126:1670","0:146","0:135"]}}},"a:2:2698:228-0:268:2500":{"id":"a:2:2698:228-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:684:3251":{"id":"5:684:3251","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3317-0:56:195":{"id":"b:2:3317-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","ge","lt"],"trait":{"name":"PartialOrd","id":"2:2353:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:190:1040"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8314:3024-0:177:1671":{"id":"a:2:8314:3024-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:185":{"id":"0:185","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,26],"end":[16,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:2354":{"id":"0:74:2354","crate_id":0,"name":"try_clone","span":{"filename":"src/poll.rs","begin":[670,4],"end":[674,5]},"visibility":"public","docs":"Creates a new independently owned `Registry`.\n\nEvent sources registered with this `Registry` will be registered with\nthe original `Registry` and `Poll` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1988":{"id":"0:30:1988","crate_id":0,"name":"is_readable","span":{"filename":"src/interest.rs","begin":[95,4],"end":[97,5]},"visibility":"public","docs":"Returns true if the value includes readable readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165-0:126:1670":{"id":"0:165-0:126:1670","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,23],"end":[9,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::events::Events","name":"Events","id":"0:126:1670","glob":false}}},"0:258:1040":{"id":"0:258:1040","crate_id":0,"name":"partial_cmp","span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30913:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:126:1670":{"id":"b:2:2247-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:1665":{"id":"0:96:1665","crate_id":0,"name":"event","span":{"filename":"src/event/mod.rs","begin":[1,0],"end":[10,29]},"visibility":"public","docs":"Readiness event types and utilities.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:163-0:268:2500","0:165-0:126:1670","0:166-0:272:2501","0:167-0:154:2309"],"is_stripped":false}}},"2:12083:25780":{"id":"2:12083:25780","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11343:13921"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,40],"end":[131,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2692:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2738:2842-0:264:1674":{"id":"a:2:2738:2842-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:108:2553":{"id":"0:108:2553","crate_id":0,"name":"is_write_closed","span":{"filename":"src/event/event.rs","begin":[128,4],"end":[130,5]},"visibility":"public","docs":"Returns true if the event contains write closed readiness.\n\n# Notes\n\nOn [epoll] this is essentially a check for `EPOLLHUP` flag as the\nlocal stream shutting down its write half does not trigger this event.\n\nOn [kqueue] the local stream shutting down the write half of its\nsocket will trigger this event.\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when write half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | only `EPOLLERR`, or |\n|               | `EPOLLOUT` and `EPOLLERR` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:34645":{"id":"2:12084:34645","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:56:195":{"id":"b:2:2547-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:267:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:110:1992":{"id":"0:110:1992","crate_id":0,"name":"is_aio","span":{"filename":"src/event/event.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns true if the event contains AIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms support AIO.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | *Not supported* |\n| [kqueue]<sup>1</sup> | `EVFILT_AIO` |\n\n1: Only supported on DragonFly BSD, FreeBSD, iOS and macOS.\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:264:1674":{"id":"b:2:2552-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:154:2309":{"id":"0:154:2309","crate_id":0,"name":"Source","span":{"filename":"src/event/source.rs","begin":[75,0],"end":[112,1]},"visibility":"public","docs":"An event source that may be registered with [`Registry`].\n\nTypes that implement `event::Source` can be registered with\n`Registry`. Users of Mio **should not** use the `event::Source` trait\nfunctions directly. Instead, the equivalent functions on `Registry` should\nbe used.\n\nSee [`Registry`] for more details.\n\n[`Registry`]: ../struct.Registry.html\n\n# Implementing `event::Source`\n\nEvent sources are always backed by system handles, such as sockets or other\nsystem handles. These `event::Source`s will be monitored by the system\nselector. An implementation of `Source` will almost always delegates to a\nlower level handle. Examples of this are [`TcpStream`]s, or the *unix only*\n[`SourceFd`].\n\n[`TcpStream`]: ../net/struct.TcpStream.html\n[`SourceFd`]: ../unix/struct.SourceFd.html\n\n# Dropping `event::Source`s\n\nAll `event::Source`s, unless otherwise specified, need to be [deregistered]\nbefore being dropped for them to not leak resources. This goes against the\nnormal drop behaviour of types in Rust which cleanup after themselves, e.g.\na `File` will close itself. However since deregistering needs access to\n[`Registry`] this cannot be done while being dropped.\n\n[deregistered]: ../struct.Registry.html#method.deregister\n\n# Examples\n\nImplementing `Source` on a struct containing a socket:\n\n```ignore\nuse mio::{Interest, Registry, Token};\nuse mio::event::Source;\nuse mio::net::TcpStream;\n\nuse std::io;\n\n# #[allow(dead_code)]\npub struct MySource {\n    socket: TcpStream,\n}\n\nimpl Source for MySource {\n    fn register(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `register` call to `socket`\n        self.socket.register(registry, token, interests)\n    }\n\n    fn reregister(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `reregister` call to `socket`\n        self.socket.reregister(registry, token, interests)\n    }\n\n    fn deregister(&mut self, registry: &Registry) -> io::Result<()> {\n        // Delegate the `deregister` call to `socket`\n        self.socket.deregister(registry)\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:155:2305","0:156:2333","0:157:2349"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:158"]}}},"0:253:613":{"id":"0:253:613","crate_id":0,"name":"eq","span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8313:3025-0:126:1670":{"id":"a:2:8313:3025-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12201:8543":{"id":"2:12201:8543","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:8543"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:7318","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:27803":{"id":"5:5446:27803","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12197:27805"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:183:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:262:731":{"id":"0:262:731","crate_id":0,"name":"hash","span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:9434:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9426:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:262:731"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31:1990":{"id":"0:31:1990","crate_id":0,"name":"is_writable","span":{"filename":"src/interest.rs","begin":[100,4],"end":[102,5]},"visibility":"public","docs":"Returns true if the value includes writable readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:1994":{"id":"0:33:1994","crate_id":0,"name":"is_lio","span":{"filename":"src/interest.rs","begin":[110,4],"end":[112,5]},"visibility":"public","docs":"Returns true if `Interest` contains LIO readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:177:1671":{"id":"b:2:2541-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3317-0:264:1674":{"id":"b:2:3317-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2556:1486":{"id":"2:2556:1486","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2333":{"id":"0:70:2333","crate_id":0,"name":"reregister","span":{"filename":"src/poll.rs","begin":[595,4],"end":[605,5]},"visibility":"public","docs":"Re-register an [`event::Source`] with the `Poll` instance.\n\nRe-registering an event source allows changing the details of the\nregistration. Specifically, it allows updating the associated `token`\nand `interests` specified in previous `register` and `reregister` calls.\n\nThe `reregister` arguments fully override the previous values. In other\nwords, if a socket is registered with [`readable`] interest and the call\nto `reregister` specifies [`writable`], then read interest is no longer\nrequested for the handle.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nSee the [`register`] documentation for details about the function\narguments and see the [`struct`] docs for a high level overview of\npolling.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\n\nlet poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`, requesting readable\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\n// Reregister the socket specifying write interest instead. Even though\n// the token is the same it must be specified.\npoll.registry().reregister(\n    &mut socket,\n    Token(0),\n    Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n[`event::Source`]: ./event/trait.Source.html\n[`struct`]: struct.Poll.html\n[`register`]: struct.Registry.html#method.register\n[`readable`]: ./event/struct.Event.html#is_readable\n[`writable`]: ./event/struct.Event.html#is_writable","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}],["token",{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:154:2309","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2738:2842-0:56:195":{"id":"a:2:2738:2842-0:56:195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:56:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2541-0:243:1673":{"id":"b:2:2541-0:243:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:28:274":{"id":"0:28:274","crate_id":0,"name":"add","span":{"filename":"src/interest.rs","begin":[66,4],"end":[68,5]},"visibility":"public","docs":"Add together two `Interest`.\n\nThis does the same thing as the `BitOr` implementation, but is a\nconstant function.\n\n```\nuse mio::Interest;\n\nconst INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n# fn silent_dead_code_warning(_: Interest) { }\n# silent_dead_code_warning(INTERESTS)\n```","links":{},"attrs":["#[allow(clippy :: should_implement_trait)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:188:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8313:3025-0:177:1671":{"id":"a:2:8313:3025-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:680-0:268:2500":{"id":"b:5:680-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3249","5:683:3250","5:684:3251"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2537-0:268:2500":{"id":"b:2:2537-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:95:2497":{"id":"0:95:2497","crate_id":0,"name":"wake","span":{"filename":"src/waker.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Wake up the [`Poll`] associated with this `Waker`.\n\n[`Poll`]: struct.Poll.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:429":{"id":"0:192:429","crate_id":0,"name":"cmp","span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30913:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3317-0:272:2501":{"id":"b:2:3317-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168-0:126:1670":{"id":"0:168-0:126:1670","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,0],"end":[65,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"event::Events","name":"Events","id":"0:126:1670","glob":false}}},"2:12085:314":{"id":"2:12085:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12086:28283","`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:28283":{"id":"2:12086:28283","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:28305":{"id":"2:12097:28305","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12098:28306"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:34656":{"id":"2:12163:34656","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3317-0:268:2500":{"id":"b:2:3317-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:173-0:243:1673":{"id":"0:173-0:243:1673","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"token::Token","name":"Token","id":"0:243:1673","glob":false}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[700,0],"end":[704,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4731:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:2255"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85:697":{"id":"0:85:697","crate_id":0,"name":"from","span":{"filename":"src/token.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:34654":{"id":"2:12157:34654","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11776:13920","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::rmatch_indices":"2:12160:34655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:7384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1952":{"id":"0:27:1952","crate_id":0,"name":"PRIORITY","span":{"filename":"src/interest.rs","begin":[51,4],"end":[51,91]},"visibility":"public","docs":"Returns a `Interest` set representing priority completion interests.","links":{},"attrs":["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2250-0:177:1671":{"id":"b:2:2250-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25103"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2698:228-0:177:1671":{"id":"a:2:2698:228-0:177:1671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62:1056":{"id":"0:62:1056","crate_id":0,"name":"poll","span":{"filename":"src/poll.rs","begin":[409,4],"end":[411,5]},"visibility":"public","docs":"Wait for readiness events\n\nBlocks the current thread and waits for readiness events for any of the\n[`event::Source`]s that have been registered with this `Poll` instance.\nThe function will block until either at least one readiness event has\nbeen received or `timeout` has elapsed. A `timeout` of `None` means that\n`poll` will block until a readiness event has been received.\n\nThe supplied `events` will be cleared and newly received readiness events\nwill be pushed onto the end. At most `events.capacity()` events will be\nreturned. If there are further pending readiness events, they will be\nreturned on the next call to `poll`.\n\nA single call to `poll` may result in multiple readiness events being\nreturned for a single event source. For example, if a TCP socket becomes\nboth readable and writable, it may be possible for a single readiness\nevent to be returned with both [`readable`] and [`writable`] readiness\n**OR** two separate events may be returned, one with [`readable`] set\nand one with [`writable`] set.\n\nNote that the `timeout` will be rounded up to the system clock\ngranularity (usually 1ms), and kernel scheduling delays mean that\nthe blocking interval may be overrun by a small amount.\n\nSee the [struct] level documentation for a higher level discussion of\npolling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`readable`]: struct.Interest.html#associatedconstant.READABLE\n[`writable`]: struct.Interest.html#associatedconstant.WRITABLE\n[struct]: struct.Poll.html\n[`iter`]: ./event/struct.Events.html#method.iter\n\n# Notes\n\nThis returns any errors without attempting to retry, previous versions\nof Mio would automatically retry the poll call if it was interrupted\n(if `EINTR` was returned).\n\nCurrently if the `timeout` elapses without any readiness events\ntriggering this will return `Ok(())`. However we're not guaranteeing\nthis behaviour as this depends on the OS.\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{TcpListener, SocketAddr};\nuse std::thread;\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = TcpListener::bind(addr)?;\nlet addr = server.local_addr()?.clone();\n\n// Spawn a thread to accept the socket\nthread::spawn(move || {\n    let _ = server.accept();\n});\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(addr)?;\n\n// Register the stream with `Poll`\npoll.registry().register(\n    &mut stream,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n[struct]: #","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["events",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44330:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:2608":{"id":"0:129:2608","crate_id":0,"name":"with_capacity","span":{"filename":"src/event/events.rs","begin":[92,4],"end":[96,5]},"visibility":"public","docs":"Return a new `Events` capable of holding up to `capacity` events.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:28280":{"id":"2:12089:28280","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:31766":{"id":"2:12102:31766","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12103:31765"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:7390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:1674":{"id":"0:264:1674","crate_id":0,"name":"Waker","span":{"filename":"src/waker.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Waker allows cross-thread waking of [`Poll`].\n\nWhen created it will cause events with [`readable`] readiness and the\nprovided `token` if [`wake`] is called, possibly from another thread.\n\n[`Poll`]: struct.Poll.html\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`wake`]: struct.Waker.html#method.wake\n\n# Notes\n\n`Waker` events are only guaranteed to be delivered while the `Waker` value\nis alive.\n\nOnly a single `Waker` can be active per [`Poll`], if multiple threads need\naccess to the `Waker` it can be shared via for example an `Arc`. What\nhappens if multiple `Waker`s are registered with the same `Poll` is\nunspecified.\n\n# Implementation notes\n\nOn platforms that support kqueue this will use the `EVFILT_USER` event\nfilter, see [implementation notes of `Poll`] to see what platforms support\nkqueue. On Linux it uses [eventfd].\n\n[implementation notes of `Poll`]: struct.Poll.html#implementation-notes\n[eventfd]: https://man7.org/linux/man-pages/man2/eventfd.2.html\n\n# Examples\n\nWake a [`Poll`] instance from another thread.\n\n```ignore\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nuse std::thread;\nuse std::time::Duration;\nuse std::sync::Arc;\n\nuse mio::{Events, Token, Poll, Waker};\n\nconst WAKE_TOKEN: Token = Token(10);\n\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(2);\n\nlet waker = Arc::new(Waker::new(poll.registry(), WAKE_TOKEN)?);\n\n// We need to keep the Waker alive, so we'll create a clone for the\n// thread we create below.\nlet waker1 = waker.clone();\nlet handle = thread::spawn(move || {\n    // Working hard, or hardly working?\n    thread::sleep(Duration::from_millis(500));\n\n    // Now we'll wake the queue on the other thread.\n    waker1.wake().expect(\"unable to wake\");\n});\n\n// On our current thread we'll poll for events, without a timeout.\npoll.poll(&mut events, None)?;\n\n// After about 500 milliseconds we should be awoken by the other thread and\n// get a single event.\nassert!(!events.is_empty());\nlet waker_event = events.iter().next().unwrap();\nassert!(waker_event.is_readable());\nassert_eq!(waker_event.token(), WAKE_TOKEN);\n# handle.join().unwrap();\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:92","a:2:2698:228-0:264:1674","a:2:2681:220-0:264:1674","a:2:8313:3025-0:264:1674","a:2:2738:2842-0:264:1674","a:2:8314:3024-0:264:1674","b:2:2250-0:264:1674","b:2:2247-0:264:1674","b:2:2552-0:264:1674","b:2:3317-0:264:1674","b:2:2547-0:264:1674","b:2:2537-0:264:1674","b:2:2541-0:264:1674","0:266"]}}},"2:12106:31762":{"id":"2:12106:31762","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:7392","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12127:28314":{"id":"2:12127:28314","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11599:7301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:34664":{"id":"2:12186:34664","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:613":{"id":"0:183:613","crate_id":0,"name":"eq","span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:35321":{"id":"5:5443:35321","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[120,0],"end":[127,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:2814:1997","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:186","0:37:364"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2250-0:58:1672":{"id":"b:2:2250-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25103"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:243:1673":{"id":"0:243:1673","crate_id":0,"name":"Token","span":{"filename":"src/token.rs","begin":[132,0],"end":[132,28]},"visibility":"public","docs":"Associates readiness events with [`event::Source`]s.\n\n`Token` is a wrapper around `usize` and is used as an argument to\n[`Registry::register`] and [`Registry::reregister`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[`Registry::register`]: struct.Registry.html#method.register\n[`Registry::reregister`]: struct.Registry.html#method.reregister\n\n# Example\n\nUsing `Token` to track which socket generated the event. In this example,\n`HashMap` is used, but usually something like [`slab`] is better.\n\n[`slab`]: https://crates.io/crates/slab\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Interest, Poll, Token};\nuse mio::net::TcpListener;\n\nuse std::thread;\nuse std::io::{self, Read};\nuse std::collections::HashMap;\n\n// After this number of sockets is accepted, the server will shutdown.\nconst MAX_SOCKETS: usize = 32;\n\n// Pick a token that will not be used by any other socket and use that one\n// for the listener.\nconst LISTENER: Token = Token(1024);\n\n// Used to store the sockets.\nlet mut sockets = HashMap::new();\n\n// This is used to generate a unique token for a socket\nlet mut next_socket_index = 0;\n\n// The `Poll` instance\nlet mut poll = Poll::new()?;\n\n// Tcp listener\nlet mut listener = TcpListener::bind(\"127.0.0.1:0\".parse()?)?;\n\n// Register the listener\npoll.registry().register(&mut listener, LISTENER, Interest::READABLE)?;\n\n// Spawn a thread that will connect a bunch of sockets then close them\nlet addr = listener.local_addr()?;\nthread::spawn(move || {\n    use std::net::TcpStream;\n\n    // +1 here is to connect an extra socket to signal the socket to close\n    for _ in 0..(MAX_SOCKETS+1) {\n        // Connect then drop the socket\n        let _ = TcpStream::connect(addr).unwrap();\n    }\n});\n\n// Event storage\nlet mut events = Events::with_capacity(1024);\n\n// Read buffer, this will never actually get filled\nlet mut buf = [0; 256];\n\n// The main event loop\nloop {\n    // Wait for events\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        match event.token() {\n            LISTENER => {\n                // Perform operations in a loop until `WouldBlock` is\n                // encountered.\n                loop {\n                    match listener.accept() {\n                        Ok((mut socket, _)) => {\n                            // Shutdown the server\n                            if next_socket_index == MAX_SOCKETS {\n                                return Ok(());\n                            }\n\n                            // Get the token for the socket\n                            let token = Token(next_socket_index);\n                            next_socket_index += 1;\n\n                            // Register the new socket w/ poll\n                            poll.registry().register(&mut socket, token, Interest::READABLE)?;\n\n                            // Store the socket\n                            sockets.insert(token, socket);\n                        }\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop accepting\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n            token => {\n                // Always operate in a loop\n                loop {\n                    match sockets.get_mut(&token).unwrap().read(&mut buf) {\n                        Ok(0) => {\n                            // Socket is closed, remove it from the map\n                            sockets.remove(&token);\n                            break;\n                        }\n                        // Data is not actually sent in this example\n                        Ok(_) => unreachable!(),\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop reading\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:245:1616"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2698:228-0:243:1673","a:2:2681:220-0:243:1673","a:2:8313:3025-0:243:1673","a:2:2738:2842-0:243:1673","a:2:8314:3024-0:243:1673","b:2:2250-0:243:1673","b:2:2247-0:243:1673","b:2:2552-0:243:1673","b:2:3317-0:243:1673","b:2:2547-0:243:1673","b:2:2537-0:243:1673","b:2:2541-0:243:1673","b:5:680-0:243:1673","0:251","0:84","0:247","0:261","0:257","0:259","0:255","0:254","0:246","0:252","0:249"]}}},"0:41:671":{"id":"0:41:671","crate_id":0,"name":"fmt","span":{"filename":"src/interest.rs","begin":[137,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:671":{"id":"0:79:671","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[694,4],"end":[696,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:272:2501":{"id":"b:2:2547-0:272:2501","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:272:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2249:2777":{"id":"2:2249:2777","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3317-0:126:1670":{"id":"b:2:3317-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12093:28282":{"id":"2:12093:28282","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:2349":{"id":"0:157:2349","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[111,4],"end":[111,68]},"visibility":"default","docs":"Deregister `self` from the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::deregister`] instead. Implementors should handle\nderegistration by delegating the call to another `Source` type.\n\n[`Registry::deregister`]: ../struct.Registry.html#method.deregister","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2250-0:268:2500":{"id":"b:2:2250-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25103"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12095:34646":{"id":"2:12095:34646","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11984:1406","str::slice_mut_unchecked":"2:12096:34647","crate::ops::Index":"2:2978:3280"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:34661":{"id":"2:12171:34661","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:13920"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11801:13917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3317-0:58:1672":{"id":"b:2:3317-0:58:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:58:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26:1946":{"id":"0:26:1946","crate_id":0,"name":"WRITABLE","span":{"filename":"src/interest.rs","begin":[32,4],"end":[32,91]},"visibility":"public","docs":"Returns a `Interest` set representing writable interests.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:58:1672":{"id":"0:58:1672","crate_id":0,"name":"Registry","span":{"filename":"src/poll.rs","begin":[253,0],"end":[255,1]},"visibility":"public","docs":"Registers I/O resources.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:67","a:2:2698:228-0:58:1672","a:2:2681:220-0:58:1672","a:2:8313:3025-0:58:1672","a:2:2738:2842-0:58:1672","a:2:8314:3024-0:58:1672","b:2:2250-0:58:1672","b:2:2247-0:58:1672","b:2:2552-0:58:1672","b:2:3317-0:58:1672","b:2:2547-0:58:1672","b:2:2537-0:58:1672","b:2:2541-0:58:1672","0:80","0:78"]}}},"2:12124:25113":{"id":"2:12124:25113","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11776:13920","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split_whitespace":"2:12102:31766","str::rsplit":"2:12130:28316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:3349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427":{"id":"5:5427","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5428:35318","5:5429:14146","5:5432:35319","5:5435:35320","5:5443:35321","5:5444:35322","5:5445:3372","5:5446:27803","5:5447:27804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[27,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:1944","0:26:1946","0:27:1952","0:28:274","0:29:1986","0:30:1988","0:31:1990","0:32:1992","0:33:1994","0:34:1996"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2552-0:126:1670":{"id":"b:2:2552-0:126:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:126:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2681:220-0:268:2500":{"id":"a:2:2681:220-0:268:2500","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:268:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12096:34647":{"id":"2:12096:34647","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11984:1406","crate::ops::IndexMut":"2:2982:3281","str::slice_unchecked":"2:12095:34646"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:264:1674":{"id":"b:2:2547-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111:1994":{"id":"0:111:1994","crate_id":0,"name":"is_lio","span":{"filename":"src/event/event.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns true if the event contains LIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but only FreeBSD supports LIO. On\nFreeBSD this method checks the `EVFILT_LIO` flag.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:2624":{"id":"0:144:2624","crate_id":0,"name":"size_hint","span":{"filename":"src/event/events.rs","begin":[216,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:35322":{"id":"5:5444:35322","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2682","`String`":"5:7283:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2682","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:3478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250:671":{"id":"0:250:671","crate_id":0,"name":"fmt","span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2305":{"id":"0:68:2305","crate_id":0,"name":"register","span":{"filename":"src/poll.rs","begin":[527,4],"end":[537,5]},"visibility":"public","docs":"Register an [`event::Source`] with the `Poll` instance.\n\nOnce registered, the `Poll` instance will monitor the event source for\nreadiness state changes. When it notices a state change, it will return\na readiness event for the handle the next time [`poll`] is called.\n\nSee [`Poll`] docs for a high level overview.\n\n# Arguments\n\n`source: &mut S: event::Source`: This is the source of events that the\n`Poll` instance should monitor for readiness state changes.\n\n`token: Token`: The caller picks a token to associate with the socket.\nWhen [`poll`] returns an event for the handle, this token is included.\nThis allows the caller to map the event to its source. The token\nassociated with the `event::Source` can be changed at any time by\ncalling [`reregister`].\n\nSee documentation on [`Token`] for an example showing how to pick\n[`Token`] values.\n\n`interest: Interest`: Specifies which operations `Poll` should monitor\nfor readiness. `Poll` will only return readiness events for operations\nspecified by this argument.\n\nIf a socket is registered with readable interest and the socket becomes\nwritable, no event will be returned from [`poll`].\n\nThe readiness interest for an `event::Source` can be changed at any time\nby calling [`reregister`].\n\n# Notes\n\nCallers must ensure that if a source being registered with a `Poll`\ninstance was previously registered with that `Poll` instance, then a\ncall to [`deregister`] has already occurred. Consecutive calls to\n`register` is unspecified behavior.\n\nUnless otherwise specified, the caller should assume that once an event\nsource is registered with a `Poll` instance, it is bound to that `Poll`\ninstance for the lifetime of the event source. This remains true even\nif the event source is deregistered from the poll instance using\n[`deregister`].\n\n[`event::Source`]: ./event/trait.Source.html\n[`poll`]: struct.Poll.html#method.poll\n[`reregister`]: struct.Registry.html#method.reregister\n[`deregister`]: struct.Registry.html#method.deregister\n[`Token`]: struct.Token.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::{Duration, Instant};\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\nlet mut events = Events::with_capacity(1024);\nlet start = Instant::now();\nlet timeout = Duration::from_millis(500);\n\nloop {\n    let elapsed = start.elapsed();\n\n    if elapsed >= timeout {\n        // Connection timed out\n        return Ok(());\n    }\n\n    let remaining = timeout - elapsed;\n    poll.poll(&mut events, Some(remaining))?;\n\n    for event in &events {\n        if event.token() == Token(0) {\n            // Something (probably) happened on the socket.\n            return Ok(());\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}],["token",{"resolved_path":{"name":"Token","id":"0:243:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:177:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2918:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:154:2309","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:264:1674":{"id":"b:2:2537-0:264:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:264:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106:2529":{"id":"0:106:2529","crate_id":0,"name":"is_error","span":{"filename":"src/event/event.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":"Returns true if the event contains error readiness.\n\nError events occur when the socket enters an error state. In this case,\nthe socket will also receive a readable or writable event. Reading or\nwriting to the socket will result in an error.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\nerror event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLERR`      |\n| [kqueue]      | `EV_ERROR` and `EV_EOF` with `fflags` set to `0`. |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:11669:4095":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:7216:6870":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:707:7156":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:629:7857":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:1858:7279":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:1536:5389":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:47809:6686":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:599:35881":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6502:7222":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:7558:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:6153:3722":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:8841:20926":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3927:8642":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:3371:13952":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:7632:8632":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:2693:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:2966:35402":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4862:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6540:4844":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:864:2622":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11199:4059":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:8314:3024":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:4868:4886":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9274:3348":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11118:7187":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:5841:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10403:7167":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:8794:20925":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46235:6617":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:42224:7882":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8974:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:256:7685":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:474:5297":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11235:3741":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11084:7178":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13673:4582":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13882:4633":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1921:8602":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:5816:3716":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:4323:3684":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12526:4279":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:927:7842":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:6649:3202":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7568:35861":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:21549:6311":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14026:4671":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:527:3708":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:43343:7304":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:43855:7322":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:7622:7832":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5849:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:43830:7390":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:4004:3645":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7433:5015":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"9:426:19853":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1843:7922":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7025:7242":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:6273:3645":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4895:5787":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:41419:6545":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10994:7766":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7505:4851":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:7678:3313":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:42888:6570":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:1649:5470":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9887:7709":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:10074:3349":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10377:7164":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:46021:6610":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:43106:7370":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5767:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7763:20871":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2637:4824":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:22103:2818":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4818:5752":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4620:4879":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13620:4569":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:10758:6911":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13492:4548":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:41525:6892":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:4564:4877":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:9016:3966":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10520:7177":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12792:4339":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:7848:7956":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4496:5635":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2378:8624":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:933:8559":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7407:5014":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6197:7798":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:20801:8632":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:3301:3366":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:47847:6687":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8381:3017":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:47905:6692":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:40207:31676":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2809:3271":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:5807:6784":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11354:3933":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2760:3265":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10735:7432":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:10810:27678":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4560:8681":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11981:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4374:5577":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:2332:4806":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11300:6915":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:7860:6709":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10361:4003":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6648:6153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10161:7724":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1591:7279":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:7171:6869":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6438:6836":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:500:5310":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22091:2814":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:20803:8764":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:9143:2831":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13707:4585":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:41663:2622":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:6323:7211":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:5530:3661":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:630:2501":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"8:0:2685":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2403:2005":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:6396:6834":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4638:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6820:6228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:3183:34291":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12412:4262":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46881:6645":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:1068:7850":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:20667:32058":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:5529:7291":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:3867:4868":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5068:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11983:1376":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:12646:4298":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:878:3633":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10914:5275":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8348:2823":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:1075:7689":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13303:4404":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13069:4381":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11696:4101":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:40096:6883":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:1818:2501":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9806:20942":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4963:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4897:8688":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:7065:34313":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:42851:3461":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:1569:3663":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:7924:3361":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:7041:3717":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8854:7973":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:22451:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:6868:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:7128:8391":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13957:4655":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:12421:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:4333:3451":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:5567:4840":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:8542:20909":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:481:7145":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:47771:6685":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"0:96:1665":{"crate_id":0,"path":["mio","event"],"kind":"module"},"1:3991:8646":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:2168:5209":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13971:4657":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:1845:7277":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9614:35869":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6250:4905":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12106:4188":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7474:4850":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3111:3377":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:3220:4861":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:5771:7946":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43283:7901":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2883:3714":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:32137:2309":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:1636:6300":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:44291:7422":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:7278:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7753:7253":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:1638:5462":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:6785:8386":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:41482:6554":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8798:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:9716:35876":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:41647:2501":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:2497:4818":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10906:4045":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:7124:2622":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:1826:3645":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:4762:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:4603:13983":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:39269:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:43991:7404":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5080:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:6607:6126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11258:7996":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11520:4051":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:587:5362":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:9083:3970":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:2180:5211":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:45898:6601":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:836:7847":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:47271:6679":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11315:6917":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11905:4149":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2830:3275":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:41774:2501":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"18:0:2694":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:11525:7380":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:681:7150":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:2844:3277":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13109:4386":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:40886:7361":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5422:7939":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:30343:6333":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:4034:3625":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"10:0:2687":{"crate_id":10,"path":["adler"],"kind":"module"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:44525:6898":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12605:4291":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9850:20943":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:5051:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:4698:4880":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11462:7930":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10280:7728":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:8740:20923":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8531:7024":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:1562:2622":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43778:7388":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2692:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:8659:20921":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10303:3912":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:44575:6585":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7250:6252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2814:1997":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11179:2830":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:6764:3675":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10313:7731":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1575:5414":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13456:4518":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:119:14536":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"11:365:3617":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6044:6049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:11796:13918":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11991:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:47920:6693":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:22418:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:9022:1673":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10138:7985":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:956:7848":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:4142:7020":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:3510:3339":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:5951:3328":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12318:4244":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2160:14157":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:6894:3729":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12691:4303":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8900:8724":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11888:4147":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:1500:5373":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:1973:7691":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:6872:4846":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8196:3347":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:1631:5458":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2703:3155":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12186:4211":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9604:3994":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11767:4114":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13914:4641":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45821:6597":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:21227:8632":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7099:6739":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:44307:7426":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5829:5939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:2131:3642":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"15:0:2691":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:10229:7302":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12346:4251":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:582:3963":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43532:7373":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:40131:13989":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"15:288:8368":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:44083:7407":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:10402:7971":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10812:4039":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:7652:7953":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:4716:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40877:3311":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10123:3987":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:5067:4892":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:12446:7893":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:0:2692":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12727:4309":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:40512:7352":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2632:3360":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4488:8664":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:46043:6611":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:3179:32061":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11943:4155":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:10330:7735":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:4626:6146":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:40482:7349":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:3435:3336":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:9182:27861":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:4592:4878":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2836:3276":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9821:3984":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:9105:2830":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:9734:7705":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12826:4342":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11189:4056":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:352:7907":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:10080:7718":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:40370:7335":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12017:4166":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11416:7194":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:4628:6148":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6671:6154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2750:2832":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:261:3625":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40342:7330":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14395:4784":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14102:4716":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8449:6570":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6688:6155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:8125:7833":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:11343:13921":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13140:4392":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:2759:4829":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"20:296:3061":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"6:6067:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"14:31:7837":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3635:3873":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12004:4165":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:7297:6877":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11250:4061":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4469:5622":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5100:4893":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4753:4882":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5720:7203":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:43372:7903":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:914:7854":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:6425:7949":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13795:4610":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4694:8663":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:2421:4815":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7255:3021":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4872:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:5882:5965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:7916:3359":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5979:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4800:5744":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:11548:7383":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7994:7959":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12994:4366":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10175:3994":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:9153:3972":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"10:44:5217":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:640:8545":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:9474:3459":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:43977:7401":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4854:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4887:5782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:3260:3369":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8541:2501":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:12614:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:12566:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:358:7908":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7707:5024":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:45658:6591":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:40652:3347":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5836:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44188:7417":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12659:4299":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7484:7250":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2600:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:4955:3013":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:11558:7446":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6531:3612":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11568:20934":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4396:4872":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:1595:5428":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:44145:7409":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:21671:8632":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:2201:6869":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:45991:6609":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:9434:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:4365:3652":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43962:7395":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:41436:6547":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:7283:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:1672:3625":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4833:5756":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:8210:5012":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:4809:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"11:667:7840":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14301:4763":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:1121:7853":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42024:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:9211:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12757:4328":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:3453:3338":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6239:35866":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10529:4068":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:9359:7883":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:21124:6309":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:11790:7156":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:48061:6700":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:7652:3255":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13778:4607":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10671:21026":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:7327:2847":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11178:7190":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:2243:7286":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:21236:6309":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4489:5632":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:3299:3365":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:5882:6794":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:41655:3254":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4848:5763":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:11976:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:9474:3736":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:4032:4870":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:41672:3021":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:4111:7875":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9318:3977":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:39191:3291":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11074:4051":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:9090:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:652:3841":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10097:7721":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8987:25422":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:12002:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:1780:7918":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:14054:4679":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:3171:2501":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8209:3349":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:1411:2501":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12618:4293":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6900:4957":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:40666:7356":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:2919:2843":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:40412:7342":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:21912:7311":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:7308:7871":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:43514:6893":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:7570:3732":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:2929:2846":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:40329:3346":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:10790:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:12592:4290":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:10117:7301":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11791:4128":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:11776:13920":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:2819:3272":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40320:7898":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40441:7345":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:7540:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7599:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:6137:1674":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:4043:13888":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4754:5719":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:7382:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11726:4105":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:47523:6681":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3315:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:5689:6775":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:40035:7319":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:7755:7955":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:14037:4672":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13894:4634":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13591:4561":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:7883:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:6421:3311":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:7575:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6886:4847":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42064:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9866:7707":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:44120:7408":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4308:7933":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:8739:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:22070:7315":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:1184:7690":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:494:5308":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:3645:2622":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7289:4994":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3187:31441":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6018:20863":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:7095:6868":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10511:7176":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4524:5651":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:6590:8720":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:1068:7851":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2210:7926":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:3139:3285":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:8949:20930":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43409:7307":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11252:7440":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:40892:3375":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6573:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:530:7010":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11988:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4413:5598":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"9:237:6570":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:20635:31951":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:22583:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4291:5516":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:4008:7874":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:1492:7840":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:8138:7836":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:46569:6639":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2771:3267":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:6461:3726":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:3383:7872":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:41799:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:1558:2501":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12457:4272":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"20:290:3060":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"6:1495:5371":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:7272:6253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:400:7687":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40498:3859":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:3344:3354":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:2960:35400":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:727:3865":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11210:7192":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:6357:4910":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:568:5352":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:11333:7444":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:9100:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13830:4616":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:35:3621":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22715:2816":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:8605:20907":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:6805:6221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:3996:7873":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:624:35879":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:2567:4821":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:9673:3698":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4556:5665":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:844:7848":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:40522:7353":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3184:31430":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:14359:4780":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:1915:6308":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13448:4517":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12148:4203":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11999:1505":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:40421:7343":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:5406:7938":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"9:486:19850":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12878:4348":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1690:5494":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:4900:4887":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"11:817:7845":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:1782:7919":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40450:7346":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13719:4588":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:10088:8393":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"11:644:3254":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:1590:5426":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40150:7325":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:42346:3294":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9272:7921":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:42626:5048":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12377:4258":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9777:20941":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5994:20862":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10654:4007":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:22025:31689":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:5687:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:40223:6885":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5916:6800":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:45590:6588":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:14403:4787":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:0:1398":{"crate_id":1,"path":["std"],"kind":"module"},"1:4812:2822":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11454:7195":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11498:4084":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3834:7931":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12394:4261":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4380:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4944:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:47413:6680":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43848:7392":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9875:7708":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7240:35863":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:39446:3451":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:10609:7752":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:5962:1680":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:41587:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:9170:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:13937:4649":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"9:357:19866":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:1513:5379":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7665:4854":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:39293:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:21843:7023":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:12372:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9223:3974":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:1523:7860":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2908:3258":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4315:5533":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12354:4253":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:46491:6623":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:8734:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:562:5349":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:1755:6304":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6565:6102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13787:4608":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11967:4159":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9344:35874":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:45742:6594":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:7727:7428":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:10253:7726":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:3985:8645":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:311:7272":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:30365:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:7721:8548":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14341:4774":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:2802:3273":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:42367:3305":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13332:4424":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:5381:3328":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:11030:3739":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4626:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:40430:7344":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11285:6755":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5074:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:8296:7966":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:7463:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:488:5305":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9518:7701":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"20:155:3044":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"6:4389:5584":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:8899:20928":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10597:7751":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:6392:2622":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:908:3663":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10249:7725":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8862:2622":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:41723:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11142:2829":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:6720:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6516:4913":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12174:4208":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10486:7173":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:14177:4729":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:20895:8771":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:6028:6044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:564:3848":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:22077:2815":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:21208:8759":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:7511:6269":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13697:4584":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:47946:6695":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:43362:7306":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:1820:6307":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:21790:7022":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11091:6731":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43678:7382":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6789:6851":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:46915:6646":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:4761:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:9926:7712":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:45720:6593":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:2461:6293":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:20620:31951":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:10953:6733":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11144:7188":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:40280:7897":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1663:5481":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:285:7269":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:2049:7861":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:44056:7406":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:2162:14158":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:22550:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:9939:7713":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10621:7753":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6386:7212":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12118:4191":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:5940:7776":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:96:8361":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6744:6178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:1011:3625":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11852:4142":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12671:4300":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13639:4570":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:41453:8639":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11241:21053":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:2848:3278":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12303:4240":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:3204:7278":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:22484:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12053:4175":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:41396:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:11994:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:2715:4827":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10458:7171":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:723:7274":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3492:3301":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:6140:8849":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:1077:7853":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:11398:3743":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6850:6243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"14:160:7837":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:30349:6335":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2741:3159":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12479:4273":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"15:306:8372":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:40056:31674":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13368:4455":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:48022:6699":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6796:6218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10013:3991":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:526:5330":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7870:6909":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:3160:3287":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:1586:7278":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7246:6873":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:7505:6268":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13167:4395":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:44168:6894":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:10417:7168":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6289:4908":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6303:4836":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:6632:3674":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:10194:7885":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13999:4664":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:5612:7197":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:635:7913":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11985:1490":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:9160:7982":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:2592:3350":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3583:2501":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:2174:5210":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:898:3645":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:20851:32789":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:11979:1525":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11109:7186":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:2570:3698":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:7609:6291":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12711:4304":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6554:7224":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44295:7423":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:7025:2622":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:4184:3450":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5008:5848":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:6185:7947":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:531:7147":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4810:5748":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8399:6722":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:14227:4742":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13870:4627":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11098:7182":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4740:5713":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40919:7363":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:6738:14136":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5805:5930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:21234:8768":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"7:32:19837":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:7295:6266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:2035:3361":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:46357:6620":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:8420:7880":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:4733:2824":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:20665:32056":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"20:277:3059":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"6:6022:6042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8216:3345":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12089:4180":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:10868:7890":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:7843:3061":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4787:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:9656:3697":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10957:7763":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:11539:6756":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:47894:6691":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40680:7357":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4304:5525":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:1503:7841":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13043:4379":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13732:4594":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43500:6577":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:21964:31671":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:9913:7711":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:2960:3290":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:590:3849":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11600:20935":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5044:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:8186:3346":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4908:5797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:5372:7936":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:14044:4674":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:673:8546":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:4076:3254":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:45612:6589":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11992:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:9399:7699":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:2689:4826":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7020:3730":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:2962:20002":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:47065:6647":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:1611:3619":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6484:7214":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:13427:4507":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:3220:3367":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:695:7841":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:44299:7424":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:2060:7850":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5704:6778":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11421:7929":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8109:3378":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:4992:5843":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:2857:4833":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:6692:20866":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:43724:7385":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:40473:7348":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:7183:8558":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:40380:7336":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:10745:7430":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:41502:31677":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:3737:7861":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9966:3994":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:14236:4744":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:11565:7446":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13854:4625":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:11036:3740":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:5673:20860":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4842:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7525:4852":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43660:7381":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7853:7430":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:7517:6270":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:21203:8632":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:9181:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11872:4143":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7259:6876":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6136:6070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:1776:3663":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:2141:7281":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10430:7169":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:9124:2829":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:12769:4330":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:39335:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:3777:4866":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:736:24884":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"18:671:7684":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"20:151:3043":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"2:14:2000":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13981:4660":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:43556:3349":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7631:5021":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"20:241:3058":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"6:6008:6039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13029:4378":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7530:7999":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14015:4667":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:8997:20908":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:11019:3738":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:43110:7371":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:477:3707":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:39379:3283":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:43574:7302":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:1520:5381":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:39152:3257":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:40300:7307":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"9:507:5278":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13179:4402":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:4965:4889":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:44155:7413":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:41731:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:749:3645":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4587:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5626:7774":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:2689:3154":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"18:690:7153":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4428:5605":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11371:4080":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:1138:8385":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"14:202:13934":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:7363:3663":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5025:5856":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:9065:6742":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:2399:4814":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:8043:5072":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:14197:4735":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4650:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14417:4790":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:39439:7896":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:3963:8643":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:7999:7960":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:9590:3694":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10969:7764":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:5738:7942":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:841:2501":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11290:20931":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5301:4894":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"11:1538:7856":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:5988:7293":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5959:7204":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:2926:2845":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13683:4583":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"14:221:5161":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13803:4612":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:13905:4638":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1603:5433":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9213:3295":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:8322:7970":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:1746:6301":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:47885:6690":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:42586:6561":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14150:4717":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:2900:4835":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12936:4358":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4785:4883":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:207:3623":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:4407:3163":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:614:35880":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:10835:7889":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9485:35870":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:25972:2811":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"20:0:1626":{"crate_id":20,"path":["log"],"kind":"module"},"17:9990:3989":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46727:6642":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4328:5543":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:1732:14168":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4929:5812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:895:2501":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:6332:6831":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:1565:3645":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:41538:2382":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:6319:3625":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4039:8649":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12552:4012":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:3932:3328":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"18:515:3844":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2663:4825":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"9:330:5255":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8932:8725":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:40863:7359":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44134:13933":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6915:35862":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:1506:5376":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13513:4553":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:4196:3328":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:1580:7277":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:41984:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:44287:7421":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:2970:35399":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:6673:7948":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12891:4349":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:3441:4863":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:2959:3249":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:5590:4842":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:7696:33953":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:2468:8632":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8277:7431":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12435:4265":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11483:7931":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:11832:4132":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:20939:8772":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"13:110:35852":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:2352:4812":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:719:3862":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2194:5214":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5994:6028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:5877:14456":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13862:4626":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:20650:32059":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:9010:7979":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:1543:3328":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:7539:4853":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:39238:3282":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:7199:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:8887:6735":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:14329:4772":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8153:3343":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11815:4129":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11155:7189":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:4955:5824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4568:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9017:7980":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:2589:4822":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9977:7703":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:3025:4858":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:10226:8179":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:40116:7318":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4463:5620":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12905:4352":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:5551:6056":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6763:6849":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:6705:6160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:43873:7321":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:7529:6272":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9469:7956":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:3212:7276":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3667:8640":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:798:7842":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:6834:6237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:2789:3269":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:7855:20872":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:9215:3294":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:10935:25415":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:521:24886":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"12:0:2689":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:47725:6684":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7584:7831":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:45546:6586":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:5236:3625":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13566:4559":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6347:20864":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:7739:8591":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:2105:20984":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5877:5964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:8711:20922":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:2688:2310":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:4035:8648":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2376:8623":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6171:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:9206:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2978:3280":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:2314:4804":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1673:5487":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5775:5913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:3194:3292":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7038:6852":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:968:7246":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:10156:7884":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"14:40:4129":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9744:35877":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:7055:3636":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4770:5728":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4685:5683":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4368:5576":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6667:4936":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:3511:3645":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:43454:7309":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:538:3846":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:782:3628":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:506:5313":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:10267:7886":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:2223:34441":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9561:7702":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:1482:7854":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:10923:7941":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:11781:7880":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:3295:4862":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:332:3615":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:45791:6596":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:7633:6707":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11123:6582":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:5414:4896":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:44311:6582":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12815:4340":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:9217:3304":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:45843:6598":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10568:7747":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:12359:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:10445:3737":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:923:7841":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:40237:8604":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:42898:7368":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10323:7732":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:8771:20924":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:30941:3172":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:5280:13905":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:2493:3357":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21928:6313":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6061:3718":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:12002:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:6809:8756":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:4166:3328":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:11736:3066":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10550:3313":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:40463:7347":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11329:20932":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:532:5333":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:5651:4841":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7679:4855":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4729:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:0:2693":{"crate_id":17,"path":["object"],"kind":"module"},"6:62:14482":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:21452:8765":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2840:1998":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:2793:3268":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:12577:1674":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:582:8542":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:12394:32766":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:45690:6592":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4228:7932":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:636:3861":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10863:3994":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13055:4380":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10510:3365":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5491:7941":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"14:165:19938":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:9426:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"11:760:3663":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:21042:8632":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:47999:6698":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:11989:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:8252:5084":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4748:5717":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6850:4952":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6658:7228":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8868:6734":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:5342:4895":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:0:2685":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11164:4055":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4664:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:2691:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:7759:7895":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"11:2186:35851":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:919:7840":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:8021:5071":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:10339:7738":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1892:7923":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:8558:6910":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:2388:8629":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:39313:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11034:7769":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14007:4666":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:1464:7274":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13016:4377":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:40270:3686":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6456:4839":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:46411:6622":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:699:7154":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8203:3348":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3262:3370":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:1717:5505":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6232:7809":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:4841:4885":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4177:8390":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:47931:6694":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:46851:6644":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:7546:6277":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:7589:3734":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6372:4838":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:7519:3963":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:582:3172":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10266:7727":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:4536:4876":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:14259:4757":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8326:6135":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44533:6583":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:43352:7902":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:21561:31955":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1709:5501":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:1048:35850":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6815:4948":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44588:7427":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:11995:1509":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:4814:4884":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:3671:3625":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13557:4558":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:3933:8641":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:97:7268":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:9095:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6589:6119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11542:4086":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:7087:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10555:7744":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11978:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:45945:6602":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5015:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:3810:4867":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:44351:2838":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5967:6019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:20648:32054":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10581:7749":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:39253:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6470:4856":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10799:7755":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7739:4843":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6156:6084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:4434:3453":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4973:5835":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:9877:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:40029:7318":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"20:326:3062":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"2:32224:3162":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:1501:19933":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:40157:13990":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4535:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:3395:7697":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:40044:6882":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:40195:6884":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8282:8662":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:22616:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:10049:3254":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:23162:2810":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:986:7849":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4380:7934":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5818:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:4928:4888":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:9221:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:9867:8632":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8222:7966":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:6603:3661":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:8472:6725":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:7370:31132":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:9655:7703":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5799:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:46259:6618":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6841:6240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:6471:3625":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3977:8644":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:2130:19927":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:3222:3368":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:854:3254":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:9688:3702":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4475:5625":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:40143:7324":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10786:7754":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:579:5357":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:4164:8661":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4917:5803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:8315:3023":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:4783:34232":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10110:7722":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:1527:5384":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2982:3281":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40108:7321":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:507:3841":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4824:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:11488:7375":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6711:6162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11642:4094":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:1733:5510":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40360:7333":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:3042:20003":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:736:7275":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:10780:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:554:5344":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:21673:8761":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:14216:4741":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10981:7765":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:7079:2622":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"0:176:1702":{"crate_id":0,"path":["mio","guide"],"kind":"module"},"16:6175:7783":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8137:3374":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2373:4813":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:2133:7692":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5863:5963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:482:5302":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4764:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7362:20869":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:10945:7762":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:45636:6590":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:43706:7384":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:21110:8762":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:79:19844":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:41714:14211":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11992:4164":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:30913:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:2217:3337":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10199:3999":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9409:35868":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13757:4602":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7799:5033":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4341:5553":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"14:0:2690":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9665:35873":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2781:4830":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"15:394:19966":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:4616:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4466:8663":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:55:5061":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:1818:7920":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"11:403:8378":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:632:7911":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:5587:7292":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:5775:4898":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:12003:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:2213:3680":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:3580:4864":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8288:7969":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:2033:7246":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:2803:4831":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:653:14892":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:49867:8775":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7445:7824":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13096:4385":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7313:35864":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:41824:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5987:6027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:3732:7930":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6724:6837":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:2748:1001":{"crate_id":2,"path":["core","ops"],"kind":"module"},"5:1473:7275":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:805:8559":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3166:3289":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2443:4816":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:9223:3302":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5955:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11388:20933":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13659:4578":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11272:7771":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:1517:7855":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:5553:4837":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:46805:6643":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3501:31089":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:4387:3452":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:9171:3301":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:7523:6271":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:42144:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12921:4354":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:7033:7290":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:12001:1563":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:6789:3679":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:20986:14157":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:1696:5497":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4456:5617":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11998:1508":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11160:6754":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:6720:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:3722:3361":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:1426:3254":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:872:7274":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:39626:29424":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:9462:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:11599:7301":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:3076:3284":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4789:2826":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:793:7854":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:20853:14157":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:9469:3458":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6726:6167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2755:2834":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4731:2006":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11977:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4695:5690":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:657:2622":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5639:7201":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:43444:7905":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12365:4256":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:41561:6555":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:43864:7318":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3729:7929":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8233:8638":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2738:2842":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10293:7729":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:6240:1680":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:4378:3685":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:8969:7974":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:4483:5630":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:12000:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:8824:6732":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2781:2833":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2735:3157":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"9:177:19918":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:766:24885":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4420:5602":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:5861:3658":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:21102:8632":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:574:3841":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1702:5498":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1288:7849":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11761:3747":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:3217:34305":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4148:8388":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:1574:7276":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:40072:6539":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:3407:3328":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:5437:7940":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:10350:7888":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11960:25779":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12982:4364":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11993:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10223:4001":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:113:8364":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:4506:4875":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:22041:31692":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:504:7688":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13923:4642":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:4730:2007":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"typedef"},"2:11801:13917":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"0:0:1809":{"crate_id":0,"path":["mio"],"kind":"module"},"2:8313:3025":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:11982:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:21058:8758":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10471:7172":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43820:7389":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"0:175:1685":{"crate_id":0,"path":["mio","features"],"kind":"module"},"6:5793:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:8086:7261":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6128:7206":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11551:25421":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:547:5342":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6977:7814":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11220:21052":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:22385:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4401:5589":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:11847:13926":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:7657:6708":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:7272:3659":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11955:4158":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:1442:2622":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:22352:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:45760:6595":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:261:7686":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:7229:14133":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:20839:8766":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:4428:3652":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7116:2622":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11949:8549":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:4261:7877":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10883:4044":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2797:3270":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7693:4845":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:40870:7360":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:6939:20867":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:1045:7246":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:3894:4869":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:3238:7279":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:5042:7935":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43542:3348":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6214:7801":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2785:2835":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:9044:25392":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10051:7716":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5382:3966":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4704:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:32097:5213":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"18:491:7146":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:2737:4828":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:1838:7276":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:7732:7429":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5028:4891":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:8270:2382":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:4441:4873":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:32133:7895":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:10770:6709":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:3596:3254":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3802:3663":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"14:187:19945":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:21104:8760":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11997:1507":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:1102:8384":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:1852:7278":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42867:3460":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:7225:14134":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"13:226:5208":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:3744:4865":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:5972:6803":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:4906:8689":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4938:5818":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:1103:7852":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12502:4278":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11056:21051":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:541:5339":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:9571:35872":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:1302:7853":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:3178:7277":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43810:3345":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6427:7213":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10069:7920":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:10314:25776":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:14205:4736":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:10297:7940":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13991:4663":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:1257:7246":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:6832:14128":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:30379:31682":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2923:2844":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:6622:3673":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10740:7434":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11623:4091":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:30543:31683":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6160:7209":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:44279:7419":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"15:327:19960":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:9475:7700":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:2541:4820":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:2681:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:7331:35865":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10499:7174":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6317:7812":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:10390:7166":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:12333:4249":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:2556:3358":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:123:14537":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:11313:14218":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:46137:6613":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12966:4361":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:39418:6408":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:2962:6296":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11045:4047":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:11990:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:2164:7695":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5920:5993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:822:3631":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43091:6574":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11428:4082":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6986:4962":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:885:7275":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:0:2688":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:9899:3987":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1841:7921":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8547:6730":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:1822:2622":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10444:7170":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:11944:31138":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11127:4084":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13604:4566":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:12424:4264":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4723:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4691:8690":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13125:4388":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"9:450:19851":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10633:4005":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4606:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:0:2684":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5398:3967":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6864:4954":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8916:8723":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:3377:3375":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:10504:3367":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:11327:7443":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:6534:7950":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2293:19975":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:2765:3264":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7012:7239":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:10800:3343":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:7045:3645":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7061:7245":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"14:7:7837":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11591:4056":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:1911:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:10336:7887":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9706:7704":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4984:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:276:2682":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6036:6046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:10910:7955":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4550:5663":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:6537:8718":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:6981:3374":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2824:3274":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5793:6783":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:21025:8763":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:9840:7706":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:4256:7876":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5737:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11467:4083":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:1569:5412":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:2049:7849":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:3519:7698":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:8166:7265":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:43940:13932":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2853:3279":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:944:7845":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5554:8705":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2825:4832":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:1681:5488":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:7073:20868":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:4395:3328":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:2469:13994":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11115:27676":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11979:4162":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:7275:2848":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11996:1506":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2698:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:7900:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11007:7767":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7553:5017":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:30437:31663":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:5363:20859":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12566:4287":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:8105:7264":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:47874:6689":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"9:0:2686":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:2690:6297":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6598:6125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:4323:4871":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"9:393:19852":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:434:3919":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:5737:20861":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:9032:3967":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:14282:4758":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:45861:6599":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:21979:6317":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:8632:20920":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3231:3293":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:219:3057":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"1:8144:3376":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10351:4002":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:21457:8773":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:7379:3667":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7833:7254":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6713:7229":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:7908:7958":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:21952:2813":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:1557:5404":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:2874:4834":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6931:7813":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:3186:7696":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:551:7909":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:40190:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6775:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:4025:8647":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:3058:3869":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4543:5661":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:2746:3161":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:6625:6135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11264:4064":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:8846:2501":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10066:7717":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5386:7937":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7463:7247":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:399:8377":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:8838:6733":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:4724:4881":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8489:8700":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:80:8360":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12035:4174":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:8068:7258":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:42906:7369":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:44303:7425":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5058:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2926:20001":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:5073:7935":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11020:7768":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10544:7743":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:615:7910":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:609:7679":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2611:4823":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:44008:7405":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:10038:7715":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:4944:3328":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:43606:7378":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44275:7418":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:40176:6540":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:47969:6696":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12133:4197":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8304:6713":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:43839:7391":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4616:8646":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:43422:7904":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41790:2622":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9952:3956":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:1273:7850":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:660:7680":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:3330:3663":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:10322:7382":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:22517:2817":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:1059:7849":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:498:3642":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"20:198:3056":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"2:46645:6641":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12077:4179":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:2777:3266":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:22004:31693":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:5757:3645":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12952:4359":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:11103:6732":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4518:5648":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8980:7976":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:10025:2501":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11753:4113":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13083:4384":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6057:19974":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:12669:8560":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12539:4282":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:40351:7332":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12161:4207":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4047:8651":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"20:357:3064":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:2743:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:6015:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:39453:6409":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:41782:3254":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:43526:7372":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4506:5642":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6130:6069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:30309:6332":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:41638:2621":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6571:20865":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:4476:4874":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:21987:6318":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:43383:6575":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7494:7251":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:8176:20873":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:8872:20927":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:9030:6739":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7515:7252":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:5284:13906":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:7659:14132":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:43464:7906":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:39432:5012":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:595:5367":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:39411:3286":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8792:7971":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:2170:7283":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12579:4288":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11984:1406":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4395:5586":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:4236:2501":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:46189:6615":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22682:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:40389:7338":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:21896:6312":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14380:4783":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:10507:3369":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:10308:7381":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:11329:7891":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:14350:4778":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:47601:6682":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:8902:33952":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:5745:7945":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:8810:6731":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:44283:7420":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4126:8387":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:9192:6746":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11234:4060":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:9225:3303":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"10:36:5216":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:47865:6688":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:1831:3663":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:13574:4560":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:20972:8767":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:8004:3320":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13964:4656":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:42353:3295":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:42360:3304":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10931:7758":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:20607:3172":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9048:3968":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:6604:3727":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:40086:7320":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:7230:31676":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44563:6900":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6618:6131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:7552:6278":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13771:4605":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:46388:6621":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:41573:6556":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46167:6614":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:43624:7379":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8228:7968":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:7304:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:43760:7387":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4781:5736":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11924:4154":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4678:2821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10845:4042":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:43435:7308":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13949:4652":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12864:4347":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:950:7847":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:149:3610":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:40901:3692":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:8924:20929":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:41864:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:4156:8389":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:352:3063":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"2:46615:6640":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:14189:4732":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10832:7757":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:40911:6541":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:9965:6889":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5843:6790":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9118:3971":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:5469:3328":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:41705:3022":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:39357:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:119:3613":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:44363:14258":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:9296:3976":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11927:6918":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:3181:28202":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4735:2825":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10148:7723":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2519:4819":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4996:4890":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13749:4599":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4949:5823":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:1118:34350":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4794:5741":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14163:4723":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:7564:6280":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:7262:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:9219:3305":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:5622:3715":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"14:215:7266":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:755:7163":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:9188:3973":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:47663:6683":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:1012:7850":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7016:3478":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:14315:4765":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:2360:6303":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13155:4056":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12065:4178":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:1027:19932":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:5615:1680":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:7655:3256":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:2362:8619":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"13:0:2683":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12840:4344":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:22649:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:8152:4857":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6077:6058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:573:5354":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:45880:6600":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12851:4345":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5890:5970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:644:3841":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4446:5614":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:47984:6697":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8955:6738":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:6978:25987":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12254:4215":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43334:7303":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12631:4295":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1545:5395":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40124:7322":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9442:35875":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40398:7339":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:3517:3341":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7592:20870":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46091:6612":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13847:4624":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2465:4817":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4436:5608":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:5065:3658":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5900:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:46213:6616":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:46310:6619":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:8907:32642":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8165:3344":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:4630:6150":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:45566:6587":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:6384:7948":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:30118:2812":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:7266:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:7706:8547":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13435:4510":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:7586:6285":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:42859:7367":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13548:4554":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:9528:35871":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:10716:7993":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"9:52:19869":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:11564:7386":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"}},"external_crates":{"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.17/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}