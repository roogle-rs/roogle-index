{"root":"0:0:1736","crate_version":"0.8.4","includes_private":false,"index":{"2:9259:2970":{"id":"2:9259:2970","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13434:54777":{"id":"2:13434:54777","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:204:2206":{"id":"0:204:2206","crate_id":0,"name":"Source","span":{"filename":"src/event/source.rs","begin":[75,0],"end":[112,1]},"visibility":"public","docs":"An event source that may be registered with [`Registry`].\n\nTypes that implement `event::Source` can be registered with\n`Registry`. Users of Mio **should not** use the `event::Source` trait\nfunctions directly. Instead, the equivalent functions on `Registry` should\nbe used.\n\nSee [`Registry`] for more details.\n\n[`Registry`]: ../struct.Registry.html\n\n# Implementing `event::Source`\n\nEvent sources are always backed by system handles, such as sockets or other\nsystem handles. These `event::Source`s will be monitored by the system\nselector. An implementation of `Source` will almost always delegates to a\nlower level handle. Examples of this are [`TcpStream`]s, or the *unix only*\n[`SourceFd`].\n\n[`TcpStream`]: ../net/struct.TcpStream.html\n[`SourceFd`]: ../unix/struct.SourceFd.html\n\n# Dropping `event::Source`s\n\nAll `event::Source`s, unless otherwise specified, need to be [deregistered]\nbefore being dropped for them to not leak resources. This goes against the\nnormal drop behaviour of types in Rust which cleanup after themselves, e.g.\na `File` will close itself. However since deregistering needs access to\n[`Registry`] this cannot be done while being dropped.\n\n[deregistered]: ../struct.Registry.html#method.deregister\n\n# Examples\n\nImplementing `Source` on a struct containing a socket:\n\n```ignore\nuse mio::{Interest, Registry, Token};\nuse mio::event::Source;\nuse mio::net::TcpStream;\n\nuse std::io;\n\n# #[allow(dead_code)]\npub struct MySource {\n    socket: TcpStream,\n}\n\nimpl Source for MySource {\n    fn register(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `register` call to `socket`\n        self.socket.register(registry, token, interests)\n    }\n\n    fn reregister(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `reregister` call to `socket`\n        self.socket.reregister(registry, token, interests)\n    }\n\n    fn deregister(&mut self, registry: &Registry) -> io::Result<()> {\n        // Delegate the `deregister` call to `socket`\n        self.socket.deregister(registry)\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:205:2202","0:206:2230","0:207:2246"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8367:3868":{"id":"2:8367:3868","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8369:3140"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:60379":{"id":"2:13420:60379","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5785:3397":{"id":"1:5785:3397","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5786:54181"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13491:60388":{"id":"2:13491:60388","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3337:2785":{"id":"2:3337:2785","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3148","5:785:3149","5:786:3150"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:1075:3463":{"id":"1:1075:3463","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:3148","1:1077:4365","1:1078:54302","1:1079:54301","1:1080:2733","1:1081:54300","1:1082:54299"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:2788":{"id":"2:3372:2788","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3274:2207":{"id":"2:3274:2207","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13443:3821":{"id":"2:13443:3821","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49438:4193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7795:3595":{"id":"1:7795:3595","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7796:57018"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2866:3916":{"id":"2:2866:3916","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:53892"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3577:3178":{"id":"2:3577:3178","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:207:2246":{"id":"0:207:2246","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[111,4],"end":[111,68]},"visibility":"default","docs":"Deregister `self` from the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::deregister`] instead. Implementors should handle\nderegistration by delegating the call to another `Source` type.\n\n[`Registry::deregister`]: ../struct.Registry.html#method.deregister","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:80:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3389:3171":{"id":"2:3389:3171","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:105:1588":{"id":"0:105:1588","crate_id":0,"name":"token","span":{"filename":"src/token.rs","begin":[1,0],"end":[138,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:344:1599"],"is_stripped":true}},"2:8473:2799":{"id":"2:8473:2799","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8474:793","2:8475:2511"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13520:14772":{"id":"2:13520:14772","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:264:2278":{"id":"0:264:2278","crate_id":0,"name":"shell","span":{"filename":"src/sys/shell/mod.rs","begin":[1,0],"end":[72,1]},"visibility":{"restricted":{"parent":"0:104:1587","path":"::sys"}},"docs":null,"links":{},"attrs":["#[cfg(not(feature = \"os-poll\"))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"2:23465:3950":{"id":"2:23465:3950","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23466:1270","2:23467:1269","2:23468:1267","2:23469:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22877:4045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3435:3176":{"id":"2:3435:3176","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22751:4044":{"id":"2:22751:4044","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22752:3948","2:22753:59386","2:22754:59549","2:22755:59550","2:22756:59551","2:22757:42906","2:22758:59552","2:22759:59553","2:22760:59554","2:22761:59555","2:22762:59556","2:22763:59557","2:22764:59558","2:22765:59559","2:22766:59560","2:22767:59561","2:22768:59452","2:22769:59562","2:22770:59020","2:22771:59019","2:22772:59021","2:22773:59387","2:22774:59388","2:22775:59389","2:22776:59390"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10313:3199":{"id":"2:10313:3199","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10314:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1013":{"id":"0:41:1013","crate_id":0,"name":"poll","span":{"filename":"src/poll.rs","begin":[1,0],"end":[703,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:78:190","0:80:1598"],"is_stripped":true}},"2:23137:3949":{"id":"2:23137:3949","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23774:3945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23128:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:4379":{"id":"5:5833:4379","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13432:54776":{"id":"2:13432:54776","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,15],"end":[67,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"poll::Poll","name":"Poll","id":"0:78:190","glob":false}},"2:10934:214":{"id":"2:10934:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10936:181","2:10937:1882","2:10938:54776","2:10939:54777","2:10940:54778","2:10941:753","2:10942:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10925:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3364:3164":{"id":"2:3364:3164","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13473:54810":{"id":"2:13473:54810","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13054:3792","`DoubleEndedIterator`":"2:8448:120","str::split":"1:16010:2612","prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49480:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3384:3168":{"id":"2:3384:3168","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4666:3265":{"id":"1:4666:3265","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:3657","1:4668:56145","1:4670:56146","1:4671:56147","1:4672:3266","1:4673:56148","1:4674:56149","1:4676:56150","1:4677:3119","1:4678:3519","1:4679:3101","1:4681:3113"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13529:60400":{"id":"2:13529:60400","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:61042":{"id":"5:6104:61042","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2582","`String`":"5:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2582","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3104:3832":{"id":"2:3104:3832","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3103:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13444:3519":{"id":"2:13444:3519","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49448:3275","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13537:4365":{"id":"2:13537:4365","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22840:3935":{"id":"2:22840:3935","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22841:59386","2:22842:1227","2:22843:1228","2:22844:59387","2:22845:59388","2:22846:59389","2:22847:59390","2:22848:59391","2:22849:59392","2:22850:59393"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6790:3411":{"id":"1:6790:3411","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:8464"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3812:3190":{"id":"2:3812:3190","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,31],"end":[9,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::events::Iter","name":"Iter","id":"0:374:2398","glob":false}},"0:168:1596":{"id":"0:168:1596","crate_id":0,"name":"Events","span":{"filename":"src/event/events.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"A collection of readiness events.\n\n`Events` is passed as an argument to [`Poll::poll`] and will be used to\nreceive any new readiness events received since the last poll. Usually, a\nsingle `Events` instance is created at the same time as a [`Poll`] and\nreused on each call to [`Poll::poll`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n#\n# assert!(events.is_empty());\n\n// Register `event::Source`s with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:6959:2774":{"id":"1:6959:2774","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6960:56758"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:3162":{"id":"2:3352:3162","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8880:3153":{"id":"2:8880:3153","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61038","5:6085:3279","5:6088:61039","5:6091:61040","5:6103:61041","5:6104:61042","5:6105:3300","5:6106:54302","5:6107:54301"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13488:60387":{"id":"2:13488:60387","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13485:54814":{"id":"2:13485:54814","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13054:3792","prim@char":"1:16004:2607","str::splitn":"1:16010:2612"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49584:4171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:1598":{"id":"0:80:1598","crate_id":0,"name":"Registry","span":{"filename":"src/poll.rs","begin":[254,0],"end":[256,1]},"visibility":"public","docs":"Registers I/O resources.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3431:3175":{"id":"2:3431:3175","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23470:16272":{"id":"2:23470:16272","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23471:59019","2:23472:59020","2:23473:59021"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23465:3950","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5008:3442":{"id":"1:5008:3442","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:2398","1:5010:56706"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13445:32220":{"id":"2:13445:32220","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16010:2612"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49736:4207","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:167:2740":{"id":"20:167:2740","crate_id":20,"name":"Log","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:168:5372","20:169:1735","20:170:4641"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13418:793":{"id":"2:13418:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13430:1882":{"id":"2:13430:1882","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:1587":{"id":"0:104:1587","crate_id":0,"name":"sys","span":{"filename":"src/sys/mod.rs","begin":[1,0],"end":[86,1]},"visibility":"crate","docs":"Module with system specific types.\n\nRequired types:\n\n* `Event`: a type alias for the system specific event, e.g. `kevent` or\n           `epoll_event`.\n* `event`: a module with various helper functions for `Event`, see\n           [`crate::event::Event`] for the required functions.\n* `Events`: collection of `Event`s, see [`crate::Events`].\n* `IoSourceState`: state for the `IoSource` type.\n* `Selector`: selector used to register event sources and poll for events,\n              see [`crate::Poll`] and [`crate::Registry`] for required\n              methods.\n* `tcp` and `udp` modules: see the [`crate::net`] module.\n* `Waker`: see [`crate::Waker`].","links":{"`crate::Registry`":"0:80:1598","`crate::Waker`":"0:366:1600","`crate::Poll`":"0:78:190","`crate::event::Event`":"0:370:2397","`crate::Events`":"0:168:1596"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:0:1736":{"id":"0:0:1736","crate_id":0,"name":"mio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[266,1]},"visibility":"public","docs":"Mio is a fast, low-level I/O library for Rust focusing on non-blocking APIs\nand event notification for building high performance I/O apps with as little\noverhead as possible over the OS abstractions.\n\n# Usage\n\nUsing Mio starts by creating a [`Poll`], which reads events from the OS and\nputs them into [`Events`]. You can handle I/O events from the OS with it.\n\nFor more detail, see [`Poll`].\n\n[`Poll`]: ../mio/struct.Poll.html\n[`Events`]: ../mio/event/struct.Events.html\n\n## Examples\n\nExamples can found in the `examples` directory of the source code, or [on\nGitHub].\n\n[on GitHub]: https://github.com/tokio-rs/mio/tree/master/examples\n\n## Guide\n\nA getting started guide is available in the [`guide`] module.\n\n## Available features\n\nThe available features are described in the [`features`] module.","links":{"`features`":"0:245:1611","`guide`":"0:246:1628"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms,\nunused_imports, dead_code)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:126:1591","0:245:1611","0:246:1628","0:226","0:229","0:233","0:236","0:239","0:242"],"is_stripped":false}},"2:8363:3869":{"id":"2:8363:3869","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:3139"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13539:54300":{"id":"2:13539:54300","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:3184","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13463:3092":{"id":"2:13463:3092","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47495:176","self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6459:3423":{"id":"1:6459:3423","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:56735","1:6461:6348","1:6462:56736","1:6463:56737","1:6464:56738","1:6465:56739"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3396:3169":{"id":"2:3396:3169","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3648:3181":{"id":"2:3648:3181","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:58983","2:3651:58984","2:3652:54816"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:374:2398":{"id":"0:374:2398","crate_id":0,"name":"Iter","span":{"filename":"src/event/events.rs","begin":[76,0],"end":[79,1]},"visibility":"public","docs":"[`Events`] iterator.\n\nThis struct is created by the [`iter`] method on [`Events`].\n\n[`Events`]: struct.Events.html\n[`iter`]: struct.Events.html#method.iter\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3358:3165":{"id":"2:3358:3165","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13084:3791":{"id":"2:13084:3791","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3717:3182":{"id":"2:3717:3182","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3648:3181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13500:60390":{"id":"2:13500:60390","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:2607","str::rmatch_indices":"1:16010:2612","self::pattern":"2:13054:3792"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49612:4201","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13479:60386":{"id":"2:13479:60386","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:16004:2607","self::pattern":"2:13054:3792","str::split_terminator":"1:16010:2612","str::split":"1:16010:2612"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49530:4198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13450:54816":{"id":"2:13450:54816","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:16004:2607","self::pattern":"2:13054:3792"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22804:4046":{"id":"2:22804:4046","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22805:3948","2:22806:59386","2:22807:1227","2:22808:1228","2:22809:42906","2:22810:59448","2:22811:59449","2:22812:59450","2:22813:59451","2:22814:59452","2:22815:59387","2:22816:59388","2:22817:59389","2:22818:59390","2:22819:59391","2:22820:59392","2:22821:59393"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13441:54800":{"id":"2:13441:54800","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16010:2612"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22877:4045":{"id":"2:22877:4045","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22878:3948","2:22879:1247","2:22880:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10309:189":{"id":"2:10309:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10310:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3559:3187":{"id":"2:3559:3187","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:59269"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8400:136":{"id":"2:8400:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8402:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:3085"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13512:60395":{"id":"2:13512:60395","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:370:2397":{"id":"0:370:2397","crate_id":0,"name":"Event","span":{"filename":"src/event/event.rs","begin":[17,0],"end":[19,1]},"visibility":"public","docs":"A readiness event.\n\n`Event` is a readiness state paired with a [`Token`]. It is returned by\n[`Poll::poll`].\n\nFor more documentation on polling and events, see [`Poll`].\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n[`Token`]: ../struct.Token.html","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13494:2691":{"id":"2:13494:2691","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:2607","str::matches":"1:16010:2612","self::pattern":"2:13054:3792"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49666:4204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158:2150":{"id":"0:158:2150","crate_id":0,"name":"events","span":{"filename":"src/event/events.rs","begin":[1,0],"end":[230,1]},"visibility":{"restricted":{"parent":"0:126:1591","path":"::event"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:168:1596","0:374:2398"],"is_stripped":true}},"2:13426:56113":{"id":"2:13426:56113","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12525:4321"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7928:3918":{"id":"2:7928:3918","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7929:59110","2:7930:59111","2:7931:59108","2:7932:59106","2:7933:59112","2:7934:59109","2:7935:59107"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13436:54778":{"id":"2:13436:54778","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:108:1590":{"id":"0:108:1590","crate_id":0,"name":"waker","span":{"filename":"src/waker.rs","begin":[1,0],"end":[96,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"wasi\"))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:366:1600"],"is_stripped":true}},"2:13517:60398":{"id":"2:13517:60398","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3368:2786":{"id":"2:3368:2786","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,0],"end":[65,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"event::Events","name":"Events","id":"0:168:1596","glob":false}},"0:366:1600":{"id":"0:366:1600","crate_id":0,"name":"Waker","span":{"filename":"src/waker.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Waker allows cross-thread waking of [`Poll`].\n\nWhen created it will cause events with [`readable`] readiness and the\nprovided `token` if [`wake`] is called, possibly from another thread.\n\n[`Poll`]: struct.Poll.html\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`wake`]: struct.Waker.html#method.wake\n\n# Notes\n\n`Waker` events are only guaranteed to be delivered while the `Waker` value\nis alive.\n\nOnly a single `Waker` can be active per [`Poll`], if multiple threads need\naccess to the `Waker` it can be shared via for example an `Arc`. What\nhappens if multiple `Waker`s are registered with the same `Poll` is\nunspecified.\n\n# Implementation notes\n\nOn platforms that support kqueue this will use the `EVFILT_USER` event\nfilter, see [implementation notes of `Poll`] to see what platforms support\nkqueue. On Linux it uses [eventfd].\n\n[implementation notes of `Poll`]: struct.Poll.html#implementation-notes\n[eventfd]: https://man7.org/linux/man-pages/man2/eventfd.2.html\n\n# Examples\n\nWake a [`Poll`] instance from another thread.\n\n```ignore\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nuse std::thread;\nuse std::time::Duration;\nuse std::sync::Arc;\n\nuse mio::{Events, Token, Poll, Waker};\n\nconst WAKE_TOKEN: Token = Token(10);\n\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(2);\n\nlet waker = Arc::new(Waker::new(poll.registry(), WAKE_TOKEN)?);\n\n// We need to keep the Waker alive, so we'll create a clone for the\n// thread we create below.\nlet waker1 = waker.clone();\nlet handle = thread::spawn(move || {\n    // Working hard, or hardly working?\n    thread::sleep(Duration::from_millis(500));\n\n    // Now we'll wake the queue on the other thread.\n    waker1.wake().expect(\"unable to wake\");\n});\n\n// On our current thread we'll poll for events, without a timeout.\npoll.poll(&mut events, None)?;\n\n// After about 500 milliseconds we should be awoken by the other thread and\n// get a single event.\nassert!(!events.is_empty());\nlet waker_event = events.iter().next().unwrap();\nassert!(waker_event.is_readable());\nassert_eq!(waker_event.token(), WAKE_TOKEN);\n# handle.join().unwrap();\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13073:3795":{"id":"2:13073:3795","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13075:3814","2:13076:922","2:13077:59735","2:13078:59736"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13423:60381":{"id":"2:13423:60381","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16010:2612"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13503:60391":{"id":"2:13503:60391","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13054:3792","`DoubleEndedIterator`":"2:8448:120","str::match_indices":"1:16010:2612","prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49630:4202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13526:60399":{"id":"2:13526:60399","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16004:2607","self::pattern":"2:13054:3792"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,21],"end":[67,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"poll::Registry","name":"Registry","id":"0:80:1598","glob":false}},"2:13449:32205":{"id":"2:13449:32205","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49754:4209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5719:3393":{"id":"1:5719:3393","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5720:54235","1:5721:54237","1:5722:54236","1:5723:54238"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3440:3177":{"id":"2:3440:3177","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10303:3192":{"id":"2:10303:3192","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10304:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6787:3409":{"id":"1:6787:3409","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6788:7565","1:6789:56138"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6437:3411":{"id":"1:6437:3411","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6438:3718","1:6439:3719","1:6440:8463","1:6441:54082","1:6443:54086","1:6445:54083","1:6446:54084","1:6448:54085"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13544:60403":{"id":"2:13544:60403","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16004:2607"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49779:4211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5775:3396":{"id":"1:5775:3396","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:56120","1:5777:56121","1:5778:56122","1:5779:56123"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:2677"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13514:60397":{"id":"2:13514:60397","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13084:3791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:304":{"id":"2:13428:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:16010:2612","`u8`":"1:16021:2621"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4748:3272":{"id":"1:4748:3272","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:58524","1:4750:58525","1:4751:58526","1:4753:3271","1:4754:58527","1:4756:54807","1:4757:4718"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4666:3265","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6106:54302":{"id":"5:6106:54302","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16010:2612"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:54301":{"id":"5:6107:54301","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16010:2612"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,0],"end":[66,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"interest::Interest","name":"Interest","id":"0:247:1597","glob":false}},"2:13541:60402":{"id":"2:13541:60402","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16004:2607"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49761:4210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:190":{"id":"0:78:190","crate_id":0,"name":"Poll","span":{"filename":"src/poll.rs","begin":[249,0],"end":[251,1]},"visibility":"public","docs":"Polls for readiness events on all registered values.\n\n`Poll` allows a program to monitor a large number of [`event::Source`]s,\nwaiting until one or more become \"ready\" for some class of operations; e.g.\nreading and writing. An event source is considered ready if it is possible\nto immediately perform a corresponding operation; e.g. [`read`] or\n[`write`].\n\nTo use `Poll`, an `event::Source` must first be registered with the `Poll`\ninstance using the [`register`] method on its associated `Register`,\nsupplying readiness interest. The readiness interest tells `Poll` which\nspecific operations on the handle to monitor for readiness. A `Token` is\nalso passed to the [`register`] function. When `Poll` returns a readiness\nevent, it will include this token.  This associates the event with the\nevent source that generated the event.\n\n[`event::Source`]: ./event/trait.Source.html\n[`read`]: ./net/struct.TcpStream.html#method.read\n[`write`]: ./net/struct.TcpStream.html#method.write\n[`register`]: struct.Registry.html#method.register\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{self, SocketAddr};\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = net::TcpListener::bind(addr)?;\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(server.local_addr()?)?;\n\n// Register the stream with `Poll`\npoll.registry().register(&mut stream, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n# Portability\n\nUsing `Poll` provides a portable interface across supported platforms as\nlong as the caller takes the following into consideration:\n\n### Spurious events\n\n[`Poll::poll`] may return readiness events even if the associated\nevent source is not actually ready. Given the same code, this may\nhappen more on some platforms than others. It is important to never assume\nthat, just because a readiness event was received, that the associated\noperation will succeed as well.\n\nIf operation fails with [`WouldBlock`], then the caller should not treat\nthis as an error, but instead should wait until another readiness event is\nreceived.\n\n### Draining readiness\n\nOnce a readiness event is received, the corresponding operation must be\nperformed repeatedly until it returns [`WouldBlock`]. Unless this is done,\nthere is no guarantee that another readiness event will be delivered, even\nif further data is received for the event source.\n\n[`WouldBlock`]: std::io::ErrorKind::WouldBlock\n\n### Readiness operations\n\nThe only readiness operations that are guaranteed to be present on all\nsupported platforms are [`readable`] and [`writable`]. All other readiness\noperations may have false negatives and as such should be considered\n**hints**. This means that if a socket is registered with [`readable`]\ninterest and either an error or close is received, a readiness event will\nbe generated for the socket, but it **may** only include `readable`\nreadiness. Also note that, given the potential for spurious events,\nreceiving a readiness event with `read_closed`, `write_closed`, or `error`\ndoesn't actually mean that a `read` on the socket will return a result\nmatching the readiness event.\n\nIn other words, portable programs that explicitly check for [`read_closed`],\n[`write_closed`], or [`error`] readiness should be doing so as an\n**optimization** and always be able to handle an error or close situation\nwhen performing the actual read operation.\n\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`writable`]: ./event/struct.Event.html#method.is_writable\n[`error`]: ./event/struct.Event.html#method.is_error\n[`read_closed`]: ./event/struct.Event.html#method.is_read_closed\n[`write_closed`]: ./event/struct.Event.html#method.is_write_closed\n\n### Registering handles\n\nUnless otherwise noted, it should be assumed that types implementing\n[`event::Source`] will never become ready unless they are registered with\n`Poll`.\n\nFor example:\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\nuse std::thread;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut sock = TcpStream::connect(listener.local_addr()?)?;\n\nthread::sleep(Duration::from_secs(1));\n\nlet poll = Poll::new()?;\n\n// The connect is not guaranteed to have started until it is registered at\n// this point\npoll.registry().register(&mut sock, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n### Dropping `Poll`\n\nWhen the `Poll` instance is dropped it may cancel in-flight operations for\nthe registered [event sources], meaning that no further events for them may\nbe received. It also means operations on the registered event sources may no\nlonger work. It is up to the user to keep the `Poll` instance alive while\nregistered event sources are being used.\n\n[event sources]: ./event/trait.Source.html\n\n### Accessing raw fd/socket/handle\n\nMio makes it possible for many types to be converted into a raw file\ndescriptor (fd, Unix), socket (Windows) or handle (Windows). This makes it\npossible to support more operations on the type than Mio supports, for\nexample it makes [mio-aio] possible. However accessing the raw fd is not\nwithout it's pitfalls.\n\nSpecifically performing I/O operations outside of Mio on these types (via\nthe raw fd) has unspecified behaviour. It could cause no more events to be\ngenerated for the type even though it returned `WouldBlock` (in an operation\ndirectly accessing the fd). The behaviour is OS specific and Mio can only\nguarantee cross-platform behaviour if it can control the I/O.\n\n[mio-aio]: https://github.com/asomers/mio-aio\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being considered\na breaking change, don't depend on this, it's just here to inform the user.\nCurrently the kqueue and epoll implementation support direct I/O operations\non the fd without Mio's knowledge. Windows however needs **all** I/O\noperations to go through Mio otherwise it is not able to update it's\ninternal state properly and won't generate events.\n\n### Polling without registering event sources\n\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being\nconsidered a breaking change, don't depend on this, it's just here to inform\nthe user. On platforms that use epoll, kqueue or IOCP (see implementation\nnotes below) polling without previously registering [event sources] will\nresult in sleeping forever, only a process signal will be able to wake up\nthe thread.\n\nOn WASM/WASI this is different as it doesn't support process signals,\nfurthermore the WASI specification doesn't specify a behaviour in this\nsituation, thus it's up to the implementation what to do here. As an\nexample, the wasmtime runtime will return `EINVAL` in this situation, but\ndifferent runtimes may return different results. If you have further\ninsights or thoughts about this situation (and/or how Mio should handle it)\nplease add you comment to [pull request#1580].\n\n[event sources]: crate::event::Source\n[pull request#1580]: https://github.com/tokio-rs/mio/pull/1580\n\n# Implementation notes\n\n`Poll` is backed by the selector provided by the operating system.\n\n|      OS       |  Selector |\n|---------------|-----------|\n| Android       | [epoll]   |\n| DragonFly BSD | [kqueue]  |\n| FreeBSD       | [kqueue]  |\n| iOS           | [kqueue]  |\n| illumos       | [epoll]   |\n| Linux         | [epoll]   |\n| NetBSD        | [kqueue]  |\n| OpenBSD       | [kqueue]  |\n| Windows       | [IOCP]    |\n| macOS         | [kqueue]  |\n\nOn all supported platforms, socket operations are handled by using the\nsystem selector. Platform specific extensions (e.g. [`SourceFd`]) allow\naccessing other features provided by individual system selectors. For\nexample, Linux's [`signalfd`] feature can be used by registering the FD with\n`Poll` via [`SourceFd`].\n\nOn all platforms except windows, a call to [`Poll::poll`] is mostly just a\ndirect call to the system selector. However, [IOCP] uses a completion model\ninstead of a readiness model. In this case, `Poll` must adapt the completion\nmodel Mio's API. While non-trivial, the bridge layer is still quite\nefficient. The most expensive part being calls to `read` and `write` require\ndata to be copied into an intermediate buffer before it is passed to the\nkernel.\n\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2\n[IOCP]: https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports\n[`signalfd`]: https://man7.org/linux/man-pages/man2/signalfd.2.html\n[`SourceFd`]: unix/struct.SourceFd.html\n[`Poll::poll`]: struct.Poll.html#method.poll","links":{"std::io::ErrorKind::WouldBlock":"1:10962:3289"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13538:2733":{"id":"2:13538:2733","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10242:3197":{"id":"2:10242:3197","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10243:1533","2:10244:56329","2:10246:2866"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13429:54779":{"id":"2:13429:54779","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16021:2621"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13079:3796":{"id":"2:13079:3796","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13081:3087","2:13082:59179","2:13083:59180"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13073:3795","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3505:3156":{"id":"2:3505:3156","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10540:146":{"id":"2:10540:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:652","2:10542:1906","2:10543:53896","2:10544:53897","2:10545:53898","2:10546:53899","2:10547:53900","2:10548:53901","2:10549:53902","2:10550:53903","2:10551:53904","2:10552:53905","2:10553:53906","2:10554:53907","2:10555:53908","2:10556:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:288:1591":{"id":"0:288:1591","crate_id":0,"name":"event","span":{"filename":"src/sys/shell/selector.rs","begin":[83,0],"end":[83,13]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(clippy :: trivially_copy_pass_by_ref)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:3380:3166":{"id":"2:3380:3166","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:3170":{"id":"2:3406:3170","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3376:3167":{"id":"2:3376:3167","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3581:3179":{"id":"2:3581:3179","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:3178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6091:61040":{"id":"5:6091:61040","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3427:1904":{"id":"2:3427:1904","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13064:3793":{"id":"2:13064:3793","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13066:3795","2:13067:59499","2:13068:59500","2:13069:59501","2:13070:59503","2:13071:59502","2:13072:59504"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9343:3417":{"id":"1:9343:3417","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9344:56899","1:9345:56900","1:9346:56901","1:9347:56902","1:9348:56903","1:9349:39507","1:9350:56898"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13513:60396":{"id":"2:13513:60396","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:1903":{"id":"2:3401:1903","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8887:3917":{"id":"2:8887:3917","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7928:3918","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:3077","2:2960:3074","2:2961:3084"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:344:1599":{"id":"0:344:1599","crate_id":0,"name":"Token","span":{"filename":"src/token.rs","begin":[132,0],"end":[132,28]},"visibility":"public","docs":"Associates readiness events with [`event::Source`]s.\n\n`Token` is a wrapper around `usize` and is used as an argument to\n[`Registry::register`] and [`Registry::reregister`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[`Registry::register`]: struct.Registry.html#method.register\n[`Registry::reregister`]: struct.Registry.html#method.reregister\n\n# Example\n\nUsing `Token` to track which socket generated the event. In this example,\n`HashMap` is used, but usually something like [`slab`] is better.\n\n[`slab`]: https://crates.io/crates/slab\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Interest, Poll, Token};\nuse mio::net::TcpListener;\n\nuse std::thread;\nuse std::io::{self, Read};\nuse std::collections::HashMap;\n\n// After this number of sockets is accepted, the server will shutdown.\nconst MAX_SOCKETS: usize = 32;\n\n// Pick a token that will not be used by any other socket and use that one\n// for the listener.\nconst LISTENER: Token = Token(1024);\n\n// Used to store the sockets.\nlet mut sockets = HashMap::new();\n\n// This is used to generate a unique token for a socket\nlet mut next_socket_index = 0;\n\n// The `Poll` instance\nlet mut poll = Poll::new()?;\n\n// Tcp listener\nlet mut listener = TcpListener::bind(\"127.0.0.1:0\".parse()?)?;\n\n// Register the listener\npoll.registry().register(&mut listener, LISTENER, Interest::READABLE)?;\n\n// Spawn a thread that will connect a bunch of sockets then close them\nlet addr = listener.local_addr()?;\nthread::spawn(move || {\n    use std::net::TcpStream;\n\n    // +1 here is to connect an extra socket to signal the socket to close\n    for _ in 0..(MAX_SOCKETS+1) {\n        // Connect then drop the socket\n        let _ = TcpStream::connect(addr).unwrap();\n    }\n});\n\n// Event storage\nlet mut events = Events::with_capacity(1024);\n\n// Read buffer, this will never actually get filled\nlet mut buf = [0; 256];\n\n// The main event loop\nloop {\n    // Wait for events\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        match event.token() {\n            LISTENER => {\n                // Perform operations in a loop until `WouldBlock` is\n                // encountered.\n                loop {\n                    match listener.accept() {\n                        Ok((mut socket, _)) => {\n                            // Shutdown the server\n                            if next_socket_index == MAX_SOCKETS {\n                                return Ok(());\n                            }\n\n                            // Get the token for the socket\n                            let token = Token(next_socket_index);\n                            next_socket_index += 1;\n\n                            // Register the new socket w/ poll\n                            poll.registry().register(&mut socket, token, Interest::READABLE)?;\n\n                            // Store the socket\n                            sockets.insert(token, socket);\n                        }\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop accepting\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n            token => {\n                // Always operate in a loop\n                loop {\n                    match sockets.get_mut(&token).unwrap().read(&mut buf) {\n                        Ok(0) => {\n                            // Socket is closed, remove it from the map\n                            sockets.remove(&token);\n                            break;\n                        }\n                        // Data is not actually sent in this example\n                        Ok(_) => unreachable!(),\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop reading\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:346:1542"],"impls":[]}},"2:13470:32077":{"id":"2:13470:32077","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12846:4164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10307:3201":{"id":"2:10307:3201","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10308:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13508:60393":{"id":"2:13508:60393","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13442:4228":{"id":"2:13442:4228","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49432:4192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13540:54299":{"id":"2:13540:54299","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3417:3173":{"id":"2:3417:3173","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13482:54812":{"id":"2:13482:54812","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:16010:2612","prim@char":"1:16004:2607","self::pattern":"2:13054:3792"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49566:4170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13782:150":{"id":"2:13782:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13783:181","2:13784:150","2:13785:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13456:54413":{"id":"2:13456:54413","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:3172":{"id":"2:3411:3172","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:126:1591":{"id":"0:126:1591","crate_id":0,"name":"event","span":{"filename":"src/event/mod.rs","begin":[1,0],"end":[10,29]},"visibility":"public","docs":"Readiness event types and utilities.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:213","0:217","0:220","0:223"],"is_stripped":false}},"2:8602:157":{"id":"2:8602:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8603:2520","2:8604:922","2:8605:3096","2:8608:2523","2:8609:495","2:8611:3097","2:8614:3098","2:8615:3099","2:8616:3100","2:8617:3101","2:8619:3102","2:8621:3103","2:8622:3104","2:8624:841","2:8627:3105","2:8634:3106","2:8636:3107","2:8639:3108","2:8640:3109","2:8641:3110","2:8643:3111","2:8645:3112","2:8648:1308","2:8649:3113","2:8650:3114","2:8654:3115","2:8657:3116","2:8658:3117","2:8659:3118","2:8661:3119","2:8662:2804","2:8664:3120","2:8667:3121","2:8669:3122","2:8679:3123","2:8694:3124","2:8696:3125","2:8700:3126","2:8709:3127","2:8712:3128","2:8714:3129","2:8717:276","2:8724:294","2:8731:3130","2:8738:3131","2:8747:3132","2:8757:1014","2:8764:3133","2:8771:3077","2:8772:3074","2:8773:3079","2:8785:3078","2:8792:3076","2:8804:3075","2:8811:3134","2:8812:3135","2:8817:3136","2:8820:3137","2:8823:3138","2:8824:3139","2:8826:3140","2:8828:415","2:8831:3141","2:8834:997","2:8837:3142","2:8840:604","2:8843:3143","2:8846:907","2:8848:826","2:8850:792","2:8852:713","2:8854:696","2:8856:3144","2:8857:3145","2:8865:3146"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6859:1913":{"id":"1:6859:1913","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6860:2153"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13506:60392":{"id":"2:13506:60392","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:266:2089":{"id":"0:266:2089","crate_id":0,"name":"selector","span":{"filename":"src/sys/shell/selector.rs","begin":[1,0],"end":[127,1]},"visibility":{"restricted":{"parent":"0:264:2278","path":"::sys::shell"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:288:1591"],"is_stripped":true}},"2:8883:3154":{"id":"2:8883:3154","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12501:4358":{"id":"2:12501:4358","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12502:2520","2:12503:60117"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[8,0],"end":[8,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::event::Event","name":"Event","id":"0:370:2397","glob":false}},"1:6863:2777":{"id":"1:6863:2777","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:58513"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3516:2798":{"id":"2:3516:2798","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:61039":{"id":"5:6088:61039","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13447:4718":{"id":"2:13447:4718","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49716:3278","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22940:3420":{"id":"2:22940:3420","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22930:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13417":{"id":"2:13417","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12514:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13418:793","2:13419:2511","2:13420:60379","2:13421:60380","2:13423:60381","2:13426:56113","2:13427:60382","2:13428:304","2:13429:54779","2:13430:1882","2:13432:54776","2:13434:54777","2:13436:54778","2:13438:3514","2:13439:60383","2:13440:54799","2:13441:54800","2:13442:4228","2:13443:3821","2:13444:3519","2:13445:32220","2:13446:32210","2:13447:4718","2:13448:60384","2:13449:32205","2:13450:54816","2:13453:54411","2:13456:54413","2:13459:3130","2:13463:3092","2:13467:54807","2:13470:32077","2:13473:54810","2:13476:60385","2:13479:60386","2:13482:54812","2:13485:54814","2:13488:60387","2:13491:60388","2:13494:2691","2:13497:60389","2:13500:60390","2:13503:60391","2:13506:60392","2:13508:60393","2:13510:60394","2:13512:60395","2:13513:60396","2:13514:60397","2:13517:60398","2:13520:14772","2:13523:54817","2:13526:60399","2:13529:60400","2:13532:60401","2:13535:4087","2:13537:4365","2:13538:2733","2:13539:54300","2:13540:54299","2:13541:60402","2:13543:3465","2:13544:60403"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4783:3899":{"id":"2:4783:3899","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:2520","2:4785:59670","2:4786:2523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4741:3269":{"id":"1:4741:3269","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:56918","1:4743:39918","1:4744:56919","1:4745:56920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3347:3163":{"id":"2:3347:3163","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10530:142":{"id":"2:10530:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10531:715","2:10533:3337"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10292:109":{"id":"2:10292:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10293:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[70,0],"end":[70,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"wasi\"))]"],"deprecation":null,"kind":"import","inner":{"source":"waker::Waker","name":"Waker","id":"0:366:1600","glob":false}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23089:16253":{"id":"2:23089:16253","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23090:7476","2:23091:59346","2:23092:59347"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23082:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6085:3279":{"id":"5:6085:3279","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6685:3395":{"id":"1:6685:3395","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6686:56775","1:6687:6270","1:6688:6271","1:6689:6273","1:6690:6272","1:6691:6274","1:6692:6275","1:6693:6277","1:6694:5865","1:6695:6280","1:6696:6281","1:6697:6282","1:6698:6283","1:6699:6284","1:6700:6285","1:6701:6278","1:6702:6279"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13510:60394":{"id":"2:13510:60394","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13438:3514":{"id":"2:13438:3514","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3577:3178","`str`":"1:16010:2612","str::slice_mut_unchecked":"1:16010:2612"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:4723:3197":{"id":"1:4723:3197","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:1906","1:4725:58397","1:4727:58398","1:4728:4641","1:4729:58399","1:4730:58400","1:4731:2866","1:4740:3119"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10301:3193":{"id":"2:10301:3193","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10302:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6105:3300":{"id":"5:6105:3300","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5741:3395":{"id":"1:5741:3395","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:5919","1:5743:54181","1:5744:6361","1:5745:58200","1:5746:3718","1:5747:3719","1:5748:58201","1:5749:1304","1:5750:58202","1:5751:58203","1:5752:58204","1:5753:58205","1:5754:58206","1:5755:58207","1:5756:58208","1:5757:58209"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9260:2969":{"id":"2:9260:2969","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13767:138":{"id":"2:13767:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13768:181","2:13769:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13467:54807":{"id":"2:13467:54807","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:16010:2612","self::pattern":"2:13054:3792","`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:2607","str::split_whitespace":"1:16010:2612"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49462:3277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5789:3398":{"id":"1:5789:3398","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:56824"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3342:2787":{"id":"2:3342:2787","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23774:3945":{"id":"2:23774:3945","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23775:3948"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23770:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:190:2204":{"id":"0:190:2204","crate_id":0,"name":"source","span":{"filename":"src/event/source.rs","begin":[1,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:126:1591","path":"::event"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:204:2206"],"is_stripped":true}},"2:13440:54799":{"id":"2:13440:54799","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16010:2612"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5727:3394":{"id":"1:5727:3394","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:6361","1:5729:56393","1:5730:56394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6861:2776":{"id":"1:6861:2776","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:56685"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13497:60389":{"id":"2:13497:60389","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:16010:2612","self::pattern":"2:13054:3792","prim@char":"1:16004:2607","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49684:4205","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10305:3200":{"id":"2:10305:3200","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10306:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13535:4087":{"id":"2:13535:4087","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12993:2756","`FromStr`":"2:12993:2756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"token::Token","name":"Token","id":"0:344:1599","glob":false}},"2:13459:3130":{"id":"2:13459:3130","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47495:176","self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13421:60380":{"id":"2:13421:60380","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5797:3400":{"id":"1:5797:3400","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:6361"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[10,0],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::source::Source","name":"Source","id":"0:204:2206","glob":false}},"2:14166:141":{"id":"2:14166:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14167:277","2:14168:518","2:14169:280","2:14170:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13543:3465":{"id":"2:13543:3465","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16004:2607"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49770:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:60384":{"id":"2:13448:60384","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49726:4206","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3310:2797":{"id":"2:3310:2797","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:206:2230":{"id":"0:206:2230","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[97,4],"end":[102,24]},"visibility":"default","docs":"Re-register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::reregister`] instead. Implementors should handle\nre-registration by either delegating the call to another `Source` type.\n\n[`Registry::reregister`]: ../struct.Registry.html#method.reregister","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:80:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:344:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["interests",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:247:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8448:120":{"id":"2:8448:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8449:3087","2:8450:3088","2:8451:3089","2:8452:3090","2:8456:3091","2:8459:3092"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:247:1597":{"id":"0:247:1597","crate_id":0,"name":"Interest","span":{"filename":"src/interest.rs","begin":[17,0],"end":[17,31]},"visibility":"public","docs":"Interest used in registering.\n\nInterest are used in [registering] [`event::Source`]s with [`Poll`], they\nindicate what readiness should be monitored for. For example if a socket is\nregistered with [readable] interests and the socket becomes writable, no\nevent will be returned from a call to [`poll`].\n\n[registering]: struct.Registry.html#method.register\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[readable]: struct.Interest.html#associatedconstant.READABLE\n[`poll`]: struct.Poll.html#method.poll","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:127:1591":{"id":"0:127:1591","crate_id":0,"name":"event","span":{"filename":"src/event/event.rs","begin":[1,0],"end":[230,1]},"visibility":{"restricted":{"parent":"0:126:1591","path":"::event"}},"docs":null,"links":{},"attrs":["#[allow(clippy :: module_inception)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:370:2397"],"is_stripped":true}},"2:12993:2756":{"id":"2:12993:2756","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12994:126","2:12995:56316"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13532:60401":{"id":"2:13532:60401","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16004:2607","self::pattern":"2:13054:3792"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13453:54411":{"id":"2:13453:54411","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:3792","prim@char":"1:16004:2607"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:246:1628":{"id":"0:246:1628","crate_id":0,"name":"guide","span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,13]},"visibility":"public","docs":"# Getting started guide.\n\nIn this guide we'll do the following:\n\n1. Create a [`Poll`] instance (and learn what it is).\n2. Register an [event source].\n3. Create an event loop.\n\nAt the end you'll have a very small (but quick) TCP server that accepts\nconnections and then drops (disconnects) them.\n\n## 1. Creating a `Poll` instance\n\nUsing Mio starts by creating a [`Poll`] instance, which monitors events\nfrom the OS and puts them into [`Events`]. This allows us to execute I/O\noperations based on what operations are ready.\n\n[`Poll`]: ../struct.Poll.html\n[`Events`]: ../event/struct.Events.html\n\n```ignore\n# use mio::{Poll, Events};\n# fn main() -> std::io::Result<()> {\n// `Poll` allows for polling of readiness events.\nlet poll = Poll::new()?;\n// `Events` is collection of readiness `Event`s and can be filled by\n// calling `Poll::poll`.\nlet events = Events::with_capacity(128);\n# drop((poll, events));\n# Ok(())\n# }\n```\n\nFor example if we're using a [`TcpListener`],  we'll only want to\nattempt to accept an incoming connection *iff* any connections are\nqueued and ready to be accepted. We don't want to waste our time if no\nconnections are ready.\n\n[`TcpListener`]: ../net/struct.TcpListener.html\n\n## 2. Registering event source\n\nAfter we've created a [`Poll`] instance that monitors events from the OS\nfor us, we need to provide it with a source of events. This is done by\nregistering an [event source]. As the name “event source” suggests it is\na source of events which can be polled using a `Poll` instance. On Unix\nsystems this is usually a file descriptor, or a socket/handle on\nWindows.\n\nIn the example below we'll use a [`TcpListener`] for which we'll receive\nan event (from [`Poll`]) once a connection is ready to be accepted.\n\n[event source]: ../event/trait.Source.html\n\n```ignore\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest};\n# fn main() -> std::io::Result<()> {\n# let poll = Poll::new()?;\n# let address = \"127.0.0.1:0\".parse().unwrap();\n// Create a `TcpListener`, binding it to `address`.\nlet mut listener = TcpListener::bind(address)?;\n\n// Next we register it with `Poll` to receive events for it. The `SERVER`\n// `Token` is used to determine that we received an event for the listener\n// later on.\nconst SERVER: Token = Token(0);\npoll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n# Ok(())\n# }\n```\n\nMultiple event sources can be [registered] (concurrently), so we can\nmonitor multiple sources at a time.\n\n[registered]: ../struct.Registry.html#method.register\n\n## 3. Creating the event loop\n\nAfter we've created a [`Poll`] instance and registered one or more\n[event sources] with it, we can [poll] it for events. Polling for events\nis simple, we need a container to store the events: [`Events`] and need\nto do something based on the polled events (this part is up to you, we\ncan't do it all!). If we do this in a loop we've got ourselves an event\nloop.\n\nThe example below shows the event loop in action, completing our small\nTCP server.\n\n[poll]: ../struct.Poll.html#method.poll\n[event sources]: ../event/trait.Source.html\n\n```ignore\n# use std::io;\n# use std::time::Duration;\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest, Events};\n# fn main() -> io::Result<()> {\n# let mut poll = Poll::new()?;\n# let mut events = Events::with_capacity(128);\n# let address = \"127.0.0.1:0\".parse().unwrap();\n# let mut listener = TcpListener::bind(address)?;\n# const SERVER: Token = Token(0);\n# poll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n// Start our event loop.\nloop {\n    // Poll the OS for events, waiting at most 100 milliseconds.\n    poll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n    // Process each event.\n    for event in events.iter() {\n        // We can use the token we previously provided to `register` to\n        // determine for which type the event is.\n        match event.token() {\n            SERVER => loop {\n                // One or more connections are ready, so we'll attempt to\n                // accept them (in a loop).\n                match listener.accept() {\n                    Ok((connection, address)) => {\n                        println!(\"Got a connection from: {}\", address);\n#                       drop(connection);\n                    },\n                    // A \"would block error\" is returned if the operation\n                    // is not ready, so we'll stop trying to accept\n                    // connections.\n                    Err(ref err) if would_block(err) => break,\n                    Err(err) => return Err(err),\n                }\n            }\n#           _ => unreachable!(),\n        }\n    }\n#   return Ok(());\n}\n\nfn would_block(err: &io::Error) -> bool {\n    err.kind() == io::ErrorKind::WouldBlock\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"1:5653:3415":{"id":"1:5653:3415","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5654:5092","1:5655:56113"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:346:1542":{"id":"0:346:1542","crate_id":0,"name":"0","span":{"filename":"src/token.rs","begin":[132,17],"end":[132,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"2:14242:3503":{"id":"2:14242:3503","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14243:55886","2:14244:55887","2:14245:55888","2:14246:55889","2:14247:55890","2:14248:55891","2:14249:3119"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13523:54817":{"id":"2:13523:54817","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16004:2607","self::pattern":"2:13054:3792"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10299:119":{"id":"2:10299:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10300:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:32210":{"id":"2:13446:32210","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16010:2612"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49745:4208","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13439:60383":{"id":"2:13439:60383","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:16010:2612","crate::ops::IndexMut":"2:3581:3179","str::slice_unchecked":"1:16010:2612"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10575:3332":{"id":"2:10575:3332","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:146","2:10577:33484","2:10578:56362"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,23],"end":[9,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::events::Events","name":"Events","id":"0:168:1596","glob":false}},"5:6084:61038":{"id":"5:6084:61038","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2582","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2582","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4383","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6557:3459":{"id":"1:6557:3459","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6558:56832","1:6559:56833"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5735:3392":{"id":"1:5735:3392","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5736:6361","1:5737:8132"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6103:61041":{"id":"5:6103:61041","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4051:3434":{"id":"2:4051:3434","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:57002"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13419:2511":{"id":"2:13419:2511","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1586":{"id":"0:10:1586","crate_id":0,"name":"interest","span":{"filename":"src/interest.rs","begin":[1,0],"end":[179,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:247:1597"],"is_stripped":true}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:2204","1:2575:58652","1:2576:58653","1:2577:57002"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:205:2202":{"id":"0:205:2202","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[83,4],"end":[88,24]},"visibility":"default","docs":"Register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use [`Registry::register`]\ninstead. Implementors should handle registration by delegating the call\nto another `Source` type.\n\n[`Registry::register`]: ../struct.Registry.html#method.register","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:80:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:344:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["interests",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:247:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5837:4377":{"id":"5:5837:4377","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:33282"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10311:3198":{"id":"2:10311:3198","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10312:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8413:2800":{"id":"2:8413:2800","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8415:3093","2:8417:3094","2:8418:3095"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13476:60385":{"id":"2:13476:60385","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8448:120","self::pattern":"2:13054:3792","prim@char":"1:16004:2607","str::rsplit_terminator":"1:16010:2612","str::split":"1:16010:2612"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49512:4197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13427:60382":{"id":"2:13427:60382","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3775:3189":{"id":"2:3775:3189","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:245:1611":{"id":"0:245:1611","crate_id":0,"name":"features","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,16]},"visibility":"public","docs":"# Mio's optional features.\n\nThis document describes the available features in Mio.\n\n## `os-poll` (disabled)\n\nMio by default provides only a shell implementation that `panic!`s the\nmoment it is actually run. To run it requires OS support, this is\nenabled by activating the `os-poll` feature.\n\nThis makes `Poll`, `Registry` and `Waker` functional.\n\n## `os-ext` (disabled)\n\n`os-ext` enables additional OS specific facilities. These facilities can\nbe found in the `unix` and `windows` module.\n\n## Network types (disabled)\n\nThe `net` feature enables networking primitives in the `net` module.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:3740:3184":{"id":"2:3740:3184","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:57659"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:3086"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5647:3413":{"id":"1:5647:3413","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5648:56117","1:5649:4476"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3423:3174":{"id":"2:3423:3174","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8404:151":{"id":"2:8404:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8405:2520","2:8406:2521","2:8407:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"2:3103:3408":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:10530:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:15032:3592":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:23137:3949":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:830:5219":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4048:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12168:6520":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11402:2279":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:4066:3433":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:51546:3991":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11572:6582":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:12252:3552":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:11658:3537":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:4051:3434":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:10529:8073":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:5717:4759":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:2397:3554":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:3981:5757":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"12:2398:7476":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10874:3286":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6731:5063":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3342:2787":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:3411:3172":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:49894:3803":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6807:4917":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8690:3725":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:24873:2718":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:539:5482":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6166:4900":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7250:4929":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"12:399:4674":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"0:0:1736":{"crate_id":0,"path":["mio"],"kind":"module"},"2:4885:4109":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:38808:3430":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12659:6783":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:10452:5371":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"12:764:3152":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:52325:3965":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:10577:54073":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:14239:3297":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"1:7255:8454":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6077:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:14103:5374":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:8132:3645":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:5981:3771":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6636:4871":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6252:4904":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:47596:2967":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:8160:2521":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:46:7480":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:3743:5186":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:50398:4229":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:48279:3201":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3172:5031":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6577:4912":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12208:6690":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9943:61583":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:56351:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6718:5062":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7024:5073":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2968:5028":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5444:6182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3372:2788":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2816:5044":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:3336:3471":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:24533:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13370:7011":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:56377:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11365:3701":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:14958:5377":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:3145:5040":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12385:6733":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:46711:3873":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:24237:2716":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11082:5135":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"12:815:3564":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4362:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:12257:3553":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:4397:3684":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:46059:3837":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:5101:4117":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:5785:3397":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7677:3588":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:52796:3998":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6691:4915":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:5175:6042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:9381:3793":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12712:6789":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:12203:3497":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:6954:4370":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5207:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:10799:2738":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:9768:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"12:114:8680":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:50194:4223":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:12065:54203":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:10677:3574":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:10656:6516":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:695:5231":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:6858:1914":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"typedef"},"17:11434:6572":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:16002:2605":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"14:216:45421":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:8400:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:2392:7475":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6934:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:3370:3470":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10684:11956":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:88:39813":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:11924:4186":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"12:2280:3572":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11714:6597":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:51339:3967":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:7824:5332":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12262:6698":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:49842:3794":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:49339:4181":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:12132:2521":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1190:10953":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13062:6920":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:49566:4170":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12552:6762":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6136:4894":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10081:5122":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6905:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2062:3257":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:2991:5039":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:3389:3171":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:4443:2398":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:48811:3334":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8289:3645":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:7279:5075":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7420:4876":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:6126:4899":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:547:4761":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:4728:4040":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"10:0:2587":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"9:692:4537":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:3714:7211":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6101:4850":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:4921:4110":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:24147:39224":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:14242:3503":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7732:3590":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46290:8103":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:14130:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:9689:61579":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7174:4922":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:9729:61580":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12307:6706":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7236:4928":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10435:8381":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5960:4772":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:16027:2627":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:6662:6387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:4740:4041":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:51696:3971":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:53192:3990":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46343:4346":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:5500:3704":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:9861:5368":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:8883:3154":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5244:6074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4038:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3366:1912":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:6959:2774":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:56364:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11378:5130":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:2773:5051":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11156:2279":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:6911:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:1651:3573":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6391:4907":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"15:0:2591":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:52589:3978":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"12:2036:2521":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:45968:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4127:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:50206:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:12138:3493":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8646:3724":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:46720:3874":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13554:7060":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"18:783:6416":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:37627:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:1428:3152":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11304:47076":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"20:373:2748":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"16:4790:7230":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:14550:3412":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13799:7143":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:1091:5318":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:7858:3895":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4509:6000":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:15509:4699":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"14:244:8089":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:10305:3200":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:47716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"19:117:6412":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:8193:5350":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:4256:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:8463:4406":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4088:5807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5707:4757":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:10565:3408":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9280:6499":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:49770:3466":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13810:7144":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11045:47074":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:51358:7688":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"0:126:1591":{"crate_id":0,"path":["mio","event"],"kind":"module"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:10241:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:24121:7584":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:8313:4266":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2397:8449":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:10309:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6238:4857":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13272:6989":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1748:5676":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:49448:3275":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:47553:2521":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:8738:3734":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:527:5477":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:12811:4203":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:47562:2966":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10584:5192":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:513:5469":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"18:745:61591":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:51925:7699":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11653:6593":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:5522:4750":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:24601:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:50228:2791":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:3347:3163":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11193:3445":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"6:4287:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11539:6580":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"12:1203:4670":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10502:8072":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:24771:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:14575:3405":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6768:5066":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:15019:3591":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:2330:4497":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9440:6504":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:5376:3698":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12275:6699":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:1157:10952":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:3329:2398":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:5735:3392":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46621:3859":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:1524:3568":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4208:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:15130:3599":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:48272:3200":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:12227:3730":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:32696:4005":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6644:4914":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9961:8372":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11458:6573":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:1843:5318":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:50439:3432":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:16018:2618":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:51869:7697":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:8446:3469":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:48635:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:50048:3809":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:4378:2521":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:6634:58972":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:47537:2398":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:15754:5378":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8027:3645":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:783:5368":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:9476:6505":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:51523:3988":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4410:5961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:7117:2957":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:48010:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:5395:6163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11981:6654":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"9:1020:4604":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6240:6374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:49480:4167":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6744:5064":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:48619:3212":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:49381:4185":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"12:1183:4669":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:7392:4860":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13258:6984":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1537:5548":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:23139:3948":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:3341:4445":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:0:2592":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:51076:3994":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:47018:8119":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:16011:2613":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:9839:5143":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:11268:3582":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:8388:3534":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:23942:4241":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:53419:7748":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:13939:54206":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9088:47071":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:216:2731":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"1:15986:54075":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13620:7075":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:49986:3806":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:1438:2521":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:637:6416":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:4417:7219":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4160:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10809:3405":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"20:237:2734":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"1:5930:3765":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:48094:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:8880:3153":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:14570:8127":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5146:6018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6032:4783":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:24805:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:5788:5318":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13477:7037":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:4671:7226":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:12795:4200":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:49530:4198":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6569:5059":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:53399:7746":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4055:5792":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:8164:8687":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"18:812:5217":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:51051:7686":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11147:8074":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:4704:7227":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:3522:6428":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46650:3862":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:7663:3587":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6668:7564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12507:6753":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4379:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:5727:3394":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:4955:7235":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9971:61582":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:48522:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13488:7041":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10558:8385":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:53465:7752":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:12247:3736":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:12735:4196":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:3839:5318":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:23470:16272":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:1493:3563":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"12:1256:3573":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13942:7182":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5360:4739":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:1215:4495":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:1457:3572":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:47674:3152":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8839:8455":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"11:0:2588":{"crate_id":11,"path":["adler"],"kind":"module"},"17:10160:6511":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:7257:5318":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:10303:3192":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:9763:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:542:4787":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:8908:3242":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11098:3270":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1588:5576":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"9:927:44842":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"9:1056:4597":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:10701:8458":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:565:5502":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12408:6742":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5971:6236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:6699:6284":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:1634:5605":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3759:2398":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:13064:3793":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9886:8370":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4386:7218":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12040:6661":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10266:5108":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:24035:4093":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"9:996:4603":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:22993:3948":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:15331:3451":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1526:5543":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:2843:5025":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:580:5511":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1441:3570":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:2395:8448":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:10826:3406":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:13961:3590":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10403:5142":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13978:7186":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:4732:56361":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:50186:4224":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12221:6691":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:52163:3992":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"15:248:4691":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:2793:3429":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:14242:3293":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:16017:2617":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:9799:8369":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:14626:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:3104:3832":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:49269:4176":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:11318:4167":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:10307:3201":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:5034:4111":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:603:44917":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:53129:3970":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:2866:5026":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"12:379:4675":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:46603:3857":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:4599:5321":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"5:3040:7573":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:5363:6146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"12:2404:61571":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7856:4934":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11668:2398":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:5605:3901":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:11138:3152":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5008:3442":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:10028:8373":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:23871:4239":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4075:5802":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:32500:59329":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"6:5213:6061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6940:6401":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:12744:5373":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:50198:4217":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:634:5539":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:10962:3289":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:4157:5193":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11254:5161":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6949:5070":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10788:8393":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:9974:4150":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:14643:58340":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:5375:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6087:4852":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:22583:60125":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3338:4774":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:46802:3870":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:55967:4028":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:3195:5032":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7928:3836":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:521:5474":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4823:7231":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12234:6693":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"9:41:4587":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:24169:39216":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:7756:3856":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:46299:4049":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:3549:7210":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:4670:3257":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:10304:5125":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:15122:8133":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:1235:4496":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:4535:7223":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:8413:2800":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2155:2398":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:8121:4487":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6893:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:7453:4855":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:57678:7765":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:51595:3976":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:838:3795":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11750:6602":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:11506:2958":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10052:8375":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:1459:3561":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:1149:8441":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13685:7119":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4028:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:9332:5129":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7571:4851":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11231:5163":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:2183:3472":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4734:7228":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:53380:3958":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5183:6044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13041:6912":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:47528:2520":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2269:3922":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:53454:7751":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10975:8404":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:2751:3428":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"20:296:2736":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"6:1733:3710":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11409:3766":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:15498:4699":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:13817:59669":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"12:2269:3571":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:9162:5162":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:9261:2968":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:2594:8453":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"17:13842:7159":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"9:776:4584":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:46453:4054":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50421:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"0:246:1628":{"crate_id":0,"path":["mio","guide"],"kind":"module"},"2:46989:8117":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11588:6583":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12610:6770":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9551:5160":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13402:7018":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:3018:5029":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"9:234:4562":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:5647:3413":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:2866:3916":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:1674:3564":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12195:6688":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7467:4856":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:16016:2616":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5488:4748":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11118:47075":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:3882:3288":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:13767:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6424:4908":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:12772:4199":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10477:5140":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:9259:2970":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:11077:3304":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:14317:3244":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:10599:8390":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:49911:3804":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11555:6581":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:24129:7585":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:1415:2398":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:5815:4766":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:14804:8458":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:2218:4448":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4332:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:48583:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:9343:3417":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4098:5814":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4510:3293":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13205:6972":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:2200:5320":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:51124:3974":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11026:8408":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:49251:4174":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:11143:3277":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:8849:5159":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:48549:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"18:645:5228":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:46427:4344":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:607:5524":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:5968:3770":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:2733:4777":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3297:3068":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"12:2072:3473":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:5030:3223":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:9264:6498":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13865:7160":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:2159:2521":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:5837:4377":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:51234:3987":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11847:6633":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2945:5050":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:49260:4175":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:3264:5035":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10253:5105":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12741:6792":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:15045:58342":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"12:432:4673":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10458:6464":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:46024:3183":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9771:5367":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:10317:5128":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5485:6192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:3351:3670":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6152:4854":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:46420:4343":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10673:47258":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:53341:3993":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:14069:3900":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:9574:5137":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:4641:7225":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:53302:3973":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8925:3744":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"16:7146:4920":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:3275:3064":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:10242:3197":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6176:4901":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:53408:7747":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:0:2594":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:13786:3597":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:5653:3415":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:9809:61581":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5330:6499":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:6557:3459":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5995:6253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4242:5880":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11137:3275":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6976:6408":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:1530:3569":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:52085:3985":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6640:6386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7761:4932":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:10580:3333":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6964:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7119:4784":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:16008:2610":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:13923:3588":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4392:5954":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:48795:3335":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:10646:10949":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11604:6584":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:10575:3332":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:49745:4208":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:5855:4767":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:13130:3799":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:4607:3303":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11932:6641":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:1482:3469":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:46353:4347":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11180:3444":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:12343:6712":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:46612:3858":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:13279:8438":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"5:8362:7574":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:23465:3950":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:51642:3964":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:10407:5170":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"9:1075:4605":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:9979:4151":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13119:6955":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:1017:3645":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:12116:2398":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:5833:4379":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:46503:4267":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:47666:2398":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:47968:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11015:8407":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:48258:3192":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:1633:3571":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7303:4930":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:661:5229":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6110:4893":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4315:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:8344:4475":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:49666:4204":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13637:7082":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:11957:4187":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:1606:5586":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:3427:1904":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:10292:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13318:6995":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:5039:4112":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:13963:59352":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"6:161:39880":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:13568:8450":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4425:5965":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7226:4927":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3812:3190":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12182:6687":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:2794:4778":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4116:5823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:802:5216":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46486:4266":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51744:3956":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8380:3645":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:11794:6619":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:2162:3468":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6219:4903":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:48531:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"12:1147:3572":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:9718:3692":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:49880:3800":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:46673:3863":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:1236:8364":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:46031:3435":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:11434:3717":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:51901:7698":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:49289:4178":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:46771:3879":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:7549:4863":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:52438:3954":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:51211:3983":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:2754:4776":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:374:4453":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:16003:2606":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:52132:3989":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11086:3268":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"14:0:2590":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:69:4405":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22840:3935":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:8138:4488":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12982:6860":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:22934:3418":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"12:2419:3476":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"14:56:6574":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3431:3175":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:923:4485":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:3368:2786":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:13054:3792":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4538:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5295:45491":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:6357:4906":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10117:5199":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5298:6101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11328:6797":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:23089:16253":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:7212:3468":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:51316:3963":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13547:7059":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:3604:6432":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:9005:47068":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8481:1606":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1694:5653":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4032:3607":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11962:6649":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5672:4756":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4346:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5285:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:49865:3797":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"20:346:2739":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"6:3920:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4005:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11001:8406":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11970:6651":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:51378:3952":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:1075:3463":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:11411:4171":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:3907:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:3376:3167":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11726:6600":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:8250:3476":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:13963:7185":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10211:8379":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:1041:3462":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:15412:3704":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7507:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:4643:5323":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13788:7139":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13465:7036":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11199:6563":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:22940:3420":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1662:5630":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4081:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:45991:3180":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:11439:4173":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:6937:2775":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"14:189:8423":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:46980:3242":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1764:5682":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9186:5134":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:49300:4179":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"12:2032:2398":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:136:8674":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:4400:3685":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:1607:3152":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11457:6269":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:14:1906":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:11297:7780":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"12:750:2398":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:52006:3997":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4321:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10377:8466":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13356:7009":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4230:7215":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:7927:3644":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"6:5579:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:2456:8451":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4454:5980":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10331:5143":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:869:3468":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"14:231:4375":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"13:232:7474":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6072:4873":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:169:8678":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10236:5113":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4485:5993":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"9:686:4535":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"20:309:2737":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"2:46374:4341":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:7073:4919":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4356:5935":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:4762:7229":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:49761:4210":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:49959:3805":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7870:4861":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6928:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9245:5109":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:3488:3469":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"12:1103:3570":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"9:469:44848":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"20:315:2738":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"9:27:4586":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"7:85:44745":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:3440:3177":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:10957:3605":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:672:40211":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:15185:3508":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12598:6768":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:10311:3198":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:3648:3181":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5237:6070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10912:8396":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:16026:2626":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:0:2585":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"17:11277:6564":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:14565:8125":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"11:54:4658":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:5797:3400":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:7286:8454":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:16019:2619":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:7823:4866":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12699:6788":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"9:900:7531":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:46434:4345":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10705:4504":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:4198:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3380:3166":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:13587:8689":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:5208:3225":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:900:3625":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:6790:3411":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5308:6108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:11208:3447":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:6111:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:10804:3654":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:11356:4168":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10095:5197":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:2777:4500":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"12:933:3565":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:48498:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"12:979:3569":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4270:2773":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:14601:3656":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5416:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9467:56857":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6620:5057":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:46998:3303":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:16025:2625":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:2310:4516":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:5536:4428":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10224:8380":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:9769:61587":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:1551:5553":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:3396:3473":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13819:7146":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5201:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:14609:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"18:755:61588":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4440:5972":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:8106:4383":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:11250:3449":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:13986:7189":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:9063:3556":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:432:2582":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:10447:8437":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:6117:6297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12480:6750":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:3197:3657":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:2262:4498":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:3392:5042":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:46551:5340":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6208:4902":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:49279:4177":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5975:4896":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:15474:7800":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:12187:3496":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13884:7165":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:740:8358":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:16004:2607":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:294:8360":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:11130:3274":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:3682:3280":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:8602:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6491:4909":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:49512:4197":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:7441:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:5790:4765":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"12:880:3469":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:6126:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:10420:5169":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:53595:7758":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:7928:3918":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:5952:3767":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:12038:3592":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:51099:3982":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:4215:3468":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11524:3524":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:14952:5376":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5328:6124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:3091:5088":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:50071:7865":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"16:3320:5089":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7514:4875":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:11186:8075":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:51673:3968":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:16010:2612":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:46284:3466":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"0:245:1611":{"crate_id":0,"path":["mio","features"],"kind":"module"},"1:6082:3706":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"14:47:8423":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46581:3855":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10106:5198":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:3041:5030":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6697:6282":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:11354:3699":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13772:7135":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:48052:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13221:6975":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:4304:7216":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:48803:8121":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9404:6503":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:38871:3069":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:3505:3156":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:994:4486":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:51030:7685":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:2314:5173":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:15092:2781":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:16028:2628":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:8263:3577":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"12:472:8682":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:10882:3288":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:6511:3865":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:10710:3273":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"6:5226:6062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:49200:4169":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10864:6548":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:50354:7684":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:10661:10951":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"12:1121:3571":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4526:6009":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:4350:7217":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:3401:1903":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:12158:3494":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:3323:2764":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:3118:5041":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"12:0:2589":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:9210:47073":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12771:6797":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"18:858:5221":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:23664:3419":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13627:7077":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4142:5835":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:8130:3468":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:3740:3184":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2283:3925":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:14166:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:3429:4779":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5456:4744":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:3877:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:12057:5346":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:53050:3986":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:3993:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:4783:3899":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3337:2785":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:5595:4754":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:56390:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4723:3197":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:11150:3278":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:3658:5348":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:607:8363":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4516:6003":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5314:6498":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:11070:3302":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6780:4916":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:48136:4270":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:9133:47072":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9634:5365":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:6695:6280":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:601:5521":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7843:4933":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12431:6743":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13609:7074":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11159:6562":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"20:25:1910":{"crate_id":20,"path":["log","trace"],"kind":"macro"},"17:10448:5115":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:5433:4743":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:46682:3871":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:12846:4164":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:32400:59327":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"20:167:2740":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"17:10571:8388":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:46473:4265":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6685:6389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:46792:3880":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:49584:4171":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:8887:3917":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:4394:3683":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:48820:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:722:4538":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"5:7849:5338":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:3488:5038":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9600:61584":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:24068:7580":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:8298:4473":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7205:4925":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:16021:2621":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:46561:8440":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12073:6671":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11915:6635":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11598:3535":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5719:3393":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4300:3305":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"6:4434:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:5766:4764":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:2059:3471":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:13782:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"12:843:3560":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11685:3540":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13386:7014":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:3970:5318":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:8115:2521":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:3772:7212":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:8473:2799":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10635:6514":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:6861:2776":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:8330:4474":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:53428:7749":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:6672:4428":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:730:61589":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:2889:5045":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12632:6781":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:52939:3966":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:1626:5600":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5384:4740":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:24106:4089":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:1653:3562":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:5775:3396":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:53533:7756":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:9139:2962":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4432:3295":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:3581:3179":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:12076:58396":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:11628:6588":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6269:4905":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:12302:2783":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:5111:3222":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:16022:2622":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:4012:5775":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13240:6976":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10071:5203":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4218:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:6257:4410":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:10866:3677":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:821:5218":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:6150:6313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:10427:5369":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"9:0:2586":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:46111:4061":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1644:3561":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:22877:4045":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:545:5485":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:53556:7757":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4296:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6591:4913":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:7379:2521":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:1238:4671":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4684:3267":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:1740:5672":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:4448:7220":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:1501:3565":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5271:6094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4373:5946":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"8:0:2585":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:47622:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13394:7016":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:46066:3222":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:10128:5200":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:46761:3878":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:1680:5642":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11100:5165":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10618:3244":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:3883:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:28054:2713":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:12083:7795":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:32348:59330":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:9594:5364":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:50023:3807":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5475:6190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10844:5143":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:48850:8123":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12685:6785":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:10566:3621":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:3561:3284":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:6859:1913":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11835:6630":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10149:8370":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11232:3448":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:5584:10955":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"12:1682:4682":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:12004:3589":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"12:1162:4668":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:510:8362":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5452:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:668:5230":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4639:3257":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:4995:7236":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:8954:5136":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"12:2412:7478":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4473:3298":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:2433:8450":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11420:3709":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:3310:2797":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:46659:8112":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:45876:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:7642:4411":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10667:3478":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:850:5220":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:3365:4775":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:23774:3945":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:3896:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:32299:4261":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13582:7067":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:45945:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12327:6707":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:52403:3972":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1621:5598":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10988:8405":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:12262:2781":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:611:5226":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13446:7029":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:45922:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:775:6416":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9719:8367":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:6437:3411":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:53480:7753":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"12:787:3563":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13733:7120":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:4515:4463":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:49405:4271":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:5875:5327":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10489:5144":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:4614:7224":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"9:157:4554":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10623:8392":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5430:6178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8639:3722":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11822:6629":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4402:5957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12946:6829":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12568:6763":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:16029:2629":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:47884:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6024:6265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11696:6596":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:7629:3585":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:10925:3408":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10887:6549":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:25243:2712":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10001:47120":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:1531:5545":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"12:466:8681":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4741:3269":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:12525:4321":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6031:6269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:3358:3165":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9759:8368":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:12061:8124":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:7185:4923":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:626:5534":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7477:4877":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12783:6800":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:24215:8100":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:5736:4760":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:32159:2714":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"12:1666:4681":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6366:4688":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13306:6992":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:11114:2398":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12671:6784":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:23128:3408":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:49371:4184":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7894:4891":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:3352:3162":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:52372:3969":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:12124:3491":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:1663:3563":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13098:6950":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:3044:60255":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:12993:2756":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46413:4210":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:2553:4501":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:22564:59724":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:9174:8455":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10801:8395":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11616:6587":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:5889:5330":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"18:705:6416":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11678:6595":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:940:3566":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:5185:3072":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46691:3866":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4512:3294":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12582:6765":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:2171:3470":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:791:5215":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:1518:3567":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11428:3699":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:50344:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1712:5660":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"12:1703:4683":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12118:6678":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:157:39879":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:51769:3957":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3339:3664":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:612:5526":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:13422:3711":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:5402:6164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:47926:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3341:3665":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:7453:5318":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5387:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:5858:3762":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"18:713:3073":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:5564:6218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4416:5962":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12645:6782":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:46730:3875":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:57699:7766":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10279:5122":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3423:3174":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12287:6700":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3406:3170":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:50241:4280":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:7342:4888":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6004:6259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:13079:3796":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:2166:3469":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:5544:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9733:3693":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:8363:3869":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:46312:4050":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:4008:8365":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:3417:3173":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:14236:3295":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:11163:3277":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9933:8371":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4340:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:5561:4752":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13598:7070":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:10299:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:50174:4219":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:8391:4373":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:12023:3591":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10468:5141":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:2484:47158":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"15:230:4690":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:14633:3268":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12095:6672":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13933:7180":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:1011:2398":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:3772:3152":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3648:3285":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:49630:4202":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:8404:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:50202:4218":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6014:4898":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:3559:3187":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:2292:3926":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:3960:5749":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4506:7222":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:22581:60123":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:8146:60203":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6181:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:13506:7045":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10377:5172":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:49432:4192":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:23770:3408":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:47800:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:10366:6567":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:51445:3996":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:4890:7233":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:4699:5323":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4532:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:1544:5551":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:51147:3962":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:49754:4209":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13377:7013":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:3894:4480":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:22930:3408":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:3972:5752":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:8203:2521":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12242:3614":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:1195:8686":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13898:7167":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6951:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7264:4870":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:767:6426":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:12171:3495":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:4148:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:16020:2620":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12373:6731":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:47758:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10140:5143":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:5407:4741":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:15353:3697":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:8488:3492":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11947:6645":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"15:269:4695":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:378:2749":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"2:24567:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:5290:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1635:3560":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:7158:4921":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:13073:3795":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:3933:5726":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:1497:3564":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6554:4911":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12051:6662":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46782:3274":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:6787:3409":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4067:5797":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:886:5223":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12773:8459":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"17:11337:5132":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:9896:61585":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"22:0:798":{"crate_id":22,"path":["libc"],"kind":"module"},"17:11779:6613":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:894:3624":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7884:4862":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4446:5975":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3717:3182":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10962:8403":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:22751:4044":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:6964:2966":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:11283:4166":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6265:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13192:6967":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13163:6960":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:259:2735":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"17:13429:7022":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:11245:4165":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:46366:4211":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:24093:2715":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:5753:4763":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:50058:3810":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:14079:1600":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13331:7001":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13172:6961":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13564:7063":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13296:6991":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:8180:3611":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:24052:8097":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"12:183:4676":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10938:8401":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7333:4874":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11640:6591":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:618:5529":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7804:4864":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11767:6610":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11453:3410":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4386:5951":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:7670:3102":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:6764:3257":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:8176:4369":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:9649:8366":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:6054:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:48561:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8973:3609":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:6247:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:49726:4206":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:9060:3731":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:586:5514":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5346:4853":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:46052:3836":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:6863:2777":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:4666:3265":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11358:5131":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11317:54081":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3746:3186":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:1486:3573":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1507:3566":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:48516:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:24185:39225":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:13180:6962":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:50407:4230":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13912:7174":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:11397:4170":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:51285:3975":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:47682:2521":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:6202:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:6438:3864":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:13893:8439":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1600:5584":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:6319:3716":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:1567:5561":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:24635:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:49361:4183":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:15391:3698":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13540:7058":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"14:11:8423":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:52246:3977":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1721:5666":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:15229:3516":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:571:5505":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3384:3168":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11738:6601":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"12:1784:5316":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"12:353:8091":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:3274:2207":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"18:721:6418":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:8474:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"20:171:2741":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"6:6899:6392":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:24737:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:7216:4926":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3218:5033":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:8107:3302":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4020:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:45901:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:49779:4211":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:48842:8122":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:3287:3066":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:16024:2624":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:6685:3395":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4061:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:46641:3861":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:14000:7192":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:2177:3471":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:11674:3539":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:14936:5375":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"20:0:1735":{"crate_id":20,"path":["log"],"kind":"module"},"17:681:6567":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:46590:3273":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:12742:3654":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:46397:4342":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:49438:4193":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:16005:2608":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:1576:5567":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:53255:3955":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:14808:3416":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"12:2045:3469":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:48265:3193":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4179:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:1939:3469":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:5960:3768":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:6459:3423":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6922:6398":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7786:4865":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7738:4931":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:45812:3188":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:46328:4052":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:4922:7234":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10061:8376":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:15483:54074":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"14:250:7429":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6094:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11120:3273":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:15201:3509":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:47605:39432":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:1446:3560":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:152:8675":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:24703:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13746:7126":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:9065:47070":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:51821:7696":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10858:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:50362:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49046:4362":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4474:5987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47614:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:47007:7670":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9368:6502":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:3987:5759":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:5408:4338":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:50182:4220":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11406:6569":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:9639:54204":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:46631:3860":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:24222:2717":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:3758:4002":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:7975:5350":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:3335:963":{"crate_id":2,"path":["core","ops"],"kind":"module"},"1:1152:8443":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:45860:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:1597:2398":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:24669:2719":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10041:8374":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:3375:4446":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:46973:8116":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:820:5368":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:49042:4363":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:2458:8452":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9659:61586":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:47545:3152":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:12501:4358":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:15072:7799":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:8367:3868":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:16015:2615":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:10816:3656":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:49716:3278":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"13:0:2583":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6211:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:2188:3473":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:928:3562":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:9260:2969":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:12405:8451":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:5580:4753":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:1311:5204":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11499:6578":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:1618:2521":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3194:3655":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7406:4858":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"13:120:45387":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:3364:3164":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3038:3148":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:49462:3277":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10926:8400":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"12:2040:3468":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13282:6990":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:5273:4781":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"3:323:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7620:4410":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:10301:3193":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5632:4755":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12155:6683":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:1704:5659":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46391:3466":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4110:5820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11665:6594":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:8902:47066":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12494:6752":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:0:2593":{"crate_id":17,"path":["object"],"kind":"module"},"1:10592:3643":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:867:5222":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10611:8391":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"12:971:3568":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2508:4026":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:47495:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:32340:4283":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:11425:4172":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4277:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:12456:6747":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:46739:3876":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:11414:3769":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4471:3297":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:24013:7578":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"18:651:5225":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:5029:7237":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5996:4897":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:51492:3984":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:593:5516":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12537:6758":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:14821:3593":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10840:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:9528:3275":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:53518:7755":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13453:7030":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7195:4924":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:12010:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:14034:3589":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:3396:3169":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:2512:5171":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5979:6241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:12735:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"12:856:3561":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:49684:4205":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:13858:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:13084:3791":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13924:7176":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13054:6918":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:3435:3176":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:4477:7221":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:48832:3534":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:10252:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3577:3178":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:14588:7882":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:10952:3604":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:7111:5332":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:3800:7213":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:8379:4372":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:16023:2623":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:1472:3468":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:22602:60122":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:46468:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5436:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:5373:3697":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6605:4869":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2194:7576":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:2912:5027":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:49736:4207":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12795:6807":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:7792:3594":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:4965:3221":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:10827:5190":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7378:4859":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:6688:4441":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3951:3469":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:3048:60256":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"9:963:4602":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:299:8361":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:12053:3593":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:11340:7879":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:9034:47069":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:4242:5318":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:3064:5087":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:24839:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:10934:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11482:6574":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:5165:3224":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11615:3536":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:53439:7750":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:15970:56887":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:37651:3073":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:4852:7232":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:16007:2609":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:13780:7138":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:51721:3953":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3325:3660":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:23676:59728":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13532:7055":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13574:7066":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12010:6658":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:3506:5037":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:6475:3468":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:46702:3872":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10587:3629":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"9:809:3534":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:1488:3562":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7615:3584":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:6893:3867":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:49612:4201":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3362:3472":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5421:4742":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:621:8067":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:3241:5034":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:2543:5139":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7649:3586":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:10313:3199":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"12:162:4672":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:49352:4182":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10353:5174":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:5156:4118":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"12:2066:3472":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12247:6695":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:5415:3257":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11993:6655":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:11575:3534":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"12:952:3567":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7932:54207":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:22804:4046":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:0:2584":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1912:41185":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:47842:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4135:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"12:777:2521":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:16009:2611":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:16014:2614":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:49420:3934":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:11206:4164":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:3736:3287":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6013:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6021:5024":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12442:6745":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:5789:3398":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:1642:3572":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:3775:3189":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4493:5995":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11809:6625":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11360:3700":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:6682:4868":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:51253:7687":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7295:4872":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"14:194:45415":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8803:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12028:6659":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:5472:4747":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"12:2253:3570":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:1694:4493":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:45784:3155":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:13659:3523":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:9766:5366":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"12:2052:3470":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:3939:7214":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:51180:3995":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:24250:2720":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:8197:2521":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3516:2798":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:15975:10954":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4464:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5505:4749":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:15053:2782":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:5538:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:3966:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1669:5634":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"9:749:4539":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:4306:3152":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:15235:3517":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:897:5224":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:50037:3808":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:696:3620":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"7:38:44738":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:1472:3571":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:50451:3431":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:1132:3436":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4748:3272":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6413:4687":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:5741:3395":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:6518:4910":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:8929:47067":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:51397:7689":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10543:6552":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:22604:60120":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13348:7006":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:22853:3408":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8410:4479":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:50170:4216":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:1619:3570":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5257:6083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6132:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9849:61578":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:4434:3296":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:3287:5036":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12142:6680":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:10295:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:24499:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13497:7044":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11479:2778":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13760:7132":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10950:8402":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4308:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10814:5189":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:15216:3510":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13154:6956":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:6199:3715":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13590:7069":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3200:3266":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:12282:2782":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6853:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:47691:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:3039:60254":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:50178:4221":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12917:6809":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:7795:3595":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10200:8378":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:50190:4222":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13520:7052":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:7332:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:49326:4180":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6464:4867":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12467:6748":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"12:895:4660":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:56403:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10179:6513":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:9296:6500":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:7042:5074":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5423:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:23082:3408":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6999:4918":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:1558:5556":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:53503:7754":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:1727:5669":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10516:5145":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5231:7238":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6226:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12756:6796":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:46751:3877":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12725:6790":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:13284:8688":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:10540:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:533:5480":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:32334:3610":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12521:6756":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:5927:4770":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:9627:54214":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:8448:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11519:6579":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:22536:3073":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:22549:59724":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4230:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"}},"external_crates":{"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.16/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"libc","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":17}