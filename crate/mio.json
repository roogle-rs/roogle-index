{"root":"0:0:1759","crate_version":"0.8.6","includes_private":false,"index":{"2:11909:33976":{"id":"2:11909:33976","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5290:34637":{"id":"5:5290:34637","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111:656":{"id":"0:111:656","crate_id":0,"name":"fmt","span":{"filename":"src/event/event.rs","begin":[203,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2239-0:269:2439":{"id":"b:2:2239-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2241:24253"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:164-0:151:2247":{"id":"0:164-0:151:2247","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[10,0],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::source::Source","name":"Source","id":"0:151:2247","glob":false}},"b:2:2239-0:261:1624":{"id":"b:2:2239-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2241:24253"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2538-0:123:1620":{"id":"b:2:2538-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11827:30036":{"id":"2:11827:30036","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11088:13411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:33969":{"id":"2:11880:33969","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11520:13410","str::split":"2:11868:24627","prim@char":"1:11840:409","str::split_terminator":"2:11877:33968"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50794:7070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:174:1621":{"id":"b:2:2543-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:127","2:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8140:3016-0:53:192":{"id":"a:2:8140:3016-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3330:1454":{"id":"2:3330:1454","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:47073:6274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:33982":{"id":"2:11927:33982","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:1885":{"id":"0:22:1885","crate_id":0,"name":"WRITABLE","span":{"filename":"src/interest.rs","begin":[32,4],"end":[32,91]},"visibility":"public","docs":"Returns a `Interest` set representing writable interests.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:30:1933":{"id":"0:30:1933","crate_id":0,"name":"is_priority","span":{"filename":"src/interest.rs","begin":[113,4],"end":[115,5]},"visibility":"public","docs":"Returns true if `Interest` contains priority readiness.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:656":{"id":"0:37:656","crate_id":0,"name":"fmt","span":{"filename":"src/interest.rs","begin":[135,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:33974":{"id":"2:11904:33974","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11520:13410","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::match_indices":"2:11901:33973"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50894:7076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8140:3016-0:240:1623":{"id":"a:2:8140:3016-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1366","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:34636","5:5287:3318","5:5290:34637","5:5293:34638","5:5301:34639","5:5302:34640","5:5303:3341","5:5304:27326","5:5305:27327"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11860:3186":{"id":"2:11860:3186","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2239-0:174:1621":{"id":"b:2:2239-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2241:24253"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11850:31678":{"id":"2:11850:31678","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51018:7083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:271":{"id":"0:24:271","crate_id":0,"name":"add","span":{"filename":"src/interest.rs","begin":[64,4],"end":[66,5]},"visibility":"public","docs":"Add together two `Interest`.\n\nThis does the same thing as the `BitOr` implementation, but is a\nconstant function.\n\n```\nuse mio::Interest;\n\nconst INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n# fn silent_dead_code_warning(_: Interest) { }\n# silent_dead_code_warning(INTERESTS)\n```","links":{},"attrs":["#[allow(clippy :: should_implement_trait)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:33985":{"id":"2:11936:33985","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11482:126","`FromStr`":"2:11481:2795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11481:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11481:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:174:1621":{"id":"b:2:2538-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:250:601":{"id":"0:250:601","crate_id":0,"name":"eq","span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206:1615":{"id":"0:206:1615","crate_id":0,"name":"event","span":{"filename":"src/sys/shell/selector.rs","begin":[83,0],"end":[83,13]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(clippy :: trivially_copy_pass_by_ref)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"b:2:2236-0:265:2438":{"id":"b:2:2236-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:2717"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3328-0:123:1620":{"id":"b:2:3328-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:123:1620":{"id":"0:123:1620","crate_id":0,"name":"Events","span":{"filename":"src/event/events.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"A collection of readiness events.\n\n`Events` is passed as an argument to [`Poll::poll`] and will be used to\nreceive any new readiness events received since the last poll. Usually, a\nsingle `Events` instance is created at the same time as a [`Poll`] and\nreused on each call to [`Poll::poll`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n#\n# assert!(events.is_empty());\n\n// Register `event::Source`s with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:125","a:2:2673:217-0:123:1620","a:2:8140:3016-0:123:1620","a:2:8139:3017-0:123:1620","a:2:2687:225-0:123:1620","a:2:2737:2836-0:123:1620","b:2:3328-0:123:1620","b:2:2532-0:123:1620","b:2:2543-0:123:1620","b:2:2239-0:123:1620","b:2:2528-0:123:1620","b:2:2236-0:123:1620","b:2:2538-0:123:1620","0:132","0:143"]}},"2:11840:33966":{"id":"2:11840:33966","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11846:1366","crate::ops::IndexMut":"2:2996:3239","str::slice_unchecked":"2:11839:33965"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:33971":{"id":"2:11892:33971","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11843:7084":{"id":"2:11843:7084","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11840:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50696:7063","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:27329":{"id":"2:11941:27329","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:2732":{"id":"2:11895:2732","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11520:13410","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::matches":"2:11895:2732"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50930:7078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1927":{"id":"0:102:1927","crate_id":0,"name":"is_writable","span":{"filename":"src/event/event.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Returns true if the event contains writable readiness.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/event/source.rs","begin":[114,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:145:2245","path":"::event::source"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Source","id":"0:151:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Source","id":"0:151:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2621","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:157:2243","0:158:2271","0:159:2287"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2687:225-0:174:1621":{"id":"a:2:2687:225-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[81,0],"end":[192,1]},"visibility":{"restricted":{"parent":"0:119:2190","path":"::event::events"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:126:2547","0:127:2548","0:128:2551","0:129:781","0:130:2558"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11821:33961":{"id":"2:11821:33961","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:2193":{"id":"0:78:2193","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[702,4],"end":[704,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RawFd","id":"1:4703:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:123:1620":{"id":"b:2:2543-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:127","2:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:245:413":{"id":"0:245:413","crate_id":0,"name":"clone","span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7095:2561":{"id":"2:7095:2561","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"2:11837:27603":{"id":"2:11837:27603","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11833:27601":{"id":"2:11833:27601","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:251":{"id":"0:251","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,40],"end":[131,42]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2684:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:33:360":{"id":"0:33:360","crate_id":0,"name":"bitor","span":{"filename":"src/interest.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35:361":{"id":"0:35:361","crate_id":0,"name":"bitor_assign","span":{"filename":"src/interest.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:656":{"id":"0:76:656","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[695,4],"end":[697,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8140:3016-0:261:1624":{"id":"a:2:8140:3016-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:104:2482":{"id":"0:104:2482","crate_id":0,"name":"is_read_closed","span":{"filename":"src/event/event.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns true if the event contains read closed readiness.\n\n# Notes\n\nRead closed readiness can be expected after any of the following have\noccurred:\n* The local stream has shutdown the read half of its socket\n* The local stream has shutdown both the read half and the write half\n  of its socket\n* The peer stream has shutdown the write half its socket; this sends a\n  `FIN` packet that has been received by the local stream\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when read half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | `EPOLLIN` and `EPOLLRDHUP` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[21,0],"end":[194,1]},"visibility":{"restricted":{"parent":"0:94:1615","path":"::event::event"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:100:1612","0:101:1925","0:102:1927","0:103:2467","0:104:2482","0:105:2491","0:106:1933","0:107:1929","0:108:1931"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2532-0:269:2439":{"id":"b:2:2532-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:141:2563":{"id":"0:141:2563","crate_id":0,"name":"size_hint","span":{"filename":"src/event/events.rs","begin":[216,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:33973":{"id":"2:11901:33973","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11520:13410","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::rmatch_indices":"2:11904:33974"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50876:7075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:27646":{"id":"2:11924:27646","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:259:715":{"id":"0:259:715","crate_id":0,"name":"hash","span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:9243:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130:2558":{"id":"0:130:2558","crate_id":0,"name":"clear","span":{"filename":"src/event/events.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Clearing all `Event` values from container explicitly.\n\n# Notes\n\nEvents are cleared before every `poll`, so it is not required to call\nthis manually.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n// Clear all events.\nevents.clear();\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2737:2836-0:55:1622":{"id":"a:2:2737:2836-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2737:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11915:33980":{"id":"2:11915:33980","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11545:13407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286:34636":{"id":"5:5286:34636","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2621","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:6163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2621","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:6163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[203,0],"end":[224,1]},"visibility":{"restricted":{"parent":"0:119:2190","path":"::event::events"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["eq_by","cycle","skip","try_find","min","try_for_each","ge","try_collect","scan","enumerate","zip","next_chunk","position","is_sorted","lt","array_chunks","rposition","min_by","fold","any","collect_into","flat_map","peekable","all","intersperse","last","is_sorted_by","sum","rev","min_by_key","reduce","partial_cmp","partition","flatten","skip_while","intersperse_with","advance_by","ne","size_hint","is_sorted_by_key","product","unzip","max","try_reduce","partition_in_place","fuse","take_while","le","for_each","eq","nth","map","__iterator_get_unchecked","cmp_by","copied","max_by","find","is_partitioned","inspect","map_while","filter","step_by","gt","partial_cmp_by","cloned","max_by_key","find_map","count","try_fold","by_ref","cmp","take","collect","filter_map","chain"],"trait":{"name":"Iterator","id":"2:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:139:2560","0:140:937","0:141:2563","0:142:493"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11857:27645":{"id":"2:11857:27645","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:7903":{"id":"2:11848:7903","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50980:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[258,0],"end":[413,1]},"visibility":{"restricted":{"parent":"0:38:1030","path":"::poll"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:2118","0:59:1030"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:53:192":{"id":"0:53:192","crate_id":0,"name":"Poll","span":{"filename":"src/poll.rs","begin":[249,0],"end":[251,1]},"visibility":"public","docs":"Polls for readiness events on all registered values.\n\n`Poll` allows a program to monitor a large number of [`event::Source`]s,\nwaiting until one or more become \"ready\" for some class of operations; e.g.\nreading and writing. An event source is considered ready if it is possible\nto immediately perform a corresponding operation; e.g. [`read`] or\n[`write`].\n\nTo use `Poll`, an `event::Source` must first be registered with the `Poll`\ninstance using the [`register`] method on its associated `Register`,\nsupplying readiness interest. The readiness interest tells `Poll` which\nspecific operations on the handle to monitor for readiness. A `Token` is\nalso passed to the [`register`] function. When `Poll` returns a readiness\nevent, it will include this token.  This associates the event with the\nevent source that generated the event.\n\n[`event::Source`]: ./event/trait.Source.html\n[`read`]: ./net/struct.TcpStream.html#method.read\n[`write`]: ./net/struct.TcpStream.html#method.write\n[`register`]: struct.Registry.html#method.register\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{self, SocketAddr};\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = net::TcpListener::bind(addr)?;\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(server.local_addr()?)?;\n\n// Register the stream with `Poll`\npoll.registry().register(&mut stream, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n# Portability\n\nUsing `Poll` provides a portable interface across supported platforms as\nlong as the caller takes the following into consideration:\n\n### Spurious events\n\n[`Poll::poll`] may return readiness events even if the associated\nevent source is not actually ready. Given the same code, this may\nhappen more on some platforms than others. It is important to never assume\nthat, just because a readiness event was received, that the associated\noperation will succeed as well.\n\nIf operation fails with [`WouldBlock`], then the caller should not treat\nthis as an error, but instead should wait until another readiness event is\nreceived.\n\n### Draining readiness\n\nOnce a readiness event is received, the corresponding operation must be\nperformed repeatedly until it returns [`WouldBlock`]. Unless this is done,\nthere is no guarantee that another readiness event will be delivered, even\nif further data is received for the event source.\n\n[`WouldBlock`]: std::io::ErrorKind::WouldBlock\n\n### Readiness operations\n\nThe only readiness operations that are guaranteed to be present on all\nsupported platforms are [`readable`] and [`writable`]. All other readiness\noperations may have false negatives and as such should be considered\n**hints**. This means that if a socket is registered with [`readable`]\ninterest and either an error or close is received, a readiness event will\nbe generated for the socket, but it **may** only include `readable`\nreadiness. Also note that, given the potential for spurious events,\nreceiving a readiness event with `read_closed`, `write_closed`, or `error`\ndoesn't actually mean that a `read` on the socket will return a result\nmatching the readiness event.\n\nIn other words, portable programs that explicitly check for [`read_closed`],\n[`write_closed`], or [`error`] readiness should be doing so as an\n**optimization** and always be able to handle an error or close situation\nwhen performing the actual read operation.\n\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`writable`]: ./event/struct.Event.html#method.is_writable\n[`error`]: ./event/struct.Event.html#method.is_error\n[`read_closed`]: ./event/struct.Event.html#method.is_read_closed\n[`write_closed`]: ./event/struct.Event.html#method.is_write_closed\n\n### Registering handles\n\nUnless otherwise noted, it should be assumed that types implementing\n[`event::Source`] will never become ready unless they are registered with\n`Poll`.\n\nFor example:\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\nuse std::thread;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut sock = TcpStream::connect(listener.local_addr()?)?;\n\nthread::sleep(Duration::from_secs(1));\n\nlet poll = Poll::new()?;\n\n// The connect is not guaranteed to have started until it is registered at\n// this point\npoll.registry().register(&mut sock, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n### Dropping `Poll`\n\nWhen the `Poll` instance is dropped it may cancel in-flight operations for\nthe registered [event sources], meaning that no further events for them may\nbe received. It also means operations on the registered event sources may no\nlonger work. It is up to the user to keep the `Poll` instance alive while\nregistered event sources are being used.\n\n[event sources]: ./event/trait.Source.html\n\n### Accessing raw fd/socket/handle\n\nMio makes it possible for many types to be converted into a raw file\ndescriptor (fd, Unix), socket (Windows) or handle (Windows). This makes it\npossible to support more operations on the type than Mio supports, for\nexample it makes [mio-aio] possible. However accessing the raw fd is not\nwithout it's pitfalls.\n\nSpecifically performing I/O operations outside of Mio on these types (via\nthe raw fd) has unspecified behaviour. It could cause no more events to be\ngenerated for the type even though it returned `WouldBlock` (in an operation\ndirectly accessing the fd). The behaviour is OS specific and Mio can only\nguarantee cross-platform behaviour if it can control the I/O.\n\n[mio-aio]: https://github.com/asomers/mio-aio\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being considered\na breaking change, don't depend on this, it's just here to inform the user.\nCurrently the kqueue and epoll implementation support direct I/O operations\non the fd without Mio's knowledge. Windows however needs **all** I/O\noperations to go through Mio otherwise it is not able to update it's\ninternal state properly and won't generate events.\n\n### Polling without registering event sources\n\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being\nconsidered a breaking change, don't depend on this, it's just here to inform\nthe user. On platforms that use epoll, kqueue or IOCP (see implementation\nnotes below) polling without previously registering [event sources] will\nresult in sleeping forever, only a process signal will be able to wake up\nthe thread.\n\nOn WASM/WASI this is different as it doesn't support process signals,\nfurthermore the WASI specification doesn't specify a behaviour in this\nsituation, thus it's up to the implementation what to do here. As an\nexample, the wasmtime runtime will return `EINVAL` in this situation, but\ndifferent runtimes may return different results. If you have further\ninsights or thoughts about this situation (and/or how Mio should handle it)\nplease add you comment to [pull request#1580].\n\n[event sources]: crate::event::Source\n[pull request#1580]: https://github.com/tokio-rs/mio/pull/1580\n\n# Implementation notes\n\n`Poll` is backed by the selector provided by the operating system.\n\n|      OS       |  Selector |\n|---------------|-----------|\n| Android       | [epoll]   |\n| DragonFly BSD | [kqueue]  |\n| FreeBSD       | [kqueue]  |\n| iOS           | [kqueue]  |\n| illumos       | [epoll]   |\n| Linux         | [epoll]   |\n| NetBSD        | [kqueue]  |\n| OpenBSD       | [kqueue]  |\n| Windows       | [IOCP]    |\n| macOS         | [kqueue]  |\n\nOn all supported platforms, socket operations are handled by using the\nsystem selector. Platform specific extensions (e.g. [`SourceFd`]) allow\naccessing other features provided by individual system selectors. For\nexample, Linux's [`signalfd`] feature can be used by registering the FD with\n`Poll` via [`SourceFd`].\n\nOn all platforms except windows, a call to [`Poll::poll`] is mostly just a\ndirect call to the system selector. However, [IOCP] uses a completion model\ninstead of a readiness model. In this case, `Poll` must adapt the completion\nmodel Mio's API. While non-trivial, the bridge layer is still quite\nefficient. The most expensive part being calls to `read` and `write` require\ndata to be copied into an intermediate buffer before it is passed to the\nkernel.\n\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2\n[IOCP]: https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports\n[`signalfd`]: https://man7.org/linux/man-pages/man2/signalfd.2.html\n[`SourceFd`]: unix/struct.SourceFd.html\n[`Poll::poll`]: struct.Poll.html#method.poll","links":{"std::io::ErrorKind::WouldBlock":"1:7979:3289"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:57","a:2:2673:217-0:53:192","a:2:8140:3016-0:53:192","a:2:8139:3017-0:53:192","a:2:2687:225-0:53:192","a:2:2737:2836-0:53:192","b:2:3328-0:53:192","b:2:2532-0:53:192","b:2:2543-0:53:192","b:2:2239-0:53:192","b:2:2528-0:53:192","b:2:2236-0:53:192","b:2:2538-0:53:192","0:60","0:62"]}},"0:82:680":{"id":"0:82:680","crate_id":0,"name":"from","span":{"filename":"src/token.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1931":{"id":"0:29:1931","crate_id":0,"name":"is_lio","span":{"filename":"src/interest.rs","begin":[108,4],"end":[110,5]},"visibility":"public","docs":"Returns true if `Interest` contains LIO readiness.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:240:1623":{"id":"b:2:2528-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3142"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[134,0],"end":[138,1]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":["0:82:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":{"restricted":{"parent":"0:83:1614","path":"::waker"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2538-0:53:192":{"id":"b:2:2538-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:240:1623":{"id":"b:2:2532-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2543-0:55:1622":{"id":"b:2:2543-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:127","2:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11898:33972":{"id":"2:11898:33972","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11520:13410","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::matches":"2:11895:2732"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50948:7079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,26],"end":[16,28]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2684:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2532-0:55:1622":{"id":"b:2:2532-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2737:2836-0:265:2438":{"id":"a:2:2737:2836-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2737:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2239-0:123:1620":{"id":"b:2:2239-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2241:24253"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11839:33965":{"id":"2:11839:33965","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11846:1366","str::slice_mut_unchecked":"2:11840:33966","crate::ops::Index":"2:2992:3238"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:33986":{"id":"2:11942:33986","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4500:33986"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51025:7017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36":{"id":"0:36","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[134,0],"end":[189,1]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:37:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:247:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:142:493":{"id":"0:142:493","crate_id":0,"name":"count","span":{"filename":"src/event/events.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:2287":{"id":"0:154:2287","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[111,4],"end":[111,68]},"visibility":"default","docs":"Deregister `self` from the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::deregister`] instead. Implementors should handle\nderegistration by delegating the call to another `Source` type.\n\n[`Registry::deregister`]: ../struct.Registry.html#method.deregister","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:261:1624":{"id":"0:261:1624","crate_id":0,"name":"Waker","span":{"filename":"src/waker.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Waker allows cross-thread waking of [`Poll`].\n\nWhen created it will cause events with [`readable`] readiness and the\nprovided `token` if [`wake`] is called, possibly from another thread.\n\n[`Poll`]: struct.Poll.html\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`wake`]: struct.Waker.html#method.wake\n\n# Notes\n\n`Waker` events are only guaranteed to be delivered while the `Waker` value\nis alive.\n\nOnly a single `Waker` can be active per [`Poll`], if multiple threads need\naccess to the `Waker` it can be shared via for example an `Arc`. What\nhappens if multiple `Waker`s are registered with the same `Poll` is\nunspecified.\n\n# Implementation notes\n\nOn platforms that support kqueue this will use the `EVFILT_USER` event\nfilter, see [implementation notes of `Poll`] to see what platforms support\nkqueue. On Linux it uses [eventfd].\n\n[implementation notes of `Poll`]: struct.Poll.html#implementation-notes\n[eventfd]: https://man7.org/linux/man-pages/man2/eventfd.2.html\n\n# Examples\n\nWake a [`Poll`] instance from another thread.\n\n```ignore\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nuse std::thread;\nuse std::time::Duration;\nuse std::sync::Arc;\n\nuse mio::{Events, Token, Poll, Waker};\n\nconst WAKE_TOKEN: Token = Token(10);\n\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(2);\n\nlet waker = Arc::new(Waker::new(poll.registry(), WAKE_TOKEN)?);\n\n// We need to keep the Waker alive, so we'll create a clone for the\n// thread we create below.\nlet waker1 = waker.clone();\nlet handle = thread::spawn(move || {\n    // Working hard, or hardly working?\n    thread::sleep(Duration::from_millis(500));\n\n    // Now we'll wake the queue on the other thread.\n    waker1.wake().expect(\"unable to wake\");\n});\n\n// On our current thread we'll poll for events, without a timeout.\npoll.poll(&mut events, None)?;\n\n// After about 500 milliseconds we should be awoken by the other thread and\n// get a single event.\nassert!(!events.is_empty());\nlet waker_event = events.iter().next().unwrap();\nassert!(waker_event.is_readable());\nassert_eq!(waker_event.token(), WAKE_TOKEN);\n# handle.join().unwrap();\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:89","a:2:2673:217-0:261:1624","a:2:8140:3016-0:261:1624","a:2:8139:3017-0:261:1624","a:2:2687:225-0:261:1624","a:2:2737:2836-0:261:1624","b:2:3328-0:261:1624","b:2:2532-0:261:1624","b:2:2543-0:261:1624","b:2:2239-0:261:1624","b:2:2528-0:261:1624","b:2:2236-0:261:1624","b:2:2538-0:261:1624","0:263"]}},"0:187:1014":{"id":"0:187:1014","crate_id":0,"name":"partial_cmp","span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38660:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1925":{"id":"0:101:1925","crate_id":0,"name":"is_readable","span":{"filename":"src/event/event.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Returns true if the event contains readable readiness.\n\n# Notes\n\nOut-of-band (OOB) data also triggers readable events. But must\napplication don't actually read OOB data, this could leave an\napplication open to a Denial-of-Service (Dos) attack, see\n<https://github.com/sandstorm-io/sandstorm-website/blob/58f93346028c0576e8147627667328eaaf4be9fa/_posts/2015-04-08-osx-security-bug.md>.\nHowever because Mio uses edge-triggers it will not result in an infinite\nloop as described in the article above.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:261:1624":{"id":"b:2:2528-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3142"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2302:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:180:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:69:2287":{"id":"0:69:2287","crate_id":0,"name":"deregister","span":{"filename":"src/poll.rs","begin":[659,4],"end":[665,5]},"visibility":"public","docs":"Deregister an [`event::Source`] with the `Poll` instance.\n\nWhen an event source is deregistered, the `Poll` instance will no longer\nmonitor it for readiness state changes. Deregistering clears up any\ninternal resources needed to track the handle.  After an explicit call\nto this method completes, it is guaranteed that the token previously\nregistered to this handle will not be returned by a future poll, so long\nas a happens-before relationship is established between this call and\nthe poll.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nA handle can be passed back to `register` after it has been\nderegistered; however, it must be passed back to the **same** `Poll`\ninstance, otherwise the behavior is unspecified.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\npoll.registry().deregister(&mut socket)?;\n\nlet mut events = Events::with_capacity(1024);\n\n// Set a timeout because this poll should never receive any events.\npoll.poll(&mut events, Some(Duration::from_secs(1)))?;\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{"`event::Source`":"0:151:2247"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"S"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:151:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:33981":{"id":"2:11918:33981","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:656":{"id":"0:63:656","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[423,4],"end":[425,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1759":{"id":"0:0:1759","crate_id":0,"name":"mio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[266,1]},"visibility":"public","docs":"Mio is a fast, low-level I/O library for Rust focusing on non-blocking APIs\nand event notification for building high performance I/O apps with as little\noverhead as possible over the OS abstractions.\n\n# Usage\n\nUsing Mio starts by creating a [`Poll`], which reads events from the OS and\nputs them into [`Events`]. You can handle I/O events from the OS with it.\n\nFor more detail, see [`Poll`].\n\n[`Poll`]: ../mio/struct.Poll.html\n[`Events`]: ../mio/event/struct.Events.html\n\n## Examples\n\nExamples can found in the `examples` directory of the source code, or [on\nGitHub].\n\n[on GitHub]: https://github.com/tokio-rs/mio/tree/master/examples\n\n## Guide\n\nA getting started guide is available in the [`guide`] module.\n\n## Available features\n\nThe available features are described in the [`features`] module.","links":{"`guide`":"0:173:1652","`features`":"0:172:1635"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms,\nunused_imports, dead_code)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:93:1615","0:172:1635","0:173:1652","0:165-0:123:1620","0:166-0:174:1621","0:168-0:53:192","0:169-0:55:1622","0:170-0:240:1623","0:171-0:261:1624"],"is_stripped":false}},"0:65:2243":{"id":"0:65:2243","crate_id":0,"name":"register","span":{"filename":"src/poll.rs","begin":[528,4],"end":[538,5]},"visibility":"public","docs":"Register an [`event::Source`] with the `Poll` instance.\n\nOnce registered, the `Poll` instance will monitor the event source for\nreadiness state changes. When it notices a state change, it will return\na readiness event for the handle the next time [`poll`] is called.\n\nSee [`Poll`] docs for a high level overview.\n\n# Arguments\n\n`source: &mut S: event::Source`: This is the source of events that the\n`Poll` instance should monitor for readiness state changes.\n\n`token: Token`: The caller picks a token to associate with the socket.\nWhen [`poll`] returns an event for the handle, this token is included.\nThis allows the caller to map the event to its source. The token\nassociated with the `event::Source` can be changed at any time by\ncalling [`reregister`].\n\nSee documentation on [`Token`] for an example showing how to pick\n[`Token`] values.\n\n`interest: Interest`: Specifies which operations `Poll` should monitor\nfor readiness. `Poll` will only return readiness events for operations\nspecified by this argument.\n\nIf a socket is registered with readable interest and the socket becomes\nwritable, no event will be returned from [`poll`].\n\nThe readiness interest for an `event::Source` can be changed at any time\nby calling [`reregister`].\n\n# Notes\n\nCallers must ensure that if a source being registered with a `Poll`\ninstance was previously registered with that `Poll` instance, then a\ncall to [`deregister`] has already occurred. Consecutive calls to\n`register` is unspecified behavior.\n\nUnless otherwise specified, the caller should assume that once an event\nsource is registered with a `Poll` instance, it is bound to that `Poll`\ninstance for the lifetime of the event source. This remains true even\nif the event source is deregistered from the poll instance using\n[`deregister`].\n\n[`event::Source`]: ./event/trait.Source.html\n[`poll`]: struct.Poll.html#method.poll\n[`reregister`]: struct.Registry.html#method.reregister\n[`deregister`]: struct.Registry.html#method.deregister\n[`Token`]: struct.Token.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::{Duration, Instant};\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\nlet mut events = Events::with_capacity(1024);\nlet start = Instant::now();\nlet timeout = Duration::from_millis(500);\n\nloop {\n    let elapsed = start.elapsed();\n\n    if elapsed >= timeout {\n        // Connection timed out\n        return Ok(());\n    }\n\n    let remaining = timeout - elapsed;\n    poll.poll(&mut events, Some(remaining))?;\n\n    for event in &events {\n        if event.token() == Token(0) {\n            // Something (probably) happened on the socket.\n            return Ok(());\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"S"}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:151:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:34638":{"id":"5:5293:34638","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2673:217-0:123:1620":{"id":"a:2:2673:217-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:55:1622":{"id":"0:55:1622","crate_id":0,"name":"Registry","span":{"filename":"src/poll.rs","begin":[254,0],"end":[256,1]},"visibility":"public","docs":"Registers I/O resources.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:2673:217-0:55:1622","a:2:8140:3016-0:55:1622","a:2:8139:3017-0:55:1622","a:2:2687:225-0:55:1622","a:2:2737:2836-0:55:1622","b:2:3328-0:55:1622","b:2:2532-0:55:1622","b:2:2543-0:55:1622","b:2:2239-0:55:1622","b:2:2528-0:55:1622","b:2:2236-0:55:1622","b:2:2538-0:55:1622","0:75","0:77"]}},"2:11864:3148":{"id":"2:11864:3148","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:2467":{"id":"0:103:2467","crate_id":0,"name":"is_error","span":{"filename":"src/event/event.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":"Returns true if the event contains error readiness.\n\nError events occur when the socket enters an error state. In this case,\nthe socket will also receive a readable or writable event. Reading or\nwriting to the socket will result in an error.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\nerror event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLERR`      |\n| [kqueue]      | `EV_ERROR` and `EV_EOF` with `fflags` set to `0`. |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:33975":{"id":"2:11907:33975","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2737:2836-0:174:1621":{"id":"a:2:2737:2836-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2737:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2543-0:53:192":{"id":"b:2:2543-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:127","2:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11847:31655":{"id":"2:11847:31655","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11846:31666"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51009:7082","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:2271":{"id":"0:67:2271","crate_id":0,"name":"reregister","span":{"filename":"src/poll.rs","begin":[596,4],"end":[606,5]},"visibility":"public","docs":"Re-register an [`event::Source`] with the `Poll` instance.\n\nRe-registering an event source allows changing the details of the\nregistration. Specifically, it allows updating the associated `token`\nand `interests` specified in previous `register` and `reregister` calls.\n\nThe `reregister` arguments fully override the previous values. In other\nwords, if a socket is registered with [`readable`] interest and the call\nto `reregister` specifies [`writable`], then read interest is no longer\nrequested for the handle.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nSee the [`register`] documentation for details about the function\narguments and see the [`struct`] docs for a high level overview of\npolling.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\n\nlet poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`, requesting readable\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\n// Reregister the socket specifying write interest instead. Even though\n// the token is the same it must be specified.\npoll.registry().reregister(\n    &mut socket,\n    Token(0),\n    Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n[`event::Source`]: ./event/trait.Source.html\n[`struct`]: struct.Poll.html\n[`register`]: struct.Registry.html#method.register\n[`readable`]: ./event/struct.Event.html#is_readable\n[`writable`]: ./event/struct.Event.html#is_writable","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"S"}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:151:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:687:3207":{"id":"5:687:3207","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:27325":{"id":"2:11938:27325","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[127,0],"end":[132,1]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOrAssign","id":"2:2854:1935","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:35:361"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:685:3205":{"id":"5:685:3205","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:3328-0:240:1623":{"id":"b:2:3328-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11940:27328":{"id":"2:11940:27328","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,9],"end":[16,13]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2685:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2531:3142":{"id":"2:2531:3142","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2505:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11820:2551":{"id":"2:11820:2551","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:174:1621":{"id":"b:2:2236-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:2717"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2338:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:189:420"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11945:33987":{"id":"2:11945:33987","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4498:33987"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51043:7009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":{"restricted":{"parent":"0:94:1615","path":"::event::event"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:268:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11829:310":{"id":"2:11829:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11830:27604","`u8`":"1:11857:1462"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2546:127":{"id":"2:2546:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39833:5115","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"5:5302:34640":{"id":"5:5302:34640","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2621","`String`":"5:7156:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2621","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:6163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2673:217-0:53:192":{"id":"a:2:2673:217-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2737:2836-0:240:1623":{"id":"a:2:2737:2836-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2737:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2543-0:265:2438":{"id":"b:2:2543-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:127","2:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:123:1620":{"id":"b:2:2532-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:159:2287":{"id":"0:159:2287","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2673:217-0:265:2438":{"id":"a:2:2673:217-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2737:2836-0:53:192":{"id":"a:2:2737:2836-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2737:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:27:1927":{"id":"0:27:1927","crate_id":0,"name":"is_writable","span":{"filename":"src/interest.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns true if the value includes writable readiness.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:269:2439":{"id":"b:2:2528-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2531:3142"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:683-0:269:2439":{"id":"b:5:683-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:685:3205","5:686:3206","5:687:3207"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:107:1929":{"id":"0:107:1929","crate_id":0,"name":"is_aio","span":{"filename":"src/event/event.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns true if the event contains AIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms support AIO.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | *Not supported* |\n| [kqueue]<sup>1</sup> | `EVFILT_AIO` |\n\n1: Only supported on DragonFly BSD, FreeBSD, iOS and macOS.\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:55:1622":{"id":"b:2:2236-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:2717"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2344:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:187:1014"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11844:7094":{"id":"2:11844:7094","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11840:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50702:7064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:27637":{"id":"2:11874:27637","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11520:13410","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::split":"2:11868:24627"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50744:6990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:1635":{"id":"0:172:1635","crate_id":0,"name":"features","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,16]},"visibility":"public","docs":"# Mio's optional features.\n\nThis document describes the available features in Mio.\n\n## `os-poll` (disabled)\n\nMio by default provides only a shell implementation that `panic!`s the\nmoment it is actually run. To run it requires OS support, this is\nenabled by activating the `os-poll` feature.\n\nThis makes `Poll`, `Registry` and `Waker` functional.\n\n## `os-ext` (disabled)\n\n`os-ext` enables additional OS specific facilities. These facilities can\nbe found in the `unix` and `windows` module.\n\n## Network types (disabled)\n\nThe `net` feature enables networking primitives in the `net` module.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"0:126:2547":{"id":"0:126:2547","crate_id":0,"name":"with_capacity","span":{"filename":"src/event/events.rs","begin":[92,4],"end":[96,5]},"visibility":"public","docs":"Return a new `Events` capable of holding up to `capacity` events.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3328-0:265:2438":{"id":"b:2:3328-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2687:225-0:55:1622":{"id":"a:2:2687:225-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11877:33968":{"id":"2:11877:33968","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11520:13410","str::split":"2:11868:24627","prim@char":"1:11840:409","`DoubleEndedIterator`":"2:7125:120","str::rsplit_terminator":"2:11880:33969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50776:7069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11830:27604":{"id":"2:11830:27604","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11857:1462"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11818":{"id":"2:11818","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11083:1366","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11819:797","2:11820:2551","2:11821:33961","2:11822:33962","2:11824:33963","2:11827:30036","2:11828:33964","2:11829:310","2:11830:27604","2:11831:1911","2:11833:27601","2:11835:27602","2:11837:27603","2:11839:33965","2:11840:33966","2:11841:27626","2:11842:27627","2:11843:7084","2:11844:7094","2:11845:6613","2:11846:31666","2:11847:31655","2:11848:7903","2:11849:33967","2:11850:31678","2:11851:27643","2:11854:27644","2:11857:27645","2:11860:3186","2:11864:3148","2:11868:24627","2:11871:27635","2:11874:27637","2:11877:33968","2:11880:33969","2:11883:27639","2:11886:27641","2:11889:33970","2:11892:33971","2:11895:2732","2:11898:33972","2:11901:33973","2:11904:33974","2:11907:33975","2:11909:33976","2:11911:33977","2:11913:33978","2:11914:33979","2:11915:33980","2:11918:33981","2:11921:24853","2:11924:27646","2:11927:33982","2:11930:33983","2:11933:33984","2:11936:33985","2:11938:27325","2:11939:2772","2:11940:27328","2:11941:27329","2:11942:33986","2:11944:8079","2:11945:33987"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11883:27639":{"id":"2:11883:27639","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410","str::rsplitn":"2:11886:27641"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50830:7072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153:2271":{"id":"0:153:2271","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[97,4],"end":[102,24]},"visibility":"default","docs":"Re-register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::reregister`] instead. Implementors should handle\nre-registration by either delegating the call to another `Source` type.\n\n[`Registry::reregister`]: ../struct.Registry.html#method.reregister","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:2239-0:53:192":{"id":"b:2:2239-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2241:24253"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8140:3016-0:174:1621":{"id":"a:2:8140:3016-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11845:6613":{"id":"2:11845:6613","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50712:3314","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1615":{"id":"0:93:1615","crate_id":0,"name":"event","span":{"filename":"src/event/mod.rs","begin":[1,0],"end":[10,29]},"visibility":"public","docs":"Readiness event types and utilities.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:160-0:265:2438","0:162-0:123:1620","0:163-0:269:2439","0:164-0:151:2247"],"is_stripped":false}},"0:26:1925":{"id":"0:26:1925","crate_id":0,"name":"is_readable","span":{"filename":"src/interest.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Returns true if the value includes readable readiness.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:27641":{"id":"2:11886:27641","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11840:409","str::splitn":"2:11883:27639","self::pattern":"2:11520:13410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50848:7073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:278:413":{"id":"0:278:413","crate_id":0,"name":"clone","span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8139:3017-0:55:1622":{"id":"a:2:8139:3017-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2687:225-0:261:1624":{"id":"a:2:2687:225-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2538-0:265:2438":{"id":"b:2:2538-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8139:3017-0:269:2439":{"id":"a:2:8139:3017-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[118,0],"end":[125,1]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:2828:1934","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:32:183","0:33:360"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2673:217-0:55:1622":{"id":"a:2:2673:217-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2236-0:240:1623":{"id":"b:2:2236-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:2717"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:265:2438":{"id":"b:2:2532-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2534:680":{"id":"2:2534:680","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106:1933":{"id":"0:106:1933","crate_id":0,"name":"is_priority","span":{"filename":"src/event/event.rs","begin":[150,4],"end":[152,5]},"visibility":"public","docs":"Returns true if the event contains priority readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\npriority event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLPRI`      |\n| [kqueue]      | *Not supported* |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3328-0:53:192":{"id":"b:2:3328-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2236-0:123:1620":{"id":"b:2:2236-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:2717"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2239-0:240:1623":{"id":"b:2:2239-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2241:24253"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2538-0:240:1623":{"id":"b:2:2538-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:264:656":{"id":"0:264:656","crate_id":0,"name":"fmt","span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[27,0],"end":[116,1]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:1883","0:22:1885","0:23:1891","0:24:271","0:25:1923","0:26:1925","0:27:1927","0:28:1929","0:29:1931","0:30:1933"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:174:1621":{"id":"0:174:1621","crate_id":0,"name":"Interest","span":{"filename":"src/interest.rs","begin":[17,0],"end":[17,31]},"visibility":"public","docs":"Interest used in registering.\n\nInterest are used in [registering] [`event::Source`]s with [`Poll`], they\nindicate what readiness should be monitored for. For example if a socket is\nregistered with [readable] interests and the socket becomes writable, no\nevent will be returned from a call to [`poll`].\n\n[registering]: struct.Registry.html#method.register\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[readable]: struct.Interest.html#associatedconstant.READABLE\n[`poll`]: struct.Poll.html#method.poll","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:20","a:2:2673:217-0:174:1621","a:2:8140:3016-0:174:1621","a:2:8139:3017-0:174:1621","a:2:2687:225-0:174:1621","a:2:2737:2836-0:174:1621","b:2:3328-0:174:1621","b:2:2532-0:174:1621","b:2:2543-0:174:1621","b:2:2239-0:174:1621","b:2:2528-0:174:1621","b:2:2236-0:174:1621","b:2:2538-0:174:1621","b:5:683-0:174:1621","0:186","0:184","0:31","0:34","0:177","0:181","0:36","0:188","0:178","0:179","0:182"]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[416,0],"end":[420,1]},"visibility":{"restricted":{"parent":"0:38:1030","path":"::poll"}},"docs":null,"links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4704:1944","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:61:2193"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2528-0:265:2438":{"id":"b:2:2528-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3142"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2673:217-0:174:1621":{"id":"a:2:2673:217-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:128:2551":{"id":"0:128:2551","crate_id":0,"name":"is_empty","span":{"filename":"src/event/events.rs","begin":[120,4],"end":[122,5]},"visibility":"public","docs":"Returns `true` if `self` contains no `Event` values.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert!(events.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:2243":{"id":"0:157:2243","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[118,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8139:3017-0:240:1623":{"id":"a:2:8139:3017-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:100:1612":{"id":"0:100:1612","crate_id":0,"name":"token","span":{"filename":"src/event/event.rs","begin":[23,4],"end":[25,5]},"visibility":"public","docs":"Returns the event's token.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2687:225-0:123:1620":{"id":"a:2:2687:225-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:170-0:240:1623":{"id":"0:170-0:240:1623","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"token::Token","name":"Token","id":"0:240:1623","glob":false}},"b:2:3328-0:261:1624":{"id":"b:2:3328-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2241:24253":{"id":"2:2241:24253","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1929":{"id":"0:28:1929","crate_id":0,"name":"is_aio","span":{"filename":"src/interest.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Returns true if `Interest` contains AIO readiness.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[701,0],"end":[705,1]},"visibility":{"restricted":{"parent":"0:38:1030","path":"::poll"}},"docs":null,"links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4704:1944","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:2193"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2737:2836-0:269:2439":{"id":"a:2:2737:2836-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2737:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2532-0:174:1621":{"id":"b:2:2532-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:189:420":{"id":"0:189:420","crate_id":0,"name":"cmp","span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38660:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2302:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:250:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2547:1440":{"id":"2:2547:1440","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:242:1567":{"id":"0:242:1567","crate_id":0,"name":"0","span":{"filename":"src/token.rs","begin":[132,17],"end":[132,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:255:1014":{"id":"0:255:1014","crate_id":0,"name":"partial_cmp","span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38660:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[194,0],"end":[201,1]},"visibility":{"restricted":{"parent":"0:119:2190","path":"::event::events"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:134:2560","0:135:2561","0:136:770"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11824:33963":{"id":"2:11824:33963","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11822:33962"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32:183":{"id":"0:32:183","crate_id":0,"name":"Output","span":{"filename":"src/interest.rs","begin":[119,4],"end":[119,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:5:683-0:265:2438":{"id":"b:5:683-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:3205","5:686:3206","5:687:3207"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3328-0:55:1622":{"id":"b:2:3328-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:245:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11831:1911":{"id":"2:11831:1911","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:185:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:165-0:123:1620":{"id":"0:165-0:123:1620","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,0],"end":[65,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"event::Events","name":"Events","id":"0:123:1620","glob":false}},"b:5:683-0:174:1621":{"id":"b:5:683-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:3205","5:686:3206","5:687:3207"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11930:33983":{"id":"2:11930:33983","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:2247":{"id":"0:151:2247","crate_id":0,"name":"Source","span":{"filename":"src/event/source.rs","begin":[75,0],"end":[112,1]},"visibility":"public","docs":"An event source that may be registered with [`Registry`].\n\nTypes that implement `event::Source` can be registered with\n`Registry`. Users of Mio **should not** use the `event::Source` trait\nfunctions directly. Instead, the equivalent functions on `Registry` should\nbe used.\n\nSee [`Registry`] for more details.\n\n[`Registry`]: ../struct.Registry.html\n\n# Implementing `event::Source`\n\nEvent sources are always backed by system handles, such as sockets or other\nsystem handles. These `event::Source`s will be monitored by the system\nselector. An implementation of `Source` will almost always delegates to a\nlower level handle. Examples of this are [`TcpStream`]s, or the *unix only*\n[`SourceFd`].\n\n[`TcpStream`]: ../net/struct.TcpStream.html\n[`SourceFd`]: ../unix/struct.SourceFd.html\n\n# Dropping `event::Source`s\n\nAll `event::Source`s, unless otherwise specified, need to be [deregistered]\nbefore being dropped for them to not leak resources. This goes against the\nnormal drop behaviour of types in Rust which cleanup after themselves, e.g.\na `File` will close itself. However since deregistering needs access to\n[`Registry`] this cannot be done while being dropped.\n\n[deregistered]: ../struct.Registry.html#method.deregister\n\n# Examples\n\nImplementing `Source` on a struct containing a socket:\n\n```ignore\nuse mio::{Interest, Registry, Token};\nuse mio::event::Source;\nuse mio::net::TcpStream;\n\nuse std::io;\n\n# #[allow(dead_code)]\npub struct MySource {\n    socket: TcpStream,\n}\n\nimpl Source for MySource {\n    fn register(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `register` call to `socket`\n        self.socket.register(registry, token, interests)\n    }\n\n    fn reregister(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `reregister` call to `socket`\n        self.socket.reregister(registry, token, interests)\n    }\n\n    fn deregister(&mut self, registry: &Registry) -> io::Result<()> {\n        // Delegate the `deregister` call to `socket`\n        self.socket.deregister(registry)\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:152:2243","0:153:2271","0:154:2287"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:155"]}},"0:136:770":{"id":"0:136:770","crate_id":0,"name":"into_iter","span":{"filename":"src/event/events.rs","begin":[198,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7088:149","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:1931":{"id":"0:108:1931","crate_id":0,"name":"is_lio","span":{"filename":"src/event/event.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns true if the event contains LIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but only FreeBSD supports LIO. On\nFreeBSD this method checks the `EVFILT_LIO` flag.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2687:225-0:240:1623":{"id":"a:2:2687:225-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,9],"end":[131,13]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2685:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2528-0:53:192":{"id":"b:2:2528-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3142"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[694,0],"end":[698,1]},"visibility":{"restricted":{"parent":"0:38:1030","path":"::poll"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2543-0:261:1624":{"id":"b:2:2543-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:127","2:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":{"restricted":{"parent":"0:119:2190","path":"::event::events"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:275:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:7092-0:269:2439":{"id":"b:2:7092-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7094:2560","2:7095:2561","2:7096:770"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:158:2271":{"id":"0:158:2271","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[127,4],"end":[134,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2687:225-0:265:2438":{"id":"a:2:2687:225-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11944:8079":{"id":"2:11944:8079","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4501:8079"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51034:7006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:257:420":{"id":"0:257:420","crate_id":0,"name":"cmp","span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38660:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:3206":{"id":"5:686:3206","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8139:3017-0:265:2438":{"id":"a:2:8139:3017-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:59:1030":{"id":"0:59:1030","crate_id":0,"name":"poll","span":{"filename":"src/poll.rs","begin":[410,4],"end":[412,5]},"visibility":"public","docs":"Wait for readiness events\n\nBlocks the current thread and waits for readiness events for any of the\n[`event::Source`]s that have been registered with this `Poll` instance.\nThe function will block until either at least one readiness event has\nbeen received or `timeout` has elapsed. A `timeout` of `None` means that\n`poll` will block until a readiness event has been received.\n\nThe supplied `events` will be cleared and newly received readiness events\nwill be pushed onto the end. At most `events.capacity()` events will be\nreturned. If there are further pending readiness events, they will be\nreturned on the next call to `poll`.\n\nA single call to `poll` may result in multiple readiness events being\nreturned for a single event source. For example, if a TCP socket becomes\nboth readable and writable, it may be possible for a single readiness\nevent to be returned with both [`readable`] and [`writable`] readiness\n**OR** two separate events may be returned, one with [`readable`] set\nand one with [`writable`] set.\n\nNote that the `timeout` will be rounded up to the system clock\ngranularity (usually 1ms), and kernel scheduling delays mean that\nthe blocking interval may be overrun by a small amount.\n\nSee the [struct] level documentation for a higher level discussion of\npolling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`readable`]: struct.Interest.html#associatedconstant.READABLE\n[`writable`]: struct.Interest.html#associatedconstant.WRITABLE\n[struct]: struct.Poll.html\n[`iter`]: ./event/struct.Events.html#method.iter\n\n# Notes\n\nThis returns any errors without attempting to retry, previous versions\nof Mio would automatically retry the poll call if it was interrupted\n(if `EINTR` was returned).\n\nCurrently if the `timeout` elapses without any readiness events\ntriggering this will return `Ok(())`. However we're not guaranteeing\nthis behaviour as this depends on the OS.\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{TcpListener, SocketAddr};\nuse std::thread;\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = TcpListener::bind(addr)?;\nlet addr = server.local_addr()?.clone();\n\n// Spawn a thread to accept the socket\nthread::spawn(move || {\n    let _ = server.accept();\n});\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(addr)?;\n\n// Register the stream with `Poll`\npoll.registry().register(\n    &mut stream,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n[struct]: #","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["events",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:51500:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:168-0:53:192":{"id":"0:168-0:53:192","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,15],"end":[67,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"poll::Poll","name":"Poll","id":"0:53:192","glob":false}},"a:2:8140:3016-0:55:1622":{"id":"a:2:8140:3016-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:265:2438":{"id":"0:265:2438","crate_id":0,"name":"Event","span":{"filename":"src/event/event.rs","begin":[17,0],"end":[19,1]},"visibility":"public","docs":"A readiness event.\n\n`Event` is a readiness state paired with a [`Token`]. It is returned by\n[`Poll::poll`].\n\nFor more documentation on polling and events, see [`Poll`].\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n[`Token`]: ../struct.Token.html","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:99","a:2:2673:217-0:265:2438","a:2:8140:3016-0:265:2438","a:2:8139:3017-0:265:2438","a:2:2687:225-0:265:2438","a:2:2737:2836-0:265:2438","b:2:3328-0:265:2438","b:2:2532-0:265:2438","b:2:2543-0:265:2438","b:2:2239-0:265:2438","b:2:2528-0:265:2438","b:2:2236-0:265:2438","b:2:2538-0:265:2438","b:5:683-0:265:2438","0:267","0:110"]}},"2:2238:2717":{"id":"2:2238:2717","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:656":{"id":"0:144:656","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[227,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:2435":{"id":"0:92:2435","crate_id":0,"name":"wake","span":{"filename":"src/waker.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Wake up the [`Poll`] associated with this `Waker`.\n\n[`Poll`]: struct.Poll.html","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:33964":{"id":"2:11828:33964","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:58:2118":{"id":"0:58:2118","crate_id":0,"name":"registry","span":{"filename":"src/poll.rs","begin":[309,4],"end":[311,5]},"visibility":"public","docs":"Create a separate `Registry` which can be used to register\n`event::Source`s.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[428,0],"end":[692,1]},"visibility":{"restricted":{"parent":"0:38:1030","path":"::poll"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2243","0:67:2271","0:69:2287","0:71:2292"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11841:27626":{"id":"2:11841:27626","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11842:27627"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2687:225-0:53:192":{"id":"a:2:2687:225-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:169-0:55:1622":{"id":"0:169-0:55:1622","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,21],"end":[67,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"poll::Registry","name":"Registry","id":"0:55:1622","glob":false}},"b:2:2538-0:269:2439":{"id":"b:2:2538-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2541:127","2:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:261:1624":{"id":"b:2:2532-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2236-0:53:192":{"id":"b:2:2236-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:2717"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:7094:2560":{"id":"2:7094:2560","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"2:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:11846:31666":{"id":"2:11846:31666","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11847:31655"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:51000:7081","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:55:1622":{"id":"b:2:2528-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3142"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:163-0:269:2439":{"id":"0:163-0:269:2439","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,31],"end":[9,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::events::Iter","name":"Iter","id":"0:269:2439","glob":false}},"2:11933:33984":{"id":"2:11933:33984","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:13408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166-0:174:1621":{"id":"0:166-0:174:1621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,0],"end":[66,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"interest::Interest","name":"Interest","id":"0:174:1621","glob":false}},"a:2:8139:3017-0:174:1621":{"id":"a:2:8139:3017-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:248":{"id":"0:248","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2683:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11871:27635":{"id":"2:11871:27635","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11344:6989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,40],"end":[131,42]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2307:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:268:413":{"id":"0:268:413","crate_id":0,"name":"clone","span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:276":{"id":"0:276","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":{"restricted":{"parent":"0:119:2190","path":"::event::events"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:278:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5301:34639":{"id":"5:5301:34639","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8140:3016-0:123:1620":{"id":"a:2:8140:3016-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2737:2836-0:123:1620":{"id":"a:2:2737:2836-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2737:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[226,0],"end":[230,1]},"visibility":{"restricted":{"parent":"0:119:2190","path":"::event::events"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:144:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11939:2772":{"id":"2:11939:2772","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[422,0],"end":[426,1]},"visibility":{"restricted":{"parent":"0:38:1030","path":"::poll"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:63:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11921:24853":{"id":"2:11921:24853","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:413":{"id":"0:185:413","crate_id":0,"name":"clone","span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:152:2243":{"id":"0:152:2243","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[83,4],"end":[88,24]},"visibility":"default","docs":"Register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use [`Registry::register`]\ninstead. Implementors should handle registration by delegating the call\nto another `Source` type.\n\n[`Registry::register`]: ../struct.Registry.html#method.register","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5304:27326":{"id":"5:5304:27326","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11940:27328"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:240:1623":{"id":"b:2:2543-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:127","2:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11835:27602":{"id":"2:11835:27602","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:134:2560":{"id":"0:134:2560","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[195,4],"end":[195,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:275:656":{"id":"0:275:656","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2683:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:25:1923":{"id":"0:25:1923","crate_id":0,"name":"remove","span":{"filename":"src/interest.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Removes `other` `Interest` from `self`.\n\nReturns `None` if the set would be empty after removing `other`.\n\n```\nuse mio::Interest;\n\nconst RW_INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n\n// As long a one interest remain this will return `Some`.\nlet w_interest = RW_INTERESTS.remove(Interest::READABLE).unwrap();\nassert!(!w_interest.is_readable());\nassert!(w_interest.is_writable());\n\n// Removing all interests from the set will return `None`.\nassert_eq!(w_interest.remove(Interest::WRITABLE), None);\n\n// Its also possible to remove multiple interests at once.\nassert_eq!(RW_INTERESTS.remove(RW_INTERESTS), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2344:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:255:1014"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2239-0:55:1622":{"id":"b:2:2239-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2241:24253"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9229:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:259:715"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11842:27627":{"id":"2:11842:27627","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11841:27626"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11868:24627":{"id":"2:11868:24627","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11520:13410","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::split_whitespace":"2:11846:31666","str::rsplit":"2:11874:27637"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50726:3316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[82,0],"end":[96,1]},"visibility":{"restricted":{"parent":"0:83:1614","path":"::waker"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:924","0:92:2435"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2538-0:261:1624":{"id":"b:2:2538-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:23:1891":{"id":"0:23:1891","crate_id":0,"name":"PRIORITY","span":{"filename":"src/interest.rs","begin":[49,4],"end":[49,91]},"visibility":"public","docs":"Returns a `Interest` set representing priority completion interests.","links":{},"attrs":["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"a:2:8140:3016-0:265:2438":{"id":"a:2:8140:3016-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,26],"end":[16,28]},"visibility":{"restricted":{"parent":"0:10:1610","path":"::interest"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2307:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[202,0],"end":[230,1]},"visibility":{"restricted":{"parent":"0:94:1615","path":"::event::event"}},"docs":"When the [alternate] flag is enabled this will print platform specific\ndetails, for example the fields of the `kevent` structure on platforms that\nuse `kqueue(2)`. Note however that the output of this implementation is\n**not** consider a part of the stable API.\n\n[alternate]: fmt::Formatter::alternate","links":{"fmt::Formatter::alternate":"2:9060:2512"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:111:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8139:3017-0:261:1624":{"id":"a:2:8139:3017-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11822:33962":{"id":"2:11822:33962","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:2193":{"id":"0:61:2193","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[417,4],"end":[419,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RawFd","id":"1:4703:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2737:2836-0:261:1624":{"id":"a:2:2737:2836-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2737:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11911:33977":{"id":"2:11911:33977","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135:2561":{"id":"0:135:2561","crate_id":0,"name":"IntoIter","span":{"filename":"src/event/events.rs","begin":[196,4],"end":[196,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}},"2:11854:27644":{"id":"2:11854:27644","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1883":{"id":"0:21:1883","crate_id":0,"name":"READABLE","span":{"filename":"src/interest.rs","begin":[29,4],"end":[29,91]},"visibility":"public","docs":"Returns a `Interest` set representing readable interests.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:171-0:261:1624":{"id":"0:171-0:261:1624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[70,0],"end":[70,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"wasi\"))]"],"deprecation":null,"kind":"import","inner":{"source":"waker::Waker","name":"Waker","id":"0:261:1624","glob":false}},"2:2541:127":{"id":"2:2541:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"a:2:2673:217-0:240:1623":{"id":"a:2:2673:217-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:7096:770":{"id":"2:7096:770","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269:2439":{"id":"0:269:2439","crate_id":0,"name":"Iter","span":{"filename":"src/event/events.rs","begin":[76,0],"end":[79,1]},"visibility":"public","docs":"[`Events`] iterator.\n\nThis struct is created by the [`iter`] method on [`Events`].\n\n[`Events`]: struct.Events.html\n[`iter`]: struct.Events.html#method.iter\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:2673:217-0:269:2439","a:2:8140:3016-0:269:2439","a:2:8139:3017-0:269:2439","a:2:2687:225-0:269:2439","a:2:2737:2836-0:269:2439","b:2:3328-0:269:2439","b:2:7092-0:269:2439","b:2:2532-0:269:2439","b:2:2543-0:269:2439","b:2:2239-0:269:2439","b:2:2528-0:269:2439","b:2:2236-0:269:2439","b:2:2538-0:269:2439","b:5:683-0:269:2439","0:276","0:137","0:273"]}},"b:5:683-0:240:1623":{"id":"b:5:683-0:240:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:3205","5:686:3206","5:687:3207"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2542:1441":{"id":"2:2542:1441","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":{"restricted":{"parent":"0:80:1612","path":"::token"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2338:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:257:420"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11849:33967":{"id":"2:11849:33967","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50990:7080","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:3318":{"id":"5:5287:3318","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:2548":{"id":"0:127:2548","crate_id":0,"name":"capacity","span":{"filename":"src/event/events.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Returns the number of `Event` values that `self` can hold.\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:601":{"id":"0:180:601","crate_id":0,"name":"eq","span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8139:3017-0:53:192":{"id":"a:2:8139:3017-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:240:1623":{"id":"0:240:1623","crate_id":0,"name":"Token","span":{"filename":"src/token.rs","begin":[132,0],"end":[132,28]},"visibility":"public","docs":"Associates readiness events with [`event::Source`]s.\n\n`Token` is a wrapper around `usize` and is used as an argument to\n[`Registry::register`] and [`Registry::reregister`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[`Registry::register`]: struct.Registry.html#method.register\n[`Registry::reregister`]: struct.Registry.html#method.reregister\n\n# Example\n\nUsing `Token` to track which socket generated the event. In this example,\n`HashMap` is used, but usually something like [`slab`] is better.\n\n[`slab`]: https://crates.io/crates/slab\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Interest, Poll, Token};\nuse mio::net::TcpListener;\n\nuse std::thread;\nuse std::io::{self, Read};\nuse std::collections::HashMap;\n\n// After this number of sockets is accepted, the server will shutdown.\nconst MAX_SOCKETS: usize = 32;\n\n// Pick a token that will not be used by any other socket and use that one\n// for the listener.\nconst LISTENER: Token = Token(1024);\n\n// Used to store the sockets.\nlet mut sockets = HashMap::new();\n\n// This is used to generate a unique token for a socket\nlet mut next_socket_index = 0;\n\n// The `Poll` instance\nlet mut poll = Poll::new()?;\n\n// Tcp listener\nlet mut listener = TcpListener::bind(\"127.0.0.1:0\".parse()?)?;\n\n// Register the listener\npoll.registry().register(&mut listener, LISTENER, Interest::READABLE)?;\n\n// Spawn a thread that will connect a bunch of sockets then close them\nlet addr = listener.local_addr()?;\nthread::spawn(move || {\n    use std::net::TcpStream;\n\n    // +1 here is to connect an extra socket to signal the socket to close\n    for _ in 0..(MAX_SOCKETS+1) {\n        // Connect then drop the socket\n        let _ = TcpStream::connect(addr).unwrap();\n    }\n});\n\n// Event storage\nlet mut events = Events::with_capacity(1024);\n\n// Read buffer, this will never actually get filled\nlet mut buf = [0; 256];\n\n// The main event loop\nloop {\n    // Wait for events\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        match event.token() {\n            LISTENER => {\n                // Perform operations in a loop until `WouldBlock` is\n                // encountered.\n                loop {\n                    match listener.accept() {\n                        Ok((mut socket, _)) => {\n                            // Shutdown the server\n                            if next_socket_index == MAX_SOCKETS {\n                                return Ok(());\n                            }\n\n                            // Get the token for the socket\n                            let token = Token(next_socket_index);\n                            next_socket_index += 1;\n\n                            // Register the new socket w/ poll\n                            poll.registry().register(&mut socket, token, Interest::READABLE)?;\n\n                            // Store the socket\n                            sockets.insert(token, socket);\n                        }\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop accepting\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n            token => {\n                // Always operate in a loop\n                loop {\n                    match sockets.get_mut(&token).unwrap().read(&mut buf) {\n                        Ok(0) => {\n                            // Socket is closed, remove it from the map\n                            sockets.remove(&token);\n                            break;\n                        }\n                        // Data is not actually sent in this example\n                        Ok(_) => unreachable!(),\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop reading\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":["0:242:1567"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2673:217-0:240:1623","a:2:8140:3016-0:240:1623","a:2:8139:3017-0:240:1623","a:2:2687:225-0:240:1623","a:2:2737:2836-0:240:1623","b:2:3328-0:240:1623","b:2:2532-0:240:1623","b:2:2543-0:240:1623","b:2:2239-0:240:1623","b:2:2528-0:240:1623","b:2:2236-0:240:1623","b:2:2538-0:240:1623","b:5:683-0:240:1623","0:258","0:248","0:246","0:251","0:81","0:256","0:254","0:243","0:244","0:252","0:249"]}},"a:2:2673:217-0:269:2439":{"id":"a:2:2673:217-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2687:225-0:269:2439":{"id":"a:2:2687:225-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2538-0:55:1622":{"id":"b:2:2538-0:55:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8139:3017-0:123:1620":{"id":"a:2:8139:3017-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2528-0:123:1620":{"id":"b:2:2528-0:123:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Events","id":"0:123:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3142"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:139:2560":{"id":"0:139:2560","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[204,4],"end":[204,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:140:937":{"id":"0:140:937","crate_id":0,"name":"next","span":{"filename":"src/event/events.rs","begin":[206,4],"end":[214,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7202:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:160-0:265:2438":{"id":"0:160-0:265:2438","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[8,0],"end":[8,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::event::Event","name":"Event","id":"0:265:2438","glob":false}},"2:11851:27643":{"id":"2:11851:27643","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:13410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162-0:123:1620":{"id":"0:162-0:123:1620","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,23],"end":[9,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::events::Events","name":"Events","id":"0:123:1620","glob":false}},"b:2:2528-0:174:1621":{"id":"b:2:2528-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3142"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11914:33979":{"id":"2:11914:33979","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:269:2439":{"id":"b:2:2236-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2238:2717"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8140:3016-0:269:2439":{"id":"a:2:8140:3016-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:90:924":{"id":"0:90:924","crate_id":0,"name":"new","span":{"filename":"src/waker.rs","begin":[84,4],"end":[88,5]},"visibility":"public","docs":"Create a new `Waker`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["registry",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"kind":"resolved_path","inner":{"name":"Token","id":"0:240:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:781":{"id":"0:129:781","crate_id":0,"name":"iter","span":{"filename":"src/event/events.rs","begin":[148,4],"end":[153,5]},"visibility":"public","docs":"Returns an iterator over the `Event` values.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2673:217-0:261:1624":{"id":"a:2:2673:217-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2543-0:269:2439":{"id":"b:2:2543-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2546:127","2:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5305:27327":{"id":"5:5305:27327","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11941:27329"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3328-0:174:1621":{"id":"b:2:3328-0:174:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Interest","id":"0:174:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:247:656":{"id":"0:247:656","crate_id":0,"name":"fmt","span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11819:797":{"id":"2:11819:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11840:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:33970":{"id":"2:11889:33970","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:2491":{"id":"0:105:2491","crate_id":0,"name":"is_write_closed","span":{"filename":"src/event/event.rs","begin":[128,4],"end":[130,5]},"visibility":"public","docs":"Returns true if the event contains write closed readiness.\n\n# Notes\n\nOn [epoll] this is essentially a check for `EPOLLHUP` flag as the\nlocal stream shutting down its write half does not trigger this event.\n\nOn [kqueue] the local stream shutting down the write half of its\nsocket will trigger this event.\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when write half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | only `EPOLLERR`, or |\n|               | `EPOLLOUT` and `EPOLLERR` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:33978":{"id":"2:11913:33978","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:3341":{"id":"5:5303:3341","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:173:1652":{"id":"0:173:1652","crate_id":0,"name":"guide","span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,13]},"visibility":"public","docs":"# Getting started guide.\n\nIn this guide we'll do the following:\n\n1. Create a [`Poll`] instance (and learn what it is).\n2. Register an [event source].\n3. Create an event loop.\n\nAt the end you'll have a very small (but quick) TCP server that accepts\nconnections and then drops (disconnects) them.\n\n## 1. Creating a `Poll` instance\n\nUsing Mio starts by creating a [`Poll`] instance, which monitors events\nfrom the OS and puts them into [`Events`]. This allows us to execute I/O\noperations based on what operations are ready.\n\n[`Poll`]: ../struct.Poll.html\n[`Events`]: ../event/struct.Events.html\n\n```ignore\n# use mio::{Poll, Events};\n# fn main() -> std::io::Result<()> {\n// `Poll` allows for polling of readiness events.\nlet poll = Poll::new()?;\n// `Events` is collection of readiness `Event`s and can be filled by\n// calling `Poll::poll`.\nlet events = Events::with_capacity(128);\n# drop((poll, events));\n# Ok(())\n# }\n```\n\nFor example if we're using a [`TcpListener`],  we'll only want to\nattempt to accept an incoming connection *iff* any connections are\nqueued and ready to be accepted. We don't want to waste our time if no\nconnections are ready.\n\n[`TcpListener`]: ../net/struct.TcpListener.html\n\n## 2. Registering event source\n\nAfter we've created a [`Poll`] instance that monitors events from the OS\nfor us, we need to provide it with a source of events. This is done by\nregistering an [event source]. As the name “event source” suggests it is\na source of events which can be polled using a `Poll` instance. On Unix\nsystems this is usually a file descriptor, or a socket/handle on\nWindows.\n\nIn the example below we'll use a [`TcpListener`] for which we'll receive\nan event (from [`Poll`]) once a connection is ready to be accepted.\n\n[event source]: ../event/trait.Source.html\n\n```ignore\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest};\n# fn main() -> std::io::Result<()> {\n# let poll = Poll::new()?;\n# let address = \"127.0.0.1:0\".parse().unwrap();\n// Create a `TcpListener`, binding it to `address`.\nlet mut listener = TcpListener::bind(address)?;\n\n// Next we register it with `Poll` to receive events for it. The `SERVER`\n// `Token` is used to determine that we received an event for the listener\n// later on.\nconst SERVER: Token = Token(0);\npoll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n# Ok(())\n# }\n```\n\nMultiple event sources can be [registered] (concurrently), so we can\nmonitor multiple sources at a time.\n\n[registered]: ../struct.Registry.html#method.register\n\n## 3. Creating the event loop\n\nAfter we've created a [`Poll`] instance and registered one or more\n[event sources] with it, we can [poll] it for events. Polling for events\nis simple, we need a container to store the events: [`Events`] and need\nto do something based on the polled events (this part is up to you, we\ncan't do it all!). If we do this in a loop we've got ourselves an event\nloop.\n\nThe example below shows the event loop in action, completing our small\nTCP server.\n\n[poll]: ../struct.Poll.html#method.poll\n[event sources]: ../event/trait.Source.html\n\n```ignore\n# use std::io;\n# use std::time::Duration;\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest, Events};\n# fn main() -> io::Result<()> {\n# let mut poll = Poll::new()?;\n# let mut events = Events::with_capacity(128);\n# let address = \"127.0.0.1:0\".parse().unwrap();\n# let mut listener = TcpListener::bind(address)?;\n# const SERVER: Token = Token(0);\n# poll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n// Start our event loop.\nloop {\n    // Poll the OS for events, waiting at most 100 milliseconds.\n    poll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n    // Process each event.\n    for event in events.iter() {\n        // We can use the token we previously provided to `register` to\n        // determine for which type the event is.\n        match event.token() {\n            SERVER => loop {\n                // One or more connections are ready, so we'll attempt to\n                // accept them (in a loop).\n                match listener.accept() {\n                    Ok((connection, address)) => {\n                        println!(\"Got a connection from: {}\", address);\n#                       drop(connection);\n                    },\n                    // A \"would block error\" is returned if the operation\n                    // is not ready, so we'll stop trying to accept\n                    // connections.\n                    Err(ref err) if would_block(err) => break,\n                    Err(err) => return Err(err),\n                }\n            }\n#           _ => unreachable!(),\n        }\n    }\n#   return Ok(());\n}\n\nfn would_block(err: &io::Error) -> bool {\n    err.kind() == io::ErrorKind::WouldBlock\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"b:2:2239-0:265:2438":{"id":"b:2:2239-0:265:2438","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Event","id":"0:265:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2241:24253"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:71:2292":{"id":"0:71:2292","crate_id":0,"name":"try_clone","span":{"filename":"src/poll.rs","begin":[671,4],"end":[675,5]},"visibility":"public","docs":"Creates a new independently owned `Registry`.\n\nEvent sources registered with this `Registry` will be registered with\nthe original `Registry` and `Poll` instance.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Registry","id":"0:55:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3328-0:269:2439":{"id":"b:2:3328-0:269:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:269:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:53:192":{"id":"b:2:2532-0:53:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Poll","id":"0:53:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2236-0:261:1624":{"id":"b:2:2236-0:261:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"0:261:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:2717"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"6:1660:5384":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13184:4577":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:54579:6422":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"12:738:6965":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:5049:7623":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:4938:3600":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11852:731":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:47473:31399":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51000:7081":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2253:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:4621:5659":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:7796:7644":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:2873:3652":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:4150:3442":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7825:4978":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:10807:5189":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:47319:6279":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4820:5749":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2505:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:2591:3637":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:3611:3330":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9526:7421":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:9433:7414":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:3640:2561":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:11863:1515":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:3167:30561":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:6385:6023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:50579:6995":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9000:24957":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8179:7651":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8255:6454":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:5949:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:5661:32488":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"9:622:19178":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:12237:4287":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:7259:6147":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:1701:5408":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10207:7452":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:1116:7542":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"12:60:7907":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2909:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11343:4114":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1125:7545":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:8569:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48810:2561":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:11844:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:4689:4796":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9873:7445":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"12:1866:6968":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11288:4095":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9577:3920":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"12:853:7539":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:9006:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11864:1102":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7511:4931":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5949:6896":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:3010:19380":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:2255:3619":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8277:6004":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:5737:6538":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:48794:2439":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2769:2826":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4195:5492":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:8881:34925":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:47416:7019":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:3167:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13039:4537":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:2854:1935":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:9021:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:46936:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:50285:7061":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:9947:20388":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:3243:3251":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13374:4646":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:2874:34828":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"12:697:7533":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:6087:3606":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"9:920:19159":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:9631:7424":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12211:4285":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:5361:7625":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:6599:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:6668:3618":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:7670:7118":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:6931:3588":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:50067:6306":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:7202:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6171:4819":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:10048:6990":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2683:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:52316:6322":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:50670:6313":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:2579:4734":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:9885:7446":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:52336:6323":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6359:6914":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:11088:13411":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:6349:3566":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:9021:6483":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:21741:31418":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7970:6955":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11388:7619":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:3098:34750":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:8981:7398":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:4385:4787":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:3488:2439":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:6032:3656":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:2993:4769":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5388:4751":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:20718:8193":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:0:2627":{"crate_id":11,"path":["adler"],"kind":"module"},"16:5596:4808":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:54716:6431":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:247:7383":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10752:4004":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:11540:13408":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11951:4237":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:51449:7110":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:57559:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4516:5605":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:47333:7008":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:9627:7423":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8851:8262":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"9:956:19160":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6392:3279":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:6654:4860":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9909:3926":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8147:3313":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:48921:2439":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5759:5918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:4064:3296":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:3162:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11444:6490":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:13382:4647":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:113:7894":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10923:3677":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7343:4764":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12008:4249":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:4353:7622":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"9:863:19157":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:49251:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:4461:8204":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:12312:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:51708:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:4121:7917":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6432:3666":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13203:4582":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12022:4251":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7649:8080":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11617:4172":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:48734:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:2933:2837":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1720:5415":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:3119:6968":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:46978:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:50894:7076":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:7475:3213":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:22101:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:48878:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:7148:2841":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2705:4739":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:7236:6141":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4755:5717":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:889:2439":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:1959:3330":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:6977:6606":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3486:3308":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:0:2631":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:564:3787":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:11525:7572":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"20:290:2776":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"6:4608:5654":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"15:175:7898":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13506:4683":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:21819:2759":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:51304:13420":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:47089:7587":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10075:7449":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:9712:3923":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12797:4480":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:12485:4311":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13478:4674":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11800:4200":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12609:4414":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:9183:7402":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2909:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11606:4171":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2685:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3152:3243":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4550:5621":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:5525:6516":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:219:3564":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10528:7465":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12816:4481":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:49091:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:4227:7569":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11315:4104":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:48066:7056":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13031:4536":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:48039:3344":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4544:5618":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5871:5953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:6916:2561":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:1692:5402":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2631:4736":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2791:3224":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:1813:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:13492:4676":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10520:3985":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"20:219:2773":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"17:8055:20285":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:6610:7915":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4602:5651":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11854:729":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4928:3005":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:8774:3901":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12225:4286":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13007:4527":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:29756:2753":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9339:7411":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"12:2190:34904":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:10663:6450":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:10996:6473":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:48017:7053":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:600:7599":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:688:8083":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:47827:7050":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:50046:3458":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8867:8263":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7059:3013":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:2825:4744":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:22398:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:4150:7919":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:8973:7663":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:5933:1630":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9488:7420":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:971:7533":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:52406:6326":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8221:2320":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:2868:4746":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9155:7401":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:29939:6198":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:8482:6761":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4339:5563":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2992:3238":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:52959:6351":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:11481:2795":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:3201:3337":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:507:3780":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:50848:7073":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:2750:3115":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5682:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:1547:5303":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6362:6022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1422:7546":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6298:6904":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4485:5596":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10434:6880":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11839:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:11229:7134":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5737:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:864:3574":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5839:20238":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:53005:6353":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10466:6882":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:644:3780":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:48971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:25640:2752":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:766:24052":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6781:7506":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:2518:3326":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:20404:3120":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8813:2561":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:36:3562":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:58912:6443":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"20:352:2787":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"2:4108:6750":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:1758:6168":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:47626:7026":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:9514:3641":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"9:827:19253":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2250:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6593:6589":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:2460:13491":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:912:2561":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4662:4795":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6200:6902":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:3125:7394":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:9373:3674":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:3906:8178":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1649:5376":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11861:1458":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:2807:3226":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:8110:20283":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:1463:7552":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:9193:34921":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:242:7382":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"12:815:7534":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:554:5258":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8789:6474":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:3716:4779":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:8752:3314":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:736:24051":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12964:4519":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6052:7502":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:1836:2561":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:48058:6281":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:51325:7104":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1091:7914":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:1556:5309":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:573:5268":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:2028:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8749:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"21:0:2624":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"2:6656:13627":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11500:4151":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4537:5617":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4716:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:6969:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:52715:6338":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:8737:31079":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11721:4189":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:10846:6474":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2300:4717":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:9223:20316":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11858:1459":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5635:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:4024:13376":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:5787:3654":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:5581:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:4344:3624":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5878:19351":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5981:6899":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:7462:4009":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:8228:7121":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"14:31:7529":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:10912:3676":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9722:3924":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:7110:31399":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2811:3228":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:11591:13417":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9751:6866":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6186:4749":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:2403:8161":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12768:4472":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5851:5939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:946:3588":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:5460:6891":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11125:4062":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1228:7542":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:47343:6620":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4561:5628":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:20767:6173":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:8978:1623":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12934:4513":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2943:2840":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:5374:4748":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:3872:3588":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:7831:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:47380:7006":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:3276:3334":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:2162:6976":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:4870:8226":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:9984:7922":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13536:4691":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10270:7460":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:57585:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1832:2439":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6339:6004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9857:7443":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4222:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11087:4056":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:5390:3602":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:784:3569":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:47291:6619":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"9:676:19165":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:49757:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:3093:3346":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:4693:5692":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:50876:7075":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4574:4792":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:54754:6433":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5845:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:49796:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:9458:7416":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10854:20311":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:21134:8327":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:2375:6157":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1708:3556":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:10683:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:1387:2561":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:10182:3966":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:9805:3988":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:7472:3212":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11845:1336":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:7557:6943":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:822:8096":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:10207:30336":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11137:4065":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"12:1852:6966":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:50980:3317":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:5703:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:7230:6140":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4525:5610":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:53029:6354":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:2261:19352":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:776:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:5095:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:4728:31237":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:707:6856":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1107:7541":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:998:7539":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:10609:7674":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:632:7549":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6284:4767":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:3457:3811":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:3377:13447":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:12164:4271":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:47442:6280":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:1744:5424":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:38677:3120":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:6582:6116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2687:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:3206:3250":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7166:20244":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:11822:24958":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:20870:8193":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10445:3977":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:10628:7122":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6567:6587":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:595:5281":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:4297:3594":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:526:5244":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:48566:6285":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:50744:6990":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8943:24866":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:3936:8180":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:8137:20296":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5886:5964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:534:6740":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10546:20307":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:51178:7096":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:47799:3313":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:420:3852":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:3188:4772":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:51018:7083":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:11851:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:9501:3907":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:7276:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7872:6948":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12836:4489":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"12:2198:5116":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2724:3112":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:8526:3893":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:21644:6179":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:5482:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:47595:3312":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:494:5222":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12874:4495":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6690:4758":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6425:6032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5578:5832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12278:4292":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2230:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:5588:1630":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:2762:978":{"crate_id":2,"path":["core","ops"],"kind":"module"},"1:7680:7119":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:10396:3336":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4631:5663":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:50605:6996":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13071:4545":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11217:4081":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:3132:34751":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11528:4158":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8838:6476":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:51147:7092":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"12:1859:6967":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"7:79:19151":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9303:3907":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:47566:6995":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:7278:4761":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:21394:8302":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:51445:7109":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:8184:8173":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6790:4870":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:5207:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6719:34916":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:11847:1444":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:9278:3456":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3164:30565":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6376:20240":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10497:20415":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4189:5491":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13572:4695":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:22830:2751":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"8:0:2624":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11708:4186":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:7125:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:51034:7006":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:20877:8305":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:47696:7037":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:49784:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:5751:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:9051:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7329:4763":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6564:6113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8498:6471":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11787:4198":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6210:6572":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11035:2821":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:13134:4566":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"12:2178:5112":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:20449:31042":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13100:4553":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4771:5722":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9475:7419":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"12:1138:7545":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11893:4211":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11813:4202":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12781:4477":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"9:649:19179":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:2795:2825":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12198:4284":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8925:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:51132:7086":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:21695:6183":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:1940:7613":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:12380:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:7233:3556":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"20:357:2788":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"16:7309:4762":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:10086:7578":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:53497:6378":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9401:3911":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:2862:3236":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13141:4567":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12850:4493":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6017:7491":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:10402:3334":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:2684:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:54655:6426":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8931:7659":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2673:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10360:6870":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2433:4728":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:9831:7438":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:5464:7629":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:47678:7035":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:6124:3663":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:11838:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4499:2812":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4149:5458":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11300:4098":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11235:4082":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11855:730":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:1749:6166":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4663:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:50055:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:586:5121":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:50532:6994":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10121:3963":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5184:19350":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:599:34929":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"14:40:4036":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3326:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:8966:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:288:2621":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13404:4653":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4575:5634":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:2793:4743":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:53127:6356":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2873:3205":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8137:3312":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:7808:6450":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11873:4210":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1601:5340":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8160:3316":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6517:6919":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:4357:4786":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:21786:7003":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10310:7463":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:1568:5318":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:590:3788":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:9400:3633":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:1641:6165":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:7253:6146":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11487:7136":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:50270:6310":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:8167:3317":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:22233:2758":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1055:7913":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10682:4002":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"9:800:5173":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:54541:6421":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:4563:13479":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"7:0:1505":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4569:5632":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:1366:2439":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"12:1065:34903":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"12:1872:6969":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:531:6847":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:755:6863":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7135:34914":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"14:221:5066":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:2749:4741":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:8233:8200":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:10687:7582":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:652:14413":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:20689:8299":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:12748:4466":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:52512:6330":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:7047:13633":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:8014:4920":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4606:4793":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:1580:5326":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:933:6965":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:46795:3214":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:47664:7032":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9118:34926":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6676:4757":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:47503:8141":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:54433:6419":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:48870:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:2785:3225":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:51634:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11485:4147":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2605:4735":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:50592:7593":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:21807:2755":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9061:3914":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:39869:7586":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4364:5576":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:2094:6973":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10159:3965":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:5996:7477":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:54635:6424":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:5018:7623":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:10141:7073":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"20:326:2778":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"6:1642:5372":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:4664:8228":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:21392:8193":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:50522:7591":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:2779:3222":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:10651:6644":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:11746:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:3680:3556":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"13:0:2622":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7687:8118":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:47687:7036":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:54644:6425":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:21628:6999":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:4201:7620":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11547:4163":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11247:4085":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:49870:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:2389:4726":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:49733:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10796:4006":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:22365:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:8920:7657":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:7864:3328":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"12:387:7908":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:50289:7062":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:2502:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:7603:4940":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13158:4571":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:3402:4774":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9930:3928":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:4353:3444":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9110:2822":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:2842:4745":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:49493:3253":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:47608:7024":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6458:6048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:482:5216":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:51687:6635":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:20470:31047":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:6482:3602":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:681:6850":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:96:7891":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12060:4255":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9553:3914":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:53415:6377":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:6865:3655":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:51465:7114":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:2858:3235":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:5564:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:6609:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4603:6019":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10420:3976":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:541:5253":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:50948:7079":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6345:4755":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:51043:7009":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7818:6642":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4736:5709":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:10693:3307":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:47716:7039":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10774:3972":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13340:4634":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:22299:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12860:4494":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:8941:7397":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11684:4185":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4112:5431":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:9499:3637":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:7051:6607":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5544:5808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:7289:6153":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:2844:3233":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:6501:3614":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:721:8084":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:9691:7429":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11811:8085":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5761:7470":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11327:7617":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11856:726":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10394:6879":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"9:382:19262":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10108:7451":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:6440:6037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:961:3566":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:1610:2561":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:20664:8309":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:10583:20308":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4585:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9317:7409":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:8475:20284":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:5882:6982":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12087:4259":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4099:7916":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:20726:8303":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6332:6000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:6575:3667":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12265:4291":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:4707:8086":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12322:4299":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:57202:8336":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:11974:4246":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2535:4732":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:22134:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4345:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:47303:31426":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:51253:7098":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10257:7459":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"12:1555:7548":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"14:187:19329":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:12435:8110":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:11016:6318":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:7156:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:11181:6489":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:2282:4715":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:4533:8219":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1894:15390":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13059:4544":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:48543:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:54831:6436":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2838:3232":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:8666:3898":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5792:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12756:4467":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12514:4331":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"12:1085:7543":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9539:7422":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:12354:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:8906:6479":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7473:7678":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13168:4574":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:7218:6138":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:1004:7540":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13231:4590":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:2604:6161":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:47636:7028":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10374:6874":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:10013:7577":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4210:5499":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12291:4293":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"0:172:1635":{"crate_id":0,"path":["mio","features"],"kind":"module"},"2:47000:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:20432:30837":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5551:5812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6463:6918":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:3943:3211":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12630:4424":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"0:93:1615":{"crate_id":0,"path":["mio","event"],"kind":"module"},"1:11860:1461":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12349:4302":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11054:4050":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:47456:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:29973:6199":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"9:33:19228":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:5605:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:4439:8203":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11271:4087":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:47461:6621":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:8955:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:8509:6643":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:1478:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:47536:3625":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:47739:7041":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:9482:3636":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:9023:3261":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:6108:1624":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:51521:2830":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:2465:4729":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:49500:3254":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5709:5897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:48685:2320":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:1586:5328":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"20:277:2775":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"6:5743:5913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:8116:3309":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:7051:13632":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:1628:6967":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:4413:4788":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4277:5532":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:53835:6383":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:3245:3556":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:1404:6964":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10190:7628":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:624:34930":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10490:3981":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:719:3801":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:5541:6893":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:11148:7677":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:48720:6296":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12251:4288":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6816:6929":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3932:3296":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:57637:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2657:4737":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11594:4169":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13327:4628":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:241:2774":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"13:220:5111":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9897:7447":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:52460:6328":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:4371:5578":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:2259:3305":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:20879:6173":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8966:7662":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:8272:20300":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11106:4061":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:486:3681":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:7637:6944":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10296:7462":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:36:5118":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:80:7890":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12046:4254":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2799:2827":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10139:3914":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:9263:7404":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:48629:6294":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:48033:7054":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:6161:20239":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"12:1518:19318":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:2055:3581":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:52983:6352":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11014:4039":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:52813:6347":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7929:7525":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:4519:4790":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:11270:7071":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:4373:3118":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12896:4499":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9446:7415":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:9936:6989":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:1634:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4459:5594":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:2764:2824":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:21485:6752":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10455:3980":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:20851:8300":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:13148:4568":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4012:8186":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:50776:7069":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:49291:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:5219:3892":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13024:4535":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:4262:4783":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5595:3653":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6146:6569":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7847:4979":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:992:7537":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4721:4797":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:50684:6630":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:51453:7111":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:49371:7574":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10120:7685":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:7947:7648":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1257:7545":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7543:4754":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7600:6449":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7848:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9274:7405":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2692:3110":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:2065:6971":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:8418:20305":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:11840:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:4589:8183":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:51290:7099":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3998:8184":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6915:3669":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:7942:7647":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:20472:31044":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"12:659:2561":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:2320:4723":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:10654:7581":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:568:5266":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12638:4425":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:6907:6163":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:7664:8082":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:4786:4799":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9700:7432":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:52591:6333":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:5614:3588":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:5744:7634":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9644:7425":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12926:4510":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12909:4505":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:538:3785":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:8631:3897":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:4849:4801":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"9:709:6306":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:9844:7441":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6034:7494":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9778:6868":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:7247:6145":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:52382:6325":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9791:6869":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:500:5224":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2508:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"12:1628:3560":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:7079:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11070:4054":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:967:7386":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:4:994":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:8743:7654":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"12:751:3588":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:51500:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:836:3572":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"2:21680:31404":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6109:4817":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7023:7920":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9738:6864":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6704:4865":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:762:3556":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:2922:3215":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7980:20248":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4257:5523":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10670:6884":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:7299:6155":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:491:6846":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:53339:6375":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:48802:3211":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:2974:3248":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2911:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10088:3960":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:487:7385":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:11545:13407":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9250:7403":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:0:2623":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7211:4921":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12073:4256":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4888:4802":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:20601:8307":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:47423:13487":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:8956:3260":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:8951:34924":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11841:1478":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:8368:20303":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:3249:7395":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:690:6853":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4471:5595":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"7:32:19144":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:881:2439":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:51695:6319":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:1823:6171":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6316:6912":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:7167:6615":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:1634:6968":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:6155:3588":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4706:2815":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:8245:7572":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:48708:6295":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4290:5537":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:8561:3895":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:1443:7533":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:50453:7590":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:4144:4781":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:5548:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:49514:3264":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10845:3977":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:1903:20346":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:4630:656":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:4447:5593":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:7264:27018":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:49331:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:52613:6334":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:8140:3016":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:52761:6345":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:6156:7635":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:54739:6432":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2828:1934":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:38660:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"20:155:2780":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"17:10894:4014":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:51737:6321":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:30179:31427":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:2937:2838":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:5780:6894":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:50077:7059":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:355:7596":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13192:4578":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"2:3173:3245":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11846:1366":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11734:3933":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:10155:7579":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"9:188:19207":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"9:0:2625":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3411:3304":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:8212:20298":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5447:7468":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:1735:13669":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:46881:3240":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:53651:6381":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:5094:3566":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:30015:31417":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12033:4252":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3179:3247":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"12:320:3552":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:2307:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:15:1941":{"crate_id":20,"path":["log","trace"],"kind":"macro"},"2:54769:6434":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:3599:4776":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:51358:7108":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11330:4110":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6279:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"14:0:2629":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7483:4766":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:5472:4752":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13091:4552":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:22431:2757":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:9893:3316":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11174:4071":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:52937:6350":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:51315:7100":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:660:7377":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"9:505:19302":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:3161:29606":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:680:7601":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8819:6475":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6963:6122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3086:2439":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6472:4845":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:50712:3314":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8095:3345":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:8332:3006":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11223:7133":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12972:4521":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:671:7381":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13557:4694":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5558:20236":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:1550:3296":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:2774:3223":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8797:2439":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:4234:3594":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:54664:6427":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:22167:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:8732:32493":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12134:4266":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11515:4156":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11841:4206":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:3468:3260":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:9021:7399":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:3902:3566":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:8141:3015":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:521:24053":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"12:98:6958":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:2152:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:11534:6856":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:52650:6336":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:6474:3158":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:22200:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11865:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:8564:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:4879:8227":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11748:4194":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:8911:34928":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5614:6521":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:6355:7636":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:6059:34915":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9071:34922":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10875:4011":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:46896:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:52791:6346":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:3263:4773":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4545:4791":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8173:7649":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10350:3972":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:11853:728":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:10169:7580":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:10338:3675":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:8393:20304":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10721:4003":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11053:6488":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13527:4689":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:7096:6608":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:21298:30842":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"19:0:1010":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:3384:3296":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:1674:5395":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11850:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:1021:7387":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13221:4585":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:614:34932":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:22068:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:6434:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"9:111:19172":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"12:861:7540":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:47402:7017":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:48819:3013":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:6137:6901":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:9361:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:8492:2439":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:9820:7437":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:47813:7049":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:8056:4991":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"14:165:19322":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13354:4640":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9671:7427":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"12:274:6959":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:39882:3113":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:62:14003":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:54617:6423":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4669:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4125:5440":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10822:20310":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:1413:6965":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:11857:1462":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:2930:19379":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6842:6590":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"15:214:19337":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:50504:6991":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12730:4461":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:7567:20246":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10221:7456":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:5793:6541":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:50542:7592":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:0:1358":{"crate_id":1,"path":["std"],"kind":"module"},"1:3493:3311":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:8596:3896":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"12:393:7909":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:1612:3566":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10476:20414":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:7117:34917":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"0:173:1652":{"crate_id":0,"path":["mio","guide"],"kind":"module"},"1:7530:3672":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"15:193:7902":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:6939:3576":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6070:4814":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:8701:3899":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:11309:7077":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:576:3647":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:123:14058":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4310:5547":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5853:3656":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:49131:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:8510:3892":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:1071:34827":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:2509:4731":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13214:4583":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2833:3230":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4408:5590":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"10:0:2626":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4700:983":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:967:7532":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:47096:3443":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:11806:26975":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3477:24870":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4788:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9362:3914":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:8339:20302":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"12:1029:7542":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:49818:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:4817:4800":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:0:2632":{"crate_id":17,"path":["object"],"kind":"module"},"17:10997:4036":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:725:6964":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3643:8176":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:7097:2842":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:50085:7060":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13518:4685":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12337:3977":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:50030:3459":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:22332:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4267:5529":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:57598:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10929:3678":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7909:6954":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:47748:7042":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11661:4180":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:53080:6355":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9658:7426":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:10295:7654":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:13082:4549":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"12:632:2439":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:386:7384":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:652:3780":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:47655:7031":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:5812:3296":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:6780:8297":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2680:2248":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6312:5994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8986:6480":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:3191:32757":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:49766:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:48583:6287":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10949:4021":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:7659:20247":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11034:4049":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:9013:3254":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:562:4009":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:6947:34748":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7044:34912":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:6998:2561":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6985:6123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4249:5520":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5508:5795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4726:5708":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5703:6532":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10403:4004":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:10984:6472":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:47707:7038":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4708:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:9159:7575":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:54293:6417":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:6644:7636":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:51226:7097":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10708:6885":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4785:2813":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:8295:20301":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10608:3866":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:6505:7638":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5723:5908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:8822:34919":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:51161:7095":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10062:7448":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:50990:7080":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:488:5219":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10332:20413":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:5453:5756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:2344:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:2876:6160":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:296:2777":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"2:2850:3234":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1506:5285":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:1614:5347":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6510:6088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11862:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:506:5227":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:52907:6349":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:12136:32710":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:48600:8175":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4427:5591":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9165:34920":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8440:8237":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:47073:6274":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:3568:3566":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4814:5747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11828:4205":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7357:4924":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10921:4015":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"18:636:3800":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7956:4768":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:48861:13716":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:2940:2839":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13279:4627":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9283:7406":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:2252:7616":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7426:7524":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:50553:6311":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6877:20243":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:4749:4798":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4826:5752":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:3321:3323":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:9701:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6287:5976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:50634:7595":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:2496:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:30001:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4377:5580":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:54792:6435":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:7224:6139":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:50830:7072":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:2385:2803":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:12102:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:53385:6376":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:6519:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7435:4928":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6241:6903":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:2142:34810":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1524:5293":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:47386:13486":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"12:2205:6607":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6735:7505":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:3566:4775":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7585:25239":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:47586:7589":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:50794:7070":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5664:6528":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:47646:7029":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8273:7653":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:669:7532":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:47546:7588":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2823:3229":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:4601:6017":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5533:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:3699:3566":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12955:4518":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6903:6480":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:7801:7120":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:6274:2561":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11072:2820":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:13413:4655":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:4217:4782":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5782:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:1617:3556":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:12115:13496":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:3127:6966":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:54690:6429":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3278:3335":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:0:2633":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11909:4216":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:4708:2816":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:9229:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:53158:6357":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:5510:6513":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:54675:6428":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11196:6648":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:2593:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6330:4822":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4441:4789":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5628:6522":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:153:3548":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:47778:7045":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4162:5468":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:44:5119":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:48010:7052":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:5730:5910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9019:3264":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:10399:3338":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:9067:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6528:6575":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:3964:8183":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12884:4496":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4234:5513":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6496:20241":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:49051:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:3093:6967":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:47489:6622":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5514:5798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:7088:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4675:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4106:5430":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:47282:7007":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13436:4668":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4807:5744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:9072:2820":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:11494:7136":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"14:160:7529":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:9173:7611":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10973:4035":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:8247:7649":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:1891:7612":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:54495:6420":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:6922:6979":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12695:4460":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:1670:1066":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2411:4727":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11245:3681":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:10703:25265":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:10803:7643":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"9:19:19227":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:4136:5448":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:7250:3609":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:46956:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:11344:6989":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:47409:7018":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:4667:8203":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:2428:1943":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:5410:7628":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:30073:31403":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"12:2184:5113":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:48929:3211":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:48937:2561":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:51469:7115":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:6303:5988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2737:2836":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:1969:8139":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:5711:7630":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:7595:7641":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:7574:6445":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6865:6935":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:7126:6611":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4747:5715":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:2655:3329":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3506:3588":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:51533:13769":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:54701:6430":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7469:4765":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3237:3338":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4645:5668":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:51110:13415":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:9965:7610":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9371:7400":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:51725:6637":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:7516:32494":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:1771:7388":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:5203:3891":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:2894:19378":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5670:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:7084:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:7791:2777":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:532:5247":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11186:4072":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10638:7120":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:5739:13977":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:3354:3344":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:47022:3241":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12550:4362":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6619:4856":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:49507:3263":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8775:6473":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4020:8188":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"12:777:3559":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"18:582:3120":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:20417:30837":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:727:3804":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:4299:3443":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3989:7566":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7093:4902":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:981:8096":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:9975:7576":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2031:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:51009:7082":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6270:4750":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:47355:7009":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:47617:7025":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:46912:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:5527:8246":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11843:1028":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:4327:4785":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5597:5834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4296:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10034:7666":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"0:0:1759":{"crate_id":0,"path":["mio"],"kind":"module"},"1:5275:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:1212:6936":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2499:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:11682:3686":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:1962:7392":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:1713:5412":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11199:4073":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:3623:7553":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:1684:5401":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:9062:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:54371:6418":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:1622:6966":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:10625:4000":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8088:3343":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:12361:4309":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:1828:7608":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12118:4265":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:6419:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:8991:34927":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:52360:6324":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2338:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:2727:4740":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4216:5501":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:273:3566":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7396:20245":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"14:215:6956":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:50624:6997":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:5396:7627":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8400:6306":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:9861:6626":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11774:4197":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:51338:6631":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:7178:7563":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11259:4086":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8423:6466":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:9025:3262":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5411:4753":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:562:5263":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:2367:4725":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:1003:7541":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9422:7413":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:53261:6359":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7298:6941":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:1093:6936":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:7265:6148":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:8139:3017":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:7856:7646":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:14:1937":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:29979:6201":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:6319:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8883:8264":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:21129:8304":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:48048:3631":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"12:2069:7541":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:547:3581":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:9243:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:21612:6178":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:5815:20237":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10642:20309":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:956:3556":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:4754:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:1606:2439":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22266:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:54041:6415":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:1243:7541":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"15:0:2630":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9293:7407":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:2080:7542":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:630:8077":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4356:5571":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13114:4560":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3977:7565":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"14:202:13427":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:2880:34799":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:2341:4724":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:5142:13394":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:4008:8185":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:53685:6382":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5592:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:7479:13631":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13459:4669":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:1830:7609":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4778:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6321:5995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1531:5295":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"14:7:7529":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4289:3623":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:5433:6887":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2579:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:6548:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:6563:13635":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"12:834:7537":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47788:7046":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:51477:7117":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:3199:3336":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:6873:24868":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:8241:20299":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11161:4069":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7319:6942":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2233:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:53621:6380":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:2413:8166":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:5723:3600":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10633:7124":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13176:4575":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7237:4922":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:49854:3433":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:3429:3306":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:10233:7457":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:6489:6074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:4264:3296":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:1866:7610":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:21793:2756":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:11293:7074":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:11058:13726":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11939:4235":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8805:7656":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"12:353:3554":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4437:5592":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8154:3314":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:2557:4733":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:5122:4804":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7372:34913":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:579:5271":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:3026:3807":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:975:7534":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:21720:31425":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:3807:7619":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:50726:3316":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:6508:8259":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:2681:3109":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"18:699:6854":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:57611:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8761:6472":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10828:24956":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13393:4652":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:515:3783":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:21668:2754":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4389:5589":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11859:1460":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:12163:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:2884:34800":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"12:1845:3556":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:47082:4920":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:902:3211":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:1707:5411":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:6396:7637":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:4921:4803":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:474:5211":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4327:5557":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:198:2770":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"2:9283:3457":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:4103:2439":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"20:0:1760":{"crate_id":20,"path":["log"],"kind":"module"},"1:8104:3307":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:3704:7617":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11639:4179":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5520:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9764:6867":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10385:6878":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13126:4563":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11761:4195":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"9:896:19158":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:39833:5115":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:7952:3288":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:7063:8095":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:3900:8179":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:50702:7064":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6402:6025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:11520:13410":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:8494:3891":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4506:5598":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7388:7523":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8055:3347":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:7249:7516":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:7004:2561":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:1889:7611":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4304:5545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:6805:3343":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:49171:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11997:4247":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:9017:3263":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:2803:3227":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4683:5686":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:51652:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12948:4516":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"12:1534:7547":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:52530:6331":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:9368:7644":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:52631:6335":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:2996:3239":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:48649:31411":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:51644:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:3153:6969":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:1728:5419":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:3389:7564":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:11368:4118":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:5417:6980":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12103:4261":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"12:300:6962":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:3854:4780":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:10127:7072":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1376:3211":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"12:119:3550":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:10816:7629":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:50614:7594":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:3632:4777":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2683:4738":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:683:7603":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:1613:3588":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:6259:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:4034:3296":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2302:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:4817:3296":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:11211:6650":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13366:4643":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:49751:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:20677:8193":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:51481:6318":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:50696:7063":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:57572:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:526:3646":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:4129:7918":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:48672:6629":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:7573:8193":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:4599:6015":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:547:5256":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13594:4701":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:3501:3211":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5694:5895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11576:4168":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2867:3237":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:7703:7643":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:5524:5925":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"12:1044:19317":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:8441:20306":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:58933:6444":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:1973:7553":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:8796:3902":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4703:1945":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"typedef"},"17:13047:4538":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9681:3845":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:48785:2560":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11142:7130":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4704:1944":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8350:6463":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:48852:3014":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:47363:13485":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:21591:6176":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:46834:3249":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:12980:4523":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:50513:6992":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:7139:6614":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:20638:8308":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:52561:6332":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:1931:7389":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7942:7528":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:47764:3798":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:51473:7116":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7890:6951":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9091:2821":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:53181:6358":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:48946:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8299:2814":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:6643:3606":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:7621:3281":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:9350:3886":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7872:3330":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12148:4268":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2771:4742":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4615:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:11074:7583":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:4762:2817":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"12:2053:6936":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:6211:1630":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:52428:6327":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:21703:6184":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:12323:1624":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10441:3281":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:663:7600":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"13:108:34905":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:9601:3922":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:2459:8193":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:21286:6175":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:53575:6379":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:49011:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6555:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:9011:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:47055:3244":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2487:4730":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:6001:8338":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:10673:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13580:4698":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"12:1840:3588":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11436:4122":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:7008:6136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:1639:6969":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5490:5782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5235:4806":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:50930:7078":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2512:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"9:592:19177":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"12:0:2628":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:39873:2247":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:6511:3615":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:6561:8261":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:7497:4756":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:52861:6348":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:5347:7624":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6991:6125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:4297:4784":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4654:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:920:6964":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:11125:3679":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9328:7410":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"20:151:2779":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"6:4284:5535":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2387:8156":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:7176:6137":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:361:7597":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:587:5276":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:12188:7584":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11008:25267":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:3089:3242":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12176:4273":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9382:3909":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:8871:7396":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11559:4165":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6123:4747":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:52490:6329":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:48024:3279":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:8239:7652":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:1511:5287":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6668:4862":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:9691:8193":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4201:5494":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:1517:5290":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:54183:6416":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12617:4417":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3707:7618":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:52668:6337":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"12:985:6936":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4591:5643":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7288:6940":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"18:574:3780":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11536:4160":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11356:4115":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6743:20242":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:5381:7626":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11853:4207":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:2816:3231":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:9108:7400":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10506:3982":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:4081:7567":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:6201:3566":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4241:5517":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:51457:7112":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12739:4465":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:7267:6937":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:5138:13393":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:8162:20297":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10245:7458":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:5163:4805":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11149:4066":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5702:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11304:3682":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"12:646:3211":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:21757:31392":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:4218:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:9031:34923":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:2916:7393":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4317:5550":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:9868:3211":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:1432:7532":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:21538:6753":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:6252:6574":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4639:5667":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:5718:7633":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11367:7618":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:9844:2439":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47276:7006":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:1538:5298":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:20720:8301":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:5494:6981":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:49211:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:2401:8160":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:7707:7586":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:51461:7113":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:1606:5342":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:119:14057":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:51025:7017":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:20451:31046":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"9:977:5192":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:6829:6932":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3958:8182":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3950:8181":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10321:3968":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:2581:3327":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:57624:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4281:7621":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:47729:7040":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:11462:6491":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:962:7546":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:4222:7568":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:2615:3319":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:3689:4778":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:50038:7058":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:481:6845":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:609:7376":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:20846:8193":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:6961:2561":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:1917:6172":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12674:4455":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10283:7461":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:9015:3253":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:5494:20235":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:47103:6276":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:4635:4794":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:5615:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:1120:7544":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:11233:7066":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:4137:8199":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:3239:3339":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:4399:3445":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:6534:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12307:4295":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:7511:3670":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:810:7546":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"}},"external_crates":{"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.17/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}