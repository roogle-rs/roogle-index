{"root":"0:0:2538","crate_version":"1.0.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/event/source.rs","begin":[114,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Source","id":"0:159:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Source","id":"0:159:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:297:3419","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:165:3044","0:166:3071","0:167:3087"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:194:1327":{"id":"0:194:1327","crate_id":0,"name":"partial_cmp","span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31578:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:131:2400":{"id":"b:2:3105-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:262:501":{"id":"0:262:501","crate_id":0,"name":"cmp","span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31578:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:427":{"id":"0:37:427","crate_id":0,"name":"bitor","span":{"filename":"src/interest.rs","begin":[132,4],"end":[134,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"Self"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:428":{"id":"0:39:428","crate_id":0,"name":"bitor_assign","span":{"filename":"src/interest.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32876:3652-0:182:2401":{"id":"a:2:32876:3652-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3351:3984-0:60:218":{"id":"a:2:3351:3984-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:108:2394":{"id":"0:108:2394","crate_id":0,"name":"token","span":{"filename":"src/event/event.rs","begin":[23,4],"end":[25,5]},"visibility":"public","docs":"Returns the event's token.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:274:3239":{"id":"b:2:3105-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3100-0:131:2400":{"id":"b:2:3100-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:172-0:159:3048":{"id":"0:172-0:159:3048","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[10,0],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::source::Source","name":"Source","id":"0:159:3048","glob":false}}},"0:173-0:131:2400":{"id":"0:173-0:131:2400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,0],"end":[65,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"event::Events","name":"Events","id":"0:131:2400","glob":false}}},"0:160:3044":{"id":"0:160:3044","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[83,4],"end":[88,24]},"visibility":"default","docs":"Register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use [`Registry::register`]\ninstead. Implementors should handle registration by delegating the call\nto another `Source` type.\n\n[`Registry::register`]: ../struct.Registry.html#method.register","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:3351:3984-0:270:3238":{"id":"a:2:3351:3984-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13784:29407":{"id":"2:13784:29407","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:35181":{"id":"2:13854:35181","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:35186":{"id":"2:13876:35186","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:35186"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44889:8156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195":{"id":"0:195","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2903:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:196:501"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2788-0:131:2400":{"id":"b:2:2788-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:27525"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5717:35882":{"id":"5:5717:35882","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42673:3829-0:131:2400":{"id":"a:2:42673:3829-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:3829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2785-0:62:2402":{"id":"b:2:2785-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:3516"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[81,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:3346","0:135:3347","0:136:3350","0:137:1004","0:138:3357"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:170-0:131:2400":{"id":"0:170-0:131:2400","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,23],"end":[9,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::events::Events","name":"Events","id":"0:131:2400","glob":false}}},"0:111:3267":{"id":"0:111:3267","crate_id":0,"name":"is_error","span":{"filename":"src/event/event.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":"Returns true if the event contains error readiness.\n\nError events occur when the socket enters an error state. In this case,\nthe socket will also receive a readable or writable event. Reading or\nwriting to the socket will result in an error.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\nerror event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLERR`      |\n| [kqueue]      | `EV_ERROR` and `EV_EOF` with `fflags` set to `0`. |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:35879","5:5703:15216","5:5706:35880","5:5709:35881","5:5717:35882","5:5718:35883","5:5719:4219","5:5720:30615","5:5721:30616"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283:494":{"id":"0:283:494","crate_id":0,"name":"clone","span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3100-0:182:2401":{"id":"b:2:3100-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60:218":{"id":"0:60:218","crate_id":0,"name":"Poll","span":{"filename":"src/poll.rs","begin":[264,0],"end":[266,1]},"visibility":"public","docs":"Polls for readiness events on all registered values.\n\n`Poll` allows a program to monitor a large number of [`event::Source`]s,\nwaiting until one or more become \"ready\" for some class of operations; e.g.\nreading and writing. An event source is considered ready if it is possible\nto immediately perform a corresponding operation; e.g. [`read`] or\n[`write`].\n\nTo use `Poll`, an `event::Source` must first be registered with the `Poll`\ninstance using the [`register`] method on its associated `Register`,\nsupplying readiness interest. The readiness interest tells `Poll` which\nspecific operations on the handle to monitor for readiness. A `Token` is\nalso passed to the [`register`] function. When `Poll` returns a readiness\nevent, it will include this token.  This associates the event with the\nevent source that generated the event.\n\n[`event::Source`]: ./event/trait.Source.html\n[`read`]: ./net/struct.TcpStream.html#method.read\n[`write`]: ./net/struct.TcpStream.html#method.write\n[`register`]: struct.Registry.html#method.register\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{self, SocketAddr};\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = net::TcpListener::bind(addr)?;\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(server.local_addr()?)?;\n\n// Register the stream with `Poll`\npoll.registry().register(&mut stream, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n# Portability\n\nUsing `Poll` provides a portable interface across supported platforms as\nlong as the caller takes the following into consideration:\n\n### Spurious events\n\n[`Poll::poll`] may return readiness events even if the associated\nevent source is not actually ready. Given the same code, this may\nhappen more on some platforms than others. It is important to never assume\nthat, just because a readiness event was received, that the associated\noperation will succeed as well.\n\nIf operation fails with [`WouldBlock`], then the caller should not treat\nthis as an error, but instead should wait until another readiness event is\nreceived.\n\n### Draining readiness\n\nOnce a readiness event is received, the corresponding operation must be\nperformed repeatedly until it returns [`WouldBlock`]. Unless this is done,\nthere is no guarantee that another readiness event will be delivered, even\nif further data is received for the event source.\n\n[`WouldBlock`]: std::io::ErrorKind::WouldBlock\n\n### Readiness operations\n\nThe only readiness operations that are guaranteed to be present on all\nsupported platforms are [`readable`] and [`writable`]. All other readiness\noperations may have false negatives and as such should be considered\n**hints**. This means that if a socket is registered with [`readable`]\ninterest and either an error or close is received, a readiness event will\nbe generated for the socket, but it **may** only include `readable`\nreadiness. Also note that, given the potential for spurious events,\nreceiving a readiness event with `read_closed`, `write_closed`, or `error`\ndoesn't actually mean that a `read` on the socket will return a result\nmatching the readiness event.\n\nIn other words, portable programs that explicitly check for [`read_closed`],\n[`write_closed`], or [`error`] readiness should be doing so as an\n**optimization** and always be able to handle an error or close situation\nwhen performing the actual read operation.\n\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`writable`]: ./event/struct.Event.html#method.is_writable\n[`error`]: ./event/struct.Event.html#method.is_error\n[`read_closed`]: ./event/struct.Event.html#method.is_read_closed\n[`write_closed`]: ./event/struct.Event.html#method.is_write_closed\n\n### Registering handles\n\nUnless otherwise noted, it should be assumed that types implementing\n[`event::Source`] will never become ready unless they are registered with\n`Poll`.\n\nFor example:\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\nuse std::thread;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut sock = TcpStream::connect(listener.local_addr()?)?;\n\nthread::sleep(Duration::from_secs(1));\n\nlet poll = Poll::new()?;\n\n// The connect is not guaranteed to have started until it is registered at\n// this point\npoll.registry().register(&mut sock, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n### Dropping `Poll`\n\nWhen the `Poll` instance is dropped it may cancel in-flight operations for\nthe registered [event sources], meaning that no further events for them may\nbe received. It also means operations on the registered event sources may no\nlonger work. It is up to the user to keep the `Poll` instance alive while\nregistered event sources are being used.\n\n[event sources]: ./event/trait.Source.html\n\n### Accessing raw fd/socket/handle\n\nMio makes it possible for many types to be converted into a raw file\ndescriptor (fd, Unix), socket (Windows) or handle (Windows). This makes it\npossible to support more operations on the type than Mio supports, for\nexample it makes [mio-aio] possible. However accessing the raw fd is not\nwithout it's pitfalls.\n\nSpecifically performing I/O operations outside of Mio on these types (via\nthe raw fd) has unspecified behaviour. It could cause no more events to be\ngenerated for the type even though it returned `WouldBlock` (in an operation\ndirectly accessing the fd). The behaviour is OS specific and Mio can only\nguarantee cross-platform behaviour if it can control the I/O.\n\n[mio-aio]: https://github.com/asomers/mio-aio\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being considered\na breaking change, don't depend on this, it's just here to inform the user.\nCurrently the kqueue and epoll implementation support direct I/O operations\non the fd without Mio's knowledge. Windows however needs **all** I/O\noperations to go through Mio otherwise it is not able to update it's\ninternal state properly and won't generate events.\n\n### Polling without registering event sources\n\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being\nconsidered a breaking change, don't depend on this, it's just here to inform\nthe user. On platforms that use epoll, kqueue or IOCP (see implementation\nnotes below) polling without previously registering [event sources] will\nresult in sleeping forever, only a process signal will be able to wake up\nthe thread.\n\nOn WASM/WASI this is different as it doesn't support process signals,\nfurthermore the WASI specification doesn't specify a behaviour in this\nsituation, thus it's up to the implementation what to do here. As an\nexample, the wasmtime runtime will return `EINVAL` in this situation, but\ndifferent runtimes may return different results. If you have further\ninsights or thoughts about this situation (and/or how Mio should handle it)\nplease add you comment to [pull request#1580].\n\n[event sources]: crate::event::Source\n[pull request#1580]: https://github.com/tokio-rs/mio/pull/1580\n\n# Implementation notes\n\n`Poll` is backed by the selector provided by the operating system.\n\n|      OS       |  Selector |\n|---------------|-----------|\n| Android       | [epoll]   |\n| DragonFly BSD | [kqueue]  |\n| FreeBSD       | [kqueue]  |\n| iOS           | [kqueue]  |\n| illumos       | [epoll]   |\n| Linux         | [epoll]   |\n| NetBSD        | [kqueue]  |\n| OpenBSD       | [kqueue]  |\n| Windows       | [IOCP]    |\n| macOS         | [kqueue]  |\n\nOn all supported platforms, socket operations are handled by using the\nsystem selector. Platform specific extensions (e.g. [`SourceFd`]) allow\naccessing other features provided by individual system selectors. For\nexample, Linux's [`signalfd`] feature can be used by registering the FD with\n`Poll` via [`SourceFd`].\n\nOn all platforms except windows, a call to [`Poll::poll`] is mostly just a\ndirect call to the system selector. However, [IOCP] uses a completion model\ninstead of a readiness model. In this case, `Poll` must adapt the completion\nmodel Mio's API. While non-trivial, the bridge layer is still quite\nefficient. The most expensive part being calls to `read` and `write` require\ndata to be copied into an intermediate buffer before it is passed to the\nkernel.\n\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2\n[IOCP]: https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports\n[`signalfd`]: https://man7.org/linux/man-pages/man2/signalfd.2.html\n[`SourceFd`]: unix/struct.SourceFd.html\n[`Poll::poll`]: struct.Poll.html#method.poll","links":{"std::io::ErrorKind::WouldBlock":"1:8384:4161"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:65","a:2:3316:260-0:60:218","a:2:42673:3829-0:60:218","a:2:32876:3652-0:60:218","a:2:3351:3984-0:60:218","a:2:32818:248-0:60:218","a:2:42674:3828-0:60:218","b:2:3959-0:60:218","b:2:3090-0:60:218","b:2:3105-0:60:218","b:2:2788-0:60:218","b:2:3094-0:60:218","b:2:3100-0:60:218","b:2:2785-0:60:218","0:68","0:70"]}}},"a:2:3351:3984-0:266:2404":{"id":"a:2:3351:3984-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13871:29269":{"id":"2:13871:29269","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:39719"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174-0:182:2401":{"id":"0:174-0:182:2401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,0],"end":[66,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"interest::Interest","name":"Interest","id":"0:182:2401","glob":false}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[202,0],"end":[230,1]},"visibility":"default","docs":"When the [alternate] flag is enabled this will print platform specific\ndetails, for example the fields of the `kevent` structure on platforms that\nuse `kqueue(2)`. Note however that the output of this implementation is\n**not** consider a part of the stable API.\n\n[alternate]: fmt::Formatter::alternate","links":{"fmt::Formatter::alternate":"2:10714:3312"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:30:2724":{"id":"0:30:2724","crate_id":0,"name":"is_readable","span":{"filename":"src/interest.rs","begin":[99,4],"end":[101,5]},"visibility":"public","docs":"Returns true if the value includes readable readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3109:1850":{"id":"2:3109:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:131:2400":{"id":"b:2:3094-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5706:35880":{"id":"5:5706:35880","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:9548":{"id":"2:13775:9548","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44826:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171-0:274:3239":{"id":"0:171-0:274:3239","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,31],"end":[9,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::events::Iter","name":"Iter","id":"0:274:3239","glob":false}}},"b:2:3959-0:62:2402":{"id":"b:2:3959-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42673:3829-0:182:2401":{"id":"a:2:42673:3829-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:3829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32818:248-0:274:3239":{"id":"a:2:32818:248-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:167:3087":{"id":"0:167:3087","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:35881":{"id":"5:5709:35881","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:35169":{"id":"2:13804:35169","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13437:14980","str::split":"2:13795:29393","prim@char":"1:12478:490","`DoubleEndedIterator`":"2:8393:133","str::rsplit_terminator":"2:13807:35170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44622:8213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:899":{"id":"0:264:899","crate_id":0,"name":"hash","span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10886:168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3093:4021":{"id":"2:3093:4021","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3067:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2788-0:274:3239":{"id":"b:2:2788-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2790:27525"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13838:35176":{"id":"2:13838:35176","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3108:149":{"id":"2:3108:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32742:5901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13865:29261":{"id":"2:13865:29261","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3090-0:246:2403":{"id":"b:2:3090-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:4021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3090-0:182:2401":{"id":"b:2:3090-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:4021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2785-0:182:2401":{"id":"b:2:2785-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:3516"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13774:34119":{"id":"2:13774:34119","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13773:34118"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44855:8226","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:273:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:149:3361":{"id":"0:149:3361","crate_id":0,"name":"size_hint","span":{"filename":"src/event/events.rs","begin":[216,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:29403":{"id":"2:13816:29403","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:781:4088":{"id":"5:781:4088","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2788-0:62:2402":{"id":"b:2:2788-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:27525"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3316:260-0:246:2403":{"id":"a:2:3316:260-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3316:260-0:274:3239":{"id":"a:2:3316:260-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36:210":{"id":"0:36:210","crate_id":0,"name":"Output","span":{"filename":"src/interest.rs","begin":[129,4],"end":[129,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[144,0],"end":[202,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:41:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13768:29392":{"id":"2:13768:29392","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13767:29391"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2694":{"id":"0:27:2694","crate_id":0,"name":"PRIORITY","span":{"filename":"src/interest.rs","begin":[52,4],"end":[52,91]},"visibility":"public","docs":"Returns a `Interest` set representing priority completion interests.","links":{},"attrs":["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:3094-0:270:3238":{"id":"b:2:3094-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10878:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:899"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:778-0:274:3239":{"id":"b:5:778-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:774:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:780:4087","5:781:4088","5:782:4089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5719:4219":{"id":"5:5719:4219","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:29391":{"id":"2:13767:29391","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13768:29392"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:29405":{"id":"2:13778:29405","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2785-0:60:218":{"id":"b:2:2785-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:3516"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[82,0],"end":[96,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:1208","0:100:3235"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42673:3829-0:266:2404":{"id":"a:2:42673:3829-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:3829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42673:3829-0:270:3238":{"id":"a:2:42673:3829-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:3829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:138:3357":{"id":"0:138:3357","crate_id":0,"name":"clear","span":{"filename":"src/event/events.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Clearing all `Event` values from container explicitly.\n\n# Notes\n\nEvents are cleared before every `poll`, so it is not required to call\nthis manually.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n// Clear all events.\nevents.clear();\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3096:857":{"id":"2:3096:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2403":{"id":"0:246:2403","crate_id":0,"name":"Token","span":{"filename":"src/token.rs","begin":[132,0],"end":[132,28]},"visibility":"public","docs":"Associates readiness events with [`event::Source`]s.\n\n`Token` is a wrapper around `usize` and is used as an argument to\n[`Registry::register`] and [`Registry::reregister`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[`Registry::register`]: struct.Registry.html#method.register\n[`Registry::reregister`]: struct.Registry.html#method.reregister\n\n# Example\n\nUsing `Token` to track which socket generated the event. In this example,\n`HashMap` is used, but usually something like [`slab`] is better.\n\n[`slab`]: https://crates.io/crates/slab\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Interest, Poll, Token};\nuse mio::net::TcpListener;\n\nuse std::thread;\nuse std::io::{self, Read};\nuse std::collections::HashMap;\n\n// After this number of sockets is accepted, the server will shutdown.\nconst MAX_SOCKETS: usize = 32;\n\n// Pick a token that will not be used by any other socket and use that one\n// for the listener.\nconst LISTENER: Token = Token(1024);\n\n// Used to store the sockets.\nlet mut sockets = HashMap::new();\n\n// This is used to generate a unique token for a socket\nlet mut next_socket_index = 0;\n\n// The `Poll` instance\nlet mut poll = Poll::new()?;\n\n// Tcp listener\nlet mut listener = TcpListener::bind(\"127.0.0.1:0\".parse()?)?;\n\n// Register the listener\npoll.registry().register(&mut listener, LISTENER, Interest::READABLE)?;\n\n// Spawn a thread that will connect a bunch of sockets then close them\nlet addr = listener.local_addr()?;\nthread::spawn(move || {\n    use std::net::TcpStream;\n\n    // +1 here is to connect an extra socket to signal the socket to close\n    for _ in 0..(MAX_SOCKETS+1) {\n        // Connect then drop the socket\n        let _ = TcpStream::connect(addr).unwrap();\n    }\n});\n\n// Event storage\nlet mut events = Events::with_capacity(1024);\n\n// Read buffer, this will never actually get filled\nlet mut buf = [0; 256];\n\n// The main event loop\nloop {\n    // Wait for events\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        match event.token() {\n            LISTENER => {\n                // Perform operations in a loop until `WouldBlock` is\n                // encountered.\n                loop {\n                    match listener.accept() {\n                        Ok((mut socket, _)) => {\n                            // Shutdown the server\n                            if next_socket_index == MAX_SOCKETS {\n                                return Ok(());\n                            }\n\n                            // Get the token for the socket\n                            let token = Token(next_socket_index);\n                            next_socket_index += 1;\n\n                            // Register the new socket w/ poll\n                            poll.registry().register(&mut socket, token, Interest::READABLE)?;\n\n                            // Store the socket\n                            sockets.insert(token, socket);\n                        }\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop accepting\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n            token => {\n                // Always operate in a loop\n                loop {\n                    match sockets.get_mut(&token).unwrap().read(&mut buf) {\n                        Ok(0) => {\n                            // Socket is closed, remove it from the map\n                            sockets.remove(&token);\n                            break;\n                        }\n                        // Data is not actually sent in this example\n                        Ok(_) => unreachable!(),\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop reading\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:248:2024"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3316:260-0:246:2403","a:2:42673:3829-0:246:2403","a:2:32876:3652-0:246:2403","a:2:3351:3984-0:246:2403","a:2:32818:248-0:246:2403","a:2:42674:3828-0:246:2403","b:2:3959-0:246:2403","b:2:3090-0:246:2403","b:2:2820-0:246:2403","b:2:2817-0:246:2403","b:2:3105-0:246:2403","b:2:2788-0:246:2403","b:2:3094-0:246:2403","b:2:3100-0:246:2403","b:2:2785-0:246:2403","b:5:778-0:246:2403","0:263","0:259","0:249","0:255","0:250","0:261","0:254","0:257","0:89","0:252"]}}},"0:274:3239":{"id":"0:274:3239","crate_id":0,"name":"Iter","span":{"filename":"src/event/events.rs","begin":[76,0],"end":[79,1]},"visibility":"public","docs":"[`Events`] iterator.\n\nThis struct is created by the [`iter`] method on [`Events`].\n\n[`Events`]: struct.Events.html\n[`iter`]: struct.Events.html#method.iter\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:3316:260-0:274:3239","a:2:42673:3829-0:274:3239","a:2:32876:3652-0:274:3239","a:2:3351:3984-0:274:3239","a:2:32818:248-0:274:3239","a:2:42674:3828-0:274:3239","b:2:3959-0:274:3239","b:2:3090-0:274:3239","b:2:2817-0:274:3239","b:2:3105-0:274:3239","b:2:2788-0:274:3239","b:2:8329-0:274:3239","b:2:3094-0:274:3239","b:2:3100-0:274:3239","b:2:2785-0:274:3239","b:5:778-0:274:3239","0:145","0:281","0:278"]}}},"0:0:2538":{"id":"0:0:2538","crate_id":0,"name":"mio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[274,1]},"visibility":"public","docs":"Mio is a fast, low-level I/O library for Rust focusing on non-blocking APIs\nand event notification for building high performance I/O apps with as little\noverhead as possible over the OS abstractions.\n\n# Usage\n\nUsing Mio starts by creating a [`Poll`], which reads events from the OS and\nputs them into [`Events`]. You can handle I/O events from the OS with it.\n\nFor more detail, see [`Poll`].\n\n[`Poll`]: ../mio/struct.Poll.html\n[`Events`]: ../mio/event/struct.Events.html\n\n## Examples\n\nExamples can found in the `examples` directory of the source code, or [on\nGitHub].\n\n[on GitHub]: https://github.com/tokio-rs/mio/tree/master/examples\n\n## Guide\n\nA getting started guide is available in the [`guide`] module.\n\n## Available features\n\nThe available features are described in the [`features`] module.","links":{"`guide`":"0:181:2431","`features`":"0:180:2415"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms,\nunused_imports, dead_code)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:101:2396","0:180:2415","0:181:2431","0:173-0:131:2400","0:174-0:182:2401","0:176-0:60:218","0:177-0:62:2402","0:178-0:246:2403","0:179-0:266:2404"],"is_stripped":false}}},"b:5:778-0:246:2403":{"id":"b:5:778-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:774:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:780:4087","5:781:4088","5:782:4089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:29:2722":{"id":"0:29:2722","crate_id":0,"name":"remove","span":{"filename":"src/interest.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Removes `other` `Interest` from `self`.\n\nReturns `None` if the set would be empty after removing `other`.\n\n```\nuse mio::Interest;\n\nconst RW_INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n\n// As long a one interest remain this will return `Some`.\nlet w_interest = RW_INTERESTS.remove(Interest::READABLE).unwrap();\nassert!(!w_interest.is_readable());\nassert!(w_interest.is_writable());\n\n// Removing all interests from the set will return `None`.\nassert_eq!(w_interest.remove(Interest::WRITABLE), None);\n\n// Its also possible to remove multiple interests at once.\nassert_eq!(RW_INTERESTS.remove(RW_INTERESTS), None);\n```","links":{},"attrs":["#[must_use =\n\"this returns the result of the operation, without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177-0:62:2402":{"id":"0:177-0:62:2402","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,21],"end":[67,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"poll::Registry","name":"Registry","id":"0:62:2402","glob":false}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[203,0],"end":[224,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","is_sorted_by","sum","rev","try_reduce","partition_in_place","min_by_key","count","fuse","map_while","filter","step_by","cmp","is_sorted_by_key","product","unzip","ne","find","is_partitioned","max","inspect","take","filter_map","chain","collect","__iterator_get_unchecked","cmp_by","copied","find_map","size_hint","try_fold","max_by","by_ref","scan","eq","enumerate","zip","next_chunk","map","partial_cmp_by","cloned","try_find","try_for_each","max_by_key","try_collect","flat_map","peekable","intersperse","last","eq_by","partial_cmp","cycle","position","fold","collect_into","min","flatten","skip_while","intersperse_with","advance_by","skip","all","le","is_sorted","array_chunks","lt","rposition","ge","reduce","partition","min_by","any","map_windows","take_while","for_each","nth"],"trait":{"name":"Iterator","id":"2:8501:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:147:184","0:148:1222","0:149:3361","0:150:598"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3351:3984-0:62:2402":{"id":"a:2:3351:3984-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3351:3984-0:274:3239":{"id":"a:2:3351:3984-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:168-0:270:3238":{"id":"0:168-0:270:3238","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[8,0],"end":[8,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::event::Event","name":"Event","id":"0:270:3238","glob":false}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2867:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77:3087":{"id":"0:77:3087","crate_id":0,"name":"deregister","span":{"filename":"src/poll.rs","begin":[692,4],"end":[698,5]},"visibility":"public","docs":"Deregister an [`event::Source`] with the `Poll` instance.\n\nWhen an event source is deregistered, the `Poll` instance will no longer\nmonitor it for readiness state changes. Deregistering clears up any\ninternal resources needed to track the handle.  After an explicit call\nto this method completes, it is guaranteed that the token previously\nregistered to this handle will not be returned by a future poll, so long\nas a happens-before relationship is established between this call and\nthe poll.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nA handle can be passed back to `register` after it has been\nderegistered; however, it must be passed back to the **same** `Poll`\ninstance, otherwise the behavior is unspecified.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\npoll.registry().deregister(&mut socket)?;\n\nlet mut events = Events::with_capacity(1024);\n\n// Set a timeout because this poll should never receive any events.\npoll.poll(&mut events, Some(Duration::from_secs(1)))?;\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{"`event::Source`":"0:159:3048"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2909:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:260:1327"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90:857":{"id":"0:90:857","crate_id":0,"name":"from","span":{"filename":"src/token.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:780:4087":{"id":"5:780:4087","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2785-0:266:2404":{"id":"b:2:2785-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:3516"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2730":{"id":"0:116:2730","crate_id":0,"name":"is_lio","span":{"filename":"src/event/event.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns true if the event contains LIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but only FreeBSD supports LIO. On\nFreeBSD this method checks the `EVFILT_LIO` flag.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:8331:184":{"id":"2:8331:184","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:8501:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:159:3048":{"id":"0:159:3048","crate_id":0,"name":"Source","span":{"filename":"src/event/source.rs","begin":[75,0],"end":[112,1]},"visibility":"public","docs":"An event source that may be registered with [`Registry`].\n\nTypes that implement `event::Source` can be registered with\n`Registry`. Users of Mio **should not** use the `event::Source` trait\nfunctions directly. Instead, the equivalent functions on `Registry` should\nbe used.\n\nSee [`Registry`] for more details.\n\n[`Registry`]: ../struct.Registry.html\n\n# Implementing `event::Source`\n\nEvent sources are always backed by system handles, such as sockets or other\nsystem handles. These `event::Source`s will be monitored by the system\nselector. An implementation of `Source` will almost always delegates to a\nlower level handle. Examples of this are [`TcpStream`]s, or the *unix only*\n[`SourceFd`].\n\n[`TcpStream`]: ../net/struct.TcpStream.html\n[`SourceFd`]: ../unix/struct.SourceFd.html\n\n# Dropping `event::Source`s\n\nAll `event::Source`s, unless otherwise specified, need to be [deregistered]\nbefore being dropped for them to not leak resources. This goes against the\nnormal drop behaviour of types in Rust which cleanup after themselves, e.g.\na `File` will close itself. However since deregistering needs access to\n[`Registry`] this cannot be done while being dropped.\n\n[deregistered]: ../struct.Registry.html#method.deregister\n\n# Examples\n\nImplementing `Source` on a struct containing a socket:\n\n```ignore\nuse mio::{Interest, Registry, Token};\nuse mio::event::Source;\nuse mio::net::TcpStream;\n\nuse std::io;\n\n# #[allow(dead_code)]\npub struct MySource {\n    socket: TcpStream,\n}\n\nimpl Source for MySource {\n    fn register(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `register` call to `socket`\n        self.socket.register(registry, token, interests)\n    }\n\n    fn reregister(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `reregister` call to `socket`\n        self.socket.reregister(registry, token, interests)\n    }\n\n    fn deregister(&mut self, registry: &Registry) -> io::Result<()> {\n        // Delegate the `deregister` call to `socket`\n        self.socket.deregister(registry)\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:160:3044","0:161:3071","0:162:3087"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:163"]}}},"2:13831:35173":{"id":"2:13831:35173","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13437:14980","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::match_indices":"2:13828:35172"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44740:8220","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13798:29395":{"id":"2:13798:29395","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13227:8136","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:182:2401":{"id":"b:2:3094-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:180:2415":{"id":"0:180:2415","crate_id":0,"name":"features","span":{"filename":"src/lib.rs","begin":[104,0],"end":[104,16]},"visibility":"public","docs":"# Mio's optional features.\n\nThis document describes the available features in Mio.\n\n## `os-poll` (disabled)\n\nMio by default provides only a shell implementation that `panic!`s the\nmoment it is actually run. To run it requires OS support, this is\nenabled by activating the `os-poll` feature.\n\nThis makes `Poll`, `Registry` and `Waker` functional.\n\n## `os-ext` (disabled)\n\n`os-ext` enables additional OS specific facilities. These facilities can\nbe found in the `unix` and `windows` module.\n\n## Network types (disabled)\n\nThe `net` feature enables networking primitives in the `net` module.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"0:161:3071":{"id":"0:161:3071","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[97,4],"end":[102,24]},"visibility":"default","docs":"Re-register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::reregister`] instead. Implementors should handle\nre-registration by either delegating the call to another `Source` type.\n\n[`Registry::reregister`]: ../struct.Registry.html#method.reregister","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:5703:15216":{"id":"5:5703:15216","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:30616":{"id":"5:5721:30616","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13869:29266"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:827":{"id":"0:41:827","crate_id":0,"name":"fmt","span":{"filename":"src/interest.rs","begin":[145,4],"end":[201,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[276,0],"end":[435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2917","0:67:1350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13840:35177":{"id":"2:13840:35177","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42674:3828-0:60:218":{"id":"a:2:42674:3828-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:3828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:147:184":{"id":"0:147:184","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[204,4],"end":[204,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"0:150:598":{"id":"0:150:598","crate_id":0,"name":"count","span":{"filename":"src/event/events.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:2401":{"id":"0:182:2401","crate_id":0,"name":"Interest","span":{"filename":"src/interest.rs","begin":[17,0],"end":[17,31]},"visibility":"public","docs":"Interest used in registering.\n\nInterest are used in [registering] [`event::Source`]s with [`Poll`], they\nindicate what readiness should be monitored for. For example if a socket is\nregistered with [readable] interests and the socket becomes writable, no\nevent will be returned from a call to [`poll`].\n\n[registering]: struct.Registry.html#method.register\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[readable]: struct.Interest.html#associatedconstant.READABLE\n[`poll`]: struct.Poll.html#method.poll","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:3316:260-0:182:2401","a:2:42673:3829-0:182:2401","a:2:32876:3652-0:182:2401","a:2:3351:3984-0:182:2401","a:2:32818:248-0:182:2401","a:2:42674:3828-0:182:2401","b:2:3959-0:182:2401","b:2:3090-0:182:2401","b:2:2820-0:182:2401","b:2:2817-0:182:2401","b:2:3105-0:182:2401","b:2:2788-0:182:2401","b:2:3094-0:182:2401","b:2:3100-0:182:2401","b:2:2785-0:182:2401","b:5:778-0:182:2401","0:186","0:187","0:35","0:191","0:189","0:40","0:185","0:38","0:193","0:195"]}}},"a:2:3316:260-0:182:2401":{"id":"a:2:3316:260-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:142:184":{"id":"0:142:184","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[195,4],"end":[195,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"b:2:3094-0:246:2403":{"id":"b:2:3094-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,40],"end":[131,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2872:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:2730":{"id":"0:33:2730","crate_id":0,"name":"is_lio","span":{"filename":"src/interest.rs","begin":[117,4],"end":[119,5]},"visibility":"public","docs":"Returns true if `Interest` contains LIO readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:2724":{"id":"0:109:2724","crate_id":0,"name":"is_readable","span":{"filename":"src/event/event.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Returns true if the event contains readable readiness.\n\n# Notes\n\nOut-of-band (OOB) data also triggers readable events. But most\napplications don't actually read OOB data, this could leave an\napplication open to a Denial-of-Service (Dos) attack, see\n<https://github.com/sandstorm-io/sandstorm-website/blob/58f93346028c0576e8147627667328eaaf4be9fa/_posts/2015-04-08-osx-security-bug.md>.\nHowever because Mio uses edge-triggers it will not result in an infinite\nloop as described in the article above.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2994":{"id":"0:86:2994","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[748,4],"end":[750,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4929:2743","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:29387":{"id":"2:13765:29387","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13767:29391","str::split_at_mut":"2:13766:29388"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:722":{"id":"0:188:722","crate_id":0,"name":"eq","span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:246:2403":{"id":"b:2:3105-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:260:1327":{"id":"0:260:1327","crate_id":0,"name":"partial_cmp","span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31578:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42673:3829-0:274:3239":{"id":"a:2:42673:3829-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:3829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32876:3652-0:246:2403":{"id":"a:2:32876:3652-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:25:2686":{"id":"0:25:2686","crate_id":0,"name":"READABLE","span":{"filename":"src/interest.rs","begin":[29,4],"end":[29,91]},"visibility":"public","docs":"Returns a `Interest` set representing readable interests.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:26:2688":{"id":"0:26:2688","crate_id":0,"name":"WRITABLE","span":{"filename":"src/interest.rs","begin":[32,4],"end":[32,91]},"visibility":"public","docs":"Returns a `Interest` set representing writable interests.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:110:2726":{"id":"0:110:2726","crate_id":0,"name":"is_writable","span":{"filename":"src/event/event.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Returns true if the event contains writable readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2788-0:266:2404":{"id":"b:2:2788-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:27525"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2817-0:274:3239":{"id":"b:2:2817-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2815:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2819:27524"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3105-0:182:2401":{"id":"b:2:3105-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32820:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13801:29397":{"id":"2:13801:29397","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13437:14980","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::split":"2:13795:29393"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44590:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:4027":{"id":"2:13791:4027","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13860:35183":{"id":"2:13860:35183","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13870:29268":{"id":"2:13870:29268","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:39719"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:60:218":{"id":"b:2:3094-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:178-0:246:2403":{"id":"0:178-0:246:2403","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"token::Token","name":"Token","id":"0:246:2403","glob":false}}},"5:782:4089":{"id":"5:782:4089","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13752:35165":{"id":"2:13752:35165","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3316:260-0:270:3238":{"id":"a:2:3316:260-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:148:1222":{"id":"0:148:1222","crate_id":0,"name":"next","span":{"filename":"src/event/events.rs","begin":[206,4],"end":[214,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8501:189","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:270:3238":{"id":"b:2:3959-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32818:248-0:266:2404":{"id":"a:2:32818:248-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32876:3652-0:266:2404":{"id":"a:2:32876:3652-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32818:248-0:62:2402":{"id":"a:2:32818:248-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3100-0:266:2404":{"id":"b:2:3100-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13795:29393":{"id":"2:13795:29393","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13437:14980","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::split_whitespace":"2:13773:34118","str::rsplit":"2:13801:29397"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44572:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[729,0],"end":[733,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:181:2431":{"id":"0:181:2431","crate_id":0,"name":"guide","span":{"filename":"src/lib.rs","begin":[130,0],"end":[130,13]},"visibility":"public","docs":"# Getting started guide.\n\nIn this guide we'll do the following:\n\n1. Create a [`Poll`] instance (and learn what it is).\n2. Register an [event source].\n3. Create an event loop.\n\nAt the end you'll have a very small (but quick) TCP server that accepts\nconnections and then drops (disconnects) them.\n\n## 1. Creating a `Poll` instance\n\nUsing Mio starts by creating a [`Poll`] instance, which monitors events\nfrom the OS and puts them into [`Events`]. This allows us to execute I/O\noperations based on what operations are ready.\n\n[`Poll`]: ../struct.Poll.html\n[`Events`]: ../event/struct.Events.html\n\n```ignore\n# use mio::{Poll, Events};\n# fn main() -> std::io::Result<()> {\n// `Poll` allows for polling of readiness events.\nlet poll = Poll::new()?;\n// `Events` is collection of readiness `Event`s and can be filled by\n// calling `Poll::poll`.\nlet events = Events::with_capacity(128);\n# drop((poll, events));\n# Ok(())\n# }\n```\n\nFor example if we're using a [`TcpListener`],  we'll only want to\nattempt to accept an incoming connection *iff* any connections are\nqueued and ready to be accepted. We don't want to waste our time if no\nconnections are ready.\n\n[`TcpListener`]: ../net/struct.TcpListener.html\n\n## 2. Registering event source\n\nAfter we've created a [`Poll`] instance that monitors events from the OS\nfor us, we need to provide it with a source of events. This is done by\nregistering an [event source]. As the name “event source” suggests it is\na source of events which can be polled using a `Poll` instance. On Unix\nsystems this is usually a file descriptor, or a socket/handle on\nWindows.\n\nIn the example below we'll use a [`TcpListener`] for which we'll receive\nan event (from [`Poll`]) once a connection is ready to be accepted.\n\n[event source]: ../event/trait.Source.html\n\n```ignore\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest};\n# fn main() -> std::io::Result<()> {\n# let poll = Poll::new()?;\n# let address = \"127.0.0.1:0\".parse().unwrap();\n// Create a `TcpListener`, binding it to `address`.\nlet mut listener = TcpListener::bind(address)?;\n\n// Next we register it with `Poll` to receive events for it. The `SERVER`\n// `Token` is used to determine that we received an event for the listener\n// later on.\nconst SERVER: Token = Token(0);\npoll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n# Ok(())\n# }\n```\n\nMultiple event sources can be [registered] (concurrently), so we can\nmonitor multiple sources at a time.\n\n[registered]: ../struct.Registry.html#method.register\n\n## 3. Creating the event loop\n\nAfter we've created a [`Poll`] instance and registered one or more\n[event sources] with it, we can [poll] it for events. Polling for events\nis simple, we need a container to store the events: [`Events`] and need\nto do something based on the polled events (this part is up to you, we\ncan't do it all!). If we do this in a loop we've got ourselves an event\nloop.\n\nThe example below shows the event loop in action, completing our small\nTCP server.\n\n[poll]: ../struct.Poll.html#method.poll\n[event sources]: ../event/trait.Source.html\n\n```ignore\n# use std::io;\n# use std::time::Duration;\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest, Events};\n# fn main() -> io::Result<()> {\n# let mut poll = Poll::new()?;\n# let mut events = Events::with_capacity(128);\n# let address = \"127.0.0.1:0\".parse().unwrap();\n# let mut listener = TcpListener::bind(address)?;\n# const SERVER: Token = Token(0);\n# poll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n// Start our event loop.\nloop {\n    // Poll the OS for events, waiting at most 100 milliseconds.\n    poll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n    // Process each event.\n    for event in events.iter() {\n        // We can use the token we previously provided to `register` to\n        // determine for which type the event is.\n        match event.token() {\n            SERVER => loop {\n                // One or more connections are ready, so we'll attempt to\n                // accept them (in a loop).\n                match listener.accept() {\n                    Ok((connection, address)) => {\n                        println!(\"Got a connection from: {}\", address);\n#                       drop(connection);\n                    },\n                    // A \"would block error\" is returned if the operation\n                    // is not ready, so we'll stop trying to accept\n                    // connections.\n                    Err(ref err) if would_block(err) => break,\n                    Err(err) => return Err(err),\n                }\n            }\n#           _ => unreachable!(),\n        }\n    }\n#   return Ok(());\n}\n\nfn would_block(err: &io::Error) -> bool {\n    err.kind() == io::ErrorKind::WouldBlock\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13807:35170":{"id":"2:13807:35170","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13437:14980","str::split":"2:13795:29393","prim@char":"1:12478:490","str::split_terminator":"2:13804:35169"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44640:8214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13819:29404":{"id":"2:13819:29404","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2917":{"id":"0:66:2917","crate_id":0,"name":"registry","span":{"filename":"src/poll.rs","begin":[331,4],"end":[333,5]},"visibility":"public","docs":"Create a separate `Registry` which can be used to register\n`event::Source`s.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13868:29265":{"id":"2:13868:29265","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3351:3984-0:246:2403":{"id":"a:2:3351:3984-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:143:3359":{"id":"0:143:3359","crate_id":0,"name":"IntoIter","span":{"filename":"src/event/events.rs","begin":[196,4],"end":[196,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}},"0:73:3044":{"id":"0:73:3044","crate_id":0,"name":"register","span":{"filename":"src/poll.rs","begin":[561,4],"end":[571,5]},"visibility":"public","docs":"Register an [`event::Source`] with the `Poll` instance.\n\nOnce registered, the `Poll` instance will monitor the event source for\nreadiness state changes. When it notices a state change, it will return\na readiness event for the handle the next time [`poll`] is called.\n\nSee [`Poll`] docs for a high level overview.\n\n# Arguments\n\n`source: &mut S: event::Source`: This is the source of events that the\n`Poll` instance should monitor for readiness state changes.\n\n`token: Token`: The caller picks a token to associate with the socket.\nWhen [`poll`] returns an event for the handle, this token is included.\nThis allows the caller to map the event to its source. The token\nassociated with the `event::Source` can be changed at any time by\ncalling [`reregister`].\n\nSee documentation on [`Token`] for an example showing how to pick\n[`Token`] values.\n\n`interest: Interest`: Specifies which operations `Poll` should monitor\nfor readiness. `Poll` will only return readiness events for operations\nspecified by this argument.\n\nIf a socket is registered with readable interest and the socket becomes\nwritable, no event will be returned from [`poll`].\n\nThe readiness interest for an `event::Source` can be changed at any time\nby calling [`reregister`].\n\n# Notes\n\nCallers must ensure that if a source being registered with a `Poll`\ninstance was previously registered with that `Poll` instance, then a\ncall to [`deregister`] has already occurred. Consecutive calls to\n`register` is unspecified behavior.\n\nUnless otherwise specified, the caller should assume that once an event\nsource is registered with a `Poll` instance, it is bound to that `Poll`\ninstance for the lifetime of the event source. This remains true even\nif the event source is deregistered from the poll instance using\n[`deregister`].\n\n[`event::Source`]: ./event/trait.Source.html\n[`poll`]: struct.Poll.html#method.poll\n[`reregister`]: struct.Registry.html#method.reregister\n[`deregister`]: struct.Registry.html#method.deregister\n[`Token`]: struct.Token.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::{Duration, Instant};\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\nlet mut events = Events::with_capacity(1024);\nlet start = Instant::now();\nlet timeout = Duration::from_millis(500);\n\nloop {\n    let elapsed = start.elapsed();\n\n    if elapsed >= timeout {\n        // Connection timed out\n        return Ok(());\n    }\n\n    let remaining = timeout - elapsed;\n    poll.poll(&mut events, Some(remaining))?;\n\n    for event in &events {\n        if event.token() == Token(0) {\n            // Something (probably) happened on the socket.\n            return Ok(());\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2817-0:182:2401":{"id":"b:2:2817-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2815:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2819:27524"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:192:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[137,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOrAssign","id":"2:38783:2734","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:39:428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135:3347":{"id":"0:135:3347","crate_id":0,"name":"capacity","span":{"filename":"src/event/events.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Returns the number of `Event` values that `self` can hold.\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:35162":{"id":"2:13745:35162","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:778-0:182:2401":{"id":"b:5:778-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:774:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:780:4087","5:781:4088","5:782:4089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:112:3282":{"id":"0:112:3282","crate_id":0,"name":"is_read_closed","span":{"filename":"src/event/event.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns true if the event contains read closed readiness.\n\n# Notes\n\nRead closed readiness can be expected after any of the following have\noccurred:\n* The local stream has shutdown the read half of its socket\n* The local stream has shutdown both the read half and the write half\n  of its socket\n* The peer stream has shutdown the write half its socket; this sends a\n  `FIN` packet that has been received by the local stream\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when read half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | `EPOLLIN` and `EPOLLRDHUP` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3316:260-0:62:2402":{"id":"a:2:3316:260-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3090-0:131:2400":{"id":"b:2:3090-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:4021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32818:248-0:270:3238":{"id":"a:2:32818:248-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:144:982":{"id":"0:144:982","crate_id":0,"name":"into_iter","span":{"filename":"src/event/events.rs","begin":[198,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8325:176","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:3044":{"id":"0:165:3044","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[118,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2732":{"id":"0:34:2732","crate_id":0,"name":"is_priority","span":{"filename":"src/interest.rs","begin":[123,4],"end":[125,5]},"visibility":"public","docs":"Returns true if `Interest` contains priority readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42673:3829-0:62:2402":{"id":"a:2:42673:3829-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:3829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13810:29399":{"id":"2:13810:29399","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980","str::rsplitn":"2:13813:29401"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44676:8216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3090-0:60:218":{"id":"b:2:3090-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:4021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69:2994":{"id":"0:69:2994","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4929:2743","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1350":{"id":"0:67:1350","crate_id":0,"name":"poll","span":{"filename":"src/poll.rs","begin":[432,4],"end":[434,5]},"visibility":"public","docs":"Wait for readiness events\n\nBlocks the current thread and waits for readiness events for any of the\n[`event::Source`]s that have been registered with this `Poll` instance.\nThe function will block until either at least one readiness event has\nbeen received or `timeout` has elapsed. A `timeout` of `None` means that\n`poll` will block until a readiness event has been received.\n\nThe supplied `events` will be cleared and newly received readiness events\nwill be pushed onto the end. At most `events.capacity()` events will be\nreturned. If there are further pending readiness events, they will be\nreturned on the next call to `poll`.\n\nA single call to `poll` may result in multiple readiness events being\nreturned for a single event source. For example, if a TCP socket becomes\nboth readable and writable, it may be possible for a single readiness\nevent to be returned with both [`readable`] and [`writable`] readiness\n**OR** two separate events may be returned, one with [`readable`] set\nand one with [`writable`] set.\n\nNote that the `timeout` will be rounded up to the system clock\ngranularity (usually 1ms), and kernel scheduling delays mean that\nthe blocking interval may be overrun by a small amount.\n\nSee the [struct] level documentation for a higher level discussion of\npolling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`readable`]: struct.Interest.html#associatedconstant.READABLE\n[`writable`]: struct.Interest.html#associatedconstant.WRITABLE\n[struct]: struct.Poll.html\n[`iter`]: ./event/struct.Events.html#method.iter\n\n# Notes\n\nThis returns any errors without attempting to retry, previous versions\nof Mio would automatically retry the poll call if it was interrupted\n(if `EINTR` was returned).\n\nCurrently if the `timeout` elapses without any readiness events\ntriggering this will return `Ok(())`. However we're not guaranteeing\nthis behaviour as this depends on the OS.\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{TcpListener, SocketAddr};\nuse std::thread;\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = TcpListener::bind(addr)?;\nlet addr = server.local_addr()?.clone();\n\n// Spawn a thread to accept the socket\nthread::spawn(move || {\n    let _ = server.accept();\n});\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(addr)?;\n\n// Register the stream with `Poll`\npoll.registry().register(\n    &mut stream,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n[struct]: #","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["events",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:45334:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:246:2403":{"id":"b:2:3959-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32876:3652-0:131:2400":{"id":"a:2:32876:3652-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13825:35171":{"id":"2:13825:35171","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13437:14980","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::matches":"2:13822:3529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44794:8223","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:274:3239":{"id":"b:2:3959-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42674:3828-0:274:3239":{"id":"a:2:42674:3828-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:3828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13743:1024":{"id":"2:13743:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12478:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:8228":{"id":"2:13770:8228","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12478:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44542:8207","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:35168":{"id":"2:13776:35168","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44836:8224","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:29408":{"id":"2:13851:29408","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:8332:3359":{"id":"2:8332:3359","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:2:3100-0:274:3239":{"id":"b:2:3100-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:162:3087":{"id":"0:162:3087","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[111,4],"end":[111,68]},"visibility":"default","docs":"Deregister `self` from the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::deregister`] instead. Implementors should handle\nderegistration by delegating the call to another `Source` type.\n\n[`Registry::deregister`]: ../struct.Registry.html#method.deregister","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2909:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:194:1327"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2787:3516":{"id":"2:2787:3516","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:494":{"id":"0:251:494","crate_id":0,"name":"clone","span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[455,0],"end":[459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84:827":{"id":"0:84:827","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[730,4],"end":[732,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:29364":{"id":"2:13759:29364","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:3071":{"id":"0:75:3071","crate_id":0,"name":"reregister","span":{"filename":"src/poll.rs","begin":[629,4],"end":[639,5]},"visibility":"public","docs":"Re-register an [`event::Source`] with the `Poll` instance.\n\nRe-registering an event source allows changing the details of the\nregistration. Specifically, it allows updating the associated `token`\nand `interests` specified in previous `register` and `reregister` calls.\n\nThe `reregister` arguments fully override the previous values. In other\nwords, if a socket is registered with [`readable`] interest and the call\nto `reregister` specifies [`writable`], then read interest is no longer\nrequested for the handle.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nSee the [`register`] documentation for details about the function\narguments and see the [`struct`] docs for a high level overview of\npolling.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\n\nlet poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`, requesting readable\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\n// Reregister the socket specifying write interest instead. Even though\n// the token is the same it must be specified.\npoll.registry().reregister(\n    &mut socket,\n    Token(0),\n    Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n[`event::Source`]: ./event/trait.Source.html\n[`struct`]: struct.Poll.html\n[`register`]: struct.Registry.html#method.register\n[`readable`]: ./event/struct.Event.html#is_readable\n[`writable`]: ./event/struct.Event.html#is_writable","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176-0:60:218":{"id":"0:176-0:60:218","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,15],"end":[67,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"poll::Poll","name":"Poll","id":"0:60:218","glob":false}}},"2:13755:2710":{"id":"2:13755:2710","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:274:3239":{"id":"b:2:3094-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,9],"end":[131,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3311:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13746:35163":{"id":"2:13746:35163","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:28986":{"id":"2:13848:28986","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3316:260-0:266:2404":{"id":"a:2:3316:260-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:119:827":{"id":"0:119:827","crate_id":0,"name":"fmt","span":{"filename":"src/event/event.rs","begin":[203,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2788-0:182:2401":{"id":"b:2:2788-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:27525"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3105-0:266:2404":{"id":"b:2:3105-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2822:27524":{"id":"2:2822:27524","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[194,0],"end":[201,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8325:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:142:184","0:143:3359","0:144:982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3351:3984-0:182:2401":{"id":"a:2:3351:3984-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:137:1004":{"id":"0:137:1004","crate_id":0,"name":"iter","span":{"filename":"src/event/events.rs","begin":[148,4],"end":[153,5]},"visibility":"public","docs":"Returns an iterator over the `Event` values.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13753:350":{"id":"2:13753:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13754:26890","`u8`":"1:12497:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13867:29264":{"id":"2:13867:29264","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:3350":{"id":"2:13744:3350","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2788-0:60:218":{"id":"b:2:2788-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:27525"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2788-0:246:2403":{"id":"b:2:2788-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:27525"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:166:3071":{"id":"0:166:3071","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[127,4],"end":[134,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:35185":{"id":"2:13873:35185","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:35185"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44871:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2785-0:246:2403":{"id":"b:2:2785-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:3516"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3316:260-0:60:218":{"id":"a:2:3316:260-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3090-0:62:2402":{"id":"b:2:3090-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:4021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179-0:266:2404":{"id":"0:179-0:266:2404","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[70,0],"end":[70,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"wasi\"))]"],"deprecation":null,"inner":{"import":{"source":"waker::Waker","name":"Waker","id":"0:266:2404","glob":false}}},"0:196:501":{"id":"0:196:501","crate_id":0,"name":"cmp","span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31578:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[747,0],"end":[751,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(all(unix, not(mio_unsupported_force_poll_poll),\nnot(any(target_os = \"espidf\", target_os = \"haiku\", target_os = \"hermit\",\ntarget_os = \"nto\", target_os = \"solaris\", target_os = \"vita\")),))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4930:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:2994"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13841:35178":{"id":"2:13841:35178","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2788-0:270:3238":{"id":"b:2:2788-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:27525"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13872:29270":{"id":"2:13872:29270","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:39719"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3100-0:62:2402":{"id":"b:2:3100-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:251:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152:827":{"id":"0:152:827","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[227,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13842:35179":{"id":"2:13842:35179","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13463:14977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:29388":{"id":"2:13766:29388","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13765:29387","str::split_at_mut_checked":"2:13768:29392"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32818:248-0:182:2401":{"id":"a:2:32818:248-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5720:30615":{"id":"5:5720:30615","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13868:29265"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:2732":{"id":"0:114:2732","crate_id":0,"name":"is_priority","span":{"filename":"src/event/event.rs","begin":[150,4],"end":[152,5]},"visibility":"public","docs":"Returns true if the event contains priority readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\npriority event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLPRI`      |\n| [kqueue]      | *Not supported* |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:827":{"id":"0:71:827","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[456,4],"end":[458,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2785-0:131:2400":{"id":"b:2:2785-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:3516"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100:3235":{"id":"0:100:3235","crate_id":0,"name":"wake","span":{"filename":"src/waker.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Wake up the [`Poll`] associated with this `Waker`.\n\n[`Poll`]: struct.Poll.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32876:3652-0:270:3238":{"id":"a:2:32876:3652-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[226,0],"end":[230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13845:35180":{"id":"2:13845:35180","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2024":{"id":"0:248:2024","crate_id":0,"name":"0","span":{"filename":"src/token.rs","begin":[132,17],"end":[132,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"2:13869:29266":{"id":"2:13869:29266","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32818:248-0:246:2403":{"id":"a:2:32818:248-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13748:35164":{"id":"2:13748:35164","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13746:35163"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:3350":{"id":"0:136:3350","crate_id":0,"name":"is_empty","span":{"filename":"src/event/events.rs","begin":[120,4],"end":[122,5]},"visibility":"public","docs":"Returns `true` if `self` contains no `Event` values.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert!(events.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:4067":{"id":"2:13787:4067","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2402":{"id":"0:62:2402","crate_id":0,"name":"Registry","span":{"filename":"src/poll.rs","begin":[269,0],"end":[274,1]},"visibility":"public","docs":"Registers I/O resources.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:72","a:2:3316:260-0:62:2402","a:2:42673:3829-0:62:2402","a:2:32876:3652-0:62:2402","a:2:3351:3984-0:62:2402","a:2:32818:248-0:62:2402","a:2:42674:3828-0:62:2402","b:2:3959-0:62:2402","b:2:3090-0:62:2402","b:2:3105-0:62:2402","b:2:2788-0:62:2402","b:2:3094-0:62:2402","b:2:3100-0:62:2402","b:2:2785-0:62:2402","0:83","0:85"]}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3090-0:270:3238":{"id":"b:2:3090-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:4021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3959-0:266:2404":{"id":"b:2:3959-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13828:35172":{"id":"2:13828:35172","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13437:14980","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::rmatch_indices":"2:13831:35173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44722:8219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:35182":{"id":"2:13857:35182","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742":{"id":"2:13742","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13743:1024","2:13744:3350","2:13745:35162","2:13746:35163","2:13748:35164","2:13751:29257","2:13752:35165","2:13753:350","2:13754:26890","2:13755:2710","2:13757:29363","2:13759:29364","2:13761:29365","2:13763:35166","2:13764:35167","2:13765:29387","2:13766:29388","2:13767:29391","2:13768:29392","2:13770:8228","2:13771:8238","2:13772:7694","2:13773:34118","2:13774:34119","2:13775:9548","2:13776:35168","2:13777:34120","2:13778:29405","2:13781:29406","2:13784:29407","2:13787:4067","2:13791:4027","2:13795:29393","2:13798:29395","2:13801:29397","2:13804:35169","2:13807:35170","2:13810:29399","2:13813:29401","2:13816:29403","2:13819:29404","2:13822:3529","2:13825:35171","2:13828:35172","2:13831:35173","2:13834:35174","2:13836:35175","2:13838:35176","2:13840:35177","2:13841:35178","2:13842:35179","2:13845:35180","2:13848:28986","2:13851:29408","2:13854:35181","2:13857:35182","2:13860:35183","2:13863:35184","2:13865:29261","2:13866:29262","2:13867:29264","2:13868:29265","2:13869:29266","2:13870:29268","2:13871:29269","2:13872:29270","2:13873:35185","2:13875:9642","2:13876:35186"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42674:3828-0:246:2403":{"id":"a:2:42674:3828-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:3828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3100-0:270:3238":{"id":"b:2:3100-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:8333:982":{"id":"2:8333:982","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42673:3829-0:246:2403":{"id":"a:2:42673:3829-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:3829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42674:3828-0:270:3238":{"id":"a:2:42674:3828-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:3828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3100-0:246:2403":{"id":"b:2:3100-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2785-0:270:3238":{"id":"b:2:2785-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:3516"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,26],"end":[16,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2872:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13761:29365":{"id":"2:13761:29365","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:185":{"id":"0:185","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,9],"end":[16,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3311:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3100-0:60:218":{"id":"b:2:3100-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[461,0],"end":[727,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:3044","0:75:3071","0:77:3087","0:79:3092"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13757:29363":{"id":"2:13757:29363","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32820:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:280:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2819:27524":{"id":"2:2819:27524","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13863:35184":{"id":"2:13863:35184","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13398:148","`FromStr`":"2:13397:3872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13397:3872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13397:3872","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:2400":{"id":"0:131:2400","crate_id":0,"name":"Events","span":{"filename":"src/event/events.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"A collection of readiness events.\n\n`Events` is passed as an argument to [`Poll::poll`] and will be used to\nreceive any new readiness events received since the last poll. Usually, a\nsingle `Events` instance is created at the same time as a [`Poll`] and\nreused on each call to [`Poll::poll`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n#\n# assert!(events.is_empty());\n\n// Register `event::Source`s with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:133","a:2:3316:260-0:131:2400","a:2:42673:3829-0:131:2400","a:2:32876:3652-0:131:2400","a:2:3351:3984-0:131:2400","a:2:32818:248-0:131:2400","a:2:42674:3828-0:131:2400","b:2:3959-0:131:2400","b:2:3090-0:131:2400","b:2:3105-0:131:2400","b:2:2788-0:131:2400","b:2:3094-0:131:2400","b:2:3100-0:131:2400","b:2:2785-0:131:2400","0:151","0:140"]}}},"2:13866:29262":{"id":"2:13866:29262","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40484:15055","Self::is_ascii":"2:13865:29261"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40484:15055","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:35883":{"id":"5:5718:35883","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3419","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3419","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:3092":{"id":"0:79:3092","crate_id":0,"name":"try_clone","span":{"filename":"src/poll.rs","begin":[704,4],"end":[710,5]},"visibility":"public","docs":"Creates a new independently owned `Registry`.\n\nEvent sources registered with this `Registry` will be registered with\nthe original `Registry` and `Poll` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2785-0:274:3239":{"id":"b:2:2785-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2787:3516"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13772:7694":{"id":"2:13772:7694","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44558:4194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:90:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3351:3984-0:131:2400":{"id":"a:2:3351:3984-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5702:35879":{"id":"5:5702:35879","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3419","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3419","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:494":{"id":"0:192:494","crate_id":0,"name":"clone","span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:3291":{"id":"0:113:3291","crate_id":0,"name":"is_write_closed","span":{"filename":"src/event/event.rs","begin":[128,4],"end":[130,5]},"visibility":"public","docs":"Returns true if the event contains write closed readiness.\n\n# Notes\n\nOn [epoll] this is essentially a check for `EPOLLHUP` flag as the\nlocal stream shutting down its write half does not trigger this event.\n\nOn [kqueue] the local stream shutting down the write half of its\nsocket will trigger this event.\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when write half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | only `EPOLLERR`, or |\n|               | `EPOLLOUT` and `EPOLLERR` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2817-0:246:2403":{"id":"b:2:2817-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2815:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2819:27524"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42674:3828-0:266:2404":{"id":"a:2:42674:3828-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:3828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13777:34120":{"id":"2:13777:34120","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44864:8227","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3090-0:274:3239":{"id":"b:2:3090-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3093:4021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2903:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:262:501"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13875:9642":{"id":"2:13875:9642","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:9642"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44880:8153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:778-0:270:3238":{"id":"b:5:778-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:774:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:780:4087","5:781:4088","5:782:4089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3104:1852":{"id":"2:3104:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2820-0:246:2403":{"id":"b:2:2820-0:246:2403","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3311:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2815:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2822:27524"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3090-0:266:2404":{"id":"b:2:3090-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:4021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32818:248-0:131:2400":{"id":"a:2:32818:248-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42674:3828-0:131:2400":{"id":"a:2:42674:3828-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:3828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[449,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(all(unix, not(mio_unsupported_force_poll_poll),\nnot(any(target_os = \"espidf\", target_os = \"haiku\", target_os = \"hermit\",\ntarget_os = \"nto\", target_os = \"solaris\", target_os = \"vita\")),))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4930:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:2994"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2867:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:188:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3105-0:62:2402":{"id":"b:2:3105-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256:722":{"id":"0:256:722","crate_id":0,"name":"eq","span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:269:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32876:3652-0:60:218":{"id":"a:2:32876:3652-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3959-0:131:2400":{"id":"b:2:3959-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42673:3829-0:60:218":{"id":"a:2:42673:3829-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:3829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:280:827":{"id":"0:280:827","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2817-0:270:3238":{"id":"b:2:2817-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2815:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2819:27524"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32876:3652-0:62:2402":{"id":"a:2:32876:3652-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:273:494":{"id":"0:273:494","crate_id":0,"name":"clone","span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:2404":{"id":"0:266:2404","crate_id":0,"name":"Waker","span":{"filename":"src/waker.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Waker allows cross-thread waking of [`Poll`].\n\nWhen created it will cause events with [`readable`] readiness and the\nprovided `token` if [`wake`] is called, possibly from another thread.\n\n[`Poll`]: struct.Poll.html\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`wake`]: struct.Waker.html#method.wake\n\n# Notes\n\n`Waker` events are only guaranteed to be delivered while the `Waker` value\nis alive.\n\nOnly a single `Waker` can be active per [`Poll`], if multiple threads need\naccess to the `Waker` it can be shared via for example an `Arc`. What\nhappens if multiple `Waker`s are registered with the same `Poll` is\nunspecified.\n\n# Implementation notes\n\nOn platforms that support kqueue this will use the `EVFILT_USER` event\nfilter, see [implementation notes of `Poll`] to see what platforms support\nkqueue. On Linux it uses [eventfd].\n\n[implementation notes of `Poll`]: struct.Poll.html#implementation-notes\n[eventfd]: https://man7.org/linux/man-pages/man2/eventfd.2.html\n\n# Examples\n\nWake a [`Poll`] instance from another thread.\n\n```ignore\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nuse std::thread;\nuse std::time::Duration;\nuse std::sync::Arc;\n\nuse mio::{Events, Token, Poll, Waker};\n\nconst WAKE_TOKEN: Token = Token(10);\n\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(2);\n\nlet waker = Arc::new(Waker::new(poll.registry(), WAKE_TOKEN)?);\n\n// We need to keep the Waker alive, so we'll create a clone for the\n// thread we create below.\nlet waker1 = waker.clone();\nlet handle = thread::spawn(move || {\n    // Working hard, or hardly working?\n    thread::sleep(Duration::from_millis(500));\n\n    // Now we'll wake the queue on the other thread.\n    waker1.wake().expect(\"unable to wake\");\n});\n\n// On our current thread we'll poll for events, without a timeout.\npoll.poll(&mut events, None)?;\n\n// After about 500 milliseconds we should be awoken by the other thread and\n// get a single event.\nassert!(!events.is_empty());\nlet waker_event = events.iter().next().unwrap();\nassert!(waker_event.is_readable());\nassert_eq!(waker_event.token(), WAKE_TOKEN);\n# handle.join().unwrap();\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:97","a:2:3316:260-0:266:2404","a:2:42673:3829-0:266:2404","a:2:32876:3652-0:266:2404","a:2:3351:3984-0:266:2404","a:2:32818:248-0:266:2404","a:2:42674:3828-0:266:2404","b:2:3959-0:266:2404","b:2:3090-0:266:2404","b:2:3105-0:266:2404","b:2:2788-0:266:2404","b:2:3094-0:266:2404","b:2:3100-0:266:2404","b:2:2785-0:266:2404","0:268"]}}},"0:269:827":{"id":"0:269:827","crate_id":0,"name":"fmt","span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:3238":{"id":"0:270:3238","crate_id":0,"name":"Event","span":{"filename":"src/event/event.rs","begin":[17,0],"end":[19,1]},"visibility":"public","docs":"A readiness event.\n\n`Event` is a readiness state paired with a [`Token`]. It is returned by\n[`Poll::poll`].\n\nFor more documentation on polling and events, see [`Poll`].\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n[`Token`]: ../struct.Token.html","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:107","a:2:3316:260-0:270:3238","a:2:42673:3829-0:270:3238","a:2:32876:3652-0:270:3238","a:2:3351:3984-0:270:3238","a:2:32818:248-0:270:3238","a:2:42674:3828-0:270:3238","b:2:3959-0:270:3238","b:2:3090-0:270:3238","b:2:2817-0:270:3238","b:2:3105-0:270:3238","b:2:2788-0:270:3238","b:2:3094-0:270:3238","b:2:3100-0:270:3238","b:2:2785-0:270:3238","b:5:778-0:270:3238","0:272","0:118"]}}},"a:2:3316:260-0:131:2400":{"id":"a:2:3316:260-0:131:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13764:35167":{"id":"2:13764:35167","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12484:1765","crate::ops::IndexMut":"2:3621:4123","str::slice_unchecked":"2:13763:35166"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:8238":{"id":"2:13771:8238","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12478:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44548:8208","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:60:218":{"id":"b:2:3959-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42674:3828-0:62:2402":{"id":"a:2:42674:3828-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:3828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13751:29257":{"id":"2:13751:29257","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12960:14981"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2790:27525":{"id":"2:2790:27525","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[21,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:2394","0:109:2724","0:110:2726","0:111:3267","0:112:3282","0:113:3291","0:114:2732","0:115:2728","0:116:2730"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13822:3529":{"id":"2:13822:3529","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13437:14980","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::rmatches":"2:13825:35171"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44776:8222","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:26890":{"id":"2:13754:26890","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12497:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32876:3652-0:274:3239":{"id":"a:2:32876:3652-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:28:310":{"id":"0:28:310","crate_id":0,"name":"add","span":{"filename":"src/interest.rs","begin":[68,4],"end":[70,5]},"visibility":"public","docs":"Add together two `Interest`.\n\nThis does the same thing as the `BitOr` implementation, but is a\nconstant function.\n\n```\nuse mio::Interest;\n\nconst INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n# fn silent_dead_code_warning(_: Interest) { }\n# silent_dead_code_warning(INTERESTS)\n```","links":{},"attrs":["#[allow(clippy::should_implement_trait)]","#[must_use =\n\"this returns the result of the operation, without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[128,0],"end":[135,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:34630:2733","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:210","0:37:427"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3094-0:62:2402":{"id":"b:2:3094-0:62:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:253:827":{"id":"0:253:827","crate_id":0,"name":"fmt","span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2396":{"id":"0:212:2396","crate_id":0,"name":"event","span":{"filename":"src/sys/shell/selector.rs","begin":[78,0],"end":[78,13]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(clippy::trivially_copy_pass_by_ref)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"0:134:3346":{"id":"0:134:3346","crate_id":0,"name":"with_capacity","span":{"filename":"src/event/events.rs","begin":[92,4],"end":[96,5]},"visibility":"public","docs":"Return a new `Events` capable of holding up to `capacity` events.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Events","id":"0:131:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1208":{"id":"0:98:1208","crate_id":0,"name":"new","span":{"filename":"src/waker.rs","begin":[84,4],"end":[88,5]},"visibility":"public","docs":"Create a new `Waker`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:35166":{"id":"2:13763:35166","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12484:1765","str::slice_mut_unchecked":"2:13764:35167","crate::ops::Index":"2:40131:4122"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2820-0:182:2401":{"id":"b:2:2820-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3311:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2815:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2822:27524"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115:2728":{"id":"0:115:2728","crate_id":0,"name":"is_aio","span":{"filename":"src/event/event.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns true if the event contains AIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms support AIO.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | *Not supported* |\n| [kqueue]<sup>1</sup> | `EVFILT_AIO` |\n\n1: Only supported on DragonFly BSD, FreeBSD, iOS and macOS.\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:182:2401":{"id":"b:2:3959-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3105-0:270:3238":{"id":"b:2:3105-0:270:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3961:1865":{"id":"2:3961:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40300:7169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:35174":{"id":"2:13834:35174","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:29401":{"id":"2:13813:29401","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12478:490","str::splitn":"2:13810:29399","self::pattern":"2:13437:14980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44694:8217","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:14978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3103:149":{"id":"2:3103:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:32:2728":{"id":"0:32:2728","crate_id":0,"name":"is_aio","span":{"filename":"src/interest.rs","begin":[111,4],"end":[113,5]},"visibility":"public","docs":"Returns true if `Interest` contains AIO readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32818:248-0:60:218":{"id":"a:2:32818:248-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:283:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31:2726":{"id":"0:31:2726","crate_id":0,"name":"is_writable","span":{"filename":"src/interest.rs","begin":[105,4],"end":[107,5]},"visibility":"public","docs":"Returns true if the value includes writable readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:34118":{"id":"2:13773:34118","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13774:34119"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44846:8225","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:60:218":{"id":"b:2:3105-0:60:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[27,0],"end":[126,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:2686","0:26:2688","0:27:2694","0:28:310","0:29:2722","0:30:2724","0:31:2726","0:32:2728","0:33:2730","0:34:2732"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3094-0:266:2404":{"id":"b:2:3094-0:266:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:8329-0:274:3239":{"id":"b:2:8329-0:274:3239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8501:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8325:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:8331:184","2:8332:3359","2:8333:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:101:2396":{"id":"0:101:2396","crate_id":0,"name":"event","span":{"filename":"src/event/mod.rs","begin":[1,0],"end":[10,29]},"visibility":"public","docs":"Readiness event types and utilities.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:168-0:270:3238","0:170-0:131:2400","0:171-0:274:3239","0:172-0:159:3048"],"is_stripped":false}}},"2:13836:35175":{"id":"2:13836:35175","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42674:3828-0:182:2401":{"id":"a:2:42674:3828-0:182:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:3828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13781:29406":{"id":"2:13781:29406","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:14980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:8535:4193":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:577:9630":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:1848:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:10926:4315":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:8225:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3387:1270":{"crate_id":2,"path":["core","ops"],"kind":"module"},"11:292:8085":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7055:8039":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5224:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6157:7589":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:894:8633":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:16211:5376":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:14858:4983":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:7084:15011":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11415:7555":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:41263:8163":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:5800:6809":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:15035:5016":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3531:4222":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"14:186:21575":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:31199:4007":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:23000:34204":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"11:983:8061":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8254:8267":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:6719:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"14:0:3427":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9366:28966":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12859:8001":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46821:7392":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13081:8558":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:13192:8630":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:689:9644":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:42752:8199":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"16:2746:5550":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:6950:7652":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:32877:3988":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2805:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:47726:7470":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:4314:4169":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:5652:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:42402:7316":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:6193:8118":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11578:8567":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13118:4689":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5151:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11420:8561":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:10957:8270":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"18:491:7951":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:2338:36550":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:32784:8786":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:6792:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:3318:8094":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:623:36764":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2157:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2658:5546":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:40902:8154":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13634:4727":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6850:7647":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1539:6082":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:5551:14964":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:545:6032":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10548:4581":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:601:8803":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:11832:8136":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:12484:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:23678:7091":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:24147:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:8011:5579":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:666:4570":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:47676:7468":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:3351:3984":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"11:1885:8093":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:44776:8222":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11925:4623":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:8206:5569":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13156:8627":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:34976:4112":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:16311:5410":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7835:22503":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13013:8622":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:3867:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13514:22572":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8270:4206":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:47773:7473":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6406:8018":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:507:4441":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:10302:34697":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6610:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13591:4723":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7935:8062":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5626:8831":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:11997:8825":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7369:5573":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:12504:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:15956:5292":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:9299:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3907:4338":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:14482:4912":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13005:4686":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12940:4680":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:42542:7317":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:10962:8272":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2878:5556":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5051:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:47374:7431":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4818:6901":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:8357:4163":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10515:22568":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:6429:8838":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"15:288:9543":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5357:6446":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"9:380:21482":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2638:5545":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:44548:8208":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"8:0:3422":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:3012:21633":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6678:8659":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:2722:5549":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:23531:9734":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:6813:3359":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:9496:3634":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:589:4449":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11804:8575":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:598:36763":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:8260:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5301:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:41372:8178":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15753:5239":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44880:8153":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7258:35102":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"14:31:8699":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:8548:4195":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:41159:4194":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:43654:4133":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:13227:8136":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2618:5544":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11311:3633":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:8742:7525":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:3080:36573":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14916:4993":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:763:8091":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:45486:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:4354:3239":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2127:7055":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:23368:3553":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"15:306:9547":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:44329:8792":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:5420:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:10695:4587":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7220:7653":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:23612:7085":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:8230:22505":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:11909:8770":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:3046:21634":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:2490:9726":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:45500:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5117:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11456:4603":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:6756:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:15674:5217":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:47191:7424":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:14546:4921":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:851:8710":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:8609:5583":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:39472:4117":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:16611:5484":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:11997:8583":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12975:4681":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4921:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:40943:33500":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:10116:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:3802:4130":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:41793:3594":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:12037:8217":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:8118:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:6021:8718":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:31205:7096":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:22165:34928":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:23656:7089":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:15159:5035":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2231:7056":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4932:3573":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8091:9693":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:4888:15032":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:5105:9787":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:5083:5607":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:3580:3649":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:46806:7391":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1684:6181":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:5307:8829":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12107:7979":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12121:7980":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8004:9734":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6590:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"10:36:5904":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"18:538:4446":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:15539:5191":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44398:8793":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6441:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:6486:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5387:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:23039:9906":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:38893:4116":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13348:8008":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:4324:9569":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:11859:8281":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:6502:15528":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:7292:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10728:4588":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12259:22672":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"5:1777:35065":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:7524:8718":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:23096:9896":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14219:4847":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:1703:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"9:470:21480":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:8207:7512":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14901:4989":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13450:4713":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:22372:7061":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:651:4441":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:6819:3598":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6040:5566":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:3058:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10417:22565":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:1136:8716":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:5506:35065":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:2533:5902":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:45006:8239":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:8393:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3419:4120":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:3124:21635":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:2988:5561":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:969:9661":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:13027:8624":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:22193:9818":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:12495:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:41786:8192":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:1378:8713":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13932:4791":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:9340:8875":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5265:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5575:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:8148:5581":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:2405:8542":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6360:6602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:4692:4303":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2909:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11877:4616":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"9:345:21496":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:15857:5265":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5346:5616":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:41342:8175":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:491:5998":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:11789:4195":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6571:8020":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:16534:5470":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:16592:4774":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:4009:8825":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:47819:7477":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:47898:7488":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:344:9552":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:22163:34926":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:3073:4087":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2075:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8005:7510":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42320:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:1667:6174":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5280:5614":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:7945:29015":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:544:7856":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11538:4605":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:14946:4996":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:2394:3359":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:963:8705":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:564:6042":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14042:4811":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:3693:3239":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:8102:5748":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8071:9646":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:3668:4181":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14459:4907":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10822:4590":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3416:4119":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:4194:4092":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:0:3429":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:43935:4316":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6939:8029":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8243:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11865:8282":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13221:22569":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:22640:9820":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:6911:7650":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:1625:6145":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6335:7608":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:44722:8219":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:46597:7371":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7539:8060":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:6946:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4104:9745":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:36852:4113":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11274:7535":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:16001:5303":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:10886:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:46544:7364":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40051:4095":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:10409:8878":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:7804:36750":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:45162:8248":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:427:9560":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:9195:3359":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:15076:5021":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"20:210:3866":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"0:0:2538":{"crate_id":0,"path":["mio"],"kind":"module"},"16:6901:8028":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:9414:3593":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:41301:8168":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2640:4204":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:321:8536":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8200:8265":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"20:293:3864":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"17:15724:5232":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:6705:3595":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6543:6709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13305:4707":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:42508:7711":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:16191:5373":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"11:2275:8061":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:45090:8242":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5740:4581":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8567:8863":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:4265:5595":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"0:180:2415":{"crate_id":0,"path":["mio","features"],"kind":"module"},"1:3440:4213":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:5058:5606":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:12051:8772":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:14795:4975":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:14626:4932":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:663:4092":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:47845:7479":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6873:5640":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:15620:5203":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:41817:8194":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6792:8025":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:4831:8111":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12224:7988":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:2872:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6428:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15495:5186":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:7094:15012":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:7900:8846":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14506:4913":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12748:8618":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:43425:4145":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8195:8851":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:7580:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12710:8615":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:15147:5031":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10486:22567":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:8525:8073":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:43082:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:1646:8095":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:16172:5367":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3342:4214":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15063:5020":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:47883:7487":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7367:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2327:4179":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:4063:8718":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:15089:5022":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:1865:8813":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10563:4582":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2298:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:23437:33509":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:155:7854":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12279:8596":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:113:9539":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:23733:2675":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"type_alias"},"2:43644:7324":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:13173:8218":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:2256:8098":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:2246:9625":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:41779:8191":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5334:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:16633:5489":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6737:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:23209:7873":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:7795:31819":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:8790:7337":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:3142:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"11:357:9555":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:14437:4906":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:8055:8693":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:5868:2409":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:41116:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:45304:8259":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:44826:4191":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:40163:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:5405:14960":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:14831:4980":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1551:6091":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:2323:8713":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:2815:4005":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:8043:4635":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4947:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11901:4621":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:7512:8109":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:7807:31816":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:12961:22698":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5349:6445":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:6806:8120":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:32876:3652":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:2804:7051":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:7233:35062":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:16574:4764":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:8007:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3593:4178":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:44992:8236":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10777:8551":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:12944:8776":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:1063:36729":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:8853:34701":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41132:15274":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:813:8705":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:6967:5565":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6460:22496":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12582:4667":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:12503:1958":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:8025:7511":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:1338:8540":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:22360:9734":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:23379:34050":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:1643:6157":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:15966:5295":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:41385:8179":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:32809:3048":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12334:8602":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:10307:34667":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:31231:33518":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:2120:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11552:8565":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15880:5270":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:12023:8216":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:8314:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12735:8617":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:46725:7379":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"2:906:3556":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:41121:7703":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5462:6508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:42804:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:45312:8261":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:4239:5594":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:3650:4141":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7421:22501":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6651:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40971:8155":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10393:22564":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:1489:6058":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:40981:7702":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4997:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:41420:4459":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22139:34920":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:5255:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10367:22563":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:47146:7423":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:8633:22507":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:40958:7301":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"7:0:1948":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11280:8559":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:10447:4134":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:34245:4106":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8661:6888":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:16302:5406":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12203:7986":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"11:1866:8718":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:3853:8548":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:47573:7465":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:3331:36446":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:44501:8797":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47647:7467":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:14054:4812":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11123:36762":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:8284:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12081:7976":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:10997:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:14611:4929":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:5989:3590":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:7584:7686":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4988:3575":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:16364:5419":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:43738:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:11464:7969":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:3394:3637":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:980:8708":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:40185:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:43759:3909":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:9442:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:2948:5559":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:14345:4890":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12305:7989":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:42885:3239":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:3070:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6631:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15135:4678":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:7424:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:7463:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7383:5686":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:23129:9895":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:7504:3359":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:507:29045":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8561:8861":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11744:7337":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"6:7984:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:523:6021":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:5469:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11502:4604":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:8326:7042":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:44542:8207":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:44491:8143":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2419:7060":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:41827:7303":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:26547:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6710:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"14:159:8699":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13397:4710":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"20:350:3871":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"2:40243:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11970:8581":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:5662:8833":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:13458:14978":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13168:8628":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11629:4607":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:10665:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:44977:8230":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5521:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6981:5582":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:43721:4133":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:877:3239":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12391:4631":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:2666:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13969:4797":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:2126:8713":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7279:7667":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:7027:5643":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:15694:5221":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:1117:35065":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:42599:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:10660:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:2465:5532":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2318:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:16727:5513":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14268:4872":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:16276:5397":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7977:5577":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:15314:5057":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45610:7355":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:44408:8140":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:698:7959":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:44418:8794":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:47747:7471":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43671:7335":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:2712:4205":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:7422:29039":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:9333:8874":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12162:7983":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:1219:8539":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6694:8662":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5142:5609":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:1899:8814":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:4511:4169":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4934:3574":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"15:327:21590":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9218:7538":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10802:4194":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:754:7968":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:955:8703":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7209:8044":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:41808:4222":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:2513:9733":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:23579:7082":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:41088:8160":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:47220:7425":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:6659:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:7284:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11004:7547":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:7833:31817":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"11:123:8084":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4984:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:33772:4105":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13094:4688":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:22988:9905":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:481:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:5539:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6513:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6779:5636":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:2787:4207":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8624:8864":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:44531:7712":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:14932:4994":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:12501:1872":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:7747:8752":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:3611:4180":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:41054:8159":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13536:4678":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:9581:8815":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:14417:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15105:5024":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4110:9744":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:10282:7708":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:6398:6629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12951:8006":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:3297:36449":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11221:8558":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:15120:5028":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:16799:4791":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"14:7:8699":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43193:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:996:3239":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8487:4223":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2222:15238":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13756:4760":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:42712:8198":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"6:473:5990":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:7916:8686":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:4841:4304":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:1871:8732":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:6695:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:6438:22495":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11089:7536":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:11080:34600":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"5:1222:36462":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5319:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:11208:34601":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"6:6505:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6387:8636":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4560:8828":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:45141:14993":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:649:3239":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5241:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13609:4726":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:15438:5151":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:4150:5592":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:41291:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:3357:3986":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:11553:9734":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9201:7537":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:31167:7094":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:13668:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6852:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12043:8590":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:559:6040":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"9:490:5966":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1584:6113":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3659:33114":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:41000:8153":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:14392:4896":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:42342:7307":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:11346:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:1104:8713":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:7439:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:22121:4001":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:5186:3968":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11064:8556":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:0:3421":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:45549:7353":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:7612:3359":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7355:5572":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:11433:8891":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:1494:6060":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14707:4943":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:43045:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:14472:9664":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11447:8562":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:680:7955":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13661:4733":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"13:0:3420":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11033:28981":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5111:5608":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:40992:8156":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:43683:5775":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:7492:8054":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5205:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5647:5620":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:10549:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:45622:8262":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:33560:4102":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:46768:7389":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10662:4586":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:4692:5597":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:22950:9902":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:46888:7395":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8352:8855":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:2285:8101":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6729:8671":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:521:26759":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:10609:4141":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6500:21604":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13870:4781":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:46981:7400":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"14:213:8081":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5019:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44176:8206":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:3311:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:47921:7489":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13853:4779":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14415:4899":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:42374:9742":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11957:8580":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:6158:15520":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:6688:8718":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:42608:3239":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:718:4462":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:3395:4216":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:42674:3828":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:3038:15054":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:8555:4191":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:45127:8243":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2903:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:12450:9648":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1703:6188":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:5318:34786":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:45478:7352":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:14049:8778":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:7997:5578":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:32788:3905":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:41593:8189":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:47324:7429":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:15939:5288":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:40932:7701":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"11:2440:8732":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:13470:4675":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:570:6045":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:6116:4169":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:40087:4132":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:12825:7992":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10937:36755":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1569:8090":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:7554:36448":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8106:8850":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:34044:3636":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:3439:5587":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11526:8564":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:7515:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:3321:3982":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:6734:35065":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:3985:4484":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:2012:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:22662:7062":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44622:8213":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:22868:9900":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:6237:5625":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:3592:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4353:9571":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14737:4962":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5428:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6578:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10792:4467":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:5441:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13546:8632":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:890:4092":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12482:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:41199:9706":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:5351:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5529:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:2377:22628":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2818:5553":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:23002:15228":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:4302:9568":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5366:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:13397:3872":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:22775:9734":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:7495:4343":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7904:5742":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:14089:8174":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:1624:8732":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:0:3425":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:11215:34602":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:44836:8224":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12672:8609":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:1118:8715":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11820:7559":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:47034:7403":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:42704:4094":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46739:7380":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:31605:4001":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:8093:8694":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:43713:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:12027:8585":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:6305:29029":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:43411:4136":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:8272:7029":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:16180:5368":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:12500:1890":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:16678:5498":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:1578:8091":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:44481:8796":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10388:8814":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:34457:4109":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:46903:7396":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6864:22498":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:7772:7696":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:515:4444":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:16029:5311":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:41147:7704":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:4808:5599":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6606:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14559:4922":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9187:8868":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:47129:7422":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:5415:5618":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:4762:8761":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:15946:5289":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11400:4599":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:47002:7401":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:5125:4169":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:42695:4152":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11074:36757":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13944:4794":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:7326:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45288:8255":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:42893:4092":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5186:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:15:2736":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11850:8577":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:12429:7737":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11318:36756":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12722:8616":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11936:4330":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5107:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:6306:8119":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7398:36743":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5170:5610":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11719:7972":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:921:8091":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10217:22558":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:15023:5015":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:11133:29041":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:16152:5361":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46696:7377":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:15732:5235":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1641:8094":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11565:8566":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:787:8732":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:5412:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8806:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:14360:2404":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:11057:8834":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:1531:4092":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13204:8631":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:16763:5520":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"11:2513:5898":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12370:4629":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:31578:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"12:0:3426":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:1547:3359":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:9158:7535":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4896:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4671:9767":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7880:5741":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:2829:4006":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"2:41103:7302":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:3424:4121":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:689:7958":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12850:8000":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:8595:8698":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:8500:5799":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:16341:5415":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:2484:5538":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:15350:5088":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:45063:8241":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8505:4190":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"18:659:8530":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7728:3824":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:3832:5590":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8249:8266":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:4897:4305":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:12264:29028":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:45193:8252":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:41008:8157":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:14820:4979":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11016:4189":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:6902:35065":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:16262:5395":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:34312:4108":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:46529:7363":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12647:4669":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6702:6780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:15417:5143":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:6995:8128":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:5395:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:47804:7476":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11025:28984":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:11848:7736":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:4816:6899":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:14181:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:10608:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:4976:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12175:7984":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:32802:4304":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:14885:4987":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:1587:8717":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:681:8805":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:1862:3359":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:3309:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3589:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:33348:4103":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6523:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13797:4764":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:9460:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4990:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:47353:7430":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:7741:15052":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12604:4616":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:45358:3641":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5325:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:4919:3629":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12072:8284":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:1863:8812":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10166:22557":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:5316:5615":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5025:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:505:4524":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:8190:3864":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:532:6027":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:42971:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13837:4775":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7857:7733":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:8809:4093":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12134:7981":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:7337:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:9345:2403":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12055:4624":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:14000:4806":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:34111:3638":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:45562:34280":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:13384:8009":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7653:7687":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:1976:8817":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:45308:8260":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:4871:5601":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:10878:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"11:776:8718":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:14806:4977":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:46576:7366":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11652:4609":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:2680:15228":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:43232:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:7664:9660":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14374:4895":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:32819:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"11:750:8090":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:12568:8775":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:16230:5389":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:47830:7478":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12797:22697":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:15974:5296":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6109:8015":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:45292:8256":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:44450:8141":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6472:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:12491:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:42770:8200":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1:2005:9703":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:4544:4169":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:12065:4625":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:44518:7344":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8632:8861":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:1711:6192":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7347:5684":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6744:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:3585:5588":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:8623:8080":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"11:1558:8719":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:0:2035":{"crate_id":20,"path":["log"],"kind":"module"},"6:5488:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:2726:15301":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:7553:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:684:8807":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:45490:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:9312:28983":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:22244:9734":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6623:8023":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7987:8067":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:3108:5584":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:1696:6185":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2118:15216":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"17:13569:22573":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15924:5284":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4805:6212":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4486:8827":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12896:8003":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:10938:8887":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:8815:15207":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:4644:7870":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:12505:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:7328:31895":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"17:11431:22582":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2320:8821":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46497:7359":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:553:6037":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11293:7349":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:111:323":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"2:46952:7399":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8572:9741":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:10675:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6995:8030":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:41569:4193":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:12461:28988":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:2573:7044":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:7735:7695":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6142:22493":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:4758:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:44380:8138":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:9739:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:7334:5682":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:16320:5412":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:10921:4314":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:11982:8771":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:13150:8215":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:12493:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:6016:3591":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11285:28967":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:8175:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:4405:4169":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"14:219:5888":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:3919:8732":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11776:7974":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:297:3419":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42910:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:718:8704":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15548:5192":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:12497:1896":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12930:4678":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6062:5568":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:31220:4133":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12624:4668":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5007:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:3904:4330":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:12445:32611":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9409:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44572:4195":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:9171:7536":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:11834:7734":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:1858:3239":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:471:8537":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:16249:5390":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3299:32514":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2867:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:43927:8202":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:1652:36726":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:7391:29047":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:45175:7713":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:6679:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:4202:9750":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13321:22571":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6602:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:8162:5571":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6670:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:485:5996":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12034:8096":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:12479:1918":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:3302:33023":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11172:36759":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:15805:5248":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:5755:5622":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:3693:5589":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:43699:33516":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:45316:7349":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"0:101:2396":{"crate_id":0,"path":["mio","event"],"kind":"module"},"1:11041:8865":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:13982:4798":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12905:4677":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14357:4892":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11732:22602":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:15762:5240":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9478:3633":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:41351:8176":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:7317:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:46629:7373":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:5612:8830":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13553:4718":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:1617:3359":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:979:9663":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2898:5557":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:7962:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:42633:3824":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3551:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"9:0:3423":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1881:8732":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5088:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:40223:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:8040:36742":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:14126:4839":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:15912:5281":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:8220:8068":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:316:8535":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:6223:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:3305:33022":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:15652:5215":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5477:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:8334:3651":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:7174:9812":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:4119:8718":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6500:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:1620:8718":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7679:7688":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:22150:34922":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12094:7978":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:23315:7063":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:23486:3555":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6820:22497":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:4224:9754":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44846:8225":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7459:8676":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7041:5570":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:5630:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5165:6367":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:12606:14973":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:45483:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:706:7961":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:5814:15010":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13289:4538":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9245:9809":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12536:8606":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:43974:8204":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:22129:34920":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:41333:8174":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:14334:4887":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:12096:29024":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:8316:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:11049:8850":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:11863:8578":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:46561:7365":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:16019:5306":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11588:29018":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:6254:7597":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:2682:5547":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:23568:7081":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:44461:8795":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1530:6076":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:9145:7534":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10976:36760":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7189:22500":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:181:3863":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"16:7256:7665":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:2433:21632":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:1675:6175":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9294:8869":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6711:8663":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:2474:9721":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:2374:4092":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:1563:6099":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:80:9535":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:1081:8061":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7072:22499":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:3474:4111":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"18:96:9536":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:2779:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13780:4761":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:7468:5691":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13360:4709":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"10:44:5905":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:42845:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43156:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:1027:8713":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:7308:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4869:6263":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8878:3239":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1608:8704":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:3074:36700":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:46482:7356":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:7518:7668":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:5196:5611":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:42934:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:4927:5603":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12292:8598":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7165:5666":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:4820:6903":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:5130:15042":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:15829:5257":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:9353:7541":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:14113:4835":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:1042:21562":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:22912:9901":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:8325:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1589:6115":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:23590:7083":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:5982:3589":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:16290:5404":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14598:4927":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11814:8892":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:3037:9734":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:40311:7170":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:9260:9811":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:563:4448":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12017:8584":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:4284:4169":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:34178:4107":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:8276:15209":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:1206:9565":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"9:318:5943":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:1690:6184":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:14337:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:8029:4221":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:16138:5355":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:3586:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:909:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:22246:9814":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6061:3603":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:5494:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"14:201:14994":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:38783:2734":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:41363:8177":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:41095:8161":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:4964:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:38728:4114":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"9:435:21481":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:10667:4136":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:212:8724":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12868:4713":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:1500:6063":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:5555:14965":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:47279:7428":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:4764:5598":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:538:6030":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12148:7982":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15770:5242":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7505:8057":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:15638:5211":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:12481:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11690:8570":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:8266:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:39:9677":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:8280:15208":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:41169:8112":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:4212:9751":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:3139:4471":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14030:4810":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:47784:7474":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:42486:34051":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4957:6303":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:45019:8240":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:34630:2733":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:44558:4194":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12839:7996":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:15409:5140":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4893:9767":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5341:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:23634:7087":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"11:1878:8092":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:7841:8732":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:42624:3359":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"11:686:8703":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:47528:7464":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5217:6389":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:6891:3606":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:5377:5617":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12569:8608":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:578:6050":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:45508:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:32906:3987":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13691:4737":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:2507:5897":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:536:9625":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11376:7551":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:11351:34596":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:8278:4208":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4154:9747":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:581:4001":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12885:8002":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:4929:2743":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"type_alias"},"5:6263:4169":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13144:8626":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:0:3430":{"crate_id":17,"path":["object"],"kind":"module"},"1:11328:7550":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:14154:34522":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:43404:4135":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8813:7528":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5658:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:389:9557":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:944:8732":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6586:5630":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:9281:3592":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15572:5194":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"11:2099:8061":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:12488:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:42520:8268":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:5096:9786":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14974:5002":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:820:9661":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3389:3635":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15982:5298":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:2519:5899":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4792:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:8708:5811":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:12960:14981":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"9:226:7337":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5069:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:386:8801":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6390:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:8229:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:5304:8550":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:14066:8781":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:16775:5523":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:12490:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3564:4096":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:8582:8695":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:5276:8829":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5381:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7956:8065":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:8294:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:16202:5374":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6171:7592":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:47108:7421":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:2702:5548":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11984:8582":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:16752:5518":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:582:8538":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:47764:7472":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:1095:8712":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:1628:8731":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10778:4214":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:4340:9765":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9447:3601":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"18:573:4441":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:15556:5193":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:8063:22504":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:22635:9734":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:15990:5299":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:8295:8069":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:3316:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:6082:8011":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7966:8066":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11148:29037":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:7489:9572":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:908:8090":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:12494:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13208:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:16645:5491":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:770:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:1892:8094":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15682:5218":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13180:8629":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:6749:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:46710:7378":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10860:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:3502:8546":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12499:1884":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:14083:4823":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:7562:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:45541:7717":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:41395:8180":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:1542:21563":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43008:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11474:22583":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"6:5139:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:7857:15203":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:46664:7375":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:12492:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13889:4786":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:16164:5364":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11756:22603":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6452:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3712:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:3067:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:16486:4760":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:15869:5266":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"7:78:21475":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:46871:7394":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:23330:8146":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4970:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:1516:3239":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:44590:8137":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:45280:8253":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:5482:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:16738:5514":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:41434:8184":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3678:4184":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2782:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:23124:9897":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:23452:33517":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:23479:8150":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5450:6499":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:13732:4746":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:41444:8185":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:1001:8712":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:43269:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:16705:5507":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"20:240:3867":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"17:15430:5150":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12007:4518":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12919:8004":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:2500:9731":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:42560:7318":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:15530:5187":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5282:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:10679:4143":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43119:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3194:8757":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:2152:8733":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:47241:7426":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:45599:7719":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:7990:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"20:274:3865":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"2:40263:4125":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:3064:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"18:531:7952":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12991:4682":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:4493:8759":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:45152:8244":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14651:4934":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6893:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:7445:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:3442:8732":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"9:412:21483":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:0:3431":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:1514:6068":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:808:8717":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:44694:8217":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:3292:8093":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7302:5678":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"9:168:21548":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:380:8799":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:7635:4038":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:481:7950":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:9179:3239":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:4771:9785":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9230:9810":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:41281:8166":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:10671:4144":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"20:121:3852":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"6:6769:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6459:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:41404:8181":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13718:4745":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:986:8710":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:4950:4306":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:2469:21558":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:10669:4135":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:15707:5227":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:7568:3359":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3785:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:16619:5485":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12248:8595":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11357:22580":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:43418:4144":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5640:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:2163:8734":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:4405:8826":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:44871:8157":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:726:4465":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6096:8634":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:4892:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:15049:5017":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:43966:8203":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:32795:8787":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:46512:7360":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:959:8704":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:22264:7061":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:10824:4635":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"20:287:3868":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"6:7344:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:2770:5551":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:40135:4124":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8613:8269":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:5875:8263":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:8134:5580":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:4557:35086":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:15601:5202":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7551:22502":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:1898:8095":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11817:8576":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2548:5541":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:8025:5744":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"15:394:21596":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6878:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8828:9800":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:4900:5602":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46643:7374":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11290:36758":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:9452:3602":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:13490:4715":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"18:765:26758":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:1407:8716":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7013:8037":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:5725:4580":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4937:6294":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:125:3853":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"2:41015:15048":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"14:40:4761":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11705:8571":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:3815:34133":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:16691:5504":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15585:5199":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:3285:3239":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11072:28972":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:2225:7588":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:7006:8125":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:2414:8718":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:44956:14992":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8895:7730":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:15778:5244":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:465:5985":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:497:6001":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:16661:5496":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:2224:15239":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:10566:31849":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:40300:7169":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"14:164:21568":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:45583:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:16125:5349":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:2525:36728":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:10978:7731":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:13452:7961":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8716:3973":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"16:5253:5613":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2858:5555":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6267:7598":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:8720:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:6701:3594":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:40148:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:22777:9816":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10245:22559":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:7430:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5539:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:6137:3587":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:5447:5619":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:23082:9734":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15746:5238":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12982:22699":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8657:8865":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:10781:4216":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:5311:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7413:8675":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10331:22562":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5557:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:8176:5751":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:16716:5512":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:12523:8605":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:14772:4974":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:2115:8712":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:4613:8760":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:9488:3827":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:6822:3599":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:5353:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:15009:5014":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:2226:8541":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:665:8804":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:720:8725":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:12477:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:6381:2404":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:5119:9788":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:321:8088":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14311:4883":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:11808:8278":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5617:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:8347:8854":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:7806:9567":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:12476:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:23689:7092":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:32908:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:8217:7729":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15660:5216":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:14691:4938":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:3775:4126":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12190:7985":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:7723:7692":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11830:4605":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8478:4221":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6366:7614":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:11913:9574":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6656:8653":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:44855:8226":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:8543:8076":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:42358:7309":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:5732:8834":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:2964:5560":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12346:8603":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:41250:4192":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:14871:4984":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14298:4881":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:23667:7090":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:12761:8619":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13908:4787":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:8278:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:3344:4215":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:12065:8773":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1569:6101":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:13443:8767":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5230:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6026:5563":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:6207:2409":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:3837:4208":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:14532:4637":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6638:8643":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:5036:6342":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14844:4982":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2918:5558":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5664:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7786:36749":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10407:8879":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:22974:9734":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:4954:5604":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:282:35065":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"13:229:5896":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:12498:1878":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11015:8555":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:44676:8216":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:10273:22560":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:6536:9908":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:41319:8171":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:7534:8751":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6121:5567":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4881:6266":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4168:9749":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:5646:8832":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:44640:8214":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:643:4441":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:950:8717":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:4528:14947":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11308:8560":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:3786:35065":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:13113:8210":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:859:8711":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6747:5633":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10629:4585":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5295:6428":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:44472:8142":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9305:8871":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:6638:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:12535:8774":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:47451:7463":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5687:5621":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:3790:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6416:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3067:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:2358:8104":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:40896:8153":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5249:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:3706:4092":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:934:8718":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11605:4616":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:7819:31818":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:7494:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11951:8579":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4875:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11231:22583":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:5271:6415":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:14585:4925":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:47793:7475":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12318:8600":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:8317:22506":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5179:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:7001:8127":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:8542:4194":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:9746:8851":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:7390:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"7:31:21468":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:4182:5593":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:45573:8798":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"15:0:3428":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:10677:4142":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6802:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"5:7708:15274":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3076:7048":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:2323:4158":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:47079:7420":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:3796:4128":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:3306:5529":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:6741:3604":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:12502:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:2748:4196":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:41241:8789":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:2088:839":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"1:4332:9570":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6687:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:5011:3571":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7713:36752":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:32820:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:10121:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10295:22561":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:2044:4169":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:23499:3554":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:7407:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10842:4591":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14749:4965":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44794:8223":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2838:5554":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:3852:8733":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:3404:4104":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:9437:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10658:8867":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:3397:4217":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:10783:8552":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:5130:8549":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:16378:5422":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:6532:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:16012:5304":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:423:9559":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6835:8674":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:2354:3239":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:12686:8613":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8683:3572":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:1635:8093":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13957:4796":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:40484:15055":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:10967:8265":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:3887:4476":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:7737:32599":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:44864:8227":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"9:49:21499":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:14326:4885":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:15932:5287":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:22152:34925":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3326:8092":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:901:8535":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:6555:9909":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:8480:5798":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:14206:8782":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1507:6066":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5611:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:9601:8767":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:1579:8720":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10987:7512":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:44389:8139":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11787:8572":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:41579:8188":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:7946:5576":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:10627:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14404:4898":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6727:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:13817:4774":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:923:9662":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:8496:4189":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11113:8557":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12549:4664":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:8249:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:16809:4796":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:8868:7875":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:5604:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:42616:4092":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:12930:15286":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5222:5612":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1393:8712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:9451:3826":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"16:6806:5562":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:15898:5274":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:10784:4212":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:4216:9752":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10030:22553":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:9386:7544":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:41217:4225":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:23393:7068":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4829:6230":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:735:26757":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:45334:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8638:7516":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:8304:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:12053:7560":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5623:6582":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13920:4790":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:3061:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:12478:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5585:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5568:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:15285:5037":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:15889:5273":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13040:8625":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:5127:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12698:8614":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:1362:8061":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:23053:15228":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:3438:4212":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:670:8534":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8020:8848":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:4480:35086":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12408:22673":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:47618:7466":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:6877:3605":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:8264:5760":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7695:7689":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4806:9749":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10114:22555":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43956:7337":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:4402:5596":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:7060:15010":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:11944:8137":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:15845:5259":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:46681:7376":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:42825:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"1:6484:2409":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11261:7534":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11591:4563":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:4930:2742":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6617:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:22370:9815":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:34803:4110":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3561:4169":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:14639:4933":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:8089:3582":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2472:7588":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:10475:9204":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:16077:5348":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4890:6271":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:102:8083":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14962:5000":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12215:7987":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:1632:6149":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:11566:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:11871:8769":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11499:5963":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:32742:5901":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:4693:9768":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:2794:5552":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:2546:2745":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:7539:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2682:15229":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:517:6018":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6186:8017":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10927:8554":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:7762:5723":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5707:22492":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:1922:8815":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6203:22494":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:1521:6071":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8606:8268":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:4547:15024":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:12358:8604":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:14519:4916":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14139:4840":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:16356:5416":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:7782:8753":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5044:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4816:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:30937:3552":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:42664:3825":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:992:8711":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:1629:8092":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:44889:8156":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13054:4605":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:10673:4145":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:632:9641":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11385:22581":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:22191:9734":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:45296:8257":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:8562:8079":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7575:7541":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:14151:4843":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42780:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"5:2138:4208":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6645:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2340:8723":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:8725:3972":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:8501:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:44740:8220":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46920:7397":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:2528:5540":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:16473:4746":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:23401:7069":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1597:6120":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:22673:34929":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:1922:15165":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:45300:8258":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:3084:36574":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12233:4693":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6858:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:883:8726":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:43306:3588":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:44429:7342":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4140:9746":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:14996:5013":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4842:6240":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:9128:8867":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:32818:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:14071:4820":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:40131:4122":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:1613:3239":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22252:9817":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5512:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:1242:9566":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:41310:8170":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:8243:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:43919:4317":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4929:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11514:8563":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:7544:7685":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:5550:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:2206:8096":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"20:321:3869":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"2:23345:7064":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:23262:7874":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46850:7393":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1727:6197":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:9422:4169":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:2436:8545":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:47258:7427":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6422:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:4481:8758":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:45284:8254":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5405:6473":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:11154:29031":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"10:0:3424":{"crate_id":10,"path":["adler"],"kind":"module"},"1:9751:29044":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:46614:7372":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:8237:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3842:9743":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:6595:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:7604:3359":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:4163:3359":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:8666:3905":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"0:181:2431":{"crate_id":0,"path":["mio","guide"],"kind":"module"},"2:47019:7402":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"13:110:36730":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5803:9805":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:9134:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:14098:4829":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15837:5258":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:44159:7341":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"16:6841:8027":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:3533:4131":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:7156:8043":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:13509:14986":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:906:8536":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:12496:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:41835:8195":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:4842:5600":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6300:7604":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:900:3359":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:12485:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46935:7398":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:46789:7390":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10533:4580":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:44172:8205":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:41802:8193":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3488:4199":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:13437:14980":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:2116:4049":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"1:11976:4338":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12815:4675":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:45369:15326":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:12489:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"16:2588:5543":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4914:6285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10701:29035":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:6887:5564":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4902:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5057:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:42580:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"18:635:4461":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5503:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:5471:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:7524:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:11740:3239":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47868:7486":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:13189:8221":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2413:21605":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:14283:4876":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11677:8569":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10096:22554":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:3719:8547":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:47705:7469":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:16499:5440":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:15822:5256":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:23417:33490":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2078:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:14671:4937":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:2237:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:1924:8816":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:12065:31677":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:4162:9748":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:7890:4570":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"11:832:8708":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5196:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1657:6168":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:11764:4092":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:608:8529":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:8446:3650":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:5678:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:5861:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:15474:5181":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:5280:3587":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11025:36761":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:41224:8141":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:6397:29038":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6736:36751":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:3034:8823":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:41272:8165":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3069:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:43944:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:8262:8853":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11162:4616":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:3569:4118":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:14380:8145":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:2568:5542":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:8231:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:16789:5524":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:6419:7617":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:7740:15051":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:4118:5591":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:345:3870":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"11:1083:8714":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:38838:4115":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:4767:8762":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:4981:5605":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5288:6426":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:676:3359":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:1487:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:23623:7086":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:12786:4671":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:10441:22566":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41179:8788":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"2:23510:3568":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:613:36766":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10596:4584":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13426:4711":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:8884:7533":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12775:8620":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:4149:35065":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:5375:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8525:4192":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:11616:8558":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:5370:4224":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:479:5993":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:2297:8712":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:42901:3359":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13265:22570":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:3074:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:23601:7084":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:40293:4127":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:1597:8703":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10140:22556":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:14572:4924":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:12079:8284":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:40203:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:13463:14977":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:586:6054":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8085:9647":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:2488:9725":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:22175:34917":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:14018:4807":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2504:5539":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:4890:9789":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:2540:7687":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8618:9766":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:1113:8716":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:3621:4123":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3352:8095":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:12483:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:23645:7088":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:13069:4616":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:42673:3829":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:2448:5530":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:47960:7505":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"}},"external_crates":{"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.21/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}