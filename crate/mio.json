{"root":"0:0:2096","crate_version":"0.8.11","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/event/source.rs","begin":[114,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Source","id":"0:159:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Source","id":"0:159:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:297:2979","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:165:2602","0:166:2630","0:167:2646"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:776":{"id":"0:119:776","crate_id":0,"name":"fmt","span":{"filename":"src/event/event.rs","begin":[203,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2680-0:131:1957":{"id":"b:2:2680-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:3561"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:113:2851":{"id":"0:113:2851","crate_id":0,"name":"is_write_closed","span":{"filename":"src/event/event.rs","begin":[128,4],"end":[130,5]},"visibility":"public","docs":"Returns true if the event contains write closed readiness.\n\n# Notes\n\nOn [epoll] this is essentially a check for `EPOLLHUP` flag as the\nlocal stream shutting down its write half does not trigger this event.\n\nOn [kqueue] the local stream shutting down the write half of its\nsocket will trigger this event.\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when write half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | only `EPOLLERR`, or |\n|               | `EPOLLOUT` and `EPOLLERR` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:14775":{"id":"5:5601:14775","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13051:9197":{"id":"2:13051:9197","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4701:9197"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43482:7728","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:62:1959":{"id":"b:2:2695-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:283:462":{"id":"0:283:462","crate_id":0,"name":"clone","span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195":{"id":"0:195","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2491:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:196:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12960:27738":{"id":"2:12960:27738","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2237":{"id":"0:26:2237","crate_id":0,"name":"WRITABLE","span":{"filename":"src/interest.rs","begin":[32,4],"end":[32,91]},"visibility":"public","docs":"Returns a `Interest` set representing writable interests.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[81,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:2906","0:135:2907","0:136:2910","0:137:943","0:138:2917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:2842":{"id":"0:112:2842","crate_id":0,"name":"is_read_closed","span":{"filename":"src/event/event.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns true if the event contains read closed readiness.\n\n# Notes\n\nRead closed readiness can be expected after any of the following have\noccurred:\n* The local stream has shutdown the read half of its socket\n* The local stream has shutdown both the read half and the write half\n  of its socket\n* The peer stream has shutdown the write half its socket; this sends a\n  `FIN` packet that has been received by the local stream\n\nMethod is a best effort implementation. While some platforms may not\nreturn readiness when read half is closed, it is guaranteed that\nfalse-positives will not occur.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLHUP`, or  |\n|               | `EPOLLIN` and `EPOLLRDHUP` |\n| [kqueue]      | `EV_EOF`        |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:35346":{"id":"5:5615:35346","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:34639":{"id":"2:13014:34639","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:27736":{"id":"2:12957:27736","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2405-0:274:2799":{"id":"b:2:2405-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2407:3074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13027:28350":{"id":"2:13027:28350","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:557":{"id":"0:150:557","crate_id":0,"name":"count","span":{"filename":"src/event/events.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:3760":{"id":"5:5617:3760","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:469":{"id":"0:262:469","crate_id":0,"name":"cmp","span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30620:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:270:2798":{"id":"b:2:2690-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:274:2799":{"id":"0:274:2799","crate_id":0,"name":"Iter","span":{"filename":"src/event/events.rs","begin":[76,0],"end":[79,1]},"visibility":"public","docs":"[`Events`] iterator.\n\nThis struct is created by the [`iter`] method on [`Events`].\n\n[`Events`]: struct.Events.html\n[`iter`]: struct.Events.html#method.iter\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:31837:3206-0:274:2799","a:2:41415:3392-0:274:2799","a:2:2903:246-0:274:2799","a:2:31780:237-0:274:2799","a:2:41416:3391-0:274:2799","b:2:2695-0:274:2799","b:2:3516-0:274:2799","b:2:2408-0:274:2799","b:2:2680-0:274:2799","b:2:7952-0:274:2799","b:2:2405-0:274:2799","b:2:2684-0:274:2799","b:2:2690-0:274:2799","b:5:728-0:274:2799","0:145","0:281","0:278"]}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[202,0],"end":[230,1]},"visibility":"default","docs":"When the [alternate] flag is enabled this will print platform specific\ndetails, for example the fields of the `kevent` structure on platforms that\nuse `kqueue(2)`. Note however that the output of this implementation is\n**not** consider a part of the stable API.\n\n[alternate]: fmt::Formatter::alternate","links":{"fmt::Formatter::alternate":"2:10099:2872"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2690-0:182:1958":{"id":"b:2:2690-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:1959":{"id":"0:62:1959","crate_id":0,"name":"Registry","span":{"filename":"src/poll.rs","begin":[262,0],"end":[267,1]},"visibility":"public","docs":"Registers I/O resources.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:72","a:2:31837:3206-0:62:1959","a:2:41415:3392-0:62:1959","a:2:2903:246-0:62:1959","a:2:31780:237-0:62:1959","a:2:41416:3391-0:62:1959","b:2:2695-0:62:1959","b:2:3516-0:62:1959","b:2:2408-0:62:1959","b:2:2680-0:62:1959","b:2:2405-0:62:1959","b:2:2684-0:62:1959","b:2:2690-0:62:1959","0:85","0:83"]}}},"2:12924:34627":{"id":"2:12924:34627","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12922:34626"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7952-0:274:2799":{"id":"b:2:7952-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8095:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7954:174","2:7955:2919","2:7956:927"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:171-0:274:2799":{"id":"0:171-0:274:2799","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,31],"end":[9,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::events::Iter","name":"Iter","id":"0:274:2799","glob":false}}},"2:12971:28337":{"id":"2:12971:28337","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12609:14534","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split_whitespace":"2:12949:32746","str::rsplit":"2:12977:28341"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43174:3737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:199":{"id":"0:36:199","crate_id":0,"name":"Output","span":{"filename":"src/interest.rs","begin":[128,4],"end":[128,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:251:462":{"id":"0:251:462","crate_id":0,"name":"clone","span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2405-0:246:1960":{"id":"b:2:2405-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:3074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:776":{"id":"0:152:776","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[227,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:35344":{"id":"5:5604:35344","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1258":{"id":"0:67:1258","crate_id":0,"name":"poll","span":{"filename":"src/poll.rs","begin":[425,4],"end":[427,5]},"visibility":"public","docs":"Wait for readiness events\n\nBlocks the current thread and waits for readiness events for any of the\n[`event::Source`]s that have been registered with this `Poll` instance.\nThe function will block until either at least one readiness event has\nbeen received or `timeout` has elapsed. A `timeout` of `None` means that\n`poll` will block until a readiness event has been received.\n\nThe supplied `events` will be cleared and newly received readiness events\nwill be pushed onto the end. At most `events.capacity()` events will be\nreturned. If there are further pending readiness events, they will be\nreturned on the next call to `poll`.\n\nA single call to `poll` may result in multiple readiness events being\nreturned for a single event source. For example, if a TCP socket becomes\nboth readable and writable, it may be possible for a single readiness\nevent to be returned with both [`readable`] and [`writable`] readiness\n**OR** two separate events may be returned, one with [`readable`] set\nand one with [`writable`] set.\n\nNote that the `timeout` will be rounded up to the system clock\ngranularity (usually 1ms), and kernel scheduling delays mean that\nthe blocking interval may be overrun by a small amount.\n\nSee the [struct] level documentation for a higher level discussion of\npolling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`readable`]: struct.Interest.html#associatedconstant.READABLE\n[`writable`]: struct.Interest.html#associatedconstant.WRITABLE\n[struct]: struct.Poll.html\n[`iter`]: ./event/struct.Events.html#method.iter\n\n# Notes\n\nThis returns any errors without attempting to retry, previous versions\nof Mio would automatically retry the poll call if it was interrupted\n(if `EINTR` was returned).\n\nCurrently if the `timeout` elapses without any readiness events\ntriggering this will return `Ok(())`. However we're not guaranteeing\nthis behaviour as this depends on the OS.\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{TcpListener, SocketAddr};\nuse std::thread;\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = TcpListener::bind(addr)?;\nlet addr = server.local_addr()?.clone();\n\n// Spawn a thread to accept the socket\nthread::spawn(move || {\n    let _ = server.accept();\n});\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(addr)?;\n\n// Register the stream with `Poll`\npoll.registry().register(\n    &mut stream,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n[struct]: #","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["events",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:43940:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2903:246-0:274:2799":{"id":"a:2:2903:246-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13016:34640":{"id":"2:13016:34640","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13047:29498":{"id":"2:13047:29498","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39742"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3516-0:60:207":{"id":"b:2:3516-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2405-0:60:207":{"id":"b:2:2405-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:3074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2286":{"id":"0:116:2286","crate_id":0,"name":"is_lio","span":{"filename":"src/event/event.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns true if the event contains LIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but only FreeBSD supports LIO. On\nFreeBSD this method checks the `EVFILT_LIO` flag.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31837:3206-0:270:2798":{"id":"a:2:31837:3206-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:3206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:728-0:182:1958":{"id":"b:5:728-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:724:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:730:3626","5:731:3627","5:732:3628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2408-0:131:1957":{"id":"b:2:2408-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:27060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:142:174":{"id":"0:142:174","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[195,4],"end":[195,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"2:12922:34626":{"id":"2:12922:34626","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:7803":{"id":"2:12946:7803","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43144:7782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41416:3391-0:62:1959":{"id":"a:2:41416:3391-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:273:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12977:28341":{"id":"2:12977:28341","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12609:14534","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split":"2:12971:28337"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43192:7712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41416:3391-0:246:1960":{"id":"a:2:41416:3391-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:136:2910":{"id":"0:136:2910","crate_id":0,"name":"is_empty","span":{"filename":"src/event/events.rs","begin":[120,4],"end":[122,5]},"visibility":"public","docs":"Returns `true` if `self` contains no `Event` values.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert!(events.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2408-0:274:2799":{"id":"b:2:2408-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2410:27060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12986:28343":{"id":"2:12986:28343","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534","str::rsplitn":"2:12989:28345"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43278:7791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[143,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:41:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12944:28336":{"id":"2:12944:28336","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12943:28335"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2684-0:182:1958":{"id":"b:2:2684-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:77:2646":{"id":"0:77:2646","crate_id":0,"name":"deregister","span":{"filename":"src/poll.rs","begin":[678,4],"end":[684,5]},"visibility":"public","docs":"Deregister an [`event::Source`] with the `Poll` instance.\n\nWhen an event source is deregistered, the `Poll` instance will no longer\nmonitor it for readiness state changes. Deregistering clears up any\ninternal resources needed to track the handle.  After an explicit call\nto this method completes, it is guaranteed that the token previously\nregistered to this handle will not be returned by a future poll, so long\nas a happens-before relationship is established between this call and\nthe poll.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nA handle can be passed back to `register` after it has been\nderegistered; however, it must be passed back to the **same** `Poll`\ninstance, otherwise the behavior is unspecified.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\npoll.registry().deregister(&mut socket)?;\n\nlet mut events = Events::with_capacity(1024);\n\n// Set a timeout because this poll should never receive any events.\npoll.poll(&mut events, Some(Duration::from_secs(1)))?;\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{"`event::Source`":"0:159:2606"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2408-0:266:1961":{"id":"b:2:2408-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:27060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12921:34625":{"id":"2:12921:34625","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:728-0:246:1960":{"id":"b:5:728-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:724:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:730:3626","5:731:3627","5:732:3628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10261:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2695-0:246:1960":{"id":"b:2:2695-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2903:246-0:131:1957":{"id":"a:2:2903:246-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12947:7813":{"id":"2:12947:7813","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43150:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:776":{"id":"0:84:776","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[716,4],"end":[718,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[82,0],"end":[96,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:1141","0:100:2795"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:165:2602":{"id":"0:165:2602","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[118,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:963":{"id":"2:12919:963","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12265:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:34630":{"id":"2:12940:34630","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12271:1658","crate::ops::IndexMut":"2:3178:3664","str::slice_unchecked":"2:12939:34629"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13012:34638":{"id":"2:13012:34638","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[203,0],"end":[224,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["peekable","intersperse","ge","last","eq_by","cycle","position","fold","min_by_key","collect_into","flatten","skip_while","intersperse_with","advance_by","all","size_hint","is_sorted","array_chunks","rposition","skip","reduce","max","collect","partition","map_windows","any","take_while","partial_cmp","for_each","map","nth","count","is_sorted_by","ne","sum","rev","try_reduce","max_by","partition_in_place","fuse","map_while","filter","step_by","is_sorted_by_key","product","unzip","find","max_by_key","is_partitioned","inspect","take","filter_map","chain","__iterator_get_unchecked","cmp_by","eq","copied","find_map","try_fold","min","by_ref","scan","le","enumerate","zip","next_chunk","lt","partial_cmp_by","cloned","try_find","cmp","try_for_each","min_by","try_collect","gt","flat_map"],"trait":{"name":"Iterator","id":"2:8095:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:147:174","0:148:1155","0:149:2921","0:150:557"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:168-0:270:2798":{"id":"0:168-0:270:2798","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[8,0],"end":[8,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::event::Event","name":"Event","id":"0:270:2798","glob":false}}},"b:5:728-0:274:2799":{"id":"b:5:728-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:724:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:730:3626","5:731:3627","5:732:3628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174-0:182:1958":{"id":"0:174-0:182:1958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,0],"end":[66,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"interest::Interest","name":"Interest","id":"0:182:1958","glob":false}}},"2:13001:34634":{"id":"2:13001:34634","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12609:14534","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::matches":"2:12998:3087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43396:7798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:131:1957":{"id":"b:2:2695-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3516-0:182:1958":{"id":"b:2:3516-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41415:3392-0:60:207":{"id":"a:2:41415:3392-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:3392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2455:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:675"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2497:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:260:1239"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2680-0:274:2799":{"id":"b:2:2680-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2683:3561"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:248:1902":{"id":"0:248:1902","crate_id":0,"name":"0","span":{"filename":"src/token.rs","begin":[132,17],"end":[132,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"2:13033:34645":{"id":"2:13033:34645","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2552":{"id":"0:69:2552","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[436,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4844:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:274:2799":{"id":"b:2:2695-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41415:3392-0:266:1961":{"id":"a:2:41415:3392-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:3392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[269,0],"end":[428,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2475","0:67:1258"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12995:28348":{"id":"2:12995:28348","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:29494":{"id":"2:13042:29494","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39264:14608","Self::is_ascii":"2:13041:28091"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39264:14608","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:728-0:270:2798":{"id":"b:5:728-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:724:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:730:3626","5:731:3627","5:732:3628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137:943":{"id":"0:137:943","crate_id":0,"name":"iter","span":{"filename":"src/event/events.rs","begin":[148,4],"end":[153,5]},"visibility":"public","docs":"Returns an iterator over the `Event` values.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,40],"end":[131,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2460:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2408-0:60:207":{"id":"b:2:2408-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:27060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:246:1960":{"id":"0:246:1960","crate_id":0,"name":"Token","span":{"filename":"src/token.rs","begin":[132,0],"end":[132,28]},"visibility":"public","docs":"Associates readiness events with [`event::Source`]s.\n\n`Token` is a wrapper around `usize` and is used as an argument to\n[`Registry::register`] and [`Registry::reregister`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[`Registry::register`]: struct.Registry.html#method.register\n[`Registry::reregister`]: struct.Registry.html#method.reregister\n\n# Example\n\nUsing `Token` to track which socket generated the event. In this example,\n`HashMap` is used, but usually something like [`slab`] is better.\n\n[`slab`]: https://crates.io/crates/slab\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Interest, Poll, Token};\nuse mio::net::TcpListener;\n\nuse std::thread;\nuse std::io::{self, Read};\nuse std::collections::HashMap;\n\n// After this number of sockets is accepted, the server will shutdown.\nconst MAX_SOCKETS: usize = 32;\n\n// Pick a token that will not be used by any other socket and use that one\n// for the listener.\nconst LISTENER: Token = Token(1024);\n\n// Used to store the sockets.\nlet mut sockets = HashMap::new();\n\n// This is used to generate a unique token for a socket\nlet mut next_socket_index = 0;\n\n// The `Poll` instance\nlet mut poll = Poll::new()?;\n\n// Tcp listener\nlet mut listener = TcpListener::bind(\"127.0.0.1:0\".parse()?)?;\n\n// Register the listener\npoll.registry().register(&mut listener, LISTENER, Interest::READABLE)?;\n\n// Spawn a thread that will connect a bunch of sockets then close them\nlet addr = listener.local_addr()?;\nthread::spawn(move || {\n    use std::net::TcpStream;\n\n    // +1 here is to connect an extra socket to signal the socket to close\n    for _ in 0..(MAX_SOCKETS+1) {\n        // Connect then drop the socket\n        let _ = TcpStream::connect(addr).unwrap();\n    }\n});\n\n// Event storage\nlet mut events = Events::with_capacity(1024);\n\n// Read buffer, this will never actually get filled\nlet mut buf = [0; 256];\n\n// The main event loop\nloop {\n    // Wait for events\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        match event.token() {\n            LISTENER => {\n                // Perform operations in a loop until `WouldBlock` is\n                // encountered.\n                loop {\n                    match listener.accept() {\n                        Ok((mut socket, _)) => {\n                            // Shutdown the server\n                            if next_socket_index == MAX_SOCKETS {\n                                return Ok(());\n                            }\n\n                            // Get the token for the socket\n                            let token = Token(next_socket_index);\n                            next_socket_index += 1;\n\n                            // Register the new socket w/ poll\n                            poll.registry().register(&mut socket, token, Interest::READABLE)?;\n\n                            // Store the socket\n                            sockets.insert(token, socket);\n                        }\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop accepting\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n            token => {\n                // Always operate in a loop\n                loop {\n                    match sockets.get_mut(&token).unwrap().read(&mut buf) {\n                        Ok(0) => {\n                            // Socket is closed, remove it from the map\n                            sockets.remove(&token);\n                            break;\n                        }\n                        // Data is not actually sent in this example\n                        Ok(_) => unreachable!(),\n                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n                            // Socket is not ready anymore, stop reading\n                            break;\n                        }\n                        e => panic!(\"err={:?}\", e), // Unexpected error\n                    }\n                }\n            }\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:248:1902"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:31837:3206-0:246:1960","a:2:41415:3392-0:246:1960","a:2:2903:246-0:246:1960","a:2:31780:237-0:246:1960","a:2:41416:3391-0:246:1960","b:2:2695-0:246:1960","b:2:3516-0:246:1960","b:2:2408-0:246:1960","b:2:2680-0:246:1960","b:2:2405-0:246:1960","b:2:2684-0:246:1960","b:2:2690-0:246:1960","b:5:728-0:246:1960","0:252","0:89","0:263","0:250","0:254","0:257","0:255","0:259","0:249","0:261"]}}},"2:12980:34632":{"id":"2:12980:34632","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12609:14534","str::split":"2:12971:28337","prim@char":"1:12265:458","`DoubleEndedIterator`":"2:7986:131","str::rsplit_terminator":"2:12983:34633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43224:7788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13052:34649":{"id":"2:13052:34649","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4698:34649"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43491:7731","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2410:27060":{"id":"2:2410:27060","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2235":{"id":"0:25:2235","crate_id":0,"name":"READABLE","span":{"filename":"src/interest.rs","begin":[29,4],"end":[29,91]},"visibility":"public","docs":"Returns a `Interest` set representing readable interests.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:31:2282":{"id":"0:31:2282","crate_id":0,"name":"is_writable","span":{"filename":"src/interest.rs","begin":[104,4],"end":[106,5]},"visibility":"public","docs":"Returns true if the value includes writable readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:1239":{"id":"0:194:1239","crate_id":0,"name":"partial_cmp","span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30620:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2405-0:270:2798":{"id":"b:2:2405-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:3074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12952:34631":{"id":"2:12952:34631","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43438:7799","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:399":{"id":"0:39:399","crate_id":0,"name":"bitor_assign","span":{"filename":"src/interest.rs","begin":[138,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:776":{"id":"0:71:776","crate_id":0,"name":"fmt","span":{"filename":"src/poll.rs","begin":[442,4],"end":[444,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2680-0:182:1958":{"id":"b:2:2680-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:3561"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12942:28332":{"id":"2:12942:28332","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12941:28331","str::split_at_mut_checked":"2:12944:28336"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:730:3626":{"id":"5:730:3626","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:2:41415:3392-0:131:1957":{"id":"a:2:41415:3392-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:3392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13007:34636":{"id":"2:13007:34636","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12609:14534","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::match_indices":"2:13004:34635"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43342:7795","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:776":{"id":"0:280:776","crate_id":0,"name":"fmt","span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:1155":{"id":"0:148:1155","crate_id":0,"name":"next","span":{"filename":"src/event/events.rs","begin":[206,4],"end":[214,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8095:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:28345":{"id":"2:12989:28345","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12265:458","str::splitn":"2:12986:28343","self::pattern":"2:12609:14534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43296:7792","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13043:28092":{"id":"2:13043:28092","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31782:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:260:1239":{"id":"0:260:1239","crate_id":0,"name":"partial_cmp","span":{"filename":"src/token.rs","begin":[131,44],"end":[131,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30620:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177-0:62:1959":{"id":"0:177-0:62:1959","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,21],"end":[67,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"poll::Registry","name":"Registry","id":"0:62:1959","glob":false}}},"2:12937:28308":{"id":"2:12937:28308","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3516-0:62:1959":{"id":"b:2:3516-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2684-0:62:1959":{"id":"b:2:2684-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12974:28339":{"id":"2:12974:28339","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12425:7711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13041:28091":{"id":"2:13041:28091","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2795":{"id":"0:100:2795","crate_id":0,"name":"wake","span":{"filename":"src/waker.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Wake up the [`Poll`] associated with this `Waker`.\n\n[`Poll`]: struct.Poll.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2684-0:60:207":{"id":"b:2:2684-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12918":{"id":"2:12918","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12919:963","2:12920:2910","2:12921:34625","2:12922:34626","2:12924:34627","2:12927:28268","2:12928:34628","2:12929:334","2:12930:26441","2:12931:2266","2:12933:28306","2:12935:28307","2:12937:28308","2:12939:34629","2:12940:34630","2:12941:28331","2:12942:28332","2:12943:28335","2:12944:28336","2:12946:7803","2:12947:7813","2:12948:7244","2:12949:32746","2:12950:32749","2:12951:9110","2:12952:34631","2:12953:32767","2:12954:28349","2:12957:27736","2:12960:27738","2:12963:3606","2:12967:3567","2:12971:28337","2:12974:28339","2:12977:28341","2:12980:34632","2:12983:34633","2:12986:28343","2:12989:28345","2:12992:28347","2:12995:28348","2:12998:3087","2:13001:34634","2:13004:34635","2:13007:34636","2:13010:34637","2:13012:34638","2:13014:34639","2:13016:34640","2:13017:34641","2:13018:34642","2:13021:34643","2:13024:27077","2:13027:28350","2:13030:34644","2:13033:34645","2:13036:34646","2:13039:34647","2:13041:28091","2:13042:29494","2:13043:28092","2:13044:28088","2:13045:28087","2:13046:29497","2:13047:29498","2:13048:29499","2:13049:34648","2:13051:9197","2:13052:34649"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2405-0:131:1957":{"id":"b:2:2405-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:3074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41416:3391-0:266:1961":{"id":"a:2:41416:3391-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2686:805":{"id":"2:2686:805","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178-0:246:1960":{"id":"0:178-0:246:1960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"token::Token","name":"Token","id":"0:246:1960","glob":false}}},"b:2:2408-0:182:1958":{"id":"b:2:2408-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:27060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[715,0],"end":[719,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31837:3206-0:246:1960":{"id":"a:2:31837:3206-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:3206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:253:776":{"id":"0:253:776","crate_id":0,"name":"fmt","span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:2282":{"id":"0:110:2282","crate_id":0,"name":"is_writable","span":{"filename":"src/event/event.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Returns true if the event contains writable readiness.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2903:246-0:270:2798":{"id":"a:2:2903:246-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31837:3206-0:274:2799":{"id":"a:2:31837:3206-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:3206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2903:246-0:246:1960":{"id":"a:2:2903:246-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:147:174":{"id":"0:147:174","crate_id":0,"name":"Item","span":{"filename":"src/event/events.rs","begin":[204,4],"end":[204,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"0:181:1989":{"id":"0:181:1989","crate_id":0,"name":"guide","span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,13]},"visibility":"public","docs":"# Getting started guide.\n\nIn this guide we'll do the following:\n\n1. Create a [`Poll`] instance (and learn what it is).\n2. Register an [event source].\n3. Create an event loop.\n\nAt the end you'll have a very small (but quick) TCP server that accepts\nconnections and then drops (disconnects) them.\n\n## 1. Creating a `Poll` instance\n\nUsing Mio starts by creating a [`Poll`] instance, which monitors events\nfrom the OS and puts them into [`Events`]. This allows us to execute I/O\noperations based on what operations are ready.\n\n[`Poll`]: ../struct.Poll.html\n[`Events`]: ../event/struct.Events.html\n\n```ignore\n# use mio::{Poll, Events};\n# fn main() -> std::io::Result<()> {\n// `Poll` allows for polling of readiness events.\nlet poll = Poll::new()?;\n// `Events` is collection of readiness `Event`s and can be filled by\n// calling `Poll::poll`.\nlet events = Events::with_capacity(128);\n# drop((poll, events));\n# Ok(())\n# }\n```\n\nFor example if we're using a [`TcpListener`],  we'll only want to\nattempt to accept an incoming connection *iff* any connections are\nqueued and ready to be accepted. We don't want to waste our time if no\nconnections are ready.\n\n[`TcpListener`]: ../net/struct.TcpListener.html\n\n## 2. Registering event source\n\nAfter we've created a [`Poll`] instance that monitors events from the OS\nfor us, we need to provide it with a source of events. This is done by\nregistering an [event source]. As the name “event source” suggests it is\na source of events which can be polled using a `Poll` instance. On Unix\nsystems this is usually a file descriptor, or a socket/handle on\nWindows.\n\nIn the example below we'll use a [`TcpListener`] for which we'll receive\nan event (from [`Poll`]) once a connection is ready to be accepted.\n\n[event source]: ../event/trait.Source.html\n\n```ignore\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest};\n# fn main() -> std::io::Result<()> {\n# let poll = Poll::new()?;\n# let address = \"127.0.0.1:0\".parse().unwrap();\n// Create a `TcpListener`, binding it to `address`.\nlet mut listener = TcpListener::bind(address)?;\n\n// Next we register it with `Poll` to receive events for it. The `SERVER`\n// `Token` is used to determine that we received an event for the listener\n// later on.\nconst SERVER: Token = Token(0);\npoll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n# Ok(())\n# }\n```\n\nMultiple event sources can be [registered] (concurrently), so we can\nmonitor multiple sources at a time.\n\n[registered]: ../struct.Registry.html#method.register\n\n## 3. Creating the event loop\n\nAfter we've created a [`Poll`] instance and registered one or more\n[event sources] with it, we can [poll] it for events. Polling for events\nis simple, we need a container to store the events: [`Events`] and need\nto do something based on the polled events (this part is up to you, we\ncan't do it all!). If we do this in a loop we've got ourselves an event\nloop.\n\nThe example below shows the event loop in action, completing our small\nTCP server.\n\n[poll]: ../struct.Poll.html#method.poll\n[event sources]: ../event/trait.Source.html\n\n```ignore\n# use std::io;\n# use std::time::Duration;\n# use mio::net::TcpListener;\n# use mio::{Poll, Token, Interest, Events};\n# fn main() -> io::Result<()> {\n# let mut poll = Poll::new()?;\n# let mut events = Events::with_capacity(128);\n# let address = \"127.0.0.1:0\".parse().unwrap();\n# let mut listener = TcpListener::bind(address)?;\n# const SERVER: Token = Token(0);\n# poll.registry().register(&mut listener, SERVER, Interest::READABLE)?;\n// Start our event loop.\nloop {\n    // Poll the OS for events, waiting at most 100 milliseconds.\n    poll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n    // Process each event.\n    for event in events.iter() {\n        // We can use the token we previously provided to `register` to\n        // determine for which type the event is.\n        match event.token() {\n            SERVER => loop {\n                // One or more connections are ready, so we'll attempt to\n                // accept them (in a loop).\n                match listener.accept() {\n                    Ok((connection, address)) => {\n                        println!(\"Got a connection from: {}\", address);\n#                       drop(connection);\n                    },\n                    // A \"would block error\" is returned if the operation\n                    // is not ready, so we'll stop trying to accept\n                    // connections.\n                    Err(ref err) if would_block(err) => break,\n                    Err(err) => return Err(err),\n                }\n            }\n#           _ => unreachable!(),\n        }\n    }\n#   return Ok(());\n}\n\nfn would_block(err: &io::Error) -> bool {\n    err.kind() == io::ErrorKind::WouldBlock\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12963:3606":{"id":"2:12963:3606","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:34635":{"id":"2:13004:34635","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12609:14534","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatch_indices":"2:13007:34636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43324:7794","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:192:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12967:3567":{"id":"2:12967:3567","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31780:237-0:131:1957":{"id":"a:2:31780:237-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[136,0],"end":[141,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOrAssign","id":"2:37562:2290","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:39:399"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31837:3206-0:266:1961":{"id":"a:2:31837:3206-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:3206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12933:28306":{"id":"2:12933:28306","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2288":{"id":"0:34:2288","crate_id":0,"name":"is_priority","span":{"filename":"src/interest.rs","begin":[122,4],"end":[124,5]},"visibility":"public","docs":"Returns true if `Interest` contains priority readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:28349":{"id":"2:12954:28349","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1141":{"id":"0:98:1141","crate_id":0,"name":"new","span":{"filename":"src/waker.rs","begin":[84,4],"end":[88,5]},"visibility":"public","docs":"Create a new `Waker`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:26441":{"id":"2:12930:26441","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:62:1959":{"id":"b:2:2690-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2695-0:266:1961":{"id":"b:2:2695-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2405-0:266:1961":{"id":"b:2:2405-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:3074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:176-0:60:207":{"id":"0:176-0:60:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,15],"end":[67,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"poll::Poll","name":"Poll","id":"0:60:207","glob":false}}},"a:2:31780:237-0:274:2799":{"id":"a:2:31780:237-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3516-0:246:1960":{"id":"b:2:3516-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167:2646":{"id":"0:167:2646","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179-0:266:1961":{"id":"0:179-0:266:1961","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[70,0],"end":[70,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"wasi\"))]"],"deprecation":null,"inner":{"import":{"source":"waker::Waker","name":"Waker","id":"0:266:1961","glob":false}}},"0:30:2280":{"id":"0:30:2280","crate_id":0,"name":"is_readable","span":{"filename":"src/interest.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns true if the value includes readable readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2408-0:62:1959":{"id":"b:2:2408-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:27060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41415:3392-0:246:1960":{"id":"a:2:41415:3392-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:3392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12935:28307":{"id":"2:12935:28307","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:28335":{"id":"2:12943:28335","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12944:28336"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2698:138":{"id":"2:2698:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31708:5471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12927:28268":{"id":"2:12927:28268","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12157:14535"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:927":{"id":"0:144:927","crate_id":0,"name":"into_iter","span":{"filename":"src/event/events.rs","begin":[198,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7948:166","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:32749":{"id":"2:12950:32749","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12949:32746"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43457:7801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31837:3206-0:182:1958":{"id":"a:2:31837:3206-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:3206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,37],"end":[16,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2497:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:194:1239"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13017:34641":{"id":"2:13017:34641","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:34643":{"id":"2:13021:34643","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12949:32746":{"id":"2:12949:32746","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12950:32749"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43448:7800","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13036:34646":{"id":"2:13036:34646","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2694:1743":{"id":"2:2694:1743","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:1958":{"id":"0:182:1958","crate_id":0,"name":"Interest","span":{"filename":"src/interest.rs","begin":[17,0],"end":[17,31]},"visibility":"public","docs":"Interest used in registering.\n\nInterest are used in [registering] [`event::Source`]s with [`Poll`], they\nindicate what readiness should be monitored for. For example if a socket is\nregistered with [readable] interests and the socket becomes writable, no\nevent will be returned from a call to [`poll`].\n\n[registering]: struct.Registry.html#method.register\n[`event::Source`]: ./event/trait.Source.html\n[`Poll`]: struct.Poll.html\n[readable]: struct.Interest.html#associatedconstant.READABLE\n[`poll`]: struct.Poll.html#method.poll","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:31837:3206-0:182:1958","a:2:41415:3392-0:182:1958","a:2:2903:246-0:182:1958","a:2:31780:237-0:182:1958","a:2:41416:3391-0:182:1958","b:2:2695-0:182:1958","b:2:3516-0:182:1958","b:2:2408-0:182:1958","b:2:2680-0:182:1958","b:2:2405-0:182:1958","b:2:2684-0:182:1958","b:2:2690-0:182:1958","b:5:728-0:182:1958","0:195","0:35","0:38","0:186","0:193","0:189","0:40","0:185","0:187","0:191"]}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[441,0],"end":[445,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5600:35343":{"id":"5:5600:35343","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2979","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2979","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13049:34648":{"id":"2:13049:34648","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4700:34648"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43473:7732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41416:3391-0:131:1957":{"id":"a:2:41416:3391-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,9],"end":[131,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2898:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115:2284":{"id":"0:115:2284","crate_id":0,"name":"is_aio","span":{"filename":"src/event/event.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns true if the event contains AIO readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms support AIO.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | *Not supported* |\n| [kqueue]<sup>1</sup> | `EVFILT_AIO` |\n\n1: Only supported on DragonFly BSD, FreeBSD, iOS and macOS.\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172-0:159:2606":{"id":"0:172-0:159:2606","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[10,0],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::source::Source","name":"Source","id":"0:159:2606","glob":false}}},"2:13046:29497":{"id":"2:13046:29497","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39742"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13030:34644":{"id":"2:13030:34644","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2684-0:270:2798":{"id":"b:2:2684-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[194,0],"end":[201,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:142:174","0:143:2919","0:144:927"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12983:34633":{"id":"2:12983:34633","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12609:14534","str::split":"2:12971:28337","prim@char":"1:12265:458","str::split_terminator":"2:12980:34632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43242:7789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:14532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2680-0:270:2798":{"id":"b:2:2680-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:3561"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170-0:131:1957":{"id":"0:170-0:131:1957","crate_id":0,"name":null,"span":{"filename":"src/event/mod.rs","begin":[9,23],"end":[9,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::events::Events","name":"Events","id":"0:131:1957","glob":false}}},"0:166:2630":{"id":"0:166:2630","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[127,4],"end":[134,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7955:2919":{"id":"2:7955:2919","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:111:2827":{"id":"0:111:2827","crate_id":0,"name":"is_error","span":{"filename":"src/event/event.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":"Returns true if the event contains error readiness.\n\nError events occur when the socket enters an error state. In this case,\nthe socket will also receive a readable or writable event. Reading or\nwriting to the socket will result in an error.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\nerror event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLERR`      |\n| [kqueue]      | `EV_ERROR` and `EV_EOF` with `fflags` set to `0`. |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:2919":{"id":"0:143:2919","crate_id":0,"name":"IntoIter","span":{"filename":"src/event/events.rs","begin":[196,4],"end":[196,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}},"2:12931:2266":{"id":"2:12931:2266","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2699:1741":{"id":"2:2699:1741","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:398":{"id":"0:37:398","crate_id":0,"name":"bitor","span":{"filename":"src/interest.rs","begin":[131,4],"end":[133,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"Self"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:2798":{"id":"0:270:2798","crate_id":0,"name":"Event","span":{"filename":"src/event/event.rs","begin":[17,0],"end":[19,1]},"visibility":"public","docs":"A readiness event.\n\n`Event` is a readiness state paired with a [`Token`]. It is returned by\n[`Poll::poll`].\n\nFor more documentation on polling and events, see [`Poll`].\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n[`Token`]: ../struct.Token.html","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:107","a:2:31837:3206-0:270:2798","a:2:41415:3392-0:270:2798","a:2:2903:246-0:270:2798","a:2:31780:237-0:270:2798","a:2:41416:3391-0:270:2798","b:2:2695-0:270:2798","b:2:3516-0:270:2798","b:2:2408-0:270:2798","b:2:2680-0:270:2798","b:2:2405-0:270:2798","b:2:2684-0:270:2798","b:2:2690-0:270:2798","b:5:728-0:270:2798","0:118","0:272"]}}},"5:5618:28090":{"id":"5:5618:28090","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13044:28088"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:246:1960":{"id":"b:2:2690-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41415:3392-0:274:2799":{"id":"a:2:41415:3392-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:3392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:264:844":{"id":"0:264:844","crate_id":0,"name":"hash","span":{"filename":"src/token.rs","begin":[131,61],"end":[131,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10269:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:28331":{"id":"2:12941:28331","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12943:28335","str::split_at_mut":"2:12942:28332"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:776":{"id":"0:41:776","crate_id":0,"name":"fmt","span":{"filename":"src/interest.rs","begin":[144,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[726,0],"end":[730,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(all(unix, not(mio_unsupported_force_poll_poll),\nnot(any(target_os = \"solaris\", target_os = \"vita\"))))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4845:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:2552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2684-0:274:2799":{"id":"b:2:2684-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13010:34637":{"id":"2:13010:34637","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:182:1958":{"id":"b:2:2695-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,15],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:251:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:161:2630":{"id":"0:161:2630","crate_id":0,"name":"reregister","span":{"filename":"src/event/source.rs","begin":[97,4],"end":[102,24]},"visibility":"default","docs":"Re-register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::reregister`] instead. Implementors should handle\nre-registration by either delegating the call to another `Source` type.\n\n[`Registry::reregister`]: ../struct.Registry.html#method.reregister","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:7956:927":{"id":"2:7956:927","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2903:246-0:182:1958":{"id":"a:2:2903:246-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41416:3391-0:270:2798":{"id":"a:2:41416:3391-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2690-0:274:2799":{"id":"b:2:2690-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:192:462":{"id":"0:192:462","crate_id":0,"name":"clone","span":{"filename":"src/interest.rs","begin":[16,30],"end":[16,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:27077":{"id":"2:13024:27077","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2683:3561":{"id":"2:2683:3561","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2657:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[226,0],"end":[230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13045:28087":{"id":"2:13045:28087","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41415:3392-0:62:1959":{"id":"a:2:41415:3392-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:3392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2680-0:246:1960":{"id":"b:2:2680-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:3561"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2407:3074":{"id":"2:2407:3074","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:2280":{"id":"0:109:2280","crate_id":0,"name":"is_readable","span":{"filename":"src/event/event.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Returns true if the event contains readable readiness.\n\n# Notes\n\nOut-of-band (OOB) data also triggers readable events. But must\napplication don't actually read OOB data, this could leave an\napplication open to a Denial-of-Service (Dos) attack, see\n<https://github.com/sandstorm-io/sandstorm-website/blob/58f93346028c0576e8147627667328eaaf4be9fa/_posts/2015-04-08-osx-security-bug.md>.\nHowever because Mio uses edge-triggers it will not result in an infinite\nloop as described in the article above.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:2288":{"id":"0:114:2288","crate_id":0,"name":"is_priority","span":{"filename":"src/event/event.rs","begin":[150,4],"end":[152,5]},"visibility":"public","docs":"Returns true if the event contains priority readiness.\n\n# Notes\n\nMethod is available on all platforms, but not all platforms trigger the\npriority event.\n\nThe table below shows what flags are checked on what OS.\n\n| [OS selector] | Flag(s) checked |\n|---------------|-----------------|\n| [epoll]       | `EPOLLPRI`      |\n| [kqueue]      | *Not supported* |\n\n[OS selector]: ../struct.Poll.html#implementation-notes\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:1972":{"id":"0:180:1972","crate_id":0,"name":"features","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,16]},"visibility":"public","docs":"# Mio's optional features.\n\nThis document describes the available features in Mio.\n\n## `os-poll` (disabled)\n\nMio by default provides only a shell implementation that `panic!`s the\nmoment it is actually run. To run it requires OS support, this is\nenabled by activating the `os-poll` feature.\n\nThis makes `Poll`, `Registry` and `Waker` functional.\n\n## `os-ext` (disabled)\n\n`os-ext` enables additional OS specific facilities. These facilities can\nbe found in the `unix` and `windows` module.\n\n## Network types (disabled)\n\nThe `net` feature enables networking primitives in the `net` module.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"b:2:2405-0:62:1959":{"id":"b:2:2405-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:3074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2695-0:270:2798":{"id":"b:2:2695-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12998:3087":{"id":"2:12998:3087","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12609:14534","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatches":"2:13001:34634"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43378:7797","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256:675":{"id":"0:256:675","crate_id":0,"name":"eq","span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:469":{"id":"0:196:469","crate_id":0,"name":"cmp","span":{"filename":"src/interest.rs","begin":[16,49],"end":[16,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30620:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:2907":{"id":"0:135:2907","crate_id":0,"name":"capacity","span":{"filename":"src/event/events.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Returns the number of `Event` values that `self` can hold.\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:28089":{"id":"5:5619:28089","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13045:28087"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12939:34629":{"id":"2:12939:34629","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12271:1658","str::slice_mut_unchecked":"2:12940:34630","crate::ops::Index":"2:38910:3663"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:2606":{"id":"0:159:2606","crate_id":0,"name":"Source","span":{"filename":"src/event/source.rs","begin":[75,0],"end":[112,1]},"visibility":"public","docs":"An event source that may be registered with [`Registry`].\n\nTypes that implement `event::Source` can be registered with\n`Registry`. Users of Mio **should not** use the `event::Source` trait\nfunctions directly. Instead, the equivalent functions on `Registry` should\nbe used.\n\nSee [`Registry`] for more details.\n\n[`Registry`]: ../struct.Registry.html\n\n# Implementing `event::Source`\n\nEvent sources are always backed by system handles, such as sockets or other\nsystem handles. These `event::Source`s will be monitored by the system\nselector. An implementation of `Source` will almost always delegates to a\nlower level handle. Examples of this are [`TcpStream`]s, or the *unix only*\n[`SourceFd`].\n\n[`TcpStream`]: ../net/struct.TcpStream.html\n[`SourceFd`]: ../unix/struct.SourceFd.html\n\n# Dropping `event::Source`s\n\nAll `event::Source`s, unless otherwise specified, need to be [deregistered]\nbefore being dropped for them to not leak resources. This goes against the\nnormal drop behaviour of types in Rust which cleanup after themselves, e.g.\na `File` will close itself. However since deregistering needs access to\n[`Registry`] this cannot be done while being dropped.\n\n[deregistered]: ../struct.Registry.html#method.deregister\n\n# Examples\n\nImplementing `Source` on a struct containing a socket:\n\n```ignore\nuse mio::{Interest, Registry, Token};\nuse mio::event::Source;\nuse mio::net::TcpStream;\n\nuse std::io;\n\n# #[allow(dead_code)]\npub struct MySource {\n    socket: TcpStream,\n}\n\nimpl Source for MySource {\n    fn register(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `register` call to `socket`\n        self.socket.register(registry, token, interests)\n    }\n\n    fn reregister(&mut self, registry: &Registry, token: Token, interests: Interest)\n        -> io::Result<()>\n    {\n        // Delegate the `reregister` call to `socket`\n        self.socket.reregister(registry, token, interests)\n    }\n\n    fn deregister(&mut self, registry: &Registry) -> io::Result<()> {\n        // Delegate the `deregister` call to `socket`\n        self.socket.deregister(registry)\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:160:2602","0:161:2630","0:162:2646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:163"]}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31780:237-0:246:1960":{"id":"a:2:31780:237-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31780:237-0:270:2798":{"id":"a:2:31780:237-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:27:2243":{"id":"0:27:2243","crate_id":0,"name":"PRIORITY","span":{"filename":"src/interest.rs","begin":[51,4],"end":[51,91]},"visibility":"public","docs":"Returns a `Interest` set representing priority completion interests.","links":{},"attrs":["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"a:2:41415:3392-0:270:2798":{"id":"a:2:41415:3392-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:3392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3516-0:274:2799":{"id":"b:2:3516-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:162:2646":{"id":"0:162:2646","crate_id":0,"name":"deregister","span":{"filename":"src/event/source.rs","begin":[111,4],"end":[111,68]},"visibility":"default","docs":"Deregister `self` from the given `Registry` instance.\n\nThis function should not be called directly. Use\n[`Registry::deregister`] instead. Implementors should handle\nderegistration by delegating the call to another `Source` type.\n\n[`Registry::deregister`]: ../struct.Registry.html#method.deregister","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12992:28347":{"id":"2:12992:28347","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:295":{"id":"0:28:295","crate_id":0,"name":"add","span":{"filename":"src/interest.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":"Add together two `Interest`.\n\nThis does the same thing as the `BitOr` implementation, but is a\nconstant function.\n\n```\nuse mio::Interest;\n\nconst INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n# fn silent_dead_code_warning(_: Interest) { }\n# silent_dead_code_warning(INTERESTS)\n```","links":{},"attrs":["#[allow(clippy::should_implement_trait)]","#[must_use =\n\"this returns the result of the operation, without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41415:3392-0:182:1958":{"id":"a:2:41415:3392-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:3392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:90:805":{"id":"0:90:805","crate_id":0,"name":"from","span":{"filename":"src/token.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2284":{"id":"0:32:2284","crate_id":0,"name":"is_aio","span":{"filename":"src/interest.rs","begin":[110,4],"end":[112,5]},"visibility":"public","docs":"Returns true if `Interest` contains AIO readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:60:207":{"id":"b:2:2690-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3516-0:131:1957":{"id":"b:2:3516-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,26],"end":[16,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2460:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2096":{"id":"0:0:2096","crate_id":0,"name":"mio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[266,1]},"visibility":"public","docs":"Mio is a fast, low-level I/O library for Rust focusing on non-blocking APIs\nand event notification for building high performance I/O apps with as little\noverhead as possible over the OS abstractions.\n\n# Usage\n\nUsing Mio starts by creating a [`Poll`], which reads events from the OS and\nputs them into [`Events`]. You can handle I/O events from the OS with it.\n\nFor more detail, see [`Poll`].\n\n[`Poll`]: ../mio/struct.Poll.html\n[`Events`]: ../mio/event/struct.Events.html\n\n## Examples\n\nExamples can found in the `examples` directory of the source code, or [on\nGitHub].\n\n[on GitHub]: https://github.com/tokio-rs/mio/tree/master/examples\n\n## Guide\n\nA getting started guide is available in the [`guide`] module.\n\n## Available features\n\nThe available features are described in the [`features`] module.","links":{"`guide`":"0:181:1989","`features`":"0:180:1972"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms,\nunused_imports, dead_code)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:101:1952","0:180:1972","0:181:1989","0:173-0:131:1957","0:174-0:182:1958","0:176-0:60:207","0:177-0:62:1959","0:178-0:246:1960","0:179-0:266:1961"],"is_stripped":false}}},"0:29:2278":{"id":"0:29:2278","crate_id":0,"name":"remove","span":{"filename":"src/interest.rs","begin":[92,4],"end":[94,5]},"visibility":"public","docs":"Removes `other` `Interest` from `self`.\n\nReturns `None` if the set would be empty after removing `other`.\n\n```\nuse mio::Interest;\n\nconst RW_INTERESTS: Interest = Interest::READABLE.add(Interest::WRITABLE);\n\n// As long a one interest remain this will return `Some`.\nlet w_interest = RW_INTERESTS.remove(Interest::READABLE).unwrap();\nassert!(!w_interest.is_readable());\nassert!(w_interest.is_writable());\n\n// Removing all interests from the set will return `None`.\nassert_eq!(w_interest.remove(Interest::WRITABLE), None);\n\n// Its also possible to remove multiple interests at once.\nassert_eq!(RW_INTERESTS.remove(RW_INTERESTS), None);\n```","links":{},"attrs":["#[must_use =\n\"this returns the result of the operation, without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2286":{"id":"0:33:2286","crate_id":0,"name":"is_lio","span":{"filename":"src/interest.rs","begin":[116,4],"end":[118,5]},"visibility":"public","docs":"Returns true if `Interest` contains LIO readiness.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185":{"id":"0:185","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,9],"end":[16,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2898:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:188:675":{"id":"0:188:675","crate_id":0,"name":"eq","span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:60:207":{"id":"b:2:2695-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75:2630":{"id":"0:75:2630","crate_id":0,"name":"reregister","span":{"filename":"src/poll.rs","begin":[615,4],"end":[625,5]},"visibility":"public","docs":"Re-register an [`event::Source`] with the `Poll` instance.\n\nRe-registering an event source allows changing the details of the\nregistration. Specifically, it allows updating the associated `token`\nand `interests` specified in previous `register` and `reregister` calls.\n\nThe `reregister` arguments fully override the previous values. In other\nwords, if a socket is registered with [`readable`] interest and the call\nto `reregister` specifies [`writable`], then read interest is no longer\nrequested for the handle.\n\nThe event source must have previously been registered with this instance\nof `Poll`, otherwise the behavior is unspecified.\n\nSee the [`register`] documentation for details about the function\narguments and see the [`struct`] docs for a high level overview of\npolling.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\n\nlet poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`, requesting readable\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE)?;\n\n// Reregister the socket specifying write interest instead. Even though\n// the token is the same it must be specified.\npoll.registry().reregister(\n    &mut socket,\n    Token(0),\n    Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n[`event::Source`]: ./event/trait.Source.html\n[`struct`]: struct.Poll.html\n[`register`]: struct.Registry.html#method.register\n[`readable`]: ./event/struct.Event.html#is_readable\n[`writable`]: ./event/struct.Event.html#is_writable","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2405-0:182:1958":{"id":"b:2:2405-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:3074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[447,0],"end":[713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2602","0:75:2630","0:77:2646","0:79:2651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31780:237-0:60:207":{"id":"a:2:31780:237-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,29],"end":[131,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31782:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:2552":{"id":"0:86:2552","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/poll.rs","begin":[727,4],"end":[729,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4844:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2408-0:246:1960":{"id":"b:2:2408-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:27060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3516-0:266:1961":{"id":"b:2:3516-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:269:776":{"id":"0:269:776","crate_id":0,"name":"fmt","span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:2906":{"id":"0:134:2906","crate_id":0,"name":"with_capacity","span":{"filename":"src/event/events.rs","begin":[92,4],"end":[96,5]},"visibility":"public","docs":"Return a new `Events` capable of holding up to `capacity` events.\n\n# Examples\n\n```\nuse mio::Events;\n\nlet events = Events::with_capacity(1024);\nassert_eq!(1024, events.capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2684-0:246:1960":{"id":"b:2:2684-0:246:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:1952":{"id":"0:212:1952","crate_id":0,"name":"event","span":{"filename":"src/sys/shell/selector.rs","begin":[78,0],"end":[78,13]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(clippy::trivially_copy_pass_by_ref)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"b:2:2690-0:266:1961":{"id":"b:2:2690-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:1957":{"id":"0:131:1957","crate_id":0,"name":"Events","span":{"filename":"src/event/events.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"A collection of readiness events.\n\n`Events` is passed as an argument to [`Poll::poll`] and will be used to\nreceive any new readiness events received since the last poll. Usually, a\nsingle `Events` instance is created at the same time as a [`Poll`] and\nreused on each call to [`Poll::poll`].\n\nSee [`Poll`] for more documentation on polling.\n\n[`Poll::poll`]: ../struct.Poll.html#method.poll\n[`Poll`]: ../struct.Poll.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n#\n# assert!(events.is_empty());\n\n// Register `event::Source`s with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\nfor event in events.iter() {\n    println!(\"Got an event for {:?}\", event.token());\n}\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:133","a:2:31837:3206-0:131:1957","a:2:41415:3392-0:131:1957","a:2:2903:246-0:131:1957","a:2:31780:237-0:131:1957","a:2:41416:3391-0:131:1957","b:2:2695-0:131:1957","b:2:3516-0:131:1957","b:2:2408-0:131:1957","b:2:2680-0:131:1957","b:2:2405-0:131:1957","b:2:2684-0:131:1957","b:2:2690-0:131:1957","0:151","0:140"]}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:90:805"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31837:3206-0:131:1957":{"id":"a:2:31837:3206-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:3206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,9],"end":[75,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:280:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12920:2910":{"id":"2:12920:2910","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:34628":{"id":"2:12928:34628","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12948:7244":{"id":"2:12948:7244","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43160:3736","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31837:3206-0:62:1959":{"id":"a:2:31837:3206-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:3206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/token.rs","begin":[131,56],"end":[131,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2491:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:262:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41416:3391-0:182:1958":{"id":"a:2:41416:3391-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2903:246-0:266:1961":{"id":"a:2:2903:246-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2684-0:131:1957":{"id":"b:2:2684-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13044:28088":{"id":"2:13044:28088","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599":{"id":"5:5599","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5600:35343","5:5601:14775","5:5604:35344","5:5607:35345","5:5615:35346","5:5616:35347","5:5617:3760","5:5618:28090","5:5619:28089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2680-0:266:1961":{"id":"b:2:2680-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:3561"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/poll.rs","begin":[435,0],"end":[439,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(all(unix, not(mio_unsupported_force_poll_poll),\nnot(any(target_os = \"solaris\", target_os = \"vita\"))))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4845:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:2552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[16,15],"end":[16,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2455:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:188:675"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41416:3391-0:274:2799":{"id":"a:2:41416:3391-0:274:2799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:101:1952":{"id":"0:101:1952","crate_id":0,"name":"event","span":{"filename":"src/event/mod.rs","begin":[1,0],"end":[10,29]},"visibility":"public","docs":"Readiness event types and utilities.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:168-0:270:2798","0:170-0:131:1957","0:171-0:274:2799","0:172-0:159:2606"],"is_stripped":false}}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/waker.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:269:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108:1949":{"id":"0:108:1949","crate_id":0,"name":"token","span":{"filename":"src/event/event.rs","begin":[23,4],"end":[25,5]},"visibility":"public","docs":"Returns the event's token.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:35347":{"id":"5:5616:35347","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2979","`String`":"5:7615:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2979","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:34642":{"id":"2:13018:34642","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:14534"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12635:14531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12951:9110":{"id":"2:12951:9110","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43428:3733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31780:237-0:182:1958":{"id":"a:2:31780:237-0:182:1958","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60:207":{"id":"0:60:207","crate_id":0,"name":"Poll","span":{"filename":"src/poll.rs","begin":[257,0],"end":[259,1]},"visibility":"public","docs":"Polls for readiness events on all registered values.\n\n`Poll` allows a program to monitor a large number of [`event::Source`]s,\nwaiting until one or more become \"ready\" for some class of operations; e.g.\nreading and writing. An event source is considered ready if it is possible\nto immediately perform a corresponding operation; e.g. [`read`] or\n[`write`].\n\nTo use `Poll`, an `event::Source` must first be registered with the `Poll`\ninstance using the [`register`] method on its associated `Register`,\nsupplying readiness interest. The readiness interest tells `Poll` which\nspecific operations on the handle to monitor for readiness. A `Token` is\nalso passed to the [`register`] function. When `Poll` returns a readiness\nevent, it will include this token.  This associates the event with the\nevent source that generated the event.\n\n[`event::Source`]: ./event/trait.Source.html\n[`read`]: ./net/struct.TcpStream.html#method.read\n[`write`]: ./net/struct.TcpStream.html#method.write\n[`register`]: struct.Registry.html#method.register\n\n# Examples\n\nA basic example -- establishing a `TcpStream` connection.\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\n\nuse std::net::{self, SocketAddr};\n\n// Bind a server socket to connect to.\nlet addr: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet server = net::TcpListener::bind(addr)?;\n\n// Construct a new `Poll` handle as well as the `Events` we'll store into\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(1024);\n\n// Connect the stream\nlet mut stream = TcpStream::connect(server.local_addr()?)?;\n\n// Register the stream with `Poll`\npoll.registry().register(&mut stream, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n\n// Wait for the socket to become ready. This has to happens in a loop to\n// handle spurious wakeups.\nloop {\n    poll.poll(&mut events, None)?;\n\n    for event in &events {\n        if event.token() == Token(0) && event.is_writable() {\n            // The socket connected (probably, it could still be a spurious\n            // wakeup)\n            return Ok(());\n        }\n    }\n}\n# }\n```\n\n# Portability\n\nUsing `Poll` provides a portable interface across supported platforms as\nlong as the caller takes the following into consideration:\n\n### Spurious events\n\n[`Poll::poll`] may return readiness events even if the associated\nevent source is not actually ready. Given the same code, this may\nhappen more on some platforms than others. It is important to never assume\nthat, just because a readiness event was received, that the associated\noperation will succeed as well.\n\nIf operation fails with [`WouldBlock`], then the caller should not treat\nthis as an error, but instead should wait until another readiness event is\nreceived.\n\n### Draining readiness\n\nOnce a readiness event is received, the corresponding operation must be\nperformed repeatedly until it returns [`WouldBlock`]. Unless this is done,\nthere is no guarantee that another readiness event will be delivered, even\nif further data is received for the event source.\n\n[`WouldBlock`]: std::io::ErrorKind::WouldBlock\n\n### Readiness operations\n\nThe only readiness operations that are guaranteed to be present on all\nsupported platforms are [`readable`] and [`writable`]. All other readiness\noperations may have false negatives and as such should be considered\n**hints**. This means that if a socket is registered with [`readable`]\ninterest and either an error or close is received, a readiness event will\nbe generated for the socket, but it **may** only include `readable`\nreadiness. Also note that, given the potential for spurious events,\nreceiving a readiness event with `read_closed`, `write_closed`, or `error`\ndoesn't actually mean that a `read` on the socket will return a result\nmatching the readiness event.\n\nIn other words, portable programs that explicitly check for [`read_closed`],\n[`write_closed`], or [`error`] readiness should be doing so as an\n**optimization** and always be able to handle an error or close situation\nwhen performing the actual read operation.\n\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`writable`]: ./event/struct.Event.html#method.is_writable\n[`error`]: ./event/struct.Event.html#method.is_error\n[`read_closed`]: ./event/struct.Event.html#method.is_read_closed\n[`write_closed`]: ./event/struct.Event.html#method.is_write_closed\n\n### Registering handles\n\nUnless otherwise noted, it should be assumed that types implementing\n[`event::Source`] will never become ready unless they are registered with\n`Poll`.\n\nFor example:\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::Duration;\nuse std::thread;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut sock = TcpStream::connect(listener.local_addr()?)?;\n\nthread::sleep(Duration::from_secs(1));\n\nlet poll = Poll::new()?;\n\n// The connect is not guaranteed to have started until it is registered at\n// this point\npoll.registry().register(&mut sock, Token(0), Interest::READABLE | Interest::WRITABLE)?;\n#     Ok(())\n# }\n```\n\n### Dropping `Poll`\n\nWhen the `Poll` instance is dropped it may cancel in-flight operations for\nthe registered [event sources], meaning that no further events for them may\nbe received. It also means operations on the registered event sources may no\nlonger work. It is up to the user to keep the `Poll` instance alive while\nregistered event sources are being used.\n\n[event sources]: ./event/trait.Source.html\n\n### Accessing raw fd/socket/handle\n\nMio makes it possible for many types to be converted into a raw file\ndescriptor (fd, Unix), socket (Windows) or handle (Windows). This makes it\npossible to support more operations on the type than Mio supports, for\nexample it makes [mio-aio] possible. However accessing the raw fd is not\nwithout it's pitfalls.\n\nSpecifically performing I/O operations outside of Mio on these types (via\nthe raw fd) has unspecified behaviour. It could cause no more events to be\ngenerated for the type even though it returned `WouldBlock` (in an operation\ndirectly accessing the fd). The behaviour is OS specific and Mio can only\nguarantee cross-platform behaviour if it can control the I/O.\n\n[mio-aio]: https://github.com/asomers/mio-aio\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being considered\na breaking change, don't depend on this, it's just here to inform the user.\nCurrently the kqueue and epoll implementation support direct I/O operations\non the fd without Mio's knowledge. Windows however needs **all** I/O\noperations to go through Mio otherwise it is not able to update it's\ninternal state properly and won't generate events.\n\n### Polling without registering event sources\n\n\n*The following is **not** guaranteed, just a description of the current\nsituation!* Mio is allowed to change the following without it being\nconsidered a breaking change, don't depend on this, it's just here to inform\nthe user. On platforms that use epoll, kqueue or IOCP (see implementation\nnotes below) polling without previously registering [event sources] will\nresult in sleeping forever, only a process signal will be able to wake up\nthe thread.\n\nOn WASM/WASI this is different as it doesn't support process signals,\nfurthermore the WASI specification doesn't specify a behaviour in this\nsituation, thus it's up to the implementation what to do here. As an\nexample, the wasmtime runtime will return `EINVAL` in this situation, but\ndifferent runtimes may return different results. If you have further\ninsights or thoughts about this situation (and/or how Mio should handle it)\nplease add you comment to [pull request#1580].\n\n[event sources]: crate::event::Source\n[pull request#1580]: https://github.com/tokio-rs/mio/pull/1580\n\n# Implementation notes\n\n`Poll` is backed by the selector provided by the operating system.\n\n|      OS       |  Selector |\n|---------------|-----------|\n| Android       | [epoll]   |\n| DragonFly BSD | [kqueue]  |\n| FreeBSD       | [kqueue]  |\n| iOS           | [kqueue]  |\n| illumos       | [epoll]   |\n| Linux         | [epoll]   |\n| NetBSD        | [kqueue]  |\n| OpenBSD       | [kqueue]  |\n| Windows       | [IOCP]    |\n| macOS         | [kqueue]  |\n\nOn all supported platforms, socket operations are handled by using the\nsystem selector. Platform specific extensions (e.g. [`SourceFd`]) allow\naccessing other features provided by individual system selectors. For\nexample, Linux's [`signalfd`] feature can be used by registering the FD with\n`Poll` via [`SourceFd`].\n\nOn all platforms except windows, a call to [`Poll::poll`] is mostly just a\ndirect call to the system selector. However, [IOCP] uses a completion model\ninstead of a readiness model. In this case, `Poll` must adapt the completion\nmodel Mio's API. While non-trivial, the bridge layer is still quite\nefficient. The most expensive part being calls to `read` and `write` require\ndata to be copied into an intermediate buffer before it is passed to the\nkernel.\n\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2\n[IOCP]: https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports\n[`signalfd`]: https://man7.org/linux/man-pages/man2/signalfd.2.html\n[`SourceFd`]: unix/struct.SourceFd.html\n[`Poll::poll`]: struct.Poll.html#method.poll","links":{"std::io::ErrorKind::WouldBlock":"1:8301:3704"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:65","a:2:31837:3206-0:60:207","a:2:41415:3392-0:60:207","a:2:2903:246-0:60:207","a:2:31780:237-0:60:207","a:2:41416:3391-0:60:207","b:2:2695-0:60:207","b:2:3516-0:60:207","b:2:2408-0:60:207","b:2:2680-0:60:207","b:2:2405-0:60:207","b:2:2684-0:60:207","b:2:2690-0:60:207","0:70","0:68"]}}},"0:79:2651":{"id":"0:79:2651","crate_id":0,"name":"try_clone","span":{"filename":"src/poll.rs","begin":[690,4],"end":[696,5]},"visibility":"public","docs":"Creates a new independently owned `Registry`.\n\nEvent sources registered with this `Registry` will be registered with\nthe original `Registry` and `Poll` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:131:1957":{"id":"b:2:2690-0:131:1957","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Events","id":"0:131:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:732:3628":{"id":"5:732:3628","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41416:3391-0:60:207":{"id":"a:2:41416:3391-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:73:2602":{"id":"0:73:2602","crate_id":0,"name":"register","span":{"filename":"src/poll.rs","begin":[547,4],"end":[557,5]},"visibility":"public","docs":"Register an [`event::Source`] with the `Poll` instance.\n\nOnce registered, the `Poll` instance will monitor the event source for\nreadiness state changes. When it notices a state change, it will return\na readiness event for the handle the next time [`poll`] is called.\n\nSee [`Poll`] docs for a high level overview.\n\n# Arguments\n\n`source: &mut S: event::Source`: This is the source of events that the\n`Poll` instance should monitor for readiness state changes.\n\n`token: Token`: The caller picks a token to associate with the socket.\nWhen [`poll`] returns an event for the handle, this token is included.\nThis allows the caller to map the event to its source. The token\nassociated with the `event::Source` can be changed at any time by\ncalling [`reregister`].\n\nSee documentation on [`Token`] for an example showing how to pick\n[`Token`] values.\n\n`interest: Interest`: Specifies which operations `Poll` should monitor\nfor readiness. `Poll` will only return readiness events for operations\nspecified by this argument.\n\nIf a socket is registered with readable interest and the socket becomes\nwritable, no event will be returned from [`poll`].\n\nThe readiness interest for an `event::Source` can be changed at any time\nby calling [`reregister`].\n\n# Notes\n\nCallers must ensure that if a source being registered with a `Poll`\ninstance was previously registered with that `Poll` instance, then a\ncall to [`deregister`] has already occurred. Consecutive calls to\n`register` is unspecified behavior.\n\nUnless otherwise specified, the caller should assume that once an event\nsource is registered with a `Poll` instance, it is bound to that `Poll`\ninstance for the lifetime of the event source. This remains true even\nif the event source is deregistered from the poll instance using\n[`deregister`].\n\n[`event::Source`]: ./event/trait.Source.html\n[`poll`]: struct.Poll.html#method.poll\n[`reregister`]: struct.Registry.html#method.reregister\n[`deregister`]: struct.Registry.html#method.deregister\n[`Token`]: struct.Token.html\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# use std::net;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll, Interest, Token};\nuse mio::net::TcpStream;\nuse std::net::SocketAddr;\nuse std::time::{Duration, Instant};\n\nlet mut poll = Poll::new()?;\n\nlet address: SocketAddr = \"127.0.0.1:0\".parse()?;\nlet listener = net::TcpListener::bind(address)?;\nlet mut socket = TcpStream::connect(listener.local_addr()?)?;\n\n// Register the socket with `poll`\npoll.registry().register(\n    &mut socket,\n    Token(0),\n    Interest::READABLE | Interest::WRITABLE)?;\n\nlet mut events = Events::with_capacity(1024);\nlet start = Instant::now();\nlet timeout = Duration::from_millis(500);\n\nloop {\n    let elapsed = start.elapsed();\n\n    if elapsed >= timeout {\n        // Connection timed out\n        return Ok(());\n    }\n\n    let remaining = timeout - elapsed;\n    poll.poll(&mut events, Some(remaining))?;\n\n    for event in &events {\n        if event.token() == Token(0) {\n            // Something (probably) happened on the socket.\n            return Ok(());\n        }\n    }\n}\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"event::Source","id":"0:159:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31780:237-0:62:1959":{"id":"a:2:31780:237-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12929:334":{"id":"2:12929:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12930:26441","`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31837:3206-0:60:207":{"id":"a:2:31837:3206-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:3206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:149:2921":{"id":"0:149:2921","crate_id":0,"name":"size_hint","span":{"filename":"src/event/events.rs","begin":[216,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13039:34647":{"id":"2:13039:34647","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12570:137","`FromStr`":"2:12569:3433"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12569:3433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12569:3433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2408-0:270:2798":{"id":"b:2:2408-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:27060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13048:29499":{"id":"2:13048:29499","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39742"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7954:174":{"id":"2:7954:174","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:8095:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/event/event.rs","begin":[21,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:1949","0:109:2280","0:110:2282","0:111:2827","0:112:2842","0:113:2851","0:114:2288","0:115:2284","0:116:2286"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:160:2602":{"id":"0:160:2602","crate_id":0,"name":"register","span":{"filename":"src/event/source.rs","begin":[83,4],"end":[88,24]},"visibility":"default","docs":"Register `self` with the given `Registry` instance.\n\nThis function should not be called directly. Use [`Registry::register`]\ninstead. Implementors should handle registration by delegating the call\nto another `Source` type.\n\n[`Registry::register`]: ../struct.Registry.html#method.register","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["registry",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["token",{"resolved_path":{"name":"Token","id":"0:246:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["interests",{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3011:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:31780:237-0:266:1961":{"id":"a:2:31780:237-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[127,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:33409:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:199","0:37:398"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5607:35345":{"id":"5:5607:35345","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3516-0:270:2798":{"id":"b:2:3516-0:270:2798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2684-0:266:1961":{"id":"b:2:2684-0:266:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Waker","id":"0:266:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2693:138":{"id":"2:2693:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:173-0:131:1957":{"id":"0:173-0:131:1957","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,0],"end":[65,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"event::Events","name":"Events","id":"0:131:1957","glob":false}}},"2:3518:1756":{"id":"2:3518:1756","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39078:6729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2680-0:62:1959":{"id":"b:2:2680-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:3561"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/event/events.rs","begin":[75,16],"end":[75,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:274:2799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:283:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2903:246-0:60:207":{"id":"a:2:2903:246-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:138:2917":{"id":"0:138:2917","crate_id":0,"name":"clear","span":{"filename":"src/event/events.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Clearing all `Event` values from container explicitly.\n\n# Notes\n\nEvents are cleared before every `poll`, so it is not required to call\nthis manually.\n\n# Examples\n\n```ignore\n# use std::error::Error;\n# fn main() -> Result<(), Box<dyn Error>> {\nuse mio::{Events, Poll};\nuse std::time::Duration;\n\nlet mut events = Events::with_capacity(1024);\nlet mut poll = Poll::new()?;\n\n// Register handles with `poll`.\n\npoll.poll(&mut events, Some(Duration::from_millis(100)))?;\n\n// Clear all events.\nevents.clear();\nassert!(events.is_empty());\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:462":{"id":"0:273:462","crate_id":0,"name":"clone","span":{"filename":"src/event/event.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Event","id":"0:270:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2903:246-0:62:1959":{"id":"a:2:2903:246-0:62:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/interest.rs","begin":[27,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Interest","id":"0:182:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:2235","0:26:2237","0:27:2243","0:28:295","0:29:2278","0:30:2280","0:31:2282","0:32:2284","0:33:2286","0:34:2288"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:731:3627":{"id":"5:731:3627","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2680-0:60:207":{"id":"b:2:2680-0:60:207","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Poll","id":"0:60:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:3561"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66:2475":{"id":"0:66:2475","crate_id":0,"name":"registry","span":{"filename":"src/poll.rs","begin":[324,4],"end":[326,5]},"visibility":"public","docs":"Create a separate `Registry` which can be used to register\n`event::Source`s.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Registry","id":"0:62:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:1961":{"id":"0:266:1961","crate_id":0,"name":"Waker","span":{"filename":"src/waker.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Waker allows cross-thread waking of [`Poll`].\n\nWhen created it will cause events with [`readable`] readiness and the\nprovided `token` if [`wake`] is called, possibly from another thread.\n\n[`Poll`]: struct.Poll.html\n[`readable`]: ./event/struct.Event.html#method.is_readable\n[`wake`]: struct.Waker.html#method.wake\n\n# Notes\n\n`Waker` events are only guaranteed to be delivered while the `Waker` value\nis alive.\n\nOnly a single `Waker` can be active per [`Poll`], if multiple threads need\naccess to the `Waker` it can be shared via for example an `Arc`. What\nhappens if multiple `Waker`s are registered with the same `Poll` is\nunspecified.\n\n# Implementation notes\n\nOn platforms that support kqueue this will use the `EVFILT_USER` event\nfilter, see [implementation notes of `Poll`] to see what platforms support\nkqueue. On Linux it uses [eventfd].\n\n[implementation notes of `Poll`]: struct.Poll.html#implementation-notes\n[eventfd]: https://man7.org/linux/man-pages/man2/eventfd.2.html\n\n# Examples\n\nWake a [`Poll`] instance from another thread.\n\n```ignore\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nuse std::thread;\nuse std::time::Duration;\nuse std::sync::Arc;\n\nuse mio::{Events, Token, Poll, Waker};\n\nconst WAKE_TOKEN: Token = Token(10);\n\nlet mut poll = Poll::new()?;\nlet mut events = Events::with_capacity(2);\n\nlet waker = Arc::new(Waker::new(poll.registry(), WAKE_TOKEN)?);\n\n// We need to keep the Waker alive, so we'll create a clone for the\n// thread we create below.\nlet waker1 = waker.clone();\nlet handle = thread::spawn(move || {\n    // Working hard, or hardly working?\n    thread::sleep(Duration::from_millis(500));\n\n    // Now we'll wake the queue on the other thread.\n    waker1.wake().expect(\"unable to wake\");\n});\n\n// On our current thread we'll poll for events, without a timeout.\npoll.poll(&mut events, None)?;\n\n// After about 500 milliseconds we should be awoken by the other thread and\n// get a single event.\nassert!(!events.is_empty());\nlet waker_event = events.iter().next().unwrap();\nassert!(waker_event.is_readable());\nassert_eq!(waker_event.token(), WAKE_TOKEN);\n# handle.join().unwrap();\n#     Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:97","a:2:31837:3206-0:266:1961","a:2:41415:3392-0:266:1961","a:2:2903:246-0:266:1961","a:2:31780:237-0:266:1961","a:2:41416:3391-0:266:1961","b:2:2695-0:266:1961","b:2:3516-0:266:1961","b:2:2408-0:266:1961","b:2:2680-0:266:1961","b:2:2405-0:266:1961","b:2:2684-0:266:1961","b:2:2690-0:266:1961","0:268"]}}},"2:12953:32767":{"id":"2:12953:32767","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43466:7802","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:1719:788":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"16:7648:8263":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:10930:8413":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:6088:1967":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:42523:7777":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:2936:21196":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:4821:8120":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:2854:5090":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:3597:8119":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10882:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:4903:3133":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:538:5600":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:1809:672":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6532:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13437:4325":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:43224:7788":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:859:2919":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:1098:8110":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:7485:6501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:11654:8343":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:15102:4743":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:2945:3529":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13399:4321":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:3491:3712":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6948:5102":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:735:26309":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:2976:3660":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:297:2979":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:2478:5073":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:951:8281":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5677:6167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:15116:4744":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9640:29672":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:43975:14888":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:1142:8285":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:46173:7022":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:733:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"9:178:21110":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10395:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:14298:4508":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:4406:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5266:5985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7473:5272":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11166:4140":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46418:7043":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:21299:9290":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:39925:3766":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:10661:8124":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:43747:14547":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11242:8140":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:643:3984":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:12276:730":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:32922:3197":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:4560:5131":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:15944:4287":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:33582:3652":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:5870:3149":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:42562:7778":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:5076:3380":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5181:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3128:3637":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5146:5936":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10612:8123":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:578:5620":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:2657:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:6706:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:43144:7782":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:4311:2799":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1581:8288":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:14436:4537":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:22701:2223":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"type_alias"},"2:2896:3524":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:43084:8361":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:621:8369":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:1072:8286":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:3149:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15445:4831":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:45527:6954":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:46457:7059":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13766:4410":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:4062:5125":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:10050:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6900:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8547:9322":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:1917:7669":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7604:5109":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:4837:776":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11661:7558":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12300:22250":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11142:4149":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:11551:8456":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:4856:5140":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:1585:8302":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:41757:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:21235:34024":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6664:6327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:41231:2680":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:14189:4490":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:5847:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:4293:7422":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:21267:34036":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11467:4156":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13986:4446":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:31746:8350":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:1903:7667":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13922:4437":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:7509:8255":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:673:2799":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8420:3731":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2421:6627":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:7580:7242":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:479:5563":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:3614:5119":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6543:7203":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:1547:5661":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3588:30415":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6758:5194":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:2437:9281":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:586:5624":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9781:22122":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:9329:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:4543:3846":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:7870:29671":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7539:5106":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:41:9231":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5643:6154":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:5241:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12863:4241":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8710:6894":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:22:791":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:3276:3755":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:5995:7159":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13325:4308":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:774:7665":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:8216:7655":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:4614:5133":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:45833:6982":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:15206:4768":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4805:9344":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7633:36070":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:3874:8302":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:7584:6563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1621:5715":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:5897:3150":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5212:5959":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:1107:8284":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13455:4333":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:3273:7669":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:16176:5040":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:1528:7666":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13375:4317":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6714:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"11:2569:7238":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:1156:9127":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11547:4059":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5617:6142":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:3579:3684":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:8259:5270":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4864:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:5347:5150":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6927:5210":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:14079:4458":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:7227:29667":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13723:4399":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:45206:6928":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:3418:3742":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5598:6128":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:42923:8357":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8488:8424":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4262:9132":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:8247:6588":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:1676:36053":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:1312:7636":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:16165:5035":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"18:113:9101":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"20:290:3425":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"6:5260:5982":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:2198:9183":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:922:8275":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:14038:4452":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:5006:5145":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:45850:6983":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:46261:7026":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:12280:875":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:5681:6378":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:531:7533":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"15:394:21159":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:43012:8359":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:867:7665":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:43768:7823":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:3794:3749":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:22623:3111":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12289:1357":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3013:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:2439:9282":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:4849:3132":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10905:8128":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:45104:6916":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:45288:6933":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:7441:9129":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:6591:35432":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:22248:9451":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12516:8192":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:1860:14797":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:41405:3389":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:40304:7767":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:45700:6977":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:29809:3109":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:1949:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13412:4323":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:1535:5652":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:517:5588":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11853:8173":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:43918:7836":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:14912:4708":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:37617:3657":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46244:7025":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:31750:5270":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:40021:7748":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:6597:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43378:7797":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3540:3722":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11606:7288":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:10269:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:39676:7728":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:14012:4449":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:6634:7702":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:7590:5108":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:38981:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12076:8178":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:11193:7104":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:10893:3737":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:7306:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4033:9301":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5489:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:41562:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11354:8145":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:9219:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:40546:7773":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:724:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:43150:7783":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:2612:5079":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:10868:3632":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7132:7635":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6562:6278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"9:0:2983":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11605:4158":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:2759:6620":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7306:36075":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:21903:9370":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:6628:7703":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:2355:5062":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:40053:7753":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46301:7030":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:14177:4487":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10720:36086":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:41434:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:41219:7261":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:39753:7731":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:12615:8336":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"14:160:8269":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:7339:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5686:5093":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:827:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5400:4117":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:1526:5646":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12270:1624":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"11:0:2985":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:4986:8121":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"18:698:7540":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:22122:14787":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"11:2423:2919":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:13439:1961":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6342:36076":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9387:3192":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:12056:4194":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:21468:9290":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:3899:5123":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:5781:5097":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"14:40:4288":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:10609:3757":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:1040:7636":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:15410:4823":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12399:7579":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:43554:14546":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:39877:9262":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:32863:3195":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:5277:5993":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:39932:7716":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:14235:4500":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:31867:3530":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:11799:8165":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8612:3130":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:40030:7749":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6670:6329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:706:7542":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:10504:8429":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:16223:5048":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:15434:4827":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11189:4142":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12900:4242":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"11:2304:7636":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:14489:4541":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:1569:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13292:4302":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8542:7843":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:14051:4454":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6047:8207":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:7552:7239":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12362:7577":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:43604:7814":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7755:5101":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:15368:4812":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:2562:5472":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7910:22068":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5536:6102":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:2808:5088":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10997:4135":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:9199:8336":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:9516:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"9:238:6894":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5320:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:8202:5113":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:597:4113":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:2954:3196":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:13459:7720":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:4926:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:14516:4545":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:6279:29675":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:5863:22056":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:8073:5329":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3115:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:43049:7716":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:42770:7780":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:7082:35426":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:33040:3648":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:15616:4895":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5225:5963":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11772:8390":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5802:22055":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:12387:7796":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10399:3736":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:41417:14837":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:11688:9136":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5376:6027":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12342:7572":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11313:7552":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:22561:32776":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12422:7580":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13363:4314":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:3355:3669":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11557:8153":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:4076:8288":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"7:78:21036":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:811:8302":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:2271:8386":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:10054:3678":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5407:1205":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:356:8364":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:43160:3736":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:44149:6909":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:4479:7686":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4971:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3663:3632":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3252:35954":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:1653:5738":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6738:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:10052:3679":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:4844:2302":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"type_alias"},"17:12478:4213":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"11:328:7663":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7565:32809":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:914:8273":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12213:8185":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:12051:29626":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:1692:5755":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13972:4167":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"11:875:8280":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:21360:9371":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:45136:6920":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:14246:4502":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:43104:8362":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7580:7642":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:42280:32777":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12281:856":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:5191:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9099:2799":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6721:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:2497:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"18:689:7539":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1466:2799":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:42992:8358":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4145:9308":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:6491:6237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7036:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:41113:6875":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:8259:6590":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9858:22123":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:1874:6625":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6689:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:2208:7673":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8196:3749":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:15473:4839":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:14356:4518":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:22206:9290":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:9115:2919":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:3143:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13844:4423":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:4131:9306":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11877:4160":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4870:5834":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:2278:3721":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:7427:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1699:5758":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22253:9449":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:9048:8429":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13797:4417":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:6935:14565":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:41837:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7406:9134":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10838:7844":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:3836:3879":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11269:22158":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:15266:4784":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:39895:7687":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:9334:3152":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:12277:881":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12454:7582":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:9253:8436":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:7723:3141":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:23085:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:10304:3855":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:31771:2606":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11915:22226":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:4152:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:22525:6640":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:45153:6921":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:42253:6883":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:42570:7779":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:8144:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:7429:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:45235:6930":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:15356:4809":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:9078:7090":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"7:0:1835":{"crate_id":7,"path":["unwind"],"kind":"module"},"18:563:3991":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43575:7805":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:6504:7201":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:21250:34032":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:6945:14566":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:7911:14763":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:22120:33394":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:10919:27087":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:9306:7099":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2491:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:40490:7769":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:43914:7835":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:7366:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8180:8416":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:10261:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:1429:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:22220:9450":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:10936:7711":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:545:5602":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:45074:6912":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:7359:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:45398:6947":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:43902:7832":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:4595:9323":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6609:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:45221:6929":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:6620:5171":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4743:5136":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6811:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5653:6155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:465:5555":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11634:7556":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4039:9300":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:12265:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2986:3662":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:12621:4221":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"18:623:36094":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:6821:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:39742:7252":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:12278:863":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:32443:3644":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:16050:4301":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:5472:6086":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:5415:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"15:306:9109":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:613:36091":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:3669:4017":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:503:9183":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:12268:1256":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"18:80:9097":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:33409:2289":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12887:7585":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10255:8440":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:4270:9321":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:5215:3146":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:3239:27542":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:5449:14519":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22094:9290":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:5064:5930":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6542:6262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15596:4889":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1680:5751":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11128:4106":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:43590:7811":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:12287:937":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:43023:6899":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11583:8159":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:11013:8339":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:4468:5128":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12238:8187":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:8226:22069":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4847:3131":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:7907:14764":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14066:4457":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10970:7091":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6821:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12671:8198":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:831:8296":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:38941:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:7348:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14311:4509":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15678:4917":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:43242:7789":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2394:5069":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:10606:3755":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"11:1160:8286":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:8197:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5314:6009":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:9054:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:7536:3693":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:42317:3676":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:9180:9365":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11016:8129":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7575:6560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:43278:7791":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:5405:35432":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:1054:8282":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:44141:7267":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:6393:9462":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:44100:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:0:968":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6849:7216":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7014:22063":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:42531:3857":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5436:6062":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:43696:7817":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:8494:8426":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:507:3984":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11524:8151":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5769:7591":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:45168:6922":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:557:8368":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:42334:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:4641:5134":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5700:5096":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13814:4420":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:7944:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6636:6314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:43396:7798":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:403:8108":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:8462:3735":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:7933:8411":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:4985:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6665:22061":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10044:22128":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"13:0:2980":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12494:4214":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:7651:32577":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5052:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:3014:21197":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6471:6224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12127:4199":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2902:21195":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:12624:7542":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:9467:8380":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:43094:7718":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:8012:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:3038:3653":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:16235:5051":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:13211:4287":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:13549:9218":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5756:8205":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:41349:2799":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:10251:4121":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11405:8147":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:7385:8321":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:14147:4468":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10155:4116":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:533:9187":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:860:8204":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:4787:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"0:181:1989":{"crate_id":0,"path":["mio","guide"],"kind":"module"},"2:22576:32815":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:3650:2799":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12237:9204":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:10654:3696":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:5415:5151":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11674:7559":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:3623:8288":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:4091:9304":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:284:3429":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"6:1485:5628":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:45611:6958":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:21755:9374":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:45512:6953":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7528:7637":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:3240:2799":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6756:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:7271:3577":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4942:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"9:447:21043":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8006:9249":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4952:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:40155:7763":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:15190:4765":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:41271:6877":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:39983:7742":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:1065:35432":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:7085:7629":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3514:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:14868:4677":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10759:4149":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:538:3989":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:12125:14844":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12443:4212":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:10321:8766":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:4083:9303":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10092:22129":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10018:22108":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13606:4370":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:30271:32814":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:43898:7831":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:43296:7792":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11574:7671":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43669:7816":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:598:36092":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:5739:3712":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:31838:3531":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:3178:3664":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:7592:7245":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:8317:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:15799:4943":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9361:3161":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:4563:3188":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:16259:4318":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:8351:6611":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:42013:3678":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14855:4670":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:2947:2224":{"crate_id":2,"path":["core","ops"],"kind":"module"},"11:883:8281":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:9886:22124":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:43192:7712":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:2449:9287":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:43890:7829":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:5028:943":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:7376:14765":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:30620:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:6439:7695":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"8:0:2982":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:672:8295":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12724:22130":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6026:7165":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:11027:29666":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1559:5669":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:150:7406":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:46342:7033":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:726:3113":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:43906:7833":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:927:9217":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5557:6114":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6120:22058":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6353:5161":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:10064:3686":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:46290:7029":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:39821:6861":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:5367:22054":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"14:7:8269":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4986:3765":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"0:101:1952":{"crate_id":0,"path":["mio","event"],"kind":"module"},"2:22469:6635":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:10872:7066":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:5515:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:2290:35892":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7455:2919":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:41915:3147":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:45089:6915":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:11687:8344":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:2938:3527":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:3334:3667":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15126:4745":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:40062:7754":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:10234:8379":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"11:844:9215":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10818:8126":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:43799:7827":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:9916:22125":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"18:589:3992":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:1826:8378":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:5546:6108":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13877:4431":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:1923:7670":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6606:7612":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2323:21194":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13946:4438":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:43473:7732":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:2878:5091":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:5722:5098":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6335:8240":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12278:8190":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:856:8278":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8788:7427":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6442:7198":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:4617:9324":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:45544:6955":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:573:3984":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:880:7666":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:45189:6927":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:718:4005":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2903:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:2651:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:16069:5012":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:6657:6326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:31781:2607":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11150:27093":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6976:5215":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6768:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:9405:3193":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:5756:7838":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12464:22251":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:8733:7083":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:3146:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:14545:4548":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1519:7665":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10938:8399":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:7006:8244":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40044:7752":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:45594:6957":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:46202:7023":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:41426:3635":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:44108:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13089:4254":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5219:5960":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:4948:32609":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:4241:3712":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:2274:3701":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:2592:5078":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:515:3987":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6629:6313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:45413:6948":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11865:8174":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3369:3753":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11139:7090":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5122:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:9356:3160":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:4334:8391":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5102:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2732:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:9848:3677":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:6054:15085":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:5037:5146":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:15734:4925":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13568:4362":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:39001:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11153:8126":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:40519:3763":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13187:4273":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6775:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:1754:648":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4811:5790":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:2469:8302":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:8160:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15383:4816":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:9984:22127":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6749:7618":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13774:4412":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:8095:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5588:6123":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:6366:1967":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:9121:7092":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11841:8172":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:5942:3162":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2626:9290":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15342:4802":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5502:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:33099:3650":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12707:8201":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:6788:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:39905:8352":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:14788:4615":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15390:4817":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11688:7560":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:5914:7148":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:5713:14564":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:14386:4521":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:42355:3463":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:178:3424":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"2:2421:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5665:6162":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12572:4149":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:14260:4504":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:5559:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"11:434:9122":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:11812:8168":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:41340:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"18:608:8100":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2728:5084":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4976:5144":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"9:330:5513":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:8294:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14560:4552":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1343:8282":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:1761:6624":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:38914:3665":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13015:4209":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:3925:5124":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:15701:4918":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5624:6145":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:11214:8138":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:45121:6919":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11075:4138":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:45442:6949":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6940:5212":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:4470:3712":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:7915:7064":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14091:4459":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:11048:7712":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:1578:2919":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10710:8125":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:0:543":{"crate_id":2,"path":["core"],"kind":"module"},"2:39788:7734":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13235:4288":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:4808:9323":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6231:7596":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7813:7643":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7497:5273":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:96:9098":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10137:22105":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:2542:5468":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10769:36080":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2784:8327":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:40096:7757":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5306:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"14:220:5419":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:16121:5024":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:5112:5933":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:7463:2919":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:1663:5744":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:21477:9369":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:31782:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11341:8144":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13344:4313":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:4744:6472":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:22108:9459":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13509:4339":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:43940:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:318:3430":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"17:16032:4291":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:6754:35432":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:22332:7425":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10671:36088":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:40280:3735":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:42308:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:11127:7791":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:7516:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12371:4243":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:481:29659":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:6033:3146":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11847:7858":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:14131:4463":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:13421:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:4718:5135":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:532:5597":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:3035:35500":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"7:31:21029":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:45738:6979":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5134:5935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14723:4564":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:11578:7112":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:39704:32818":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6066:7594":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:41796:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:5917:8288":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5329:6013":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:9091:7091":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:872:8107":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:11840:32068":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:2352:8283":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:570:5615":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8274:3706":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:46365:7040":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8469:3736":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:14994:4720":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:12635:14531":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12283:1767":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:3473:8118":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:3029:35514":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5370:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6524:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:7377:14766":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14341:4514":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:2383:2799":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:491:7532":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:7330:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:4425:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13387:4318":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6574:5112":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:5613:8399":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:45256:6931":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:41416:3391":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:14529:4546":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:1497:2919":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:710:8273":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11293:22159":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:6494:7602":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:45871:6984":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:6623:3163":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1328:8283":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:21750:9290":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:8188:8268":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:12683:14540":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12328:7568":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12189:8183":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:39974:7740":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:2548:5469":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:39961:3734":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5846:7593":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:8136:7651":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15289:4787":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:5581:6121":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3328:3758":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6278:8214":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12993:22132":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:0:2989":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:15931:4273":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:42263:3676":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:10056:3687":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:1172:35516":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:1602:7669":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11471:8454":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"16:5817:7140":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:9703:34282":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13738:4403":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2908:3525":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:31869:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41718:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:45495:6952":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6729:6350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:13485:4337":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:5236:5970":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:5195:8394":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12216:7289":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:39682:7729":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43733:7818":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:6672:2919":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6813:7204":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:867:8106":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:7061:5220":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:16105:5019":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:9214:8431":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:8408:3764":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:45463:6950":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:41601:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:12272:1746":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:7727:5110":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:1750:3588":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"2:2964:3646":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:6104:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"11:2443:8288":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:8282:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:1051:8283":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14111:4462":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:10547:29653":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:7111:7219":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5039:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:1885:8380":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:5960:7155":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:12569:3433":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:5508:8396":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:15197:4767":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:9671:22107":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3757:2919":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:581:3544":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"20:207:3427":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"17:261:8107":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:6695:3157":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:8432:3732":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12792:4080":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"20:117:3410":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"6:5423:6052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:15748:4932":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15624:4896":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:3809:8303":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11324:8141":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13146:4264":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:41053:6866":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15992:4998":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:10498:29656":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:32257:3645":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:22175:14787":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:11443:4154":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:12248:27096":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:564:5612":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:16187:5041":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:12264:1137":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:871:9216":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:700:2919":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:2315:14787":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:25485:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:41482:3632":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:7379:36079":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12030:8175":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"14:202:14548":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:9150:9364":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:11126:7089":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:3028:3626":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8000:9203":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:22541:32810":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14933:4713":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8188:3747":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:12284:1773":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:41490:2919":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11211:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:11854:7858":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:43482:7728":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11026:22141":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:903:8302":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:5353:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:2326:8282":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:42755:6898":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:11176:3192":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:8798:2799":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:22517:6639":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:4927:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"18:726:4008":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9737:22106":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:15822:4947":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:22603:7725":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12969:4245":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:3475:5118":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:15521:4876":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:7355:2919":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:7957:3209":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:31837:3206":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:1707:5762":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:39761:7728":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:44171:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6746:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:43758:7819":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:13297:8347":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6441:6214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15646:4902":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:8039:3208":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11592:7286":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6991:36069":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:32981:3649":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:42974:7713":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:10001:3684":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:3810:5121":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:1939:8382":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:9521:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1547:8273":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:38866:3673":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:15376:4815":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:3389:3674":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:39719:6860":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4845:2301":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:30207:6653":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:12282:1785":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12150:4200":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6698:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:12557:4138":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:44210:7837":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:7546:6544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:3597:3723":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:30260:3676":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:39795:7735":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6098:22057":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:14752:4584":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:15582:4883":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:9138:7093":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:15720:4923":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:7914:9290":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:1596:7668":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10419:4126":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10901:3731":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:1675:3712":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:15151:4754":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:39769:7732":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:559:5610":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:44162:8363":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:11510:8150":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:40504:3153":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:6634:5100":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:7049:9366":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15957:4968":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:10848:7840":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"14:187:21138":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:43174:3737":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:5494:8395":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:10127:7258":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:2691:3738":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4800:5782":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22161:9460":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7144:22064":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:31757:8351":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:8021:8413":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7823:22067":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2788:5087":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11063:8132":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:8306:6600":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:4424:5127":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:3281:7667":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:5742:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3426:3675":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:37562:2290":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:21372:6632":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:7695:5279":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12089:4197":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:41474:2799":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12353:7576":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:10843:7846":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:40012:7746":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6466:5168":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11367:4138":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5636:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:7446:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"9:424:21045":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14475:4540":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:9755:22104":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:40513:7771":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:41069:6868":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:481:7531":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:9265:1960":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:6417:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12530:8194":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:4440:35434":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2660:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:1628:5719":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:491:5568":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:39865:7254":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:1063:8283":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"9:53:21061":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:6311:8403":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:3139:3207":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:14372:4519":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:8155:7654":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"10:44:5475":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:6545:8288":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:14599:4562":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6385:5164":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:46281:7028":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:33236:3651":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:4153:9310":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:15426:4826":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3607:3726":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13473:4334":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:5453:14520":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11115:8136":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5002:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"13:226:5466":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5445:6068":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:13424:4324":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12851:7584":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13308:4306":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2660:5081":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:2175:22184":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2303:21168":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:7314:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:8300:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11764:7567":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:1862:8379":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"11:351:9114":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:7986:9202":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:41085:9298":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:21281:34035":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:5643:3712":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:1503:5636":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5927:7149":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12824:22131":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:4830:5139":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:42027:3687":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:15010:4721":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:31764:3845":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:15138:4748":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"20:347:3432":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"11:1891:8288":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:8404:3633":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"13:109:36057":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41679:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:7256:27308":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12107:4149":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:123:7659":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:1686:5754":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:7412:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:39041:3666":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10915:36082":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"19:0:1235":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2654:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13855:4424":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:2627:14607":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:39021:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:588:9196":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13046:4250":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:42020:3679":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:43133:7262":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:6962:5103":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"9:392:21044":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:837:8275":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5290:5998":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:220:8294":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7321:3388":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:14025:4450":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:12279:869":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:3637:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:5528:8397":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:16093:5017":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:10975:8338":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:5816:7693":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7397:36078":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4979:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:44198:6911":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:1585:5685":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14977:4718":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:2115:8304":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:13526:4347":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10534:36084":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:1752:14775":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"18:659:8101":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:4194:14578":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:2151:8283":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:523:5591":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:7800:4113":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4824:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7168:7096":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:44187:7269":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12388:7578":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5382:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:485:5566":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13581:4366":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3326:3757":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"20:121:3411":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"9:482:21042":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:3371:3754":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:4106:35432":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4414:8392":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:0:2991":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:6414:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:7948:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:10701:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:3264:8117":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11528:29663":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:1510:5638":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10819:8449":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:7663:3762":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:42034:3688":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:7493:14758":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3349:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:4415:8332":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12647:8196":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:13494:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:9342:3712":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:12141:8345":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:9273:7096":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11617:7855":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5336:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5352:6016":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:11711:3871":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:4771:5137":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:40083:7756":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:10412:29722":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:38251:3659":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5565:6116":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:7602:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:0:1913":{"crate_id":20,"path":["log"],"kind":"module"},"5:6158:3712":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:10415:14855":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:7958:3696":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8115:7840":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:6587:3154":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:12348:7790":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:32629:3647":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:4489:3845":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:13245:34085":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11089:8134":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:7559:7641":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:4140:8329":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:39952:8353":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:43324:7794":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:3461:3763":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:15635:4901":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6427:8243":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:41291:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:6621:6312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:16138:5026":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15039:4729":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:651:3984":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:542:7408":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:2898:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:14876:4678":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12251:8188":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:43886:7828":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:12311:7785":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5031:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5630:6148":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:10877:8127":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:1207:8111":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:9225:8433":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43491:7731":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:2104:8303":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:15176:4762":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:40115:7759":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:2669:29656":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:513:8109":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12597:4220":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:2423:9277":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:13272:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:4410:8331":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:1087:36056":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:40145:7762":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11623:7856":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13999:4447":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11773:4225":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:1831:8302":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:4767:14596":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:1791:1298":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4232:9130":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:6912:14564":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7686:8264":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:7346:3885":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:39839:7253":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6880:6392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:7375:8288":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:2508:5074":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6895:5206":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:38963:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:37507:3656":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:3029:4012":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:5107:5148":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:5421:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11751:3879":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12286:1761":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:5307:5149":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6456:22060":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4695:9341":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:11731:14528":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:5831:7143":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8269:8418":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:45626:6959":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:39732:7730":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12043:8176":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2748:5085":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:10691:9290":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:40528:7772":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:14325:4512":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11256:7550":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4916:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11497:8149":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10253:8441":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:13173:4272":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:41876:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:7452:6484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:43062:8360":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:1968:9259":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:8561:8424":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:8451:34281":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:15301:4793":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:10045:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:4534:14586":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11755:7566":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5385:4116":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13753:4408":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11016:29661":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13899:4432":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:30647:3544":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46316:7031":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:45381:6946":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7938:7065":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:521:26311":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:8175:8265":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6447:6215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"0:0:2096":{"crate_id":0,"path":["mio"],"kind":"module"},"11:832:8287":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:2587:3745":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11392:8146":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:22492:3110":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:7461:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9807:22112":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:2203:8113":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:893:8288":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:11086:8340":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8804:7088":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:4:1218":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:41640:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:1565:5671":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6398:5092":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:14587:4555":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13959:4441":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2978:8388":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:39992:7743":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:39850:32809":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1887:8381":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:3361:3671":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:11241:7105":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:4940:5143":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:16151:5032":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15418:4824":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:2338:5060":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:46115:7020":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:5863:3148":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:7986:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5528:6097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12508:4218":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12584:8126":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"14:0:2987":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:14847:4667":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:21269:34028":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:256:8106":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:497:5571":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:396:9119":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:42540:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2708:5083":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:40074:7755":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5244:5974":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:21223:34024":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:7405:35898":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:14212:4499":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:7363:7684":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:12285:1779":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:9165:9363":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:3743:35432":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:41357:3632":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:15814:4944":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5390:6035":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8567:7070":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:9088:3390":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11442:5533":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:4531:5130":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:680:7536":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:15463:4834":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6317:8232":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10982:22140":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:1910:7668":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11419:4149":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10524:8122":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:2237:7676":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:1590:7667":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:30245:6656":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:765:26310":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4959:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:3196:5059":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"11:2124:7636":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:4271:3712":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:1727:35432":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:40002:7745":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:22610:3112":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"20:271:3426":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"2:42983:7714":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:4487:8393":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9065:7089":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:38830:3636":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:2548:5076":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7857:5291":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10284:4122":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"15:0:2988":{"crate_id":15,"path":["addr2line"],"kind":"module"},"20:237:3428":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"6:7537:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2301:649":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7697:8302":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:12425:7711":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:1066:21124":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:1357:8286":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:8645:3384":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11788:8164":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12949:4206":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6874:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:4141:9307":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"12:0:2986":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:945:8280":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:1517:5641":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:15569:4877":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:12157:14535":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8166:7841":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:6752:3164":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:13594:4367":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:6409:6196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11537:8152":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:45812:6981":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46223:7024":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:10019:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2684:5082":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1671:5745":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8499:9297":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:39776:14602":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:41031:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:7851:29651":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:21352:9290":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:918:8274":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9351:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11743:7564":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:35631:3655":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:9708:32846":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:41365:2919":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:3278:3756":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3011:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:6560:5095":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:2572:5077":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:8301:5342":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43002:7715":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:46144:7021":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46395:7042":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13252:4291":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:3344:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5014:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:2768:5086":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11621:7554":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:46025:7018":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43910:7834":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:7389:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:43964:3200":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:31780:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:2536:5467":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8122:7066":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:13553:4356":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7618:5275":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:5164:8394":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6477:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:40106:7758":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:2636:5080":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7467:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:1496:5633":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:10309:3856":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5897:5154":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:21779:6633":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:9107:8430":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6678:6331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2069:6631":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:9346:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10068:22111":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:5344:6015":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:15092:4742":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15608:4892":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"10:0:2984":{"crate_id":10,"path":["adler"],"kind":"module"},"1:9232:27082":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"11:1883:2799":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:43428:3733":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:15400:4820":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"9:357:21058":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:15836:4950":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:7561:6551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:1007:7636":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10910:27083":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:7419:2919":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:15078:4738":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6478:6228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:645:9199":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:41415:3392":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41374:3388":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:7628:7246":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:362:8366":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:40497:7770":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:11169:8342":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:113:307":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"5:1558:8274":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2455:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:7570:5107":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:12843:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:742:8274":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:14414:4526":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:4352:5126":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:22032:9455":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:11828:7113":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11715:7562":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:44090:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:37672:3658":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:5749:1967":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:437:4066":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12408:4208":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:15333:4801":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11033:29676":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:5361:6020":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:43342:7795":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:33755:3654":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:15281:4786":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:7549:7640":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:4283:9133":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"11:787:7666":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:6300:8229":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:2374:5068":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:5930:7694":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:12609:14534":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6460:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6588:7604":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:3031:6617":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:14271:4505":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4992:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13832:4421":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14284:4507":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10317:4123":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11825:8170":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:4262:8330":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3938:8390":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:2655:3746":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:635:4004":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:12288:1845":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:45317:6935":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:8118:7648":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2460:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"11:1887:2919":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:4730:9305":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:21252:34034":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:8535:2680":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:5011:9342":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:8407:3634":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5046:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:8586:8428":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:10612:3753":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:4882:5141":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:2981:3661":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:6519:6249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:46070:7019":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2399:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7052:8245":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:8341:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4932:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2090:3749":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5483:6089":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:2418:5070":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:3247:7668":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:4051:3712":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:8662:7080":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:5065:3712":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"15:327:21153":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:45331:6936":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:6766:3165":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"11:430:9121":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6160:21167":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:12269:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:11545:7852":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:1896:8302":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:45273:6932":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5400:6042":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:14503:4544":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:1639:5727":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:1490:5630":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:15058:4730":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:39264:14608":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5742:7587":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12271:1658":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:836:2799":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5160:5937":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:6001:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8399:3762":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:9260:8437":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5477:6088":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8264:8417":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:21301:9372":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5200:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12433:4209":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:7098:7632":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11380:8453":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:9628:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:8006:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:7395:7236":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:39071:3668":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:46270:7027":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"11:102:7658":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:15760:4934":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:39078:6729":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:10058:3688":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:5684:9359":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:38926:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5075:5147":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:7984:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10887:36083":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13272:4301":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:15324:4798":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"14:165:21131":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8590:6457":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12808:4239":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:7510:7238":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:2037:8112":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6915:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:928:9215":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:4926:3129":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12485:22252":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:43448:7800":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10622:36085":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4097:9305":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"20:342:3431":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"1:4740:6468":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:8171:7842":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:2838:5089":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:40538:6862":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:7656:22066":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:8265:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:4802:5138":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12768:22109":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:42552:6894":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11042:8130":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"15:288:9105":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15313:4794":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4965:5878":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:12263:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:6782:22062":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8815:7280":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11898:4162":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:725:9290":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"18:670:8105":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4924:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:45302:6934":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:10844:2799":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:3771:9299":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11647:7557":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6650:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:12630:14532":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:3842:5122":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6480:5094":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5174:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5020:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1580:5683":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3522:3720":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:4913:5142":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:12232:32579":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:9635:8414":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:11155:8341":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12659:8197":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11595:4157":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:6583:3153":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:43621:7815":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:45671:6976":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:15:2292":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:8253:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:8328:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:22634:3125":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14968:4714":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12543:8195":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:42292:5306":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:41253:6876":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"11:1603:8290":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10954:22139":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:21901:9290":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5250:5976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:364:9117":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2495:2300":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:43894:7830":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9938:22126":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:10481:34352":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:41197:32812":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4837:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:1723:5767":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:43438:7799":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"11:687:3632":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6872:7218":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13024:22133":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:2528:6613":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:8029:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:1192:9128":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:2730:3748":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"14:214:7656":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:8553:8427":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:473:5560":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:45721:6978":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10439:4127":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:1883:6628":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2949:3194":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:11493:30235":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:13497:4338":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:16269:4323":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:3039:35499":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:8288:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13785:4415":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:3286:35953":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:22453:7721":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:7604:8322":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:12371:7793":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4909:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:1537:8287":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1824:8377":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:3778:5120":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:41499:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:21479:6632":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:10062:3685":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10828:36087":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:0:1650":{"crate_id":1,"path":["std"],"kind":"module"},"2:21791:34030":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14986:4719":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5296:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:40131:4002":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:4587:5132":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12201:8184":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5671:6164":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:8452:3734":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:43922:6906":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41523:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:3374:34186":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6412:22059":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:4891:5843":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3271:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:10861:7281":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:3233:32319":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10185:4118":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:4069:9302":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13674:4374":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6648:7614":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:39091:6730":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6802:7619":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:0:2990":{"crate_id":17,"path":["object"],"kind":"module"},"5:944:2799":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:44083:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:21354:9368":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:849:3632":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:2234:8116":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:43457:7801":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:640:8372":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46327:7032":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:4336:3844":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:1566:21125":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:553:5607":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43781:7263":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:12290:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:7107:35462":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:31708:5471":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:40290:7766":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:16198:5042":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:10513:34089":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:1607:7670":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12225:8186":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15214:4770":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12175:8179":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:15168:4759":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:8110:8414":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:2554:36055":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:6639:7700":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:7741:5111":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:6187:29669":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:6763:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:2403:3632":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:4504:35434":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:45480:6951":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:43075:7717":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1593:5690":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7811:8459":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:44086:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7888:7644":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:2743:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13116:4260":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:46380:7041":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6379:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7435:7237":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6505:6248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:2369:8293":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:12266:1806":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:3307:7670":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:8093:5330":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14463:4539":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2458:5072":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11702:7561":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:38910:3663":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:9286:27098":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:10891:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:12695:8200":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:1975:759":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:12275:714":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:22070:9456":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:21988:9454":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:4254:9131":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:0:2981":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:5457:6077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:939:8278":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3833:3871":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:9201:3151":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2438:5071":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:4128:8328":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4876:5836":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:8482:3733":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"11:2498:21120":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:22438:6634":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:2231:7671":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"11:299:7660":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:2140:8282":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:4151:3632":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:2317:14788":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:45783:6980":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10573:36081":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3236:27678":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:15456:4832":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:1582:8289":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"9:502:5536":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:42774:7781":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12318:4206":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:15273:4785":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15023:4726":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:754:7549":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:16212:5046":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:22503:32794":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:8271:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:6532:7603":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:1025:8282":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:39802:14603":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:15769:4938":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15655:4904":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11730:7563":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7428:22065":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"0:180:1972":{"crate_id":0,"path":["mio","features"],"kind":"module"},"16:2998:5114":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:2664:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8105:3425":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:7615:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12264:8189":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:7299:28079":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:42515:3858":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11227:8139":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:3329:5117":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13538:4350":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2528:5075":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10350:4124":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11102:8135":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:5283:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:9369:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2402:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:11158:6906":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:11141:7792":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5466:6083":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:4502:5129":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:39834:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:10060:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:4175:14502":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5083:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4885:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11493:8148":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:10000:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:7638:8323":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:16249:5052":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:4742:6470":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:4590:3847":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6263:7599":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:30239:6654":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12289:4202":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:282:35432":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8748:9354":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14575:4209":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6433:7601":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:909:8287":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7521:9214":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:637:8370":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:6698:3158":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14402:4524":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:16079:5013":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15222:4772":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:22385:7426":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:5544:8398":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"10:36:5474":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12929:4243":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:14449:4538":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10218:4120":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4897:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10953:27085":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:6263:1961":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:6079:7168":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:45360:6945":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:43466:7802":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8132:7279":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15249:4776":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8475:3737":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:45948:7017":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:3399:8302":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:1481:3632":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:6412:9463":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:2648:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:8413:14762":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13064:4253":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:43120:6901":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:1574:2799":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:1578:8301":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:15778:4940":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:800:8288":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:10170:4117":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12683:8199":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:3097:3672":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:2310:7679":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:7713:7283":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:21213:3544":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:7355:5252":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7799:5099":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:39693:7251":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"14:31:8269":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:3211:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:45573:6956":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:7769:5282":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:6435:6211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:5020:9343":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11567:8154":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:11051:8131":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"}},"external_crates":{"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.20/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}