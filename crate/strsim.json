{"root":"0:0:2144","crate_version":"0.10.0","includes_private":false,"index":{"0:43:1837":{"id":"0:43:1837","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2483:207","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1847":{"id":"0:51:1847","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1804":{"id":"0:24:1804","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2738-0:72:1778":{"id":"b:2:2738-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2741:134","2:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:661":{"id":"0:79:661","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:72:1778":{"id":"b:2:2727-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12809:1872":{"id":"2:12809:1872","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:31392":{"id":"2:12898:31392","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1779":{"id":"0:73:1779","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12927:26214":{"id":"2:12927:26214","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:29398":{"id":"2:12835:29398","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12836:29389"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44191:2462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2942:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12811:31380":{"id":"2:12811:31380","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:31402":{"id":"2:12935:31402","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4740:31402"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44216:2470","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1910":{"id":"0:65:1910","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5809-0:72:1778":{"id":"b:5:5809-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1593"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12896:31391":{"id":"2:12896:31391","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12828:31383":{"id":"2:12828:31383","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1535","str::slice_mut_unchecked":"2:12829:31384","crate::ops::Index":"2:3228:2785"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:31395":{"id":"2:12903:31395","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:26755":{"id":"2:12932:26755","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34199"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2736:134":{"id":"2:2736:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12834:5118":{"id":"2:12834:5118","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43903:2465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1871":{"id":"0:60:1871","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:26896":{"id":"2:12840:26896","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:28664":{"id":"2:12837:28664","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44171:2475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:11975":{"id":"5:5537:11975","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1877":{"id":"0:61:1877","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:32075":{"id":"5:5540:32075","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1931":{"id":"0:68:1931","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2932:243-0:72:1778":{"id":"a:2:2932:243-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12819:26854":{"id":"2:12819:26854","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1640"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:1805":{"id":"2:12832:1805","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43887:1777","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:31399":{"id":"2:12919:31399","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:32076":{"id":"5:5543:32076","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:26890":{"id":"2:12872:26890","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458","str::rsplitn":"2:12875:26892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44021:2484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:26757":{"id":"2:12934:26757","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34199"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12853:2660":{"id":"2:12853:2660","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42021:197","prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12849:2696":{"id":"2:12849:2696","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42021:197","prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:31397":{"id":"2:12907:31397","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2989:2494-0:72:1778":{"id":"a:2:2989:2494-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2989:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12810:31379":{"id":"2:12810:31379","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2483:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12820:1901":{"id":"2:12820:1901","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42021:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:29389":{"id":"2:12836:29389","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12835:29398"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44200:2460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8989:6354-0:72:1778":{"id":"a:2:8989:6354-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8989:6354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","type_id","description","cause"],"trait":{"name":"Error","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12910:23667":{"id":"2:12910:23667","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:717":{"id":"0:76:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2425:23579":{"id":"2:2425:23579","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:5474":{"id":"2:12833:5474","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43893:2466","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1778":{"id":"0:72:1778","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1779"],"impls":["a:2:2989:2494-0:72:1778","a:2:8990:6546-0:72:1778","a:2:2949:253-0:72:1778","a:2:8989:6354-0:72:1778","a:2:2932:243-0:72:1778","b:2:2420-0:72:1778","b:2:2727-0:72:1778","b:2:2423-0:72:1778","b:2:2733-0:72:1778","b:2:2738-0:72:1778","b:2:3566-0:72:1778","b:2:2723-0:72:1778","b:5:5809-0:72:1778","0:75","0:17","0:15","0:77","0:78"]}}},"2:12822:26851":{"id":"2:12822:26851","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42021:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:26219":{"id":"2:12930:26219","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2723-0:72:1778":{"id":"b:2:2723-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2726:2654"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63:1892":{"id":"0:63:1892","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2488:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10155:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2436:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:31393":{"id":"2:12900:31393","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2144":{"id":"0:0:2144","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1778","0:18:1784","0:19:1787","0:24:1804","0:25:1808","0:42:1835","0:43:1837","0:51:1847","0:52:1852","0:59:1862","0:60:1871","0:61:1877","0:63:1892","0:65:1910","0:66:1920","0:68:1931"],"is_stripped":false}}},"2:12818:339":{"id":"2:12818:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12819:26854","`u8`":"1:12049:1640"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:31394":{"id":"2:12902:31394","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2733-0:72:1778":{"id":"b:2:2733-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2736:134","2:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12817:31382":{"id":"2:12817:31382","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3568:1631":{"id":"2:3568:1631","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39781:5378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1784":{"id":"0:18:1784","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12826:26853":{"id":"2:12826:26853","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:26270":{"id":"2:12846:26270","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12831:26877":{"id":"2:12831:26877","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12830:26876"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:26884":{"id":"2:12857:26884","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12504:2458","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::split_whitespace":"2:12835:29398","str::rsplit":"2:12863:26888"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43917:2482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2729:744":{"id":"2:2729:744","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:31385":{"id":"2:12838:31385","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44181:2476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1852":{"id":"0:52:1852","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2483:207","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12884:1819":{"id":"2:12884:1819","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12504:2458","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::rmatches":"2:12887:31388"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44121:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:6346":{"id":"2:12937:6346","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4741:6346"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44225:2471","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:31403":{"id":"2:12938:31403","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4738:31403"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44234:2472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2741:134":{"id":"2:2741:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32441:6563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12916:31398":{"id":"2:12916:31398","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:32078":{"id":"5:5552:32078","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2455","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2455","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:26897":{"id":"2:12913:26897","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:26752":{"id":"2:12928:26752","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39968:26759","Self::is_ascii":"2:12927:26214"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39968:26759","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:26876":{"id":"2:12830:26876","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12831:26877"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1808":{"id":"0:25:1808","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2483:207","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:26216":{"id":"5:5554:26216","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12930:26219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:32074","5:5537:11975","5:5540:32075","5:5543:32076","5:5551:32077","5:5552:32078","5:5553:6458","5:5554:26216","5:5555:26217"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19:1787":{"id":"0:19:1787","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2483:207","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2422:2357":{"id":"2:2422:2357","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:26888":{"id":"2:12863:26888","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12504:2458","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::split":"2:12857:26884"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43935:2481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:26217":{"id":"5:5555:26217","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12931:26220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2726:2654":{"id":"2:2726:2654","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2700:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12878:26894":{"id":"2:12878:26894","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:717":{"id":"0:16:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43070:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:31396":{"id":"2:12904:31396","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12529:2450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:31388":{"id":"2:12887:31388","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12504:2458","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::matches":"2:12884:1819"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44139:2480","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:29383":{"id":"2:12839:29383","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44209:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:26895":{"id":"2:12881:26895","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:31390":{"id":"2:12893:31390","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12504:2458","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::match_indices":"2:12890:31389"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44085:2478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:26756":{"id":"2:12933:26756","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34199"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:26218":{"id":"2:12929:26218","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3566-0:72:1778":{"id":"b:2:3566-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66:1920":{"id":"0:66:1920","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:6458":{"id":"5:5553:6458","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2420-0:72:1778":{"id":"b:2:2420-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2422:2357"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5551:32077":{"id":"5:5551:32077","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5811:1593":{"id":"5:5811:1593","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:26268":{"id":"2:12843:26268","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2949:253-0:72:1778":{"id":"a:2:2949:253-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:42:1835":{"id":"0:42:1835","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:26892":{"id":"2:12875:26892","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12872:26890","self::pattern":"2:12504:2458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44039:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:31400":{"id":"2:12922:31400","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12813:31381":{"id":"2:12813:31381","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12811:31380"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12860:26886":{"id":"2:12860:26886","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12320:2461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12816:26796":{"id":"2:12816:26796","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12059:2463"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:31387":{"id":"2:12869:31387","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12504:2458","str::split":"2:12857:26884","prim@char":"1:12032:451","str::split_terminator":"2:12866:31386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43985:2485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12807":{"id":"2:12807","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12808:873","2:12809:1872","2:12810:31379","2:12811:31380","2:12813:31381","2:12816:26796","2:12817:31382","2:12818:339","2:12819:26854","2:12820:1901","2:12822:26851","2:12824:26852","2:12826:26853","2:12828:31383","2:12829:31384","2:12830:26876","2:12831:26877","2:12832:1805","2:12833:5474","2:12834:5118","2:12835:29398","2:12836:29389","2:12837:28664","2:12838:31385","2:12839:29383","2:12840:26896","2:12843:26268","2:12846:26270","2:12849:2696","2:12853:2660","2:12857:26884","2:12860:26886","2:12863:26888","2:12866:31386","2:12869:31387","2:12872:26890","2:12875:26892","2:12878:26894","2:12881:26895","2:12884:1819","2:12887:31388","2:12890:31389","2:12893:31390","2:12896:31391","2:12898:31392","2:12900:31393","2:12902:31394","2:12903:31395","2:12904:31396","2:12907:31397","2:12910:23667","2:12913:26897","2:12916:31398","2:12919:31399","2:12922:31400","2:12925:31401","2:12927:26214","2:12928:26752","2:12929:26218","2:12930:26219","2:12931:26220","2:12932:26755","2:12933:26756","2:12934:26757","2:12935:31402","2:12937:6346","2:12938:31403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5536:32074":{"id":"5:5536:32074","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2455","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2455","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1862":{"id":"0:59:1862","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12829:31384":{"id":"2:12829:31384","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1535","crate::ops::IndexMut":"2:3232:2786","str::slice_unchecked":"2:12828:31383"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:26852":{"id":"2:12824:26852","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8990:6546-0:72:1778":{"id":"a:2:8990:6546-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8990:6546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12925:31401":{"id":"2:12925:31401","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12465:133","`FromStr`":"2:12464:2473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12464:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12464:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:26220":{"id":"2:12931:26220","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2742:1616":{"id":"2:2742:1616","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12890:31389":{"id":"2:12890:31389","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12504:2458","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12893:31390"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44067:2477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:72:1778":{"id":"b:2:2423-0:72:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:23579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12808:873":{"id":"2:12808:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:31386":{"id":"2:12866:31386","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12504:2458","str::split":"2:12857:26884","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7896:127","str::rsplit_terminator":"2:12869:31387"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43967:2486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2737:1618":{"id":"2:2737:1618","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:3040:11986":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:6896:3076":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"0:24:1804":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"1:10953:5665":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:13310:3050":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:8195:4896":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:8991:5306":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:14170:3836":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:8205:19023":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4947:16282":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:2644:4423":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11727:3458":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3278:5640":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2518:5633":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:46671:5530":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:4637:23597":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:44440:5330":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13516:3705":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:40497:2760":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:7306:2989":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:7343:12675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:14896:4051":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:23316:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:16123:4376":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5974:16970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1495:5008":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4549:16241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:40859:5285":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2697:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11126:3389":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6889:17401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:9048:23666":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:46204:5510":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:23409:5365":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4543:16240":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:401:3216":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:1455:1830":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:2284:18123":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6352:4621":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:6071:16976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12930:19087":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:41979:5301":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:6596:6579":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4968:16284":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:3147:11751":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:40667:5394":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:7554:4451":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:515:3154":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:7862:4846":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"15:0:2266":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9813:19080":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:6261:4613":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:40829:5283":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:8312:2449":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5111:16299":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:5088:4490":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:8239:4790":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:7618:2790":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:5435:4494":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:15990:4343":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:3163:25726":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:44200:2460":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11382:25327":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:22612:5340":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14662:3917":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:22644:5341":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:481:3155":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22668:5346":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:48360:5607":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6243:4603":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4977:16285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:14156:3834":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:719:3196":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:8207:2465":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:15680:4268":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:15:1782":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10422:3354":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:742:4991":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:7434:2417":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:21300:30741":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:2423:1830":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:212:2977":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:4798:3060":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"14:160:4981":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:13157:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:7782:4834":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7284:5428":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:44334:5472":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1507:13612":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:1545:2790":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"13:110:33354":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:1691:13630":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:43917:2482":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12584:3559":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:6811:6613":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:43799:5458":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8551:5781":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:3428:29359":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:5344:2978":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"9:393:17997":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:9914:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6485:4438":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:21268:30736":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"9:52:18014":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44907:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9891:19062":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:47088:5553":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9624:19059":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:41257:5292":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15212:4123":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"2:3048:11987":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:2236:32379":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:5939:4387":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:7598:16463":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4745:16258":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6107:16980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4830:16268":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:1286:5002":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:149:2966":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:5833:5272":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:6983:6100":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:2703:6065":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13419:3674":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"0:43:1837":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"17:14312:3857":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:42374:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10986:5786":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22741:29300":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11141:3390":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11485:3426":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6128:16983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:1538:1830":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:4447:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:16087:4370":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:5757:2997":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12324:3535":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:590:3167":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10881:19094":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:5963:4536":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:7689:3085":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:46550:5526":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:13108:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:15612:4248":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11563:3437":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:44652:12114":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:533:3053":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:2973:31359":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2519:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:40689:5396":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6934:17405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13832:3770":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:22720:29299":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:44724:12124":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:14822:4040":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:3480:11753":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:10203:2444":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:43841:5462":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12999:3589":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:43786:5392":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6753:4683":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4955:16283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:44886:5491":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11675:3449":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8237:6467":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:3251:3233":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12596:3560":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:1160:5006":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:15079:4090":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14413:3877":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:13182:5334":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46241:5512":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13297:3653":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7736:4832":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10293:2465":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:766:23220":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:2369:5017":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:4676:16253":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:1536:5092":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11459:3419":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15671:4264":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:1516:4991":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:563:12725":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:7287:11965":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:5639:5666":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4383:5650":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:10829:2461":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8286:6504":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2586:3056":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:41232:5291":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2785:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11041:3358":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:3189:2495":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:10391:3040":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:6929:4705":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:3482:2422":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:5885:16963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:7510:5119":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5829:16897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:9954:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"9:0:2261":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8562:5782":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:2972:2716":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:46749:5532":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:47962:5591":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14485:3537":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:7865:5704":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:39656:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:42019:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44502:5479":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11014:3382":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43875:2469":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:8359:30693":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:46103:5506":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:30695:5367":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14878:4046":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11045:3088":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:3251:5014":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:44039:2483":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4496:16234":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:3191:5012":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:44656:12115":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7102:19018":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13182:3636":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:7702:17966":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:3966:6475":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:4986:4487":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5910:16966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12972:3588":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:22786:30723":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:14778:4010":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:1558:13618":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:3104:11995":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:8146:5747":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:14235:3844":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11226:3400":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10657:3358":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10608:3357":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7582:4825":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40777:5405":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:11034:2483":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:2526:4418":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12684:3310":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10538:5640":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11612:5690":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:7663:5691":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7792:19021":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:39698:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10840:23656":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:12285:5328":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:7015:4722":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4497:4472":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8904:6583":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:48281:5602":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:43268:2445":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:6466:3073":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:23854:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12127:3514":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:8321:11961":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6741:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:0:2268":{"crate_id":17,"path":["object"],"kind":"module"},"2:44216:2470":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:11170:23676":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:16062:4362":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:1072:5006":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:11580:5320":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:15842:3608":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:6279:4616":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11743:3460":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13347:3660":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10097:5808":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"11:1051:5002":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40797:5281":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:2326:5000":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:4050:6483":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13334:3659":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"10:0:2262":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13896:3779":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:1439:5007":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10315:3215":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:893:2792":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:11516:5646":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:8326:5764":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:40820:5407":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9918:19082":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:10161:149":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:44297:11784":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:555:12724":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1514:13613":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:40448:2472":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11313:5833":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2766:4428":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:7523:3006":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11604:3440":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11469:3421":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13989:3791":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:7181:1840":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5905:4530":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6560:2968":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:435:3219":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"14:40:3623":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:1913:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2694:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:7732:6352":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:5154:3005":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:12052:1639":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:7817:11963":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6583:4645":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:3232:2786":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:46852:5534":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8352:5651":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:2428:4414":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14786:4011":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11998:26035":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12366:19207":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:1566:18079":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:9014:5798":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:859:1830":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43015:30088":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:5995:4393":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:4197:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:44191:2462":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:44365:5476":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8300:5753":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"15:288:18103":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:14439:3879":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:40759:5404":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11294:3406":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7365:17776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13491:3701":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12572:3558":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"11:430:33307":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:15337:4156":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:39616:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:8990:6546":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4440:16228":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40727:5268":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11523:3433":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:2436:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10941:2481":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6600:19015":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:844:6357":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13254:3648":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:22680:29282":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:538:3164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5146:16304":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:32488:5369":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:5760:19011":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7380:26032":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6415:4628":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:23161:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:10868:5314":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8072:4884":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6361:4622":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:15125:4101":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:8936:6584":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:44660:12109":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6944:33366":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:2569:2416":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4167:6501":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:123:12398":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6012:16973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:4252:4989":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:22069:6617":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:5830:4520":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:7422:2416":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:15037:4076":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:7644:5616":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10780:5825":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:22155:6701":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:4506:16235":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46382:5521":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11355:5687":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:46772:5533":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:16109:4372":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:4821:6488":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12659:19063":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:7668:5693":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:42167:199":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"2:7949:2496":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6159:16984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15224:4124":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11476:2828":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11194:19113":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:10618:33377":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:4641:4477":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:47884:5590":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2543:1773":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"2:30426:6470":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:1664:13627":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:12051:1638":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:7821:11962":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:7316:32356":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"0:73:1779":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"17:11065:3385":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5727:4509":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:4469:6505":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:10163:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:48255:5600":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12953:3585":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:7738:6385":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"18:491:3156":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:5634:4496":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2943:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:7540:5837":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:7604:16464":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:2426:2274":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:10738:5819":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:44171:2475":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14509:3895":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6901:4445":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:2469:2790":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:11958:3500":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:14021:3795":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8476:5776":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10569:33374":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4231:5649":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:9196:28216":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1534:4989":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:21246:2404":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:11048:5317":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:3764:4463":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:511:3220":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8281:6503":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:5897:16965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1703:6496":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6346:4620":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:12045:5321":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:634:5087":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12091:3511":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:15493:4213":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:42754:2430":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:2536:33299":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:536:4391":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7360:33368":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:11621:11776":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:5082:5657":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1632:13624":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4584:16245":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:1556:5012":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:40535:5388":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5044:16293":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4417:4470":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6968:19017":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:3564:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:6430:5676":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11991:3502":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5140:16303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12432:3551":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:2197:3229":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8866:1830":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:2979:30907":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:40788:5280":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:7616:16466":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:1650:13626":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:13095:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:4101:2997":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:5052:16294":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:8385:6542":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11144:5784":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43289:5442":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13787:3764":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:1887:1830":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:2548:4419":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:2944:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"15:306:18104":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:3888:4466":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:42079:4989":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:7694:4453":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:4914:16279":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:7915:5706":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:7375:1830":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:5384:19009":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4603:16247":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:44636:12111":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:15311:4150":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:22067:6428":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10974:3378":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:32441:6563":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:8011:6457":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:2504:4417":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40640:5391":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:12335:3537":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:4835:4482":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:21945:5336":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:4173:5257":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:2975:30908":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:7371:17777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"11:1891:2792":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40717:5400":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:12524:2452":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6222:17012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"14:0:2265":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12396:3544":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:7896:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:9069:5961":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:3830:4465":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6204:4581":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"14:202:11786":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:48208:5596":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:15589:4247":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6263:17014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:8001:5708":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:4336:5260":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:6686:2978":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12459:3378":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:44121:2479":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13922:3782":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:45997:5502":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:12049:1640":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:40456:2471":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:5866:4527":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:43935:2481":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:2940:2720":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4388:16224":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4789:16263":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:44085:2478":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6819:17398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:41920:29280":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:16004:4347":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6047:16974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:4129:25312":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:42207:4989":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13754:3756":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:8545:4989":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"11:1676:2974":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11345:3411":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:12031:1032":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4808:16265":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:6543:6577":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:681:3188":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:5051:5657":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:119:12397":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:14221:3841":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11052:3359":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:10095:5809":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:43660:5449":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:557:5617":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:4631:2643":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2574:4420":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:46528:5525":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:4584:2642":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:1505:4990":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:14698:3948":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:1576:13620":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15279:4142":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12166:3517":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11034:3087":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11800:3465":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12548:3556":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:1697:13631":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7544:4824":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11549:3436":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:3049:18152":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:3500:6426":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:1054:5000":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6136:32553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1567:5014":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:44067:2477":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:2031:3225":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"15:327:18108":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6318:4618":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6569:4443":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:2154:5096":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8190:5395":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"11:102:33292":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:4053:4468":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:41265:5294":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2826:2425":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:5971:3069":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:15329:4154":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:15160:4107":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:4989:29340":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:7041:4723":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:3600:4462":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15432:4206":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:40490:2759":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:10076:5627":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13162:3626":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"13:226:33308":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:588:6345":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5712:4506":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:7633:16468":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:46976:5551":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:7901:2441":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:7838:3290":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:2368:6417":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:21517:6618":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:43739:5454":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8858:5788":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6248:17013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"0:52:1852":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"16:6226:4596":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:6162:3068":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6696:4670":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4893:16276":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:501:12718":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11001:3380":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:11020:2484":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:4220:11749":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10803:3361":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3673:2792":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6531:4641":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10757:23583":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:6610:3074":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4529:16238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:15747:4280":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:2304:4732":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:23285:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:7858:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:574:3157":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:10535:5638":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:44348:5475":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40396:29288":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4932:16281":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9943:19065":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:8115:4888":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10813:33379":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:3060:11988":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:1688:2997":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13218:3641":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:7548:5120":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:3584:3236":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:42087:5007":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:7481:29291":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:46452:5523":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11666:3448":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11321:3358":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:673:4989":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4578:16244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:7854:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14087:3820":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11307:5682":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"8:0:2260":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:44512:5483":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:43070:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10941:3371":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:12518:2453":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5992:16972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"9:237:5442":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12486:3553":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:43812:5459":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:16160:4382":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:13448:3685":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3199:5636":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:3006:6611":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15101:4096":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:3165:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:3011:4745":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6079:16977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8535:5652":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:40845:3178":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:4740:6489":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"0:61:1877":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"11:856:4997":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4915:6531":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:6530:2978":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12140:3515":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10716:3359":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:15631:4253":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46498:5524":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:1496:13610":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:10786:2482":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5859:16961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:43985:2485":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:46051:5504":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:3687:2978":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5825:3062":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:22793:5360":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7067:4729":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13145:3623":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:46121:5507":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:21456:6428":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:5746:5669":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11767:3462":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:3315:4460":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:3196:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7318:4769":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:23130:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:4604:2644":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:44833:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:1203:3224":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12510:3554":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:47242:5556":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:15733:4277":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14324:3859":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:44843:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9790:19079":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11168:19112":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:4305:5259":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:10406:3045":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:3443:11750":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:7529:3221":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"19:0:1129":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:2722:4426":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6017:19012":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:43887:1777":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:22332:6707":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:43831:5461":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"0:18:1784":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"2:48292:5603":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13383:3669":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:14950:4061":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:14145:3832":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:32589:2727":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:790:2981":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:6013:12317":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:14282:3851":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:41807:6468":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10962:3376":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40530:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:22426:6696":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5955:16926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15527:4225":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:6100:16979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11619:5690":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:7622:16467":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:46259:5513":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13976:3790":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:15868:4298":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:4774:4480":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:42335:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:1917:5013":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:5121:4491":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8973:5791":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12701:3568":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:12053:1636":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12115:3513":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10035:3342":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7436:4547":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8814:5784":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"14:221:4988":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13663:3741":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:39603:5373":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:7692:17965":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:42095:1830":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13676:3743":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:4928:3244":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:44545:2488":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:2488:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11816:3096":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:62:12343":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:39781:5378":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9759:19078":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6268:33370":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:3232:4402":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12310:3534":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:1603:5010":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11657:3447":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5743:4510":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:1024:2978":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:15980:4342":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:5798:4514":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:5500:5665":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:12059:2463":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4434:16227":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12758:3571":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:7668:16473":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:3415:11798":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2600:3040":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:3166:25720":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8330:6533":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4647:16251":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8226:5753":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:2256:31322":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:12320:2461":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:3095:11993":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4939:1099":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:7657:16472":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:2354:6413":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:599:33383":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:15108:4098":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10016:19060":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"9:507:5073":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:2542:6166":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5015:16290":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2986:2722":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:3594:4989":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10792:5703":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:7848:5702":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:922:4994":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:951:4999":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:909:5008":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:10737:4989":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7513:4822":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4724:16257":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:700:1830":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:7599:3081":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:3915:4467":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:39676:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"10:36:33285":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4841:16269":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:10578:3085":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6425:4629":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7474:4811":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12718:19085":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:48330:5605":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2992:2724":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2939:2493":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:5431:5664":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:14399:3874":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:2983:30909":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6687:4669":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:6114:16981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2696:4425":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11714:3456":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:2370:6418":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4488:16233":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:22377:6428":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:40999:5411":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:7284:5111":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:482:3052":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:10979:5316":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"14:165:18084":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10950:3373":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11701:3454":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:928:6357":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:15087:4093":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:39517:11797":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:22559:5339":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:5946:5274":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4847:16270":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15384:4169":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:3228:2785":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3032:6610":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8453:5442":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:13407:3673":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10432:33372":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12746:3570":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:22290:30057":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"11:1582:5009":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:12529:2450":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:875:4998":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11340:5686":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6189:4579":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:40745:5401":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10988:3379":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:8292:5760":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40676:5395":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:40547:29291":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4566:16243":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:21957:30739":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:15294:4146":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12180:3518":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:44648:12116":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:22292:12004":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:836:4989":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11269:3378":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:475:12714":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:3070:11990":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:9939:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:1639:13625":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:10338:26130":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:654:12777":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1301:5000":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12784:3572":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:44021:2484":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:21509:6428":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12264:3531":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:48422:5609":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12898:19086":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8920:6582":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4613:4476":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:41223:5412":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5023:16291":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8850:4989":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2969:18151":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:4456:5262":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:1710:13632":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2989:2494":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:3403:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:9944:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:9958:2436":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:4719:4478":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:44413:5477":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:6146:3050":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:2622:5634":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13026:3595":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:23254:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"6:4364:16222":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11645:3444":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:6837:17399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:43720:5451":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12244:3526":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"10:44:5020":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:8169:6427":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11027:3333":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:21458:6619":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10925:19095":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:39632:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:32502:5370":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:6961:17407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40869:5408":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:645:6348":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11369:3412":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5867:16962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:48132:5594":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:40707:5398":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:3081:4752":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14359:3871":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:47212:5555":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:8005:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:3994:6478":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4710:16256":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8959:5790":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:12033:1656":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:42296:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3178:6363":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13707:3750":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13856:3771":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:4806:4481":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:22278:6706":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4351:16221":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:40436:2764":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:1893:30091":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11158:5785":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:434:33303":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:39795:5380":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:3753:5095":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:2949:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:5816:4519":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:12035:1149":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:3735:5646":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:123:2969":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:4889:4484":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:4379:2640":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:43492:5448":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:14057:3801":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"0:63:1892":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"17:10137:3208":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12410:3547":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:2183:31326":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:2932:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:548:12723":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:14385:3873":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:7580:3079":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:48246:5599":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:6249:3069":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:903:2790":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:15725:4274":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12536:3555":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:939:4997":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"0:25:1808":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"1:8213:2482":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:10172:3209":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4159:6500":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:15117:4099":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:10155:5810":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:7717:6351":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:40464:2470":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12850:3237":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:3398:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:3199:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10510:3355":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:5753:5672":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:2403:5007":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:2472:4416":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6228:16137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7342:33367":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7568:4452":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:5612:4441":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11088:3386":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4455:16071":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:23223:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:5969:16969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:48226:5597":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12009:3358":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:299:33300":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:1896:2790":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:1094:3222":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3980:6476":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:787:4993":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:15345:4157":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:1591:13621":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:7276:1830":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6818:4696":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:8167:4894":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:7754:5700":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6545:4643":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11290:3090":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"18:652:3157":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:32477:5368":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:30887:29298":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:9948:2429":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:3936:6473":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:3738:5093":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3075:4751":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:4185:5258":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4998:16287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:40563:5389":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5780:5673":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3201:5637":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"13:0:2258":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:755:3205":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:11593:5834":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:7388:17778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4449:16229":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:707:2453":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:3032:4457":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:2596:4421":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"0:60:1871":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"16:5049:4489":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:10532:5636":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:48307:5604":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46620:5529":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6798:17395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4461:16230":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:10906:5315":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6742:4682":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:21283:30734":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:3022:11984":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:10247:6565":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11399:3414":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8493:6556":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2691:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8891:5789":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:2562:33295":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:40:2789":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:640:5620":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:32481:4790":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:6386:4625":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12797:3574":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:1562:5013":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:43861:2474":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:42070:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:1131:31363":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6804:17396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10471:33376":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:7330:1830":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:15321:4153":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:1025:5000":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15235:4128":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:281:2455":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:9102:2451":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:31257:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:12735:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:12037:1502":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:10374:3039":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:9860:19081":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:43277:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4860:16272":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:2321:4403":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41023:5288":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:9730:19077":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:43052:2426":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:2169:19140":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:4182:2997":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14497:3888":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:1811:1186":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2933:18150":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:945:4998":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:5017:4488":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:0:2259":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9968:19083":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"9:450:17996":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:1902:5124":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:883:4999":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:636:3180":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10337:3344":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14099:3822":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5921:16967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:42156:5307":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11755:3461":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:42164:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:40384:2762":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3239:5638":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:9895:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:6559:30722":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:48383:5608":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13083:3607":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43092:2428":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:12509:2451":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:41009:5287":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:22628:30169":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:15645:4255":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11113:3388":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:396:2972":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:46718:5531":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:44234:2472":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:1685:2978":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11215:3398":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:6194:5675":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:5648:4500":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:5130:16302":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:3323:6454":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:0:1685":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:2209:6409":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:45927:5499":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:46352:5520":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:4444:2999":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7367:1830":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:42147:12068":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7931:5093":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:8403:5773":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:4807:2750":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:4092:5007":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11779:3463":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9147:5804":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:48086:5593":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:0:2263":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:42610:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:43027:4861":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:533:12721":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:1570:13619":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2406:4413":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:44924:5496":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:256:3213":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:16098:4371":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:3394:2997":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:4585:4475":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:42997:2426":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:2320:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5068:16295":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:0:2267":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:621:2421":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13633:3732":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2942:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:44209:2459":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4964:6538":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:595:3221":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14921:4053":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:1969:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4180:6502":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"11:2231:2828":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:3065:11989":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:2994:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12418:3549":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:21639:5337":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:14296:3853":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:43260:5438":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5571:6562":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:22200:6702":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:10822:5644":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:3732:5645":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:41836:30089":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15253:4132":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:15710:4273":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10102:3207":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7503:4449":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2205:3020":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:867:4992":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4738:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:7026:3077":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:2202:5632":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14904:4052":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:5661:4505":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7534:4450":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:15003:4073":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"9:177:18064":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3053:4747":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:22703:5348":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4854:16271":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:4700:6532":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:44644:12112":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:7559:5121":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47166:5554":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:5004:2997":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5104:16298":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:4745:4479":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5075:16296":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:4921:4485":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2744:4427":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:22695:5347":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"11:1923:5014":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"14:215:4986":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:5696:19010":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12230:3521":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7492:4819":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12273:3575":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:10968:23663":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:7610:16465":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22263:6428":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:1063:5002":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7346:5112":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4038:6480":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:2864:4432":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:3425:5756":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"15:394:18114":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:44894:5493":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8842:5786":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:12464:2473":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:11197:5681":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:8154:4892":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5152:16305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:43749:5455":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:918:4991":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"0:66:1920":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"17:14455:3881":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:5403:3342":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:364:2970":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:1087:33302":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:43507:29402":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:15367:4162":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:43760:5456":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:569:12726":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9186:28204":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:830:2984":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:2525:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:9743:2427":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:504:2991":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8872:5667":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:4520:3024":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4428:16226":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:3225:5011":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:7855:5703":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12828:3575":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:4451:5261":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:46404:5522":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:13235:3643":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:2548:33298":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6086:16978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:1546:13617":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:6120:16982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4755:16259":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:9896:2422":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4908:16278":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:1674:13628":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:489:12716":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:3280:5641":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2414:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:2062:5095":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6844:4697":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:5982:4543":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:596:12730":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4870:16273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:1486:4993":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10051:3343":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2655:11812":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"0:65:1910":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"17:11690:3453":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6376:19014":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:687:5007":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:43903:2465":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40698:5397":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:42987:30095":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:2383:4989":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:588:12729":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:1315:5006":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6682:12598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:39774:5377":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11978:3501":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:6711:17394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:15013:4074":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:8050:4883":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:5322:4492":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2330:12004":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:4575:3025":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:3409:11799":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11178:5960":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8984:5794":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:7573:3201":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:23347:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2907:4434":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12290:3532":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:13130:30478":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:9474:5701":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:5877:2792":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:15200:4117":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15027:4075":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13309:3656":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7621:19020":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11536:3435":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4989:16286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:1066:18078":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:44181:2476":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4814:16266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10831:23675":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:3065:3247":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:0:2269":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10520:33378":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:5388:2456":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10667:33375":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:495:12717":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:10308:3036":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:5632:3069":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6332:4435":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12014:23672":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:41238:5413":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:800:2792":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13809:3765":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:2380:4412":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13395:3672":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:12246:5326":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:16049:4356":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:46574:5527":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:4042:6481":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:11453:3092":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6083:18122":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:40516:2756":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:5928:16968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"0:19:1787":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"2:3091:11992":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:30781:29301":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8828:5785":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:13348:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:47632:5588":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46081:5505":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:40426:2763":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11981:5840":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:41790:5300":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:3193:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12356:3540":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:30711:2426":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:3655:3252":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:690:3190":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14001:3792":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43043:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2810:4430":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12220:3237":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:521:23221":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:16146:4381":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:6666:13570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11388:25325":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13056:3599":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2997:2726":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:10761:5007":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:45951:5500":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:22506:5338":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:3366:5413":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22807:5361":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44225:2471":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:41209:5289":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:7054:4726":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:39556:11752":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:43729:5453":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:4777:717":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:7556:17937":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:48170:5595":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:40620:5390":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:7645:16470":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:6369:5276":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2450:4415":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:1040:4732":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:564:3166":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:15244:4131":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11497:3430":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11370:5689":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15301:4147":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3837:5647":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7634:2791":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:483:12715":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10775:3360":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:44936:5019":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:6604:1830":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:45907:5498":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:6764:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6898:17402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9164:5805":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13322:3658":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:15943:3626":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:1115:30965":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:6861:2797":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:13463:3691":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:1537:13616":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:2144:2991":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"0:68:1931":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:8232:5755":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:16016:4349":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:7679:16474":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14208:3840":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:3818:2790":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:16134:4378":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:1902:2420":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:46306:5514":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:44525:2487":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:15049:4079":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:3028:4746":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"11:351:33288":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:5381:5658":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"11:2124:4732":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6401:4437":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:2352:6412":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:7003:3015":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15535:4226":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:10583:6428":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11537:5647":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:42571:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4556:16242":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:1774:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:41998:5303":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11412:3415":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4535:16239":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12445:3552":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:880:4993":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14251:3846":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:7633:3063":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4878:16274":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:4381:2999":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13273:3649":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:14122:3831":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:614:33384":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:637:5618":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:3797:4464":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:3325:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:1883:4989":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:41956:5648":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:357:5614":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:9603:30163":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5004:16288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:12504:2458":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:1270:4732":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11449:3289":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:8097:4886":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10762:28211":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4949:4486":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:7136:25318":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:41943:5426":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12103:3512":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4595:16246":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:44949:5497":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:12029:12076":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5033:16292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:48024:5592":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:16180:3658":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6513:4633":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:14426:3878":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:15855:3622":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:1781:5123":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"11:2352:5002":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:3510:6446":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:7267:2788":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:43711:5450":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:12575:11778":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:23099:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:21285:30745":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:2911:3059":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4764:16260":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:15480:4207":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12387:19208":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:10473:3084":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:6718:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3388:11996":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6927:17404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:46182:5509":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13504:3702":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:1821:5629":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11256:3404":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:4411:2997":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:6943:17406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15689:4270":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:8181:4456":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13121:3622":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11945:3498":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12077:3507":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11605:28651":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:10767:5702":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"11:811:2790":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:46222:5511":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8137:3201":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:30723:29297":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"0:59:1862":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"17:12921:3537":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"9:426:17998":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1796:5627":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12560:3557":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:6564:3032":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:113:23210":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:2151:5002":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:80:23208":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14373:3872":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8308:5762":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:2228:3232":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:7028:3019":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:3461:4461":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:15659:4262":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:21256:30736":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:40375:5381":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6868:17400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2954:2646":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:9946:2430":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10155:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:14843:4045":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13961:3787":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:9026:5800":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:9128:5681":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:6871:2798":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:1760:5626":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:582:2404":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:4020:2792":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13869:3774":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:42491:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:48345:5606":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1528:13615":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:5992:3005":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:43307:5447":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:23068:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11243:3403":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7523:4823":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:4530:2641":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:6070:3064":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:736:23219":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:13299:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1819:5628":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:21915:6428":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:7651:16471":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:9678:19066":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:3443:5643":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:2700:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:7639:16469":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:22819:6471":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10242:3211":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5574:4436":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:42104:5428":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10726:33373":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10915:3370":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:11062:5318":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6721:19016":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:42452:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:7643:6428":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:3607:5007":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:30689:2783":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:507:12719":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13695:3748":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:43893:2466":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:23378:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"14:7:4981":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:7497:5116":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2417:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44477:5478":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:15546:4231":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:12039:1621":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:6842:2796":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:44139:2480":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:47774:5589":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:23192:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:6781:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:14346:3870":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7843:5701":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:4906:6530":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14041:3796":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:6540:5677":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:0:2264":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:7867:2497":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4523:16237":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:624:33382":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6467:4632":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:3460:3235":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:15177:4114":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5588:4439":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:40736:5271":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46152:5508":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:42747:2429":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:21628:6428":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:40412:2761":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:39968:26759":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:11476:5645":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:42413:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:4212:2997":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:837:4994":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11155:3392":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:2443:2792":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:6700:17393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:32495:2641":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:41216:5290":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:3343:2790":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:2533:1774":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"6:4686:16254":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14989:4070":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10944:5070":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:46019:5503":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:40768:5275":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5982:16971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7660:4830":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:542:12722":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6691:17392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:9651:19076":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2380:6423":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:2703:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7450:3001":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:8281:4903":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7722:4444":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:40647:5392":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43967:2486":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11617:3441":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"11:832:5008":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:16170:3653":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7597:33365":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1682:13629":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:15507:4219":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:14765:4003":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:16076:4365":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:48235:5598":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6059:16975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14470:3885":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"9:357:18011":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:15903:4328":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:7006:4719":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4610:16248":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"0:51:1847":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"1:8991:23671":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:7296:2792":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:42137:5430":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:3988:6477":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4800:16264":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1501:13611":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13948:3785":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:44851:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6915:4446":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13648:3736":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:2832:4431":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:11215:5965":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:5568:6561":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5363:4493":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13365:3668":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:44712:5488":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4783:16262":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4151:6499":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2662:5635":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:3491:25975":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:727:3199":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6913:17403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:644:3157":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:1550:5011":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13935:3783":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:5891:16964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4401:16225":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:21530:5337":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10067:3206":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:8157:5644":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:2483:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:7884:19022":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:42215:5007":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:10593:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7128:5802":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11426:3416":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:15267:4139":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13742:3754":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14934:4058":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:8134:4891":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3230:32488":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:4862:4483":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:914:4990":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:1477:4992":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6456:4631":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:2474:6067":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7090:4731":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:40471:2757":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:12055:1695":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:21637:6616":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:44632:12108":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:11395:3413":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:2881:4433":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:7467:5113":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4375:16223":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:1879:12014":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:6426:5412":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4776:16261":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:43252:2443":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12052:3505":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1151:30970":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:849:5007":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:15519:4222":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:660:3181":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11932:3497":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:1873:2419":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"9:486:17995":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"0:0:2144":{"crate_id":0,"path":["strsim"],"kind":"module"},"16:7269:33369":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:8200:5411":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:13403:2787":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14194:3839":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:14633:3897":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:47426:5558":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2618:4422":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:3160:29021":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:261:3214":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4666:16252":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3241:5639":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:2140:5000":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12255:3530":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12614:19084":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43821:5460":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:8315:6361":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:6553:5282":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:48266:5601":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7391:19019":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:31285:2404":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11576:3438":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:44319:5467":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11051:3089":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:40369:2471":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:22757:29285":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:15062:4085":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7828:4842":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:12038:1535":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"7:78:17989":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13882:3470":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13097:3608":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:5392:2457":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:1142:5005":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4491:6506":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10940:5700":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:1521:13614":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:886:2986":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:44640:12113":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6041:19013":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:44687:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:42257:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3670:6469":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:0:1527":{"crate_id":1,"path":["std"],"kind":"module"},"17:10852:19093":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:4050:2978":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:14757:4000":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8006:5709":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:15133:4103":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5009:16289":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:2305:18149":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:6879:4701":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:22346:12004":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:7613:4828":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"14:187:18091":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:671:3187":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7923:5707":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:9956:2435":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:42761:2437":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:47006:5552":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:14887:4050":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:1107:5004":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10559:3356":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:4239:11801":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:6169:16985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4473:16231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:7351:29395":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40810:5406":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:5415:5663":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:9274:5628":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4628:16250":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6792:4695":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:9416:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4824:16267":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:40577:6396":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:44664:12110":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:42768:2438":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42223:1830":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:5068:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:5662:2997":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"11:1910:5012":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"9:330:18051":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:10430:5783":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:47276:5557":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4922:16280":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:15566:4234":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:2048:5093":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10207:3210":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21920:6621":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:11307:3407":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:14181:3837":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"0:72:1778":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"5:6117:2997":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:527:12720":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:1424:4989":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2707:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43511:5311":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7462:4810":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:46930:5550":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:30655:2782":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:15961:3636":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13765:3757":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8274:5648":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7651:4829":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13285:3652":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:12056:1245":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13584:3707":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2332:12005":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:22392:6697":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:8989:6354":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:574:12727":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:328:33286":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12202:19206":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6499:4455":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6156:4574":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:3184:4989":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9559:19061":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:4527:4473":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46596:5528":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7768:4442":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:266:2978":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"14:31:4981":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:42530:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:4625:6478":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13724:3753":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5673:4440":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:44668:5960":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:1007:4732":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:96:23209":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:1734:13634":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:6484:2792":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4616:16249":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10896:3368":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4639:23599":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4698:16255":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2788:4429":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:363:5615":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:3001:6609":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:21511:6615":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4480:16232":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:4744:6492":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8796:5783":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:2554:33294":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:22239:6703":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12345:3539":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:41773:5298":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:609:3174":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"0:42:1835":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"16:6960:4708":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6893:4703":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9034:5802":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:12050:1637":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:6658:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5941:16925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12301:3533":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:44491:11785":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2089:5127":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:3099:11994":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2774:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4516:16236":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4884:16275":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:4658:451":{"crate_id":2,"path":["core","char"],"kind":"module"},"11:710:4990":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4703:6505":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:42649:5309":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13684:3745":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:3016:4742":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:12269:5327":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:42232:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13436:3682":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"18:507:3157":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:4742:6491":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3930:6474":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"11:774:4992":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:4344:4469":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:5419:3343":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:12209:5323":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12191:3519":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:4462:4471":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3196:32489":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:8220:2475":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14266:3850":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15374:4164":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:21302:30731":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:9598:30690":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:42170:133":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"6:5085:16297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11507:3431":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:1596:13622":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:11547:5319":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:43299:5446":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:12003:6353":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:4:1112":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7708:4454":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5395:5662":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1758:5625":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"18:531:3161":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:5650:2796":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4902:16277":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1604:13623":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15287:4145":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10785:33380":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:5117:16300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:903:4989":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2654:6428":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:9021:5799":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:699:3191":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:9952:2438":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"11:1903:5011":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:21314:30743":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15356:4161":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:9411:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:39742:2410":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12872:3577":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:4968:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:1789:2790":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:12380:3542":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:2339:4405":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:4557:4474":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:22421:6698":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:2359:4411":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12474:3358":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"7:31:17982":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:3036:6612":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12029:3504":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2670:4424":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:41750:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:3217:5013":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3044:11985":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:9950:2437":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:7403:11957":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13202:3637":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12153:3516":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4635:23595":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:10198:2442":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:39720:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:3807:1830":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:45973:5501":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11590:3439":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5123:16301":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:7906:2440":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:1541:2792":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:16032:4354":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:1718:13633":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:15192:4116":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:9479:3083":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:4311:2817":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11632:3443":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:6351:6709":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13478:3697":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11439:3417":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11817:19182":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:40483:2758":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:41247:3034":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13909:3780":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:26256:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:580:12728":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:3087:11991":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:15184:4115":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4569:6523":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14969:4062":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6813:17397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:5027:5265":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:40610:3026":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15557:4232":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:4773:3242":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:9971:5423":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:4028:6479":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}