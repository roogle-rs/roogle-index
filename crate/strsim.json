{"root":"0:0:2049","crate_version":"0.10.0","includes_private":false,"index":{"2:12312:1724":{"id":"2:12312:1724","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11937:2353","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::rmatches":"2:12315:29982"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43920:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12246:320":{"id":"2:12246:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12247:319","`u8`":"1:12052:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:319":{"id":"2:12247:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12052:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:22930":{"id":"5:5528:22930","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12358:22933"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:4889":{"id":"2:12262:4889","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43702:2360","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:1742":{"id":"0:43:1742","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2317:190","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:29993":{"id":"2:12347:29993","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1835":{"id":"0:68:1835","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12324:29985":{"id":"2:12324:29985","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12300:24960":{"id":"2:12300:24960","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353","str::rsplitn":"2:12303:24962"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43820:2379","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2765:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61:1782":{"id":"0:61:1782","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12281:2558":{"id":"2:12281:2558","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:6218":{"id":"5:5527:6218","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:30655":{"id":"5:5525:30655","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3393:1535":{"id":"2:3393:1535","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39599:5020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12261:5241":{"id":"2:12261:5241","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12035:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43692:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:832":{"id":"2:12236:832","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12035:427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:29996":{"id":"2:12360:29996","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4523:29996"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44015:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12235":{"id":"2:12235","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12236:832","2:12237:1777","2:12238:29971","2:12239:29972","2:12241:29973","2:12244:24525","2:12245:29974","2:12246:320","2:12247:319","2:12248:1805","2:12250:24922","2:12252:24923","2:12254:24924","2:12256:29975","2:12257:29976","2:12258:24946","2:12259:24947","2:12260:1710","2:12261:5241","2:12262:4889","2:12263:28168","2:12264:28172","2:12265:28017","2:12266:29977","2:12267:28159","2:12268:24964","2:12271:24965","2:12274:24966","2:12277:2594","2:12281:2558","2:12285:24954","2:12288:24956","2:12291:24958","2:12294:29978","2:12297:29979","2:12300:24960","2:12303:24962","2:12306:29980","2:12309:29981","2:12312:1724","2:12315:29982","2:12318:29983","2:12321:29984","2:12324:29985","2:12326:29986","2:12328:29987","2:12330:29988","2:12331:29989","2:12332:29990","2:12335:29991","2:12338:22742","2:12341:24967","2:12344:29992","2:12347:29993","2:12350:29994","2:12353:29995","2:12355:22928","2:12356:24863","2:12357:22932","2:12358:22933","2:12359:22934","2:12360:29996","2:12362:6111","2:12363:29997"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12248:1805":{"id":"2:12248:1805","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:72:1682":{"id":"b:2:3391-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12328:29987":{"id":"2:12328:29987","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:29974":{"id":"2:12245:29974","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:22932":{"id":"2:12357:22932","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:6119-0:72:1682":{"id":"a:2:8471:6119-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:6119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:30652","5:5511:11719","5:5514:30653","5:5517:30654","5:5525:30655","5:5526:30656","5:5527:6218","5:5528:22930","5:5529:22931"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12297:29979":{"id":"2:12297:29979","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11937:2353","str::split":"2:12285:24954","prim@char":"1:12035:427","str::split_terminator":"2:12294:29978"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43784:2380","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2560:1522":{"id":"2:2560:1522","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:22934":{"id":"2:12359:22934","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1691":{"id":"0:19:1691","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1688","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2317:190","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:29981":{"id":"2:12309:29981","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12244:24525":{"id":"2:12244:24525","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11497:2358"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12362:6111":{"id":"2:12362:6111","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4524:6111"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44024:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:72:1682":{"id":"b:2:2253-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2261"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:16:685":{"id":"0:16:685","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42829:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:627":{"id":"0:79:627","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1757":{"id":"0:52:1757","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2317:190","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1682":{"id":"0:72:1682","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1683"],"impls":["a:2:2772:231-0:72:1682","a:2:2755:223-0:72:1682","a:2:2812:2389-0:72:1682","a:2:8471:6119-0:72:1682","a:2:8472:6306-0:72:1682","b:2:2253-0:72:1682","b:2:2556-0:72:1682","b:2:2550-0:72:1682","b:2:2561-0:72:1682","b:2:2546-0:72:1682","b:2:2256-0:72:1682","b:2:3391-0:72:1682","b:5:5771-0:72:1682","0:75","0:17","0:77","0:15","0:78"]}}},"0:66:1824":{"id":"0:66:1824","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12237:1777":{"id":"2:12237:1777","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12294:29978":{"id":"2:12294:29978","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11937:2353","str::split":"2:12285:24954","prim@char":"1:12035:427","`DoubleEndedIterator`":"2:7388:121","str::rsplit_terminator":"2:12297:29979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43766:2381","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:22931":{"id":"5:5529:22931","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12359:22934"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12239:29972":{"id":"2:12239:29972","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:29995":{"id":"2:12353:29995","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11898:127","`FromStr`":"2:11897:2368"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11897:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11897:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:22933":{"id":"2:12358:22933","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:29975":{"id":"2:12256:29975","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12041:1441","str::slice_mut_unchecked":"2:12257:29976","crate::ops::Index":"2:3052:2682"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2317:190","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:627"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12335:29991":{"id":"2:12335:29991","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","cause","provide","description"],"trait":{"name":"Error","id":"2:2608:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12259:24947":{"id":"2:12259:24947","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12258:24946"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:24966":{"id":"2:12274:24966","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12344:29992":{"id":"2:12344:29992","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2258:22719":{"id":"2:2258:22719","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:685":{"id":"0:76:685","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1713":{"id":"0:25:1713","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2317:190","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1688":{"id":"0:18:1688","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:51:1752":{"id":"0:51:1752","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:72:1682":{"id":"b:2:2546-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:2552"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12288:24956":{"id":"2:12288:24956","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11753:2356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:24967":{"id":"2:12341:24967","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:24964":{"id":"2:12268:24964","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12264:28172":{"id":"2:12264:28172","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12263:28168"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43999:2355","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:72:1682":{"id":"b:2:2550-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9371:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42:1740":{"id":"0:42:1740","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:30653":{"id":"5:5514:30653","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5773:1499":{"id":"5:5773:1499","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12257:29976":{"id":"2:12257:29976","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12041:1441","crate::ops::IndexMut":"2:3056:2683","str::slice_unchecked":"2:12256:29975"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:28017":{"id":"2:12265:28017","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43970:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1767":{"id":"0:59:1767","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:24863":{"id":"2:12356:24863","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39786:24847","Self::is_ascii":"2:12355:22928"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39786:24847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2255:2261":{"id":"2:2255:2261","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330:29988":{"id":"2:12330:29988","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5771-0:72:1682":{"id":"b:5:5771-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9371:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5773:1499"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2049":{"id":"0:0:2049","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1682","0:18:1688","0:19:1691","0:24:1709","0:25:1713","0:42:1740","0:43:1742","0:51:1752","0:52:1757","0:59:1767","0:60:1776","0:61:1782","0:63:1796","0:65:1814","0:66:1824","0:68:1835"],"is_stripped":false}}},"2:12355:22928":{"id":"2:12355:22928","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:6306-0:72:1682":{"id":"a:2:8472:6306-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:6306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12250:24922":{"id":"2:12250:24922","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:72:1682":{"id":"b:2:2256-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:22719"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:1709":{"id":"0:24:1709","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1688","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12258:24946":{"id":"2:12258:24946","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12259:24947"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:711":{"id":"2:2552:711","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1776":{"id":"0:60:1776","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12238:29971":{"id":"2:12238:29971","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12263:28168":{"id":"2:12263:28168","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12264:28172"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43990:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1796":{"id":"0:63:1796","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2322:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9582:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2549:2552":{"id":"2:2549:2552","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2523:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1814":{"id":"0:65:1814","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12303:24962":{"id":"2:12303:24962","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12035:427","str::splitn":"2:12300:24960","self::pattern":"2:11937:2353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43838:2378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12321:29984":{"id":"2:12321:29984","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11937:2353","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::match_indices":"2:12318:29983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43884:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:29997":{"id":"2:12363:29997","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4521:29997"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44033:2367","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:11719":{"id":"5:5511:11719","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:72:1682":{"id":"b:2:2561-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2564:128":{"id":"2:2564:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32257:6323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2565:1521":{"id":"2:2565:1521","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:29990":{"id":"2:12332:29990","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11962:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:72:1682":{"id":"a:2:2755:223-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12241:29973":{"id":"2:12241:29973","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12239:29972"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2559:128":{"id":"2:2559:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:2812:2389-0:72:1682":{"id":"a:2:2812:2389-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12285:24954":{"id":"2:12285:24954","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11937:2353","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::split_whitespace":"2:12263:28168","str::rsplit":"2:12291:24958"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43716:2377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12252:24923":{"id":"2:12252:24923","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12306:29980":{"id":"2:12306:29980","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1683":{"id":"0:73:1683","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12350:29994":{"id":"2:12350:29994","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:30656":{"id":"5:5526:30656","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2350","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2350","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12260:1710":{"id":"2:12260:1710","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12035:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43686:1681","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12267:28159":{"id":"2:12267:28159","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44008:2354","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12291:24958":{"id":"2:12291:24958","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11937:2353","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::split":"2:12285:24954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43734:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:29986":{"id":"2:12326:29986","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12338:22742":{"id":"2:12338:22742","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:72:1682":{"id":"a:2:2772:231-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12277:2594":{"id":"2:12277:2594","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12254:24924":{"id":"2:12254:24924","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12315:29982":{"id":"2:12315:29982","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11937:2353","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::matches":"2:12312:1724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43938:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12266:29977":{"id":"2:12266:29977","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43980:2371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:30652":{"id":"5:5510:30652","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2350","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2350","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12318:29983":{"id":"2:12318:29983","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11937:2353","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::rmatch_indices":"2:12321:29984"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43866:2372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:24965":{"id":"2:12271:24965","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:2353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:29989":{"id":"2:12331:29989","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2556-0:72:1682":{"id":"b:2:2556-0:72:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5517:30654":{"id":"5:5517:30654","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:45726:5266":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:43058:5213":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2859:6372":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11815:3462":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:8157:5524":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5737:16559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13148:3738":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6352:4394":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4037:6239":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:14296:4087":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:22546:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:5866:4300":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:22238:5002":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:21014:11750":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:5025:15979":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13575:3878":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10166:5587":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:8848:18735":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:1520:13355":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:43999:2355":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:582:2302":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10108:5585":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:6432:5180":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:45750:5267":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8319:5539":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:119:12139":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:45920:5274":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:2209:3113":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:14134:4025":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:2898:4524":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:21147:11750":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:3052:2682":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:5743:4283":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4685:15940":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6944:32349":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:3183:31468":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:41650:29202":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:7621:18679":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5080:15985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5798:4287":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4606:15934":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2772:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4716:15943":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3228:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:12607:4975":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13676:3917":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:42786:4634":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6243:4376":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5074:15984":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14308:4090":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:43066:5214":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:8297:6264":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13135:3737":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4489:15923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:614:32367":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7782:4607":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6720:17056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:43266:28417":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:4234:4763":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:5503:5440":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:39613:5022":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:21369:6376":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:12041:1441":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:41030:4931":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:8877:1735":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:11358:5462":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:7359:2395":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:0:837":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10197:3277":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:12059:1159":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:3330:2689":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:652:3038":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13723:3925":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:7717:6116":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14401:4116":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:11520:5419":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:2353:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11910:3489":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:10974:23116":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6268:32353":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12970:3704":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7474:4584":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:41079:4936":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:8686:18730":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:6472:2954":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:8097:4659":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12305:3572":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9972:3257":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:8471:6119":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:5760:18670":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12711:3649":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7360:32351":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4456:15918":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9780:3238":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"11:798:4768":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"9:237:5209":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6513:4406":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4463:15919":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11788:3456":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:5839:2691":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12959:3703":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11351:3420":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11000:3382":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:7541:5613":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:9158:5581":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:41037:5180":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4917:15967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:11161:5562":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:5963:4309":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:1118:29957":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7006:4492":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10023:3236":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:22231:29637":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10447:3301":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:8115:4661":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11389:3427":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10603:3321":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10097:3266":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:9032:5576":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:12775:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:6558:1735":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12465:3610":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8292:6263":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:7911:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8902:5566":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:10021:6191":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:7575:16153":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:30597:28640":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:23323:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13973:3983":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:43532:5222":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:4824:6248":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:8224:2377":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:20828:29895":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12983:3706":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:4909:6290":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:8989:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:9277:3092":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2520:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"11:1838:4785":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11181:5734":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:10575:3318":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:9381:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:47075:5324":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13792:3940":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6929:4478":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:4448:427":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:3223:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:1544:2877":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:7586:16154":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:44632:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:5398:5436":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6415:4401":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4781:15951":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:5831:2944":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"0:25:1713":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:48065:5368":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:43660:2369":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:568:12467":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:46805:5319":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10340:3289":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:506:12460":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12062:3516":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:9812:2919":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:5574:4209":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:9844:2925":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:9617:32357":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:1818:4763":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10831:5417":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:43251:5215":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:4638:24675":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:7511:16144":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:44439:11852":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:12033:378":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4770:15950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:531:3042":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:46965:5321":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:43702:2360":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:4918:6291":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:5449:5439":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"0:24:1709":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4556:15931":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:7881:5480":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:5900:16632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:22140:4989":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:2035:4864":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:32405:2624":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"0:63:1796":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"17:13422:3764":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:21285:4979":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9921:3250":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:30525:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:4497:4245":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12267:3564":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:9531:32360":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:6788:2696":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:1055:4774":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:4310:2904":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:2767:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4420:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43970:2370":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:40204:2659":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:12473:3612":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:48129:5372":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"14:31:4754":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11586:3441":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:44348:2383":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8237:5530":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2478:11566":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22645:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"11:1852:4787":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:43734:2376":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7436:4320":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4664:15939":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:2049:4774":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:45818:5270":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:10348:4956":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12658:3641":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7660:4603":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7128:5579":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:40549:4912":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:7388:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:62:12085":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:4642:24679":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:1717:13374":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5044:15980":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:44447:11853":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:2060:4776":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:40530:5168":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:21012:28357":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:14346:4100":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:97:32284":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:6901:2957":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:11616:5465":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4304:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:1839:5399":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12531:3621":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:12111:3525":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:910:4782":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:5905:4303":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12484:3615":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:311:32275":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:4640:24677":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:2472:4189":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:41670:28631":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"9:0:2165":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:39419:5015":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:7770:5010":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:8396:6302":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:7558:16151":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:11479:5418":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:4478:6265":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:1595:13363":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13876:3960":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4535:15928":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:690:3071":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:894:2691":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:41706:5421":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6560:2839":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:1503:4765":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2914:11736":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10661:3331":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:7935:4864":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6850:17065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:1121:4780":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:736:22706":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:10031:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6015:16640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10747:5596":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2922:11738":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3679:6229":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:7438:2885":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13914:3968":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6361:4395":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:1821:2685":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:9003:18740":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:9625:2337":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:881:4767":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:8134:4664":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12074:3519":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:4862:4256":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6456:4404":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:47683:5357":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7090:4504":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5830:4293":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:6648:13496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3529:6209":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"0:59:1767":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"2:2893:11734":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10507:3313":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:2755:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:9115:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:9912:3248":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:22843:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:2881:4206":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3303:5413":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:44463:11850":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:22264:6231":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:895:4763":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8573:5559":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:1928:670":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"11:399:32277":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6960:4481":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:149:2837":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:562:12466":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6742:4455":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:10989:4960":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13851:3952":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9867:3245":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:5128:2884":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1495:13351":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6598:17051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:46571:5300":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:41899:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:6955:2899":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:44015:2365":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:9385:2333":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:4239:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4428:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6189:4352":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:7250:12416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3504:2321":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7492:4592":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:635:5387":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:43569:5160":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:9372:3223":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:3232:3114":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:9701:3236":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14100:4018":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:1831:2689":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:10698:3336":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9985:3259":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:45850:5271":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:8713:18731":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8807:5560":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:4590:2647":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:2194:32285":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4801:2940":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4748:15947":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:3224:5409":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40310:2656":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1673:13369":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:2049:4866":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10126:3269":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:5622:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:4053:4241":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:7309:11707":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9896:18753":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:9455:32362":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:481:3036":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8231:2370":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:40268:2367":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:43019:5205":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:3983:4901":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2812:2389":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:536:4164":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:7261:4883":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:636:3061":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:46297:5291":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14499:4141":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:2526:4191":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:22073:29247":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:2933:17809":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:22513:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:6548:6337":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:0:2171":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:2817:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:5418:5437":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:332:2842":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13244:3748":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8487:5553":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:2213:5402":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:39333:11555":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46251:5290":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:42851:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13989:3985":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11623:5465":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4650:15938":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11456:2973":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2851:4519":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:1558:1735":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:40397:6159":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:10771:26914":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10292:3235":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:43686:1681":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"11:749:2691":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:7350:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:2406:4186":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7694:4226":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:2012:3106":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:986:4774":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:5759:5446":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:515:3035":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:5457:2877":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6792:4468":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2997:2391":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:14033:3999":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:48144:5373":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12576:3631":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:12050:762":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:47573:5356":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12184:3539":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:1517:4783":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:9488:32361":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4745:6251":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:1733:13375":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5882:16630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:860:1735":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43884:2373":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"15:327:17767":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:11063:11533":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:4007:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:4743:6249":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:40520:5166":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13274:3415":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12452:3608":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:526:12461":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:40256:2661":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4949:15971":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14316:4093":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10771:3343":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:5054:5431":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4740:15946":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8243:5532":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:2477:6191":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"0:65:1814":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"17:13758:3929":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:30503:2680":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:8978:18739":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2876:4520":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:9287:5398":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6499:4228":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:2777:2544":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:2150:18798":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:11327:3418":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:8825:18734":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:48106:5371":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:4527:4246":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10992:5563":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4895:15965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:657:1735":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:6160:29639":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5775:16622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:48159:5374":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4764:15949":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13298:3762":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5673:4213":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10430:3296":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:2690:5832":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40572:5172":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:2574:4193":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:6168:2950":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:6869:28484":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2496:5403":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5008:15977":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:40610:4922":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:2033:4505":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:43582:5225":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:12056:1540":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:40284:2365":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40336:2653":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"9:450:17655":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12086:3520":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7544:4597":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:3065:3125":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12007:3508":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:22113:4988":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11056:2970":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12554:3624":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:40303:2655":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11337:18865":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11215:3404":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:44443:11854":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:43604:5227":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:434:3100":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7067:4502":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:4921:4258":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:11962:2345":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7318:4542":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:2377:1677":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"2:2867:11729":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:7552:16150":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:40826:4928":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:5568:6322":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:43784:2380":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:582:3102":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:481:2932":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:3213:11740":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:7609:17625":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:11483:4962":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:41891:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:5836:16628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:3032:4230":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:3565:3117":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:940:4771":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2526:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:5712:4279":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6171:16674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:2381:6181":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:5049:4262":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:4462:4244":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43838:2378":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:5727:4282":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:9025:5575":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:7743:5473":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:573:12468":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:3655:3130":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"14:187:17750":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:48007:5363":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:10106:5586":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"10:44:4791":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6607:17052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8363:5425":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12043:3515":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:44706:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11310:5457":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:7846:29917":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:1068:4778":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:285:32272":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7708:4227":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:532:12462":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:44685:5258":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:12555:28309":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12422:3599":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:507:3038":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:6916:11701":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:4374:2540":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:46470:5297":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:22252:5003":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:20796:29693":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"11:365:2844":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4824:15957":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:40623:5174":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:22089:4983":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8168:5417":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"18:755:3086":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10059:3263":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6726:17057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:20809:29890":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:400:3097":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:2573:2920":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43766:2381":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44033:2367":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3389:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:39599:5020":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:4557:4247":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:4171:2538":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:1513:13354":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:500:12459":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:868:4766":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:707:2348":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:12001:26806":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:46349:5293":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:42226:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:2762:2388":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12024:3510":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:9120:5455":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:41755:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"18:766:22707":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:7919:5482":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:7290:1735":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:2839:4515":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8947:6344":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:629:4858":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:8050:4656":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4320:5423":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:7766:5476":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:14001:3991":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1761:624":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:7412:4887":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8995:5571":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3741:5418":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:11385:24521":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:20964:6381":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:2380:4185":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:3720:4864":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"10:36:32271":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:12049:761":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:14042:4000":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13981:3984":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:30539:28639":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:22165:28619":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:0:1433":{"crate_id":1,"path":["std"],"kind":"module"},"17:256:3094":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:40216:28621":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:123:12140":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:1064:4776":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:3915:4240":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7102:18677":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:2220:6172":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:9588:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:9139:5456":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:41693:5194":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:10186:3275":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6425:4402":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:587:12470":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:504:3101":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3945:6233":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:12048:760":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:21364:6191":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:2815:2621":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:1426:4781":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:5629:2942":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6687:4442":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:22810:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13259:3752":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:47225:5325":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:8195:4669":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6136:15820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44642:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:7282:1735":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6022:16641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:2829:6371":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:46003:5277":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13487:3815":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5419:3222":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:2722:4199":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:40590:5173":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:1663:13368":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:579:12469":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8015:6217":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"14:0:2169":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2450:4188":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46327:5292":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:8010:5485":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:7802:2344":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:2530:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11147:5561":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:40440:5159":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:21395:6385":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:1041:4505":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4395:15755":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:10397:3293":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:39450:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:8218:2360":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:48091:5370":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42187:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:40232:2658":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:7540:16148":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6711:17055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:12036:1560":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7554:4224":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3234:11557":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:11937:2353":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"18:574:3038":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6318:4391":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"11:0:2167":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6721:18675":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14056:4007":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:6156:16673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13816:3942":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:7862:4619":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10468:3308":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:6545:5451":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:3232:4175":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:21000:6383":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"16:5088:4263":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:8239:4563":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5435:4267":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:817:4771":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7644:5385":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:7750:6148":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:1681:13370":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2305:17808":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"9:357:17670":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:7346:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:1587:4788":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5818:16626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:5369:2877":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:10580:2966":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:41741:4945":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:43270:4952":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:1500:13352":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13215:3745":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:48025:5364":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13611:3907":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:7245:1735":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5920:16633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:44723:5263":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:2186:32289":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:5849:16587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1911:13538":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6868:17066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1814:5397":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10672:3332":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:2927:11739":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11272:3411":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:4719:4251":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:7211:2691":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10616:3322":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:12054:1542":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:30279:6230":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12750:3654":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:41967:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:10504:4959":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:5575:4915":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12052:1544":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11201:3399":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5890:16631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7792:18680":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13101:3724":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10112:3267":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:7513:4595":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:11957:2347":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:41564:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:43036:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:3797:4237":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:12039:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11573:3439":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:547:12464":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4446:15917":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:8659:18717":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:4393:2877":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:11316:3417":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6844:4470":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8464:5209":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:4949:4259":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:805:6121":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9059:23125":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:2365:6176":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:2696:4198":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:261:3095":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:9331:2321":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6017:18671":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:11897:2368":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7462:4583":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:671:3068":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:207:2850":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"0:52:1757":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"2:41061:2914":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:10214:3280":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:760:2689":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4938:15969":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13868:3957":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:12533:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:1702:6256":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:46373:5294":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:39538:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7600:2962":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12373:3574":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6649:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:7221:2864":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:40658:3059":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:10738:3340":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3744:5419":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:10801:5479":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13685:3918":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:21613:6382":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:41023:4930":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:4:1035":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:42774:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12724:3650":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"14:215:4759":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:0:2172":{"crate_id":17,"path":["object"],"kind":"module"},"2:22186:28604":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2886:2939":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6753:4456":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:2966:29956":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9328:2360":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:40460:5160":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:8984:5568":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:3150:2684":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8562:5558":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:44008:2354":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:12006:6118":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5979:16636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:11391:22920":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:44490:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11971:3503":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7736:4605":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:3461:4234":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:2131:2869":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:44151:5242":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10789:5602":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:11039:2968":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:8472:6306":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:586:6110":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:11718:4969":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:3419:2877":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:43674:2364":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:9630:2338":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:719:3077":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12945:3701":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:7396:28634":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1561:2691":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5799:16624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:782:2855":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4506:15925":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:494:12458":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:6130:16672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13890:3963":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:2406:2178":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:3268:11507":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:3240:11556":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:2765:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4810:15955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4862:15962":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14448:4130":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:1538:4784":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:6436:5450":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:4030:11506":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10520:3314":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:47823:5359":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:6618:17053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:43443:5216":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14145:4029":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:40480:5162":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:8594:18719":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8341:6293":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21722:29696":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:39592:5019":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:40276:2366":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4368:15908":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:40195:5150":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6705:17054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3391:5181":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:7546:16149":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:46517:5298":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:40355:5157":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:6439:2691":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:10327:5439":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11124:3394":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:41882:11809":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:9521:3232":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:11467:11816":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:8794:18733":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:42802:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:22579:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:8970:5567":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10547:3316":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8285:5421":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13966:3982":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2649:2324":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:4638:15937":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:6601:6339":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:8869:5565":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:5085:5431":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:20962:6191":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:5017:4261":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10916:3376":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7722:4217":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6834:17063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:3178:4786":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:6303:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:9829:2920":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"0:18:1688":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"1:7379:26809":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:541:12463":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:7854:3169":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:6841:17064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:31101:2302":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:3465:5416":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5058:15982":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12237:3552":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40581:4916":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5829:16627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:2243:31045":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2548:4192":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:43614:5228":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6376:18673":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:7441:2394":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:2888:11733":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6583:4418":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7568:4225":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14126:4024":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"0:0:2049":{"crate_id":0,"path":["strsim"],"kind":"module"},"17:10036:3262":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6915:4219":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10456:3304":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:11597:5610":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10949:5476":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:3056:2683":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:3498:2691":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:2504:4190":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13451:3784":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:43820:2379":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4887:15964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:41052:5181":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8839:5562":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:8167:4667":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5995:4166":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:43512:5220":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:2461:5834":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:2595:5404":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:4572:6283":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:40511:5165":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5015:15978":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10278:3284":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:7425:4890":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:11497:2358":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:836:4772":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:6028:16642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:41942:4763":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:43920:2374":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:1918:4898":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:3522:6189":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:6798:2697":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8005:5484":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:6079:2877":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:362:5384":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13739:3928":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9823:18751":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:10165:18771":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:2596:4194":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:47969:5362":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:1575:13361":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4436:15916":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:12040:1411":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11343:5461":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:1696:13372":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"13:0:2162":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9752:3237":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:10203:4781":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:2170:31054":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:21271:6379":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:46775:5318":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13826:3943":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:502:2869":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"9:52:17673":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"15:306:17763":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:40367:28634":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6386:4398":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3975:6235":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6083:17781":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:4985:2877":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:39474:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:12047:763":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:10432:5560":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"0:68:1835":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"6:4678:6232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7503:4222":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:43011:2340":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6796:17060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:9607:3234":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9660:32359":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:9480:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:10537:5411":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:35:2688":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:14514:4142":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:39560:2308":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10849:26718":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:9377:2334":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:2321:4176":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:11200:5456":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:12038:1073":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:44735:4790":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:2744:4200":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12997:3707":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4745:4252":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:3204:4787":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:46651:5301":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"0:72:1682":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"2:4394:2542":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:5634:4269":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:8825:5561":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:1554:4763":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:9175:5582":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:48054:5367":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8120:5523":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:7125:2945":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:4032:2852":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:7828:4615":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:521:22708":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:3764:4236":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7864:5478":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10726:3339":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2317:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:9650:3235":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4833:15958":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13085:3720":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11293:2971":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:31073:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4518:15926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44280:5245":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:44328:2382":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2156:601":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2904:4525":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:4417:4243":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:7027:2958":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:10271:2356":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10840:26722":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:40633:5175":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:5588:4212":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:9492:2964":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:8915:6343":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:2517:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:5648:4273":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11373:5464":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:4098:4903":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11742:3452":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:8473:4948":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:538:3045":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5816:4292":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43980:2371":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40642:4924":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5863:16588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2559:2936":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:822:2858":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:9330:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:20768:2302":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:22777:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:12830:3663":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:44024:2366":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1536:13357":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11173:18864":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:4469:15920":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9945:3255":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11062:3389":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:10316:3288":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4908:15966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:2166:11750":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4848:15960":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8931:6342":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:22678:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:7463:17596":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11872:3474":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6968:18676":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:8894:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:3305:11508":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"13:110:32336":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:10344:23142":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:7529:16147":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:6200:5449":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:9051:18718":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5987:16637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:14536:4148":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5565:6321":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:3830:4238":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11074:3390":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:21710:4977":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4616:15935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:1302:4780":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:1048:32290":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:5993:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46181:5288":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"14:160:4754":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:22148:4990":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:5661:4278":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:1630:600":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"11:1027:17737":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:41729:4943":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9070:3221":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:26133:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:7534:4223":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14324:4094":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"0:19:1691":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"17:8765:18732":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7768:4215":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40189:2366":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:6732:1745":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3995:4902":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13710:3920":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8546:5426":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:41621:6228":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11137:3395":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:1011:2852":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:42811:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:42746:29199":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6041:18672":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:2379:6180":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46887:5320":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:10462:2379":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:2910:11735":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"14:165:17743":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10540:5413":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:9341:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14378:4115":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11473:3189":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9207:3090":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2993:2390":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9983:5191":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:681:3069":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:32297:4563":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:20826:29893":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:7065:3082":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44216:5244":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:10476:2378":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:4796:814":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:6637:2852":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:2863:11730":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"11:695:4765":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"0:51:1752":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"17:10949:3379":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:41604:4942":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8201:5163":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:946:4772":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:8154:4665":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:42756:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:0:1589":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:1075:3103":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:1570:4785":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:3049:17811":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2824:6369":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:32257:6323":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13055:3717":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7284:5196":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:14460:4132":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:3115:5406":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:2635:5405":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:11753:2356":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12888:3689":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6573:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:4365:2905":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:5612:2695":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:1565:2689":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:11984:5616":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:4194:2877":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11535:3437":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6467:4405":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:14024:3996":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:7523:16146":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9102:3087":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2766:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:21397:4979":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:727:3080":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:7530:3102":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"9:507:4844":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:6226:4369":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:12017:23122":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:43494:5217":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6696:4443":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:7313:11706":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11617:3442":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10788:18840":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:3594:4781":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4524:15927":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2359:4184":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:43990:2357":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12543:3623":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1690:13371":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6279:4389":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:44467:11851":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:8211:5179":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10366:3290":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:8953:18738":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:1523:4863":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4328:15906":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:14083:4014":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:21834:6378":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:46040:5279":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41873:5198":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:3735:4866":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8180:6190":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11162:3397":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11295:3413":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:14013:3992":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13546:3867":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:2763:2617":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10370:3291":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:3581:4763":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:7894:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4413:15913":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6401:4210":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:43522:5221":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11086:3391":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:12046:659":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:8883:5441":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:12058:1599":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:14163:4032":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:482:12456":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:7663:5466":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:6255:2942":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44471:5734":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11226:3408":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:2428:4187":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11173:26720":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4315:15905":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:44243:4971":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:9574:32363":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:4074:4781":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11098:3392":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11407:18741":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:3217:31467":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:42031:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:41823:4781":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:21203:6191":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"11:644:4781":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:1637:4894":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12225:3549":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11050:2969":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:653:12518":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1411:4763":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:39786:24847":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:5954:2884":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:41950:4781":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4984:15975":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42506:2325":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"9:426:17657":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8504:6316":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8813:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6744:17058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:44100:11541":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:10534:5409":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:6816:6373":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8556:4763":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11191:3118":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:14173:4037":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12846:3668":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:22125:28633":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:12035:427":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"7:32:17641":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:9207:26922":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:9105:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6077:16645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:3212:4785":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:7529:2689":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:7505:16143":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:12582:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:10383:2376":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:14118:4022":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4168:6260":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4754:15948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:3800:2689":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:9383:2332":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13906:3966":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:6165:2912":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:3315:4233":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:7295:17437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:2180:32278":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:46151:5287":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"7:79:17648":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4550:15930":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:4002:2691":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:1638:13366":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:7732:6117":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11111:3393":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:12045:657":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:14068:4010":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4291:15903":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7054:4499":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7738:5394":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:10440:3298":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4626:15936":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3939:6234":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:4243:4905":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:44511:5255":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:3253:28600":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4587:15933":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5696:18669":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:4129:4904":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:46729:5317":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:13286:3755":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11490:3435":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:3238:4788":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:46203:5289":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10903:3375":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"11:2174:5933":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:7191:1735":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:609:3055":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:10179:4763":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6261:4386":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:7382:4884":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:4426:2879":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:9886:3247":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:1103:4779":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:7463:4891":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:14221:4074":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:660:3062":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12208:3541":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:1837:5398":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:45951:5275":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:6485:2852":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:1012:4776":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:1473:4767":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:40489:5163":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:30469:2679":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:41046:4932":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:4774:4253":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5121:4264":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"8:0:2164":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:1482:4782":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:40672:4926":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:11022:4961":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"9:330:17710":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:9445:3231":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:1921:2319":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:4800:15954":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12280:3568":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3997:6237":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11358:18866":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:7668:5468":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4568:15932":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:41806:1698":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12293:3569":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:1631:13365":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:5976:4917":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:32318:5012":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:7884:18681":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12876:3687":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11687:18744":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:10962:5440":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"0:43:1742":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"2:21388:6191":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:46395:5295":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2834:4518":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:22744:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:48080:5369":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:39494:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:44294:11542":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5994:16638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:10421:4957":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:9379:2335":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:11679:4967":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:40383:5158":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12765:3657":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:40601:4921":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:6820:17062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4842:15959":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:2608:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:10420:3168":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:2845:11728":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:5384:5432":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13897:3965":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13228:3746":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4051:6241":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5793:16623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6565:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4380:15910":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4967:6298":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4374:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"12:0:2168":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8311:5530":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:32304:5011":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:488:12457":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11218:5739":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:41071:4934":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:8205:18682":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:40246:2660":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10475:2965":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:4320:2539":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:919:4765":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10637:3326":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:43027:2339":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"9:486:17654":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:10139:18770":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:11235:3409":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:4138:24523":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:4421:2541":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10256:6325":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4483:15922":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:12008:11535":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:667:4764":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:595:12471":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:14469:4136":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:9487:5477":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10227:3281":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:12520:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:44435:11849":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13024:3711":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:6821:11709":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:6985:5867":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:42306:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:8181:4229":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:5955:16634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13949:3974":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"9:393:17656":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:643:6113":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11448:18742":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:1892:2318":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"19:0:1053":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:12437:3603":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10561:3317":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12196:3540":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:3264:5411":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8148:3082":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11819:2977":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"11:1858:4788":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12685:3646":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:40291:2654":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:5318:2852":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4929:15968":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11048:3385":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:42109:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:4835:4255":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:4003:6238":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:4759:685":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:13838:3946":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:9375:2325":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11934:3490":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:1073:4780":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:43938:2375":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:7545:2690":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:8337:5541":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:22612:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:5767:16621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:276:2350":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:10953:4841":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4787:15952":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9086:3222":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:42520:2334":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:4770:28344":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:4059:6243":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7391:18678":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:7523:4596":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11541:5420":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4818:15956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10588:3319":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:41587:4940":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:7599:17624":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:48221:5376":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11710:3415":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:44168:5243":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:42384:4950":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:119:2840":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10383:3292":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:554:12465":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12496:3617":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11661:3444":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:22711:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:21618:6390":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:46548:5299":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6067:16644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:22057:4982":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:7231:31092":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4992:15976":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:44451:11857":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:474:12455":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:4613:4249":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1603:13364":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12778:3658":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:261:2852":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:21832:6191":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1545:13358":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:9933:3253":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:6615:2955":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10084:3265":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:7564:16152":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6688:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:11702:4968":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7859:5477":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:47041:5323":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"14:221:4761":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:2982:6126":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12123:3526":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:12163:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:48045:5366":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4341:15907":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:1649:13367":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9137:3088":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:2359:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12621:3637":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:43716:2377":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:6625:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:42513:2326":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:11642:4964":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:2969:17810":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:5752:5443":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:47761:5358":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:12055:1543":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:6044:31838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46419:5296":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:1776:2689":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:1569:13360":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:4176:6261":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:1492:4764":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4879:1022":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12053:1541":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:878:2860":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2918:11737":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:9062:29919":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:5977:2942":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:45796:5269":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13693:3919":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:356:5383":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:44455:11855":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11761:3455":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:40350:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11719:18745":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:7342:32354":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10534:3315":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:8281:4676":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14420:4121":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:4806:4254":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:9746:2916":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"3:0:452":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:22202:28622":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:2367:1678":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"6:4723:15944":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:10490:4958":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:6306:6466":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6008:16639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13040:3713":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:4889:4257":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9711:32355":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10714:3338":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:6154:4923":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:42070:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:9067:29245":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6805:17061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:113:22697":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:491:3037":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:12830:2686":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:43866:2372":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:3185:27303":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:48034:5365":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:7581:2960":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:44693:5260":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:3003:2393":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:8579:2346":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:4240:5422":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"13:226:32337":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:40317:2657":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9350:3096":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:44523:11865":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21186:6380":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:2832:4204":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:1184:3105":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:40558:5169":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"0:73:1683":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"17:14090:4015":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13174:3740":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:12057:808":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:5363:4266":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12698:3647":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:2970:29955":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:7689:2966":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:42265:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7613:4601":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:2178:3110":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14156:4030":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12737:3652":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:7497:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:9790:32356":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12790:3659":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:48182:5375":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11547:3438":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6485:4211":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:44305:5246":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:41992:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:4248:4906":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:30509:5009":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:923:4768":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11237:5455":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:531:2933":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:44748:5264":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10628:3325":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:9371:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10012:3235":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:5612:4214":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5939:4160":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:44137:5239":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3513:27345":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:11951:2348":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:13113:3726":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2391:6186":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:44459:11856":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13802:3941":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:10310:4955":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"0:61:1782":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"16:6818:4469":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6545:4416":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:3226:5410":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5805:16625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:7643:6191":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:4164:2877":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:45706:5265":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:929:6121":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:2201:2314":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:21263:6191":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:9110:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:1102:29965":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:3989:6236":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9564:3233":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13162:3739":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:1845:4786":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1442:1735":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:8248:6227":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:3034:11509":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:21056:6388":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:8926:18737":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:9998:3212":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:8072:4657":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:630:4763":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:5975:12059":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7651:4602":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:44650:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"18:624:32370":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:736:4767":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:5517:4913":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:2141:4867":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4854:15961":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2810:4203":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:2618:4195":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:12738:2930":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"11:1611:2846":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:0:507":{"crate_id":2,"path":["core"],"kind":"module"},"1:9045:5579":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4872:15963":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4496:15924":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11316:5609":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:30703:28638":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:14355:4102":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:599:32368":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3191:27974":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12671:3348":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"15:394:17773":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:14434:4123":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:619:2320":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13010:3708":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11951:3493":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:7199:4882":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:2788:4202":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5051:15981":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:3441:3116":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:20811:29892":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14269:4075":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:80:22695":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11991:3504":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:2223:31073":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:3846:5420":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:40540:4909":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10685:3334":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:0:2173":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:4047:6240":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2523:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5877:16629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6346:4393":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:793:4782":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4973:15974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:4500:6266":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10750:3341":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6901:4218":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:14522:4145":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:9080:5735":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4401:15912":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:1776:5395":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:4344:4242":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12645:3638":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:21133:6384":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:20781:29693":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:555:5386":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:12034:957":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:2871:11731":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7517:16145":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:2959:2613":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:2969:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:42148:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6879:4474":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9959:3256":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6600:18674":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8853:5563":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:3266:5412":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4944:15970":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:4986:4260":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:1733:11761":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:43503:5218":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13188:3741":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:6036:16643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:7474:4892":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:2284:17782":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:2168:11751":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:1756:4895":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:1826:2691":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:44122:5234":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13632:3912":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:10766:24659":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"11:723:4766":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:45772:5268":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:644:3038":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:6769:2695":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11306:3415":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:7272:17435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9762:32358":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:4160:6259":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6363:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:638:5389":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5384:18668":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4955:15972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:32293:5010":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:39516:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:47885:5360":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11367:3422":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:2855:6370":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:7278:17436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:590:3048":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:5786:5447":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4389:15911":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10962:3380":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11151:3396":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:1822:1735":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:3888:4239":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:21100:6389":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:12810:3662":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13554:3870":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:9366:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:11942:2346":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"0:66:1824":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"17:12098:3523":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:4585:4248":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:9197:26930":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:40430:2906":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46058:5280":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:42829:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:7349:2315":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:32311:2539":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:22004:4981":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2363:6175":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3348:6214":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:47931:5361":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:837:4763":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6156:4347":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:403:32279":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4704:15942":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43595:5226":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4628:6238":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:1582:4787":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:1138:29968":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6589:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14110:4021":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:1506:13353":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43624:5229":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:6076:2946":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:45902:5273":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:2766:4201":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:1747:29200":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4543:15929":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9172:3089":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:2960:29951":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:21951:4980":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6204:4354":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4695:15941":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:12042:1525":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:6775:17059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"0:42:1740":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"2:39434:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:3000:2392":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:7805:6124":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:8303:5537":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4729:15945":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6893:4476":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:1778:5396":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:2809:2619":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:41840:5196":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4703:6292":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10494:3311":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:564:3047":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:12060:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:1273:4776":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"10:0:2166":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11261:3410":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7041:4496":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:5366:2352":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13202:3744":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:43692:2361":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:14:1686":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4794:15953":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:4749:396":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12911:3698":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:40682:5176":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"9:177:17723":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:2864:4205":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43543:5223":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11845:3466":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40502:5164":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13922:3970":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"14:7:4754":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2820:2623":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5967:16635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:4706:6265":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:10228:2377":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43048:5209":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12136:3527":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:2883:11732":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:1667:1111":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4189:6262":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6569:4216":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:11609:27818":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:6930:2895":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12598:3632":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10410:3294":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:96:22696":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1464:4766":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:3600:4235":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:21:698":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:9002:22751":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13778:3937":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7582:4598":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:904:2689":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:45981:5276":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:21265:6377":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12934:3699":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:1576:4786":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:41958:1735":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13567:3877":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:0:2163":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:915:4764":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13667:3913":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:4641:4250":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7015:4495":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:10776:5478":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"11:2168:32287":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4747:6252":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5982:4316":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4963:15973":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:8895:18736":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12513:3620":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2339:4178":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12252:3558":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:12727:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42345:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:41831:1735":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"14:202:11543":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:14282:4081":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:2670:4197":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:46105:5281":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:44315:5250":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1288:4774":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12154:3535":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6531:4414":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"15:288:17762":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:3447:5533":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2597:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:850:4781":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:1501:17738":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14478:4138":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10980:3235":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:1672:2852":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"15:0:2170":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10087:5397":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5322:4265":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:2962:29954":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:5636:2943":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:7337:2314":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2907:4207":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:3632:1735":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:9373:2326":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:968:4505":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11507:18743":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:9590:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:45880:5272":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10240:3255":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:4363:2879":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:6152:2930":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:40840:4929":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:39372:11510":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:1557:13359":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:1257:4505":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8414:5550":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:14335:4099":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:5362:2351":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11281:3412":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:3188:27965":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4475:15921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:47431:5355":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:40812:5179":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10646:3327":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:22876:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:50027:6392":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:952:4773":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:3305:5414":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:42527:2335":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7269:32352":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:47011:5322":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:3171:4763":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:9582:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11886:3475":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13071:3718":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:46021:5278":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5434:5438":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6332:4208":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9852:18752":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:844:4773":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3669:2852":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11639:3118":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11381:3425":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:8861:4763":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"0:60:1776":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"18:699:3072":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:4392:5424":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:41815:4763":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:7597:32348":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:9037:5577":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:7135:24518":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:6671:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:8899:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:7182:2687":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:1590:13362":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:21219:6375":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"14:40:3490":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2216:2900":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:1527:13356":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11244:3442":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:2644:4196":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2514:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:12051:758":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:3919:2877":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10478:3309":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:14076:4013":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:1709:13373":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5068:15983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11023:3383":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:9242:3091":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:7927:5483":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12172:3536":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10265:3283":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5403:3221":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:7871:5479":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10929:3378":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:7809:11705":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}