{"root":"0:0:2777","crate_version":"0.11.1","includes_private":false,"index":{"2:13353:33873":{"id":"2:13353:33873","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12960:3097","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::matches":"2:13350:2383"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44259:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:336":{"id":"2:13281:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13282:26981","`u8`":"1:12408:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:33868":{"id":"2:13291:33868","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12395:1739","str::slice_mut_unchecked":"2:13292:33869","crate::ops::Index":"2:39712:3409"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:27022":{"id":"2:13309:27022","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:2342":{"id":"0:112:2342","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:2343"],"impls":["a:2:3212:247-0:112:2342","a:2:42260:8733-0:112:2342","a:2:3247:3295-0:112:2342","a:2:42259:8535-0:112:2342","a:2:32457:3135-0:112:2342","a:2:32398:237-0:112:2342","b:2:2719-0:112:2342","b:2:2989-0:112:2342","b:2:3828-0:112:2342","b:2:3004-0:112:2342","b:2:2993-0:112:2342","b:2:2999-0:112:2342","b:2:2716-0:112:2342","b:5:5965-0:112:2342","0:19","0:17","0:118","0:115","0:117"]}}},"2:13326:27011":{"id":"2:13326:27011","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12775:3100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2367":{"id":"0:26:2367","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:28178":{"id":"2:13398:28178","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38259"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:26181":{"id":"2:13395:26181","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13362:33876":{"id":"2:13362:33876","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13385:33884":{"id":"2:13385:33884","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2444":{"id":"0:63:2444","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:33865":{"id":"2:13274:33865","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:28180":{"id":"2:13400:28180","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38259"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2371":{"id":"0:27:2371","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2766:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2766:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:706"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13283:2470":{"id":"2:13283:2470","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42168:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2993-0:112:2342":{"id":"b:2:2993-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2995:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:113:2343":{"id":"0:113:2343","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13373:33882":{"id":"2:13373:33882","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:2382":{"id":"2:13294:2382","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13293:27004","str::split_at_mut_checked":"2:13296:27008"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:112:2342":{"id":"b:2:3828-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32399:3134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13393:26177":{"id":"2:13393:26177","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:3326":{"id":"2:13319:3326","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42168:191","prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5714:2507":{"id":"5:5714:2507","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2351":{"id":"0:21:2351","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2766:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2416":{"id":"0:53:2416","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3830:1839":{"id":"2:3830:1839","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39881:5903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32398:237-0:112:2342":{"id":"a:2:32398:237-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32398:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13350:2383":{"id":"2:13350:2383","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12960:3097","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::rmatches":"2:13353:33873"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44241:3120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13344:27019":{"id":"2:13344:27019","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:34584":{"id":"5:5728:34584","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13356:33874":{"id":"2:13356:33874","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12960:3097","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::rmatch_indices":"2:13359:33875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44187:3118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2721:26082":{"id":"2:2721:26082","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2438":{"id":"0:62:2438","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2777":{"id":"0:0:2777","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:2342","0:20:2348","0:21:2351","0:26:2367","0:27:2371","0:44:2406","0:45:2408","0:53:2416","0:54:2421","0:61:2429","0:62:2438","0:63:2444","0:65:2460","0:105:2538","0:106:2547","0:108:2559"],"is_stripped":false}}},"2:13303:29404":{"id":"2:13303:29404","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44291:3116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5967:1799":{"id":"5:5967:1799","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10394:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13270":{"id":"2:13270","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13271:1008","2:13272:2439","2:13273:33864","2:13274:33865","2:13276:33866","2:13279:26592","2:13280:33867","2:13281:336","2:13282:26981","2:13283:2470","2:13285:2493","2:13287:26979","2:13289:26980","2:13291:33868","2:13292:33869","2:13293:27004","2:13294:2382","2:13295:27007","2:13296:27008","2:13298:2368","2:13299:6002","2:13300:5614","2:13301:31943","2:13302:31937","2:13303:29404","2:13304:33870","2:13305:32105","2:13306:27021","2:13309:27022","2:13312:27023","2:13315:3360","2:13319:3326","2:13323:27009","2:13326:27011","2:13329:27013","2:13332:33871","2:13335:33872","2:13338:27015","2:13341:27017","2:13344:27019","2:13347:27020","2:13350:2383","2:13353:33873","2:13356:33874","2:13359:33875","2:13362:33876","2:13364:33877","2:13366:33878","2:13368:33879","2:13369:33880","2:13370:33881","2:13373:33882","2:13376:26135","2:13379:27024","2:13382:33883","2:13385:33884","2:13388:33885","2:13391:33886","2:13393:26177","2:13394:28175","2:13395:26181","2:13396:26182","2:13397:26183","2:13398:28178","2:13399:28179","2:13400:28180","2:13401:33887","2:13403:8528","2:13404:33888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105:2538":{"id":"0:105:2538","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:27009":{"id":"2:13323:27009","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12960:3097","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::split_whitespace":"2:13301:31943","str::rsplit":"2:13329:27013"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44037:3123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13338:27015":{"id":"2:13338:27015","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097","str::rsplitn":"2:13341:27017"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44141:3125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:33878":{"id":"2:13366:33878","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3247:3295-0:112:2342":{"id":"a:2:3247:3295-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3247:3295","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13315:3360":{"id":"2:13315:3360","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42168:191","prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2559":{"id":"0:108:2559","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:34583":{"id":"5:5720:34583","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:8641":{"id":"5:5730:8641","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13379:27024":{"id":"2:13379:27024","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","type_id","description","cause","source"],"trait":{"name":"Error","id":"2:3052:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13295:27007":{"id":"2:13295:27007","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13296:27008"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5965-0:112:2342":{"id":"b:5:5965-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10394:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32399:3134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5963:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5967:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:811":{"id":"0:116:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10355:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10336:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13332:33871":{"id":"2:13332:33871","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12960:3097","str::split":"2:13323:27009","prim@char":"1:12389:476","`DoubleEndedIterator`":"2:8333:130","str::rsplit_terminator":"2:13335:33872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44087:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13382:33883":{"id":"2:13382:33883","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2348":{"id":"0:20:2348","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:42298:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:13396:26182":{"id":"2:13396:26182","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13376:26135":{"id":"2:13376:26135","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2421":{"id":"0:54:2421","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2766:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:811":{"id":"0:18:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10355:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42298:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43190:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2406":{"id":"0:44:2406","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13312:27023":{"id":"2:13312:27023","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3212:247-0:112:2342":{"id":"a:2:3212:247-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13370:33881":{"id":"2:13370:33881","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12986:3089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:34585":{"id":"5:5729:34585","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:3094","`String`":"5:7774:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3094","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13404:33888":{"id":"2:13404:33888","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5015:33888"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44354:3113","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2547":{"id":"0:106:2547","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32457:3135-0:112:2342":{"id":"a:2:32457:3135-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32457:3135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13272:2439":{"id":"2:13272:2439","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:26592":{"id":"2:13279:26592","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12507:3104"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:33864":{"id":"2:13273:33864","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:33869":{"id":"2:13292:33869","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12395:1739","crate::ops::IndexMut":"2:3490:3410","str::slice_unchecked":"2:13291:33868"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3004-0:112:2342":{"id":"b:2:3004-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3007:138","2:3008:1824"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13306:27021":{"id":"2:13306:27021","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:26183":{"id":"2:13397:26183","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:33886":{"id":"2:13391:33886","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12921:137","`FromStr`":"2:12920:3114"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42298:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12920:3114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12920:3114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5731:26179":{"id":"5:5731:26179","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13396:26182"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:26981":{"id":"2:13282:26981","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12408:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:27008":{"id":"2:13296:27008","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13295:27007"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42260:8733-0:112:2342":{"id":"a:2:42260:8733-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42260:8733","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13285:2493":{"id":"2:13285:2493","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42168:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2992:3320":{"id":"2:2992:3320","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2966:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:26979":{"id":"2:13287:26979","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:33877":{"id":"2:13364:33877","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10389:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3008:1824":{"id":"2:3008:1824","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42298:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:34581":{"id":"5:5713:34581","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3094","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:3094","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13359:33875":{"id":"2:13359:33875","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12960:3097","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::match_indices":"2:13356:33874"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44205:3119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2989-0:112:2342":{"id":"b:2:2989-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:3320"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3002:138":{"id":"2:3002:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5717:34582":{"id":"5:5717:34582","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2460":{"id":"0:65:2460","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2771:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10607:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:6002":{"id":"2:13299:6002","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12389:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44013:3107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:27004":{"id":"2:13293:27004","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13295:27007","str::split_at_mut":"2:13294:2382"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:706":{"id":"0:119:706","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2719-0:112:2342":{"id":"b:2:2719-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32399:3134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2721:26082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45:2408":{"id":"0:45:2408","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2766:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712":{"id":"5:5712","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5713:34581","5:5714:2507","5:5717:34582","5:5720:34583","5:5728:34584","5:5729:34585","5:5730:8641","5:5731:26179","5:5732:26180"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3003:1826":{"id":"2:3003:1826","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42298:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13329:27013":{"id":"2:13329:27013","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12960:3097","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::split":"2:13323:27009"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44055:3122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13369:33880":{"id":"2:13369:33880","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13347:27020":{"id":"2:13347:27020","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32400:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13388:33885":{"id":"2:13388:33885","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:3097"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2718:2995":{"id":"2:2718:2995","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2429":{"id":"0:61:2429","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:1008":{"id":"2:13271:1008","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12389:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:33879":{"id":"2:13368:33879","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:28175":{"id":"2:13394:28175","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40067:3302","Self::is_ascii":"2:13393:26177"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40067:3302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:33866":{"id":"2:13276:33866","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13274:33865"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13335:33872":{"id":"2:13335:33872","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12960:3097","str::split":"2:13323:27009","prim@char":"1:12389:476","str::split_terminator":"2:13332:33871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44105:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:8528":{"id":"2:13403:8528","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5018:8528"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44345:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:32105":{"id":"2:13305:32105","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44329:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:112:2342":{"id":"b:2:2716-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32399:3134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:2995"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2995:841":{"id":"2:2995:841","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:26980":{"id":"2:13289:26980","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5732:26180":{"id":"5:5732:26180","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13397:26183"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:31937":{"id":"2:13302:31937","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13301:31943"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44320:3099","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2999-0:112:2342":{"id":"b:2:2999-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2969:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3007:138":{"id":"2:3007:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32322:3057","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13304:33870":{"id":"2:13304:33870","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44301:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:5614":{"id":"2:13300:5614","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44023:3106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:31943":{"id":"2:13301:31943","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13302:31937"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44311:3101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:33867":{"id":"2:13280:33867","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42259:8535-0:112:2342":{"id":"a:2:42259:8535-0:112:2342","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42259:8535","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13298:2368":{"id":"2:13298:2368","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12389:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44007:2341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13341:27017":{"id":"2:13341:27017","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12389:476","str::splitn":"2:13338:27015","self::pattern":"2:12960:3097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44159:3124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:28179":{"id":"2:13399:28179","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38259"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:33887":{"id":"2:13401:33887","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5017:33887"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44336:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:40704:5909":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5670:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:43387:3085":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:1898:3414":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:21934:5852":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:3433:8546":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:8209:4904":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:9352:6398":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:4646:3309":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:4908:3312":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:8261:8020":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3656:3062":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:42194:5461":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5635:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"0:26:2367":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"16:2772:4886":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:10181:3067":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:5983:6249":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:8280:5572":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:903:3641":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:8820:6374":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14416:4219":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2477:8594":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:946:3414":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"9:355:20460":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11757:21565":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:7919:5281":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:11402:3122":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6411:7637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:5976:6245":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5036:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:517:7033":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:46509:6074":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:38364:14162":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:680:3616":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12408:1869":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:47320:6150":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11742:6282":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:21677:33396":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:42646:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:5518:34874":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:7856:3414":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"11:102:6986":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:46296:6063":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13838:4097":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:1869:6194":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:9141:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:7831:14140":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:6300:29684":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11515:3826":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6942:5102":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:44779:8077":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:12356:8261":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13945:4116":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:6812:2401":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11824:26175":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:22210:8804":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:8014:4914":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:21667:3041":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:9165:6383":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12392:1328":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:6776:5777":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:10376:6412":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:22919:8053":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6507:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15531:4505":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10950:6297":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"5:2377:8047":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8093:8567":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:505:29673":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:8151:4916":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:5281:32897":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:39824:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11432:21544":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6421:4852":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8620:8080":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40526:32123":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:46243:6060":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:5672:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:40877:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15665:4533":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13041:4009":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:12975:3092":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6473:7665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3093:3065":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:6144:21457":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43124:8068":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11401:3815":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2751:6203":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:4983:4940":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:15475:4499":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:3288:13934":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:14640:4253":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:8319:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2766:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:22991:5863":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14533:3929":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:40686:3448":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:1533:5461":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:0:2904":{"crate_id":17,"path":["object"],"kind":"module"},"2:23169:5881":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:6117:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:3587:4923":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:47396:6159":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:7986:8004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:15876:4583":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:2157:5572":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:40905:5927":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40887:5769":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12008:3721":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"15:288:20550":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10747:6212":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:3566:8082":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:16656:4806":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:4716:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:8748:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:44767:8074":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:42106:6220":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"14:187:20538":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15739:4552":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4902:4937":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:43136:5330":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:8631:6356":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:42290:5810":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:8192:3722":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:1628:3414":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:45054:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41394:5939":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:10406:3075":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:14043:4133":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:42759:5814":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:4377:5461":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"8:0:2896":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:15931:4601":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:8165:4906":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:45093:6026":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:1657:7184":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:41365:5791":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:2816:2336":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"6:5562:7555":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:11050:26091":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:7044:4905":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6640:5046":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"18:521:25726":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"9:176:8250":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12897:3991":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:11509:5823":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5057:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:7765:5240":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:14507:4233":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12860:3989":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:8555:3123":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7416:5178":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"14:214:5457":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:15064:4339":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12952:3997":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:3400:6210":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12673:3965":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13082:3806":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:8043:35301":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:1982:3059":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:7094:3422":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:2612:14179":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:1621:2401":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3599:6352":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:12411:1863":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10368:21525":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:41179:5790":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15679:4534":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:15148:4350":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:8000:4913":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4890:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:2530:4875":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7838:21467":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:41413:5794":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:12394:1705":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:988:5470":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:2011:3060":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6502:20568":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:9747:26481":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:14152:4165":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:1580:5480":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:2328:3786":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:15586:4517":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:11847:6217":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:2610:14178":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:4844:4935":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:113:25716":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:9340:6396":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13006:4004":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:10928:3801":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41906:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:6534:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:44763:8073":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2435:20596":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5641:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:39844:3047":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:2275:5576":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:7787:5617":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3644:14166":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11114:3804":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:44205:3119":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6064:4903":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:22563:8610":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:10549:3783":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:23731:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:938:8541":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:573:3584":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8359:6305":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14312:4203":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"5:7561:33608":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10296:21523":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"18:698:3619":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:30811:32120":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:3273:5217":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:16036:4628":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:8006:8610":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:42424:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8891:6379":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13983:4120":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5658:7596":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"11:2148:5473":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:22983:5862":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:16008:4620":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6205:21458":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:13916:5850":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:472:3644":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:7551:5607":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:10167:21519":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6723:7785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"18:754:3633":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:44633:6011":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:3313:5483":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:42301:193":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"17:15573:4512":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:6749:4857":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:42202:5478":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:46554:6091":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5387:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:6267:5775":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1601:5481":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:434:35284":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:42878:3078":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:16019:4621":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:14627:4252":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13361:4028":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:1633:5482":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8732:8729":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12776:3976":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3536:5939":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:7902:6284":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:40583:3112":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4902:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:43964:5990":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:7519:5605":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:8320:21470":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:3716:5461":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:11329:5820":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5282:4949":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:7619:2401":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:643:3584":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:40958:5783":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46072:6042":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:47268:6146":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:8066:21468":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6028:4898":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:628:8527":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9347:6397":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:10921:6421":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:23213:5885":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:12524:3956":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:32375:5894":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:44623:6007":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5117:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5357:7456":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:5855:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13635:4049":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13515:21534":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:5009:8683":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:4694:4932":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:1852:703":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:15997:4616":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7350:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:43630:5817":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:2081:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:15785:4561":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6843:5092":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:40981:5933":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:1969:8082":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:3041:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:515:3581":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13322:21533":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:13953:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:651:3584":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:306:3094":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13427:4032":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:12066:3884":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:23007:32088":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15602:4520":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13909:4109":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:11222:5478":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5265:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2880:4891":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5797:8748":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"15:327:8236":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11067:6384":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8690:6224":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:47222:6142":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6914:5100":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2790:6206":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2018:794":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:3110:4919":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:23027:32094":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:2486:4873":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:22628:8890":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:578:7066":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:10444:8750":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:1838:14103":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:47239:6143":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43996:3110":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11065:3803":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14438:4226":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:1645:5569":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:908:3642":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:3441:4922":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15731:4549":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7990:5294":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15812:4565":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:15939:4604":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:46019:6035":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:7391:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:14845:4301":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6658:5060":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5007:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"10:44:5492":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:5341:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:1625:5463":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12605:3805":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:3940:3414":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:2640:4880":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:5131:3671":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:12056:3883":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:44664:3129":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:9855:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:16494:4068":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:10442:21528":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:7797:5618":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:21753:8610":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:910:5464":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:23235:5887":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"11:2228:3876":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:1259:34965":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:1888:3416":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:46185:6049":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13169:4014":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:7490:31008":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10945:8085":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:15953:4606":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:15621:4521":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13398:4031":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6748:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:15919:4598":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:902:2401":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:6480:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1514:7084":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:6010:6250":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:32399:3134":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:15946:4605":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:46171:6048":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4812:8673":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:2406:3658":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:4172:34874":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:15981:4613":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:7609:2394":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:7611:2401":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:351:35276":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:43097:8060":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:9301:6389":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:21806:8610":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:1893:3414":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8231:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:14750:4284":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12550:3959":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4986:6226":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5151:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:10250:5951":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:8105:5299":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2860:4890":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5379:4952":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:22363:8610":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:43954:5989":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:7563:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4359:8697":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:4359:8082":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:11247:3123":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:11537:29677":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:5794:7813":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:6765:7797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12392:3923":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:5520:7537":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:12095:3888":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:2704:4883":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:23202:5884":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:6758:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:10977:35311":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5606:6233":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:4241:4929":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:42146:5806":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4160:8671":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6443:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:4891:8699":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:1223:34971":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:3307:31400":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:2440:3416":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:2732:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6680:7770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8549:3106":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8664:6360":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6866:21462":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"13:110:35289":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"14:7:5451":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:1115:5477":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:5184:8725":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:4308:31007":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6573:5038":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:14586:4245":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11952:3865":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:328:6990":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:6521:7688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11539:3830":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:1507:7082":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:16297:4714":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:39716:5898":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:10987:6410":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:6599:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:4677:8699":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:39729:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:3449:3136":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:5869:6242":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4222:8676":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:1880:5461":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13958:4118":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12225:3901":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:14872:4303":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:11308:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:40949:5782":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12122:3890":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:2566:3053":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11908:6219":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:8711:5373":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5334:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:9252:8765":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6449:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:47048:6136":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12176:3894":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5044:7364":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:32487:3298":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:7368:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9208:6243":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:44646:3128":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:15852:4576":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:8751:3459":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:46799:6100":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:12648:3963":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5255:4948":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:15887:4587":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:47003:6135":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:1489:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:6424:6254":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:9417:5809":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:7692:5600":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5051:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:15655:4532":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:46604:6093":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:40730:5910":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:15836:4574":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:6814:6262":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:9438:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:40780:5917":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:43944:5988":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5462:7517":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:1674:35271":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:6770:7798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:43418:5974":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:10627:6381":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11475:21545":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:8542:5937":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5172:4945":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:8233:21469":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:6685:3416":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:12372:26129":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:41944:5802":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:16822:4113":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:12687:3969":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:44534:6005":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:2148:14189":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:46477:6072":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7424:21465":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:5260:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"18:726:3627":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:40637:3450":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:8503:5353":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42535:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:44354:3113":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:15439:4470":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:364:35279":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15829:4573":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:44159:3124":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11630:3836":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:2242:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:12976:3999":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:3684:8628":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44291:3116":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:7677:3054":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:40858:5924":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:16775:4835":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:7716:35304":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5482:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5603:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6084:4959":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:45012:6019":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:3987:3689":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"16:3834:4925":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:12406:914":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:15090:4341":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13193:4016":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:40678:3452":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:8364:8640":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:3254:3297":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:13625:5930":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:4337:8082":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4824:7905":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:14346:4210":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4881:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5441:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10729:3639":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:6462:21460":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:31158:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12826:3979":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:9577:6196":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"11:2380:5461":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:3039:6207":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8645:6358":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:3665:26634":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:2420:2401":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:41960:8651":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2713:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44440:5995":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3217:3293":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:6098:4964":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:12625:3962":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:378:6180":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:6901:34874":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:971:8540":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7541:5606":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:3141:3676":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:570:7061":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:7343:29689":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:923:5465":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:8284:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12816:3666":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6042:4901":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6173:4973":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:485:7012":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:2400:5478":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:12340:6434":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8797:5970":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:8565:5360":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13119:4011":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:32457:3135":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:9393:6555":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:33625:8793":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14520:4236":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:1132:34874":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:892:5478":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14947:4315":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11606:3805":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8007:6184":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:7233:34919":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40485:5905":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5689:4956":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11232:21545":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:7736:5612":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:46264:6061":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2960:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:14055:4134":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5593:7564":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:2620:4879":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:11481:3125":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15701:4538":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14327:4205":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:2825:6675":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4984:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:1794:34874":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:4598:5761":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:7721:14225":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:5319:5766":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:8209:6298":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:43152:32117":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"16:4152:4927":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:10404:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11382:6429":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"11:1158:5477":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:0:2905":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:22244:33404":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:34211:14159":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14902:4308":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:1595:5465":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4492:6222":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:16311:4721":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15714:4544":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6691:7773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:4816:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:6965:5784":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:7462:5189":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5196:7393":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:2301:5203":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:6462:7657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1500:7079":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:4208:8674":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7604:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:8330:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:11440:5822":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12293:3911":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:10655:3084":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14269:4192":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11026:35312":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:5351:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:16399:4739":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10097:21516":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:7502:3412":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7760:5616":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:10408:3076":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8485:3629":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:43611:5976":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:7487:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5375:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:14460:4227":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12570:3960":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:785:5465":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6731:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:16668:4808":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:10849:29643":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:21814:8801":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13491:4036":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:4218:8675":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:15496:4504":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8885:5461":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:9529:3090":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40937:5931":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44259:3121":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:5656:6239":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:7715:3461":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14220:4167":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:23180:5882":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:10332:21524":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:0:2895":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1589:7131":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:8795:32803":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4921:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:4799:3310":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:5060:4941":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:13034:13962":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:1239:33654":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:22539:8886":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12749:3974":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12359:3920":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:16786:4837":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:4914:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7350:5173":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6623:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12163:3893":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"0:27:2371":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"2:10389:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:4142:3416":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5186:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"11:1064:20524":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:10650:3082":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4869:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:40827:5921":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5622:7583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:2084:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:11495:3124":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5311:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6876:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:12416:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:12475:14246":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10115:21517":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:11247:28778":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6781:5084":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:1521:7087":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:40752:8577":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:11831:3830":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14335:4207":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:44759:8072":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:42128:5803":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:6871:6266":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:6217:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8087:8533":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:15:2346":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:42572:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:46583:6092":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:44949:8079":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:6533:8892":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:7714:3460":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:9267:8767":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:11041:8610":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:7586:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:8014:8007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11702:6275":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:3665:13983":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:8255:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:15121:4347":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:11035:6240":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:22685:8880":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:6696:5938":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"14:160:5451":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7554:21466":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12736:3973":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11805:3855":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:6149:5601":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4947:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:44320:3099":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43783:5977":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15896:4590":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:7821:6726":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"16:2550:4876":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:3854:3665":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:44055:3122":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11617:3806":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"14:40:4083":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:12491:5827":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7907:5280":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8639:6349":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:3205:3292":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:42210:2401":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1563:7115":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:8290:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8723:6361":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"16:8267:5311":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:21755:8802":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:3617:6215":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:8598:5364":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:881:5471":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5288:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8668:7892":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2505:8605":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12191:3897":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:2495:8600":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12175:28670":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:9456:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:12699:3970":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:46118:6045":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:4855:3311":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:6076:8082":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:7308:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:4810:4934":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:8003:3629":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13798:4086":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:2545:6993":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:564:7058":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:2506:4874":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:8223:5303":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:13602:5842":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:2796:4887":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:8008:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6731:5081":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11691:3840":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11503:3825":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:1539:7098":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"11:2121:5203":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11653:3837":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:559:7056":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10141:21518":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11447:5542":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:12361:8534":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9319:26128":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:16264:4707":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:3094:3380":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:6790:7806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:23069:8056":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:2137:5472":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"0:112:2342":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"6:8273:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:5198:4946":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4929:4938":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6302:4991":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:2539:6812":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:16728:4824":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"14:0:2901":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:8546:5357":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9135:6381":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:38419:14163":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"10:36:6997":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:532:8511":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:5309:5601":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:42354:2401":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:40836:5922":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11706:3842":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:4506:34884":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:8902:6380":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12906:3992":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14084:4145":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:6552:8893":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:3052:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:46378:6067":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:3503:3662":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11714:6279":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10823:3643":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7521:5200":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10940:8083":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:9850:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:586:7070":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6437:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7454:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:936:3416":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:22591:14178":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:6696:5069":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:5726:6240":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:6731:34874":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1930:6197":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10843:3790":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:7748:5615":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:5274:6232":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3699:13936":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:10696:3638":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8625:8698":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:46200:6050":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:42387:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3674:8608":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:4307:8082":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:42250:5958":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:6033:3416":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:46214:6051":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:14963:4319":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:12403:920":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:3074:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:1085:35273":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:8031:8016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:635:3608":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2323:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:735:5561":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:44829:6016":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11173:35318":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:7170:8796":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:3729:5478":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3373:5485":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:4956:4939":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11976:26709":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:26131:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:32929:5216":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:42346:5478":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:21706:33406":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3105:33646":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8245:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:430:35283":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:23076:5875":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:10613:153":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:2826:2335":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"2:21721:33403":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13592:4045":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:40479:3112":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8512:8609":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1569:7117":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7883:5011":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3684:32140":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13570:21535":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13471:3666":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:44329:3098":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:1584:7129":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10378:6411":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:3420:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:6201:6241":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:15286:4356":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4822:7903":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:2957:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2045:678":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8532:5922":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:4566:6223":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:23121:8610":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:16241:4706":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5494:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"18:670:3615":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:12960:3097":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43408:5970":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:13196:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:8073:8532":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:40671:3451":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:7192:21464":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:6275:8082":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:14796:4294":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:4699:8700":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1614:5462":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:44805:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:10784:3785":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"2:46695:6096":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:8528:5355":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:10607:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:46281:6062":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:46089:6043":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14483:4232":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:14672:4257":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:41379:5938":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:22904:5855":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:5620:6237":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:41403:5941":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:12920:3114":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5586:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11281:3807":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7337:5171":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"15:394:20560":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:1489:7074":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:589:3594":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:8296:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:7774:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13349:4027":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:8353:8041":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:8179:5301":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:9186:5461":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:994:8542":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:16507:4082":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:2969:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:45044:6024":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:15989:4615":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:45957:6027":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:13554:4042":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:5205:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:9360:6400":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6740:7788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"0:0:2777":{"crate_id":0,"path":["strsim"],"kind":"module"},"16:5417:4953":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:1105:5475":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:538:3591":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:322:3642":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:5566:3096":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2990:4896":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13385:4029":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:12413:977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"14:202:13970":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:4873:4936":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2146:14188":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:7780:32059":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"9:500:5545":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11777:3850":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13547:4041":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:42259:8535":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3933:3416":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"6:6659:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:546:4850":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:2840:4889":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:7872:3415":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:1650:5485":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:16362:4732":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:45033:33164":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"5:7531:3416":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:40515:3454":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:12737:5834":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6823:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13933:4113":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:39632:13981":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:9492:6402":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:6170:14481":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3097:8044":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:11273:6274":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:961:5463":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:13873:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:1564:2401":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:42094:5954":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:5757:4957":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:1339:3653":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:3860:5572":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:6738:35306":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:41388:5793":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:8304:3140":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:5144:4944":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:44979:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3913:6218":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:2533:6992":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:14127:4161":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40598:3449":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:830:5479":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:10744:6210":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"11:1884:2401":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:41030:5934":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3310:31399":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:47358:6157":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"11:798:3416":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:1645:5484":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:5025:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:41421:5796":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:30747:3406":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:9735:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:15540:4509":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:5150:8082":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:16283:4712":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:40554:3455":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:30785:3473":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:8058:5297":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7495:5193":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5271:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:14393:4216":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9416:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:9178:6384":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:6904:5099":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:3490:3410":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:2323:5472":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:1106:5473":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:40896:5772":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:22365:8800":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:33893:14157":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:10400:3077":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11553:3831":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:396:35274":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:43872:5983":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:8585:5362":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:491:3583":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11222:3806":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:5562:3095":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:39784:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:10036:32799":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:12401:763":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3048:20598":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5127:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:740:5463":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:2748:4885":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:10041:8259":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:14284:4196":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:659:3609":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:22205:8610":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:10394:21526":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:44957:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12962:21662":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:506:3648":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6638:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7223:5153":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:46036:6036":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12319:3916":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:608:3601":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:465:7002":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:3258:8792":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5019:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4932:8687":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6389:5000":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:12410:1857":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6837:5091":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:4330:8694":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:1097:5472":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:1220:3651":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:46456:6071":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"9:0:2897":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11236:6383":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5477:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:671:5461":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15769:4557":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6984:4917":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40541:3453":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:4789:8050":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:5533:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:16187:4685":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11457:3821":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:10535:26484":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:5094:8718":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:9225:6387":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:1617:5461":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10274:21522":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:4217:5478":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:32400:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:2366:5488":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:5165:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7542:5202":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"7:79:20438":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10663:3637":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:40971:5932":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:8749:6371":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:47122:6138":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13181:4015":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:6976:8051":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:4929:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:33141:5213":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:8096:5298":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:9202:2401":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:22642:14178":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:6700:6260":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:10778:3784":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:6876:5096":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6794:5085":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:13145:4012":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:11319:35313":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:15036:4335":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:16209:4691":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:2155:5622":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:1914:5484":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:12400:747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12280:3909":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12941:3996":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11465:3822":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"16:6890:4899":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:13690:33027":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"0:105:2538":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"2:44840:14290":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"14:31:5451":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:45070:6025":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"7:0:1921":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:14547:4241":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8354:6304":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:982:5469":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14821:4298":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15777:4559":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:32368:5261":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:2222:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5676:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:4168:8672":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"10:0:2898":{"crate_id":10,"path":["adler"],"kind":"module"},"1:8045:3927":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:44486:6004":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2771:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:8494:6343":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"18:507:3584":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8835:8743":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8562:3116":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:47343:6156":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:32364:5893":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:5405:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12983:21663":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12396:1829":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4805:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:10787:3927":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:22718:8879":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:13306:4025":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:43852:5981":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6419:7639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"12:0:2900":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:523:7036":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:3101:33647":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11851:3858":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11124:35316":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:13717:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4829:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10630:3636":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:8199:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7316:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:5963:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10396:3070":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:7666:3053":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11112:29680":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:1140:5476":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:44469:6003":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:9443:6272":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:44755:8071":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12762:3975":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:583:3649":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:47151:6139":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:10394:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10516:21530":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:40770:5911":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:43935:5987":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1551:7107":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:8247:14146":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11527:3829":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9421:6257":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:41165:5789":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:40919:5930":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:23279:5891":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:46325:6064":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13757:4082":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11075:35315":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:1424:5477":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:532:7042":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:2729:29643":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:16613:4096":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"0:63:2444":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"17:14807:4296":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:7463:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40591:3111":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5471:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:718:3624":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:4935:476":{"crate_id":2,"path":["core","char"],"kind":"module"},"1:3349:6209":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6188:4974":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:7575:2401":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4842:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:12981:3091":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:1023:5472":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:39881:5903":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:44023:3106":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:14573:4244":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:11367:5821":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:5361:988":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46004:6034":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:4582:34884":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:11255:6554":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:33759:14156":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"15:0:2902":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:9742:6296":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:3247:3295":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"18:689:3618":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:4725:5763":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:12661:5829":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:12395:1739":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:16145:4672":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:23191:5883":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:16739:4829":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:155:4844":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:23224:5886":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:12079:3102":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:1907:5483":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:43426:5975":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15160:4354":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:30779:3407":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:43211:3068":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:42871:3077":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14001:4128":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:46051:6037":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15024:4334":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:22851:5854":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:2966:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8022:6286":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:809:3414":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:597:6185":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:11051:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9474:6274":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13451:4034":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:12008:5825":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:8267:8021":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:13733:4068":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:538:7045":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:3306:5461":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:8137:4915":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2493:8599":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:7212:5152":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:4015:6219":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:14375:4215":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5230:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:2596:679":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12216:3900":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"19:0:1305":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:14560:4242":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:10961:6403":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:5348:4951":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:46926:6134":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:39894:5904":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:42609:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12149:3892":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6111:4969":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11386:21543":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:8612:4918":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:1867:6193":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:16798:4840":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:46733:6098":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:10670:29682":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:12409:21637":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8613:6220":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4338:8695":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:5305:3673":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:3072:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:3809:34874":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:1530:7092":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4930:8686":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15973:4612":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:43843:5979":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46139:6046":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:7341:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13014:4006":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:3318:33669":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:291:34874":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:12007:29687":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:12711:3971":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:23089:5876":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"7:32:20431":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10597:3635":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5255:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:16714:4821":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:7075:21463":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:4569:8082":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:41020:5787":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:22577:8889":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:11016:3802":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13070:3805":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:4459:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5349:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:7386:5175":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:39668:13938":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:7332:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:47435:6175":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6666:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8202:6297":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11733:21564":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:6588:5041":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:23158:5880":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:6564:7717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:16332:4727":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:1632:7165":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:40:3413":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:1005:5203":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:42857:3069":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8568:6349":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:12414:1931":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:41988:8059":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:14933:4313":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:16179:4684":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1625:7161":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13781:4083":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:42498:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:16218:4693":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13095:4010":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:479:7010":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5366:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:4411:6221":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:45020:6021":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:3826:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:7796:6724":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:44751:8070":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:14738:4282":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:8483:5352":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6652:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1667:7190":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:6055:6251":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:898:5564":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8574:6351":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7949:4911":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:16812:4841":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"18:531:3588":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:14692:4258":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:8308:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46346:6065":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"0:108:2559":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"17:12992:4001":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:44301:3117":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:7305:5167":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44345:3112":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8256:3080":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:16595:4086":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"0:44:2406":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"2:10355:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:40800:5918":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:8636:2479":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4888:8721":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:12041:5826":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:3438:13928":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"13:229:6985":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:6527:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:32398:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:7414:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:4928:8684":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12723:3972":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5325:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:623:35324":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:4066:2401":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:4120:4926":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7372:6723":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:3095:35261":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:12721:5833":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14859:4302":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:10999:6216":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:13537:3995":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:491:7013":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:854:5469":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5085:4942":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:6971:8052":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:7835:6727":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:45972:6030":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:23246:5888":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:22232:5851":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:2304:8043":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:46716:6097":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:6813:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:14612:4249":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:4110:8669":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:7518:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10938:35317":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4937:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:21704:33401":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:41006:3606":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:15050:4336":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46363:6066":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:30800:3066":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:5742:3783":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:12986:3089":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:43834:5978":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:473:7007":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:765:25725":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:824:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:6256:4983":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:3126:20599":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1690:7200":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:6817:8761":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46849:6102":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10487:21529":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:1867:2340":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:667:3650":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:9237:8766":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:10864:32327":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:6123:4902":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:43626:8069":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:44187:3118":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11421:3818":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:1928:6196":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11902:3863":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:1604:5479":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:11223:6382":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:2171:5574":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:3352:33673":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:4447:5759":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:42185:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7508:5197":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:8503:6216":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:2570:4877":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12371:3921":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:40742:3106":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:16832:4118":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:16171:4681":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:22:826":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:8028:5295":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:10402:3078":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6672:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2936:8610":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:5318:4950":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46395:6068":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:14140:4162":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:11338:8087":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:3347:6208":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:6885:6270":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:5103:8719":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:5570:7557":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4976:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:5541:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:44787:6554":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5088:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6239:4978":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5282:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:34038:14158":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6970:4900":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40575:3113":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"0:21:2351":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"1:4174:8673":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7578:6400":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:3443:6212":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:8284:8026":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:5305:6232":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:2182:5575":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:553:7053":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10980:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:384:6182":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:39712:3409":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:14019:4129":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:44783:8078":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7168:5140":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:42338:5461":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:5640:6238":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:2645:6202":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12249:3906":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:43371:3083":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44105:3126":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:44612:13969":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13970:4119":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:7539:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3304:29217":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:44241:3120":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:16750:4830":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:43190:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:6153:5773":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:7548:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6713:5071":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:16323:4723":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13205:4017":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:12415:1434":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"0:106:2547":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"2:8757:14144":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"14:220:5459":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:7084:3421":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:4766:4933":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:42281:14238":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:677:6186":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:3875:5574":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1548:5478":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:21826:5852":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:46410:6069":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:16377:4733":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5117:8720":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:10615:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:22798:5853":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:12404:902":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5224:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2966:4895":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:9433:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6408:5007":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:44961:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:8249:8018":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:2349:5473":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:16084:4665":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:44775:8076":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:3671:13982":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:16520:4757":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:7980:4912":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4896:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:10418:21527":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5709:21456":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7058:5115":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"0:61:2429":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"6:6544:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:12698:5832":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:5826:3420":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:44007:2341":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8264:6301":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:7448:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13157:4013":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:12966:3090":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:14114:4157":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:44087:3127":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:12507:3104":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"9:445:20445":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15844:4575":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:43107:3066":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:16198:4690":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:3212:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:8251:3081":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:6611:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7892:3650":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:2325:6201":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:10336:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:2467:4867":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7959:5292":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:42363:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7807:35305":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:16555:4787":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:11691:5970":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:16132:4666":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6440:21459":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:5629:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:4990:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13818:4096":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14652:4254":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43983:3115":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11678:3839":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:23257:5889":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"0:113:2343":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"1:6590:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:40807:5919":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:6942:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:698:2401":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12108:3889":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11008:28782":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"9:53:8239":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"11:2466:3414":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:4267:4930":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:31185:3041":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14405:4218":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5395:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"9:480:20444":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6337:4994":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:23042:32109":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12035:3876":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4792:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:32382:3310":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:9152:6382":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:5113:4943":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:44336:3111":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:42166:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13055:3830":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:46427:6070":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:10398:3069":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:2660:4881":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:8386:3139":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:34557:5222":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:3285:13933":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:33692:8795":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1711:7208":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:43173:3066":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12787:3977":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:3889:3681":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10218:21520":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11728:6280":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:47279:6147":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:4435:5758":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:16026:4623":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12204:3898":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:3014:20597":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13719:4067":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13890:4108":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:16684:4813":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12234:3902":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:15641:4529":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1675:7191":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:221:5559":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:2551:35281":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7016:5111":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:12389:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:15315:4376":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:8669:5261":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4875:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11309:3808":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11878:3805":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:10832:32793":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:821:8654":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:7258:34882":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7969:5293":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:33826:14155":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:9306:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:7159:5139":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:44141:3125":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:45987:6031":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"13:0:2894":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11985:3868":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6368:4846":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:6376:5849":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:0:2899":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:4184:4928":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:5465:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:123:6813":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10031:21515":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:43883:5984":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:32389:5895":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:11124:29686":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7938:5289":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5301:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:15136:3995":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5249:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:34384:14160":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12798:21661":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:3402:13937":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:44013:3107":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:9312:6392":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8027:6288":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4826:7907":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:44455:6000":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:45081:5490":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6392:29670":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:11448:3819":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:9429:8082":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:7738:26655":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11753:8094":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3659:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:38309:14161":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:4404:4931":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:3263:8794":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:22589:32174":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"9:236:5970":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13266:21532":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:1410:5472":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2551:2910":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:2052:3471":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46156:6047":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2973:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:21808:8798":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:879:5461":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:0:2903":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8626:5366":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:12405:908":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:6716:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:21689:33396":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:2437:3661":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8579:8650":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43909:5919":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:2227:3654":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:7583:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1395:5473":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13921:4112":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2415:20569":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11964:6431":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:9448:6273":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:44419:13968":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5420:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:7577:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:80:25714":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"0:53:2416":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"16:6822:21461":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:1639:5483":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:5980:8082":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:12583:3961":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7030:5113":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10564:3634":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:8343:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:2495:20520":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:44561:5836":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:497:7016":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14358:4212":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:11198:5461":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2808:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:44037:3123":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:40849:5923":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:563:3593":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:7947:29675":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:5224:4947":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:481:3582":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:15549:4510":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6680:5066":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:32489:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:6998:5104":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:1049:5473":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:43165:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13692:4059":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:6631:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:42260:8733":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:7415:28666":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"0:54:2421":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"2:44971:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"18:96:25715":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:0:1731":{"crate_id":1,"path":["std"],"kind":"module"},"17:10534:3782":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15689:4535":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7358:4907":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5727:3782":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8197:6296":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:7591:5608":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:43396:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10518:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"9:422:20447":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12886:3990":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:3445:6213":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:22935:5856":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13871:4103":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:16632:4801":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:9764:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:41928:5800":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:4501:13985":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:3848:8652":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:735:25724":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14975:4321":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11958:3866":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:39744:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:11016:28780":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:2594:6677":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10357:6195":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:32322:3057":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12306:3913":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"5:1586:5464":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:3339:5484":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:16341:4729":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:12407:895":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6917:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:4777:8717":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10803:3106":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:957:5462":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11291:35314":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6493:7676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4230:8678":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:4917:811":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:40715:14225":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"17:317:3641":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:5862:6241":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:15760:4556":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12044:3879":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:14299:4201":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"16:6269:4984":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:22969:32128":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:15905:4591":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:2920:4893":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12869:4034":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:36433:5223":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8108:6295":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13222:21531":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:2820:4888":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:7469:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:22958:5861":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:16385:4736":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13854:4101":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:7809:6725":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:12920:3993":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:15418:4462":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12135:3891":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:13742:5844":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10246:21521":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:708:5462":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:16642:4802":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:3347:5482":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11592:3766":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:14917:4312":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15410:4459":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:2950:4894":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12931:3995":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11759:8095":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:11983:6283":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11864:3859":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:47201:6141":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5533:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:9194:6386":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:40990:5785":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:3910:6217":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:2900:4892":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:8251:14145":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:39766:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14832:4299":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:15753:4555":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15557:4511":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:661:3061":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5551:7549":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13610:4048":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:3308:4864":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11163:3805":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:6381:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11290:6557":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:22713:8881":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:8272:6303":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:15077:4340":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4970:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:1624:3416":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15864:4582":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:47248:6144":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:15106:4343":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:46621:6094":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:7708:5609":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:5488:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:9373:26127":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"9:390:20446":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:46828:6101":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:6736:6261":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10793:3789":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:4957:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:42722:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40699:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:4720:5762":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:4877:3301":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13290:3741":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13662:4055":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"0:62:2438":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"17:12082:3886":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5107:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6777:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:3461:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11818:3856":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14708:4263":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2963:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:1727:7213":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:11290:3100":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:2357:33551":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:32458:3299":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4567:5760":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:42461:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3207:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40564:3456":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:14031:4132":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:13585:5839":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"11:1920:5485":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:43379:5966":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"0:20:2348":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"1:8875:6227":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:42685:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42304:137":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"6:6700:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:10337:3062":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4997:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:598:35325":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:1083:5203":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:10970:6298":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:42864:3070":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:545:7048":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5507:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:772:5464":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12537:3957":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:44311:3101":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:13896:5849":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"11:2559:6995":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:14072:4142":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:21922:8610":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11998:3869":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:965:5466":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"15:306:20551":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:1900:5482":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:2332:8591":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:4536:8082":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:23100:8667":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"11:1564:20525":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11708:6430":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:613:35327":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:3343:5218":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:5088:3442":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46666:6095":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5450:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12335:3918":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:42219:5956":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"18:581:3041":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:3720:3664":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:47259:6145":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:6953:5103":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:14886:4306":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:46754:6099":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"0:45:2408":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"1:4146:8670":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4964:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7282:5166":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:2802:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:873:5470":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:2715:6204":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14997:4332":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:10741:6208":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:6159:4970":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:3695:4924":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:766:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:30521:8653":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:842:8540":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:14008:3411":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:3402:6211":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:573:8516":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:7060:3420":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5648:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:15351:4407":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6625:5044":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:40067:3302":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:8298:5315":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4346:8696":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43922:5986":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12840:3984":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:16761:4831":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5069:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:835:5466":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5412:1257":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:47093:6137":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:44954:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:12851:3988":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:47305:6149":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:1011:5461":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12028:3873":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:9288:6388":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5139:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11887:6218":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44598:6006":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11990:6283":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:16701:4815":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:1905:6195":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:6479:6241":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:7511:2401":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11971:3867":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5217:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:12393:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:2378:21592":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:680:6188":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5381:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:12390:1891":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:39874:5902":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5295:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1597:7136":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:12402:742":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:15431:4469":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11788:3852":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:39804:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2684:4882":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12388:1187":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:3736:13939":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:4846:13993":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2937:3058":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:38474:14164":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1643:7173":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:47294:6148":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3493:8635":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:15010:4333":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1494:7076":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"9:328:6998":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:22501:8885":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:23268:5890":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:11579:3834":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7471:5192":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:896:4859":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:1703:7204":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:39053:14165":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2082:1372":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:1696:7201":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:40928:5776":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7731:5956":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7372:4908":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:994:5471":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:2450:4865":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:44771:8075":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:42298:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13028:4008":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:2590:4878":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:7185:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:8302:8029":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:4482:13932":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:16159:4678":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6852:5093":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:2343:5626":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:5449:4954":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6902:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:12399:744":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:6526:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6708:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:11926:3864":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12018:3871":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5682:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7789:35303":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:2265:8511":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:10766:14257":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:1684:7197":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:47373:6158":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14599:4247":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6808:4897":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:4116:8668":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:299:6987":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11027:6295":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:46494:6073":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:12775:3100":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:685:8530":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5241:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:33353:14154":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:12387:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:11523:5824":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:8063:6252":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:7361:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7401:35302":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:2724:4884":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:47180:6140":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11566:3832":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"0:65:2460":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"2:21723:33392":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12260:21636":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:4:1270":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:12409:1851":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:21735:33399":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:5649:4955":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11720:3844":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:706:3092":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:42072:32122":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:5428:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:3465:3414":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:6882:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3293:13935":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:11358:21542":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2479:8595":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:8333:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:22457:8884":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:952:5479":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14773:4293":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5319:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22671:8610":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:7431:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8219:6299":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:41372:5792":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:15963:4609":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:7259:5165":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:40867:5925":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:21932:8799":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46104:6044":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12347:3919":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:14099:4151":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:1379:5203":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:41155:5937":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5179:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:12412:1845":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:11130:29642":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"14:165:20531":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:43862:5982":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:685:5478":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}