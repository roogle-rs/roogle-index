{"root":"0:0:2328","crate_version":"0.11.0","includes_private":false,"index":{"2:12964:25908":{"id":"2:12964:25908","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12248:455","str::splitn":"2:12961:25906","self::pattern":"2:12584:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43275:2665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2098":{"id":"0:106:2098","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:943":{"id":"2:12894:943","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12248:455"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1955":{"id":"0:44:1955","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12905:25872":{"id":"2:12905:25872","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12265:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31759:237-0:112:1890":{"id":"a:2:31759:237-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12918:25898":{"id":"2:12918:25898","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12919:25899"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:8152":{"id":"5:5613:8152","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5846:1667":{"id":"5:5846:1667","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13005:33143":{"id":"2:13005:33143","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:33141":{"id":"2:12993:33141","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12610:2630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:2864":{"id":"2:12942:2864","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12955:33131":{"id":"2:12955:33131","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12584:2638","str::split":"2:12946:25900","prim@char":"1:12248:455","`DoubleEndedIterator`":"2:7966:131","str::rsplit_terminator":"2:12958:33132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43203:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:1917":{"id":"2:12921:1917","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12248:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43123:1889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41394:8050-0:112:1890":{"id":"a:2:41394:8050-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13002:25916":{"id":"2:13002:25916","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:25811":{"id":"2:13017:25811","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39243:2840","Self::is_ascii":"2:13016:25604"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39243:2840","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893":{"id":"2:12893","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12894:943","2:12895:1990","2:12896:33124","2:12897:33125","2:12899:33126","2:12902:25584","2:12903:33127","2:12904:334","2:12905:25872","2:12906:2021","2:12908:2044","2:12910:25870","2:12912:25871","2:12914:33128","2:12915:33129","2:12916:25895","2:12917:1931","2:12918:25898","2:12919:25899","2:12921:1917","2:12922:5510","2:12923:5135","2:12924:31756","2:12925:31764","2:12926:27709","2:12927:33130","2:12928:31768","2:12929:25912","2:12932:25913","2:12935:25914","2:12938:2898","2:12942:2864","2:12946:25900","2:12949:25902","2:12952:25904","2:12955:33131","2:12958:33132","2:12961:25906","2:12964:25908","2:12967:25910","2:12970:25911","2:12973:1932","2:12976:33133","2:12979:33134","2:12982:33135","2:12985:33136","2:12987:33137","2:12989:33138","2:12991:33139","2:12992:33140","2:12993:33141","2:12996:33142","2:12999:25915","2:13002:25916","2:13005:33143","2:13008:33144","2:13011:33145","2:13014:33146","2:13016:25604","2:13017:25811","2:13018:25605","2:13019:25601","2:13020:25600","2:13021:25814","2:13022:25815","2:13023:25816","2:13024:33147","2:13026:8042","2:13027:33148"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2435:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41395:8248-0:112:1890":{"id":"a:2:41395:8248-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:8248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12924:31756":{"id":"2:12924:31756","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12925:31764"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43427:2642","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:112:1890":{"id":"b:2:2670-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108:2110":{"id":"0:108:2110","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:25910":{"id":"2:12967:25910","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2390:25580":{"id":"2:2390:25580","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:33134":{"id":"2:12979:33134","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12584:2638","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::rmatch_indices":"2:12982:33135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43303:2659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2675-0:112:1890":{"id":"b:2:2675-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12902:25584":{"id":"2:12902:25584","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12132:2645"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:31768":{"id":"2:12928:31768","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43445:2639","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:1932":{"id":"2:12973:1932","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12584:2638","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::rmatches":"2:12976:33133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43357:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13026:8042":{"id":"2:13026:8042","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4681:8042"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43461:2653","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13020:25600":{"id":"2:13020:25600","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:27709":{"id":"2:12926:27709","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43407:2657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:33142":{"id":"2:12996:33142","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1980":{"id":"0:61:1980","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:757":{"id":"0:18:757","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42313:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:2044":{"id":"2:12908:2044","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1891":{"id":"0:113:1891","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:5844-0:112:1890":{"id":"b:5:5844-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5842:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5846:1667"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2328":{"id":"0:0:2328","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:1890","0:20:1896","0:21:1899","0:26:1916","0:27:1920","0:44:1955","0:45:1957","0:53:1966","0:54:1971","0:61:1980","0:62:1989","0:63:1995","0:65:2011","0:105:2089","0:106:2098","0:108:2110"],"is_stripped":false}}},"b:2:2388-0:112:1890":{"id":"b:2:2388-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:25580"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2883:246-0:112:1890":{"id":"a:2:2883:246-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12935:25914":{"id":"2:12935:25914","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1989":{"id":"0:62:1989","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:33145":{"id":"2:13011:33145","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:25604":{"id":"2:13016:25604","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2663:2858":{"id":"2:2663:2858","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2637:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:25814":{"id":"2:13021:25814","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38286"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:33138":{"id":"2:12989:33138","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1899":{"id":"0:21:1899","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2435:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:116:757":{"id":"0:116:757","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:33130":{"id":"2:12927:33130","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43417:2658","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:2898":{"id":"2:12938:2898","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1890":{"id":"0:112:1890","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:1891"],"impls":["a:2:41394:8050-0:112:1890","a:2:31759:237-0:112:1890","a:2:2883:246-0:112:1890","a:2:41395:8248-0:112:1890","a:2:31816:2676-0:112:1890","b:2:2660-0:112:1890","b:2:2388-0:112:1890","b:2:3496-0:112:1890","b:2:2670-0:112:1890","b:2:2664-0:112:1890","b:2:2385-0:112:1890","b:2:2675-0:112:1890","b:5:5844-0:112:1890","0:115","0:19","0:118","0:17","0:117"]}}},"0:53:1966":{"id":"0:53:1966","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:33147":{"id":"2:13024:33147","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4680:33147"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43452:2652","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:25603":{"id":"5:5614:25603","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13019:25601"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:112:1890":{"id":"b:2:3496-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:54:1971":{"id":"0:54:1971","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2435:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1916":{"id":"0:26:1916","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","cause","provide","type_id","description"],"trait":{"name":"Error","id":"2:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3498:1705":{"id":"2:3498:1705","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39057:5406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:33132":{"id":"2:12958:33132","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12584:2638","str::split":"2:12946:25900","prim@char":"1:12248:455","str::split_terminator":"2:12955:33131"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43221:2667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2660-0:112:1890":{"id":"b:2:2660-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:2858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13018:25605":{"id":"2:13018:25605","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31816:2676-0:112:1890":{"id":"a:2:31816:2676-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:2676","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2674:1692":{"id":"2:2674:1692","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:33133":{"id":"2:12976:33133","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12584:2638","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::matches":"2:12973:1932"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43375:2662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:5135":{"id":"2:12923:5135","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43139:2647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13023:25816":{"id":"2:13023:25816","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38286"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:33845":{"id":"5:5611:33845","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1920":{"id":"0:27:1920","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2435:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:25904":{"id":"2:12952:25904","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12584:2638","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::split":"2:12946:25900"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43171:2663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:25899":{"id":"2:12919:25899","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12918:25898"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:25906":{"id":"2:12961:25906","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638","str::rsplitn":"2:12964:25908"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43257:2666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2387:2536":{"id":"2:2387:2536","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:33148":{"id":"2:13027:33148","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4678:33148"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43470:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:33844":{"id":"5:5603:33844","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:33126":{"id":"2:12899:33126","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12897:33125"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:25911":{"id":"2:12970:25911","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:25815":{"id":"2:13022:25815","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38286"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:668":{"id":"0:119:668","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:25602":{"id":"5:5615:25602","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13020:25600"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2679:1690":{"id":"2:2679:1690","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2385-0:112:1890":{"id":"b:2:2385-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2536"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13014:33146":{"id":"2:13014:33146","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12545:137","`FromStr`":"2:12544:2655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12544:2655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12544:2655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:33842","5:5597:2058","5:5600:33843","5:5603:33844","5:5611:33845","5:5612:33846","5:5613:8152","5:5614:25603","5:5615:25602"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5600:33843":{"id":"5:5600:33843","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:33127":{"id":"2:12903:33127","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2011":{"id":"0:65:2011","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2440:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10236:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2666:786":{"id":"2:2666:786","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1957":{"id":"0:45:1957","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2435:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:25912":{"id":"2:12929:25912","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12895:1990":{"id":"2:12895:1990","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:33128":{"id":"2:12914:33128","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12254:1609","str::slice_mut_unchecked":"2:12915:33129","crate::ops::Index":"2:38889:2947"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:33846":{"id":"5:5612:33846","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2635","`String`":"5:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2635","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:25870":{"id":"2:12910:25870","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2673:138":{"id":"2:2673:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12925:31764":{"id":"2:12925:31764","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12924:31756"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43436:2640","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:25900":{"id":"2:12946:25900","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12584:2638","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::split_whitespace":"2:12924:31756","str::rsplit":"2:12952:25904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43153:2664","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12999:25915":{"id":"2:12999:25915","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:33139":{"id":"2:12991:33139","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:33136":{"id":"2:12985:33136","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:25601":{"id":"2:13019:25601","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:334":{"id":"2:12904:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12905:25872","`u8`":"1:12265:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2664-0:112:1890":{"id":"b:2:2664-0:112:1890","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5596:33842":{"id":"5:5596:33842","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2635","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2635","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2089":{"id":"0:105:2089","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:2021":{"id":"2:12906:2021","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31761:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12932:25913":{"id":"2:12932:25913","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12949:25902":{"id":"2:12949:25902","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12400:2641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:2058":{"id":"5:5597:2058","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1995":{"id":"0:63:1995","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2678:138":{"id":"2:2678:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31687:2597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12987:33137":{"id":"2:12987:33137","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:33124":{"id":"2:12896:33124","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:33125":{"id":"2:12897:33125","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:25871":{"id":"2:12912:25871","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1896":{"id":"0:20:1896","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12917:1931":{"id":"2:12917:1931","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12916:25895","str::split_at_mut_checked":"2:12919:25899"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:25895":{"id":"2:12916:25895","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12918:25898","str::split_at_mut":"2:12917:1931"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:33129":{"id":"2:12915:33129","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12254:1609","crate::ops::IndexMut":"2:3158:2948","str::slice_unchecked":"2:12914:33128"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:33144":{"id":"2:13008:33144","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2638"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:5510":{"id":"2:12922:5510","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12248:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43129:2648","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:33140":{"id":"2:12992:33140","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:33135":{"id":"2:12982:33135","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12584:2638","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::match_indices":"2:12979:33134"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43321:2660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:39981:5433":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:7597:5137":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:12262:849":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:1929:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:7389:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:44124:5529":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:38905:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5347:4480":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:5488:5740":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:2723:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5736:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:9671:21012":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:4500:34271":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:538:3133":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:6181:30805":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:1547:6633":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5677:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:5796:5292":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:33215:13677":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6491:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:563:3135":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:8153:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:4258:8205":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13509:3655":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3335:13497":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6542:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6664:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:15596:4201":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:15778:4252":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:45356:5569":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:613:34656":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:15418:4136":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4843:8198":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:10031:2617":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15281:4098":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11227:3366":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5400:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12887:3553":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5225:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15473:4151":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:4468:4458":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:40134:5441":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:6678:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5817:4494":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5390:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8189:5093":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7509:4800":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:2562:6521":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:6811:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:4386:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:836:4982":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7368:2954":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10671:34645":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8554:5854":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:4108:5277":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9246:5899":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:261:3184":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:4514:13507":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:5743:5748":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:6768:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:41396:13749":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12201:3493":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5219:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:45417:5572":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:485:6538":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:859:1950":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12089:3483":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:1142:4997":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:40023:5437":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12543:3533":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:10289:5909":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:7043:8311":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2961:13449":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:2394:4399":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:3413:8148":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:6153:7609":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:608:3143":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:7461:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:10868:2664":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:40124:5306":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9755:21009":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"14:220:4980":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"11:2423:1950":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5665:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"10:0:2441":{"crate_id":10,"path":["adler"],"kind":"module"},"6:5472:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:2175:21091":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4952:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4924:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:5802:20962":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"14:7:4972":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:12258:701":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2929:8307":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11510:3393":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:13400:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13774:3726":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:3077:13452":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:41469:1950":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5857:5752":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:45569:5580":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2427:8108":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:22448:5371":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:680:3158":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12127:3485":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7580:4814":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8425:8122":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10646:5718":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:7769:4822":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:41775:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15814:4256":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7618:4815":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:9212:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:46265:5652":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12076:3482":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:1676:34617":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:1896:2952":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5039:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6519:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:875:4991":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"0:106:2098":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"16:2528:4405":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:43129:2648":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:597:3192":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2696:5709":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6698:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:11392:3384":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10982:21045":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:3669:3223":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:42334:2608":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:43648:5513":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13959:3755":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:16235:4363":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:9984:21032":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:7075:34277":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:3032:33929":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:31816:2676":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:41270:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:8341:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:5189:5739":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:7937:2679":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:1189:34160":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6385:4604":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8181:5808":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5483:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:939:4990":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11404:5934":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:13785:3729":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:294:2635":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:16093:4329":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:22154:13697":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:12824:21036":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:2443:8113":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:3323:5717":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13832:3735":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14449:3852":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12851:3551":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:39655:2653":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:8393:13661":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2918:2833":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:8265:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11354:3382":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2425:7578":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:45487:5576":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2281:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13797:3731":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:4985:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:9041:5884":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"0:112:1890":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"17:3473:3206":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:11706:2643":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:14298:3821":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:15734:4237":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:43583:5511":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:1107:4996":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10710:3334":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:1724:34269":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:2499:2453":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:4668:8227":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10446:27629":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:5912:2954":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:1968:2600":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:15410:4135":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:3518:5857":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:22087:8404":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:39070:5407":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:22582:7585":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5102:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:7452:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:9253:5900":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6650:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6749:4657":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:3108:8060":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44185:5534":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:6435:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5112:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4137:8186":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4870:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8655:5874":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:6407:8408":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:8328:7561":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:4250:8204":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:39767:2988":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12278:3499":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12707:3541":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:4093:8184":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7545:5130":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:16050:3617":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:40498:5446":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:9266:5903":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:10025:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5477:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:16223:4360":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:5407:1173":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12199:5942":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:42313:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:4570:2850":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6317:4591":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41198:5461":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:31736:5397":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:5250:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:2554:34619":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:42232:7589":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:30239:2606":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:1325:4994":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14341:3827":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11341:3381":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:4103:34269":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13877:3745":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:6749:34269":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:6335:4601":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:3028:7570":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40269:5308":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:15356:4121":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10018:21013":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:6540:2954":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:43275:2665":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:38893:5401":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:10244:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:15313:4106":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:7348:1950":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:523:6562":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:41855:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:39721:2994":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:45601:5582":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12993:21037":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:40094:5304":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11293:21064":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:7428:20972":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:9497:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11574:3402":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12433:3518":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:2471:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:43569:5508":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10676:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:5617:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6079:4377":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:941:4982":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:5722:4428":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:1494:1950":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5361:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44075:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:1463:4982":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4590:8210":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:3614:4449":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:9995:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:13528:2949":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:45923:5640":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:589:3136":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:10035:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6813:4671":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5329:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:1098:3193":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:45808:5605":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:6670:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5002:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"14:31:4972":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:5842:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9916:21030":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:2234:7569":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7473:4535":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:43737:5515":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:4543:2839":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:1578:1950":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12863:3552":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11621:3412":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:6581:5767":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"0:54:1971":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13999:3761":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7420:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:4390:5281":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:481:3124":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:2323:20101":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:7585:5136":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12238:3496":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:1648:7609":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"17:10419:3185":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6714:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4787:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10911:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:1590:5003":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:7251:1943":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11743:3424":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:5401:34269":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:1903:5003":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10155:3318":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"15:394:20066":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6524:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:4242:5279":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:1510:6610":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10959:5800":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:6263:4567":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:30626:2581":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:39683:31358":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:38920:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10877:5802":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:15301:4105":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:4802:4468":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6300:4584":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8392:3171":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:5037:4476":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:515:3123":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:2195:8026":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4837:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:45277:5557":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3126:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"11:1566:20031":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:12272:1320":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:4743:4466":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:9207:5892":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:2037:3196":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11222:6066":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:6028:5122":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:1051:4994":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:1066:20030":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:38845:13453":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:6026:4371":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46256:5651":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5266:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4149:8189":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:774:4985":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2634:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"12:0:2443":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:46045:5642":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:15748:4244":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:22602:5391":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:7098:4715":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:2234:3203":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7399:29745":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:21351:5367":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:3196:4389":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:5653:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12508:3528":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:11600:7621":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14402:3838":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:3321:5716":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:16187:4353":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:3475:4448":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:5863:20963":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7132:4720":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:7100:34275":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:10999:5887":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:1639:6699":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13187:3589":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11016:3347":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:22364:5369":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:2764:2605":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:21339:8316":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:41736:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:30250:31361":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:10818:3336":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11166:3362":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13594:3683":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10877:3337":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"14:214:4978":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6353:4382":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:40492:5312":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:42006:2617":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:13986:3760":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11915:21133":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13015:3518":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:8006:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4942:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:12818:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11042:3348":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:9437:28298":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:12318:3208":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:1485:6600":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:32608:13673":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:1863:5143":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:45758:5603":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:1653:6710":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:42753:5337":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:521:25221":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:6930:2959":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:8175:4883":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3925:4454":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:45519:5578":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:14529:3860":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:15456:4144":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4641:4464":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12464:21158":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:11116:2665":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:828:5085":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:43461:2653":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6880:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6120:20965":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9938:21031":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:8306:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1663:6716":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:1741:3007":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7428:5129":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:434:34603":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6763:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:23064:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:15426:4138":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:32236:4734":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5320:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13146:3580":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:45306:5559":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:465:6528":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:4424:4457":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:7703:5759":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:41319:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:6419:5296":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:7514:2594":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:9100:5889":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:2998:4444":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:2708:4413":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:10287:5910":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7321:5463":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:16269:3639":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"18:689:3160":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:43002:5492":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7741:4441":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:14599:3876":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:42013:2618":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:3244:5004":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:6619:7580":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:9194:5891":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:1887:1950":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:12266:1716":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:710:4983":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:9335:7609":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:403:3186":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:5897:4502":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:43901:6061":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2049:5146":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"13:226:6511":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12388:3513":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:479:6536":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:16212:4358":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:39243:2840":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:2304:4721":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:13089:3570":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46198:5647":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:1340:4993":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4127:8185":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:2495:1883":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"1:5678:8263":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2956:13448":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:39672:2992":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"11:2140:4993":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:11629:5345":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:43171:2663":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:6049:13994":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:4120:5278":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:7999:8081":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:7306:34641":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:5158:5739":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:5061:7609":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:13438:5365":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:13473:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12408:3515":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5515:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:2453:8118":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:43533:13482":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6872:4684":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15569:4189":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:10643:5716":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:7926:5791":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:2548:4406":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3029:3218":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:40476:5311":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:1535:6624":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3603:2954":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:2607:2598":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12671:3538":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:5160:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6617:5768":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:5415:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12255:1695":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:22496:5377":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45181:5551":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5347:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:4073:2954":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5314:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6758:4658":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:698:3161":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:8288:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:21192:2581":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1671:6717":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6505:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:0:2448":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13568:3678":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:2572:4407":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11583:3405":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10161:5458":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"15:288:20056":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1072:4998":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6466:4613":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:39911:5425":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:7887:13663":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:3341:13496":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:8155:4881":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:14111:3776":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:32842:8308":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2878:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:14091:3773":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:7633:34633":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:43600:5512":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8487:5856":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:22049:8401":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:15273:4097":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:8118:4876":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11367:3355":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11715:3420":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:11144:5344":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11755:5725":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12264:836":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7857:4832":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:914:4983":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5385:3318":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3240:28195":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2477:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:8583:7418":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:12269:1710":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:9299:6062":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:2756:6184":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7052:4707":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:849:4999":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2934:8309":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:14356:3831":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41176:31503":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:8535:7607":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:10236:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:40507:5448":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"11:2383:4982":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:12213:3494":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5546:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15992:4310":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:7356:13664":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:7546:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:43375:2662":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6427:4608":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13455:3649":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:16079:4325":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14131:3777":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:21729:8123":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:31846:2836":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:3603:8140":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7497:4799":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:14994:4033":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:41413:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:3593:8121":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14752:3898":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8481:5854":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8528:5726":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:0:2446":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11187:6061":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:7085:4711":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4979:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:150:4369":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:11561:5786":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:10819:4982":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3158:2948":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:12263:855":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12454:3521":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:1854:7576":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:15445:4143":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:9662:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:669:5082":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:46148:5645":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43865:7598":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12485:21159":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:1891:2954":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:43885:7603":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9322:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7604:4439":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11168:5886":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10622:34647":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:3597:3207":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:2124:4721":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:6098:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:42510:2625":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11324:3378":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6478:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7503:2593":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:7379:34640":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:4437:34271":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:3129:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15655:4216":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11493:3391":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5260:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11830:5790":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:903:2952":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:37486:13680":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"11:364:34613":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7727:4440":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:12346:5353":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15799:4255":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4266:8206":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:4395:5282":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:12323:5352":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7388:5128":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:43153:2664":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:2736:5712":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3314:13685":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5083:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:43445:2639":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13375:3633":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:8703:5478":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12268:1728":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:45548:5579":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:832:5000":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:4897:5733":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:9175:2631":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7014:20970":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:1309:4721":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13173:3588":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"0:108:2110":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"2:39711:2993":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:15102:4055":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15138:4060":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:4966:5285":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:42971:5489":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:0:948":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5344:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:6398:4422":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12251:1223":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:9669:5801":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:4560:4461":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4864:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9143:8281":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:14463:3853":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:700:1950":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:7339:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:16176:4352":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:12246:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4800:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:3494:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:45196:5552":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:6665:20968":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:12270:917":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:1526:6618":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:41478:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10720:34651":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4824:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:10039:2616":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:15463:4146":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"7:31:19937":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15176:4074":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:7931:5793":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6634:4430":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:45292:5558":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:41210:5726":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"0:26:1916":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"17:11026:21046":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:5191:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15058:4043":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7656:20973":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13497:3654":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:31729:4779":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:21734:8319":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:2440:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10251:3178":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:22482:31491":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4724:8184":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:15190:4077":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4897:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46119:5644":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11102:3357":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12969:3558":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:45263:5556":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:43943:5524":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:645:8044":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:2838:4419":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:39740:2653":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:12605:2632":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10534:34650":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:2287:34075":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:2382:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6588:4621":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12584:3336":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"0:65:2011":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"1:9258:5901":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:1007:4721":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:5846:4498":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:43303:2659":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:43099:2656":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6480:4424":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13387:3634":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:40075:5439":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:9415:5906":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"5:6388:8407":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:123:6287":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:11240:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:6408:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5756:4488":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:8108:5802":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"11:2443:2954":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:42531:5478":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:6940:2960":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:8475:2657":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:497:6542":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5031:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4916:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:15836:4262":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11755:3427":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11898:3445":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:6597:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:41010:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:5831:4497":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:15266:4096":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7006:4696":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:7516:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:6689:5769":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:1883:4982":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:40000:5291":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:6608:5303":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:3018:4736":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44137:5532":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"0:63:1995":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"16:6927:4689":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2728:4414":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:15116:4056":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:14246:3815":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"0:20:1896":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"1:11823:28349":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"9:447:19951":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:12231:28306":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:9108:1950":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5052:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3791:5093":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:10828:34649":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:1582:5001":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:9492:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:42296:2606":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8164:2620":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"8:0:2439":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:30599:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6560:4425":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:578:6592":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13272:3617":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12353:3511":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5174:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3456:5446":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11837:5790":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:2369:5009":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:43041:5494":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:491:6539":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:1160:4998":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:1517:6613":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:1975:744":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13046:3566":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:5719:7609":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:42287:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:4:1186":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:42541:5482":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:15646:4214":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:2542:6286":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12478:3523":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:7168:5903":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43778:2670":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:2525:6186":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46393:5665":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:21456:8314":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10068:21016":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"19:0:1203":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2401:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:1917:5005":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:44116:5527":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11799:3434":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:5445:2636":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:3329:4447":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:41502:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:754:3175":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"0:62:1989":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"1:5750:5749":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:8253:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4799:8236":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:5235:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:8301:4894":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:16198:4354":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:9684:7785":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:39774:2989":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:10939:30609":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:5502:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:9339:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5370:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4976:4474":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:15434:4139":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:7144:20971":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:1087:34616":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7695:4820":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:3095:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:39962:5430":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12043:3479":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:96:25209":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5624:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:11089:3356":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:909:5000":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45064:5538":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:43357:2661":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10573:34644":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3934:5725":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1559:6641":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5607:5747":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:14325:3825":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:811:2952":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6494:4616":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13252:3607":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:2936:20103":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:9064:5328":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:328:6516":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:2271:5707":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"0:45:1957":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"1:481:30800":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10524:3331":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5423:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:2876:2830":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:38960:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12422:3516":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:726:8165":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:6257:5364":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:41092:7588":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:883:4992":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5212:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2660:4411":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:6471:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10905:3338":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14177:3801":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:1040:4721":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:564:6584":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12494:3525":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:22140:8405":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"11:2469:2952":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:45846:5607":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15289:4099":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:11023:2663":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:41328:4982":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13437:3641":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6379:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:113:25210":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:14575:3518":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5296:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:9824:2607":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:35610:4741":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:40:2951":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11589:5789":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:45143:5545":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:22011:8400":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:5636:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:32901:8310":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:581:2581":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:5742:4483":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:12400:2641":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8605:5730":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:43257:2666":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:43897:7606":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:41658:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:9380:5781":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:4279:8207":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14147:3782":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:3364:5718":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:7575:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:12599:2633":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:3264:3204":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:43028:5425":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7031:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:8317:7560":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1585:6657":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:21260:31744":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:11056:30794":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:10242:153":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"16:6940:4691":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:31725:5396":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:7314:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:12584:2638":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:1824:5699":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12929:3556":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:10890:5926":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:11269:21063":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:45111:5543":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:2508:4404":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:5623:7609":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:8093:4874":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11605:3410":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:14038:3766":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8468:2664":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:7608:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:15:1894":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:1580:6655":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:1828:2952":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:5914:4507":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:4771:4467":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4568:8209":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:1574:1888":{"crate_id":2,"path":["core","mem"],"kind":"module"},"0:21:1899":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"2:31848:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:1593:6662":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10538:5884":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:39844:5416":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5107:4478":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:3396:2952":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:22540:31344":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:4174:13499":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"0:53:1966":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"1:1607:5006":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4891:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4079:8182":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:4469:2848":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:356:5686":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:8073:4873":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12597:3534":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:102:6512":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:5014:8235":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:46355:5663":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:22432:7582":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:43747:5519":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:15342:4114":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12328:3502":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:1574:4982":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:15678:4229":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:4316:2847":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:13251:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:16105:4331":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:7529:5121":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:12265:1734":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:867:4985":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:32960:13675":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11547:3263":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8462:2647":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:9976:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:2854:4420":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:922:4987":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:640:5694":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:39755:2987":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:45128:5544":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:2808:4418":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13844:3737":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:41461:4999":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:45049:5535":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6621:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:10581:30787":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:4238:7609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10317:3180":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:4821:3213":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:45210:5553":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7539:4436":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9679:32885":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:15222:4084":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11788:3433":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:9398:5905":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:725:8123":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:41250:5325":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:7448:1950":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10399:2647":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:7467:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8103:5801":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11575:5787":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:10661:3333":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:4986:3215":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:22311:5368":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:12259:717":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:2569:2593":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:6586:34269":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7456:1950":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:0:2442":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"14:187:20044":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:9674:27626":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"11:2498:20026":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:12362:5354":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2478:4403":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:9327:5764":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"9:502:5066":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2303:20075":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:5489:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:15390:4129":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:3406:13454":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10954:21044":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:1723:6739":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:39971:5431":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:10686:3449":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:7330:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4940:4473":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5960:4515":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:41394:8050":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:735:25219":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9158:8280":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:4833:757":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:43726:13483":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8579:5865":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:7306:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:856:4990":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:16069:4324":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:11075:3355":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:15126:4057":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6047:4524":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6532:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6606:4629":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:14372:3832":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"10:44:5013":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6620:4631":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11734:5724":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6991:34632":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:1516:4985":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:37541:13681":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13399:3637":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7910:20975":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:10988:5341":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:5014:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8098:3264":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:6815:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14271:3818":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:217:5080":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6417:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13553:3672":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:9362:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:25464:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3366:5719":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:4467:7609":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:7398:34067":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:21447:8123":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:3329:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:42549:5483":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:1544:4983":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:15769:4250":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5436:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:15944:3603":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:15078:4051":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10867:7613":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:2592:4408":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:11466:5063":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:10456:31688":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"18:491:3125":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:33078:13676":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5630:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:11142:3335":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:5211:5122":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:22471:5376":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:46090:5643":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14284:3820":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:11102:2666":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:14212:3812":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12225:3495":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:8012:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:5070:8240":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:256:3183":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14386:3834":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:4614:4463":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:45164:5550":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6775:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"9:0:2440":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11242:3368":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:1939:2599":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:10640:5714":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:6746:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:40041:5438":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:43221:2667":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:41336:4999":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:7129:30789":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:4738:7433":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:11511:30782":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:21278:8123":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:12215:7787":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6441:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:507:3126":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9354:5780":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:6409:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:473:6533":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:8384:2629":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:43139:2647":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40525:5315":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:21967:8399":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:4531:4460":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2644:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11062:30797":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:9344:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:15521:4188":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:46340:5662":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:45373:5570":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:7690:2952":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:7984:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2674:30791":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:1862:5701":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:5400:3319":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:10033:2618":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:1503:6608":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2435:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:21770:31740":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:45470:5575":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:40032:5295":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:16121:4336":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:13581:3682":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:21882:8315":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:9114:5750":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:45096:5542":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:5415:4481":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:42242:2606":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:1692:6727":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6648:4633":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:43321:2660":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:22613:8178":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:31750:5398":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:1603:5002":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:12132:2645":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11606:7622":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:14079:3772":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:39856:8091":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:10137:21010":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6782:20969":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:7446:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:3304:5006":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:46000:5641":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:4907:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8267:8151":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7570:4437":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:12253:1577":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:15720:4235":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:517:6559":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6657:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:13224:31814":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:787:4986":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13674:3688":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10901:5803":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:9279:28302":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13922:3751":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:12261:843":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:11688:3418":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:10279:2622":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12647:3536":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:7485:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12289:3500":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12792:3284":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:3270:5005":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:8431:32889":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:6915:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:45586:5581":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:46276:5653":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:7804:5939":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:6082:5748":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:41064:8162":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5581:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:22185:8123":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:1153:34159":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11419:3335":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:4734:7429":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:2631:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:22504:5378":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:1734:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7355:4758":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12056:3481":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:5995:4518":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:557:5691":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:279:34269":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6504:4617":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5306:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:8202:4443":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14723:3878":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:1680:6723":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:928:8053":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5700:4426":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2684:4412":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11256:3370":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:15206:4080":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:14847:3981":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:13363:3630":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:6900:7367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:7907:8123":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5588:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"10:36:6523":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:10872:7615":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:43877:7601":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8492:8161":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6460:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1885:5702":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:7706:2953":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:42502:5474":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3249:34083":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4965:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:6098:20964":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:4747:2980":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6756:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:2768:4416":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5936:5758":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6636:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11865:3442":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:39953:5429":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:621:2601":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11702:3419":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13292:3618":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7793:3192":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:10027:2610":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11647:3415":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5046:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:45231:5554":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:3025:2918":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:39884:5423":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:880:4986":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:2203:3200":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:10488:31305":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:7561:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:1840:13707":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:33388:13678":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:15822:4259":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8413:5722":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:2612:4409":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:4268:7609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:46236:5649":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3829:5723":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:8029:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:7429:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:9781:21027":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:42519:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:40053:5301":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:40469:5310":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:7573:5133":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5891:5757":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10887:34648":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13211:3603":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1596:5004":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4992:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11063:3353":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:659:3151":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:44173:5011":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:15214:4082":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:5008:923":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9807:21017":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1686:6726":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:42734:5484":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:5910:5294":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8173:5806":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13325:3624":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:532:6568":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1354:4998":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13308:3622":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15092:4054":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:46302:5655":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:43760:2669":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:41353:5463":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44146:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:45502:5577":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:5502:5744":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4228:29748":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:8247:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2637:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:41419:137":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"9:238:5478":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1496:6605":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:5769:4493":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5686:4423":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:4882:4471":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"0:44:1955":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"17:11467:3390":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10185:3176":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:8259:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13766:3724":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:6447:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:14475:3854":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:651:3126":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:14066:3771":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5134:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8791:4982":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8546:5861":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1054:4993":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:8197:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11730:3423":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:7644:28246":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12150:3486":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:2112:5096":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:2087:5093":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:22520:31338":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14489:3855":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12300:21157":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:6614:7581":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:15249:4088":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:46291:5654":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:1169:33930":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:38942:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14260:3817":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12557:3355":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:11130:5343":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4736:7431":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:10911:2641":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10284:3179":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:33734:4740":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"0:113:1891":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"2:4031:7609":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:1063:4994":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:15624:4208":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:39904:5424":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:6360:5748":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:13412:3639":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11405:3385":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5528:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22:772":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12107:3335":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:15324:4110":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:14587:3869":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"14:0:2444":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:4913:4472":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5376:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:41816:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:41999:2610":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12724:21035":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5352:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:14560:3866":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4959:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:635:3150":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:5927:4508":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:11155:5885":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:42494:2623":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:15368:4124":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:1534:5000":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:7549:4812":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12342:3507":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"7:0:1784":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7686:4819":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11694:5723":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:10029:2609":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11051:3350":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15582:4195":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:3737:1950":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13024:21038":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12621:3535":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:10612:3332":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5336:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:22232:8394":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:3278:5003":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"9:392:19952":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:7966:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8540:8208":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:39698:2991":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:43054:5495":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:21458:5367":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40517:5313":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:43436:2640":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8445:5428":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:5122:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:22101:13697":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:39813:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:867:3183":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:2297:13698":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:2966:13450":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:12808:3549":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5367:20961":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:40062:5302":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:7412:1950":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:4155:13447":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:7891:13662":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:12254:1609":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:41453:4982":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12659:3537":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:3486:7609":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:5996:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:7339:2950":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:8216:4887":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:7421:31605":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:8188:4885":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:32422:4731":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13606:3686":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:765:25220":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:45696:5601":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:9349:5779":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:2379:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:15383:4128":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11534:5935":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:3026:33933":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:10355:8265":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:11528:5782":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14189:3803":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10769:34643":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:5522:5745":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:8115:5803":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1699:6730":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9058:5885":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:7412:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:3251:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5244:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43554:5503":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:8262:5810":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"14:165:20037":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:33019:13674":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:11662:5346":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:13855:3738":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:12034:25776":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:10950:5340":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5283:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:7993:8048":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5536:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7602:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:15635:4213":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:918:4984":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11497:3392":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:2458:4402":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:41384:5465":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:362:5688":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:4141:8187":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5146:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13946:3752":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14503:3858":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46317:5656":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7528:4809":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12251:3497":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6874:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:430:34615":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:2548:6519":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:30186:2944":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4587:4462":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2438:4401":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:39020:2587":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1555:4984":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12949:3208":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:9084:5887":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13753:3722":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"9:53:7765":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:2295:13697":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"7:78:19944":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:41405:5329":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:43881:7602":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12516:3530":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:2628:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:38809:13495":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:4330:5727":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:924:8055":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:45787:5604":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:13202:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:42953:5486":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:14311:3822":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:6577:5445":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:7631:5139":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:5708:2958":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:37596:13682":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:0:2447":{"crate_id":17,"path":["object"],"kind":"module"},"11:2326:4993":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:3354:31312":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1478:4999":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:8019:2678":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:15151:4066":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:2591:5708":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:16259:3634":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15197:4079":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14912:4021":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12399:3514":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:42259:31328":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:1771:1261":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"13:0:2437":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1565:6643":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:6667:1950":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6231:4562":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11537:3395":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:8282:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:21231:31739":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:5675:7339":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:4597:455":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:2925:2835":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:31759:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:21248:31742":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6802:4670":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6706:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:8387:8059":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:41416:193":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"14:40:3604":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6433:4609":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:482:19950":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:43083:5498":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:40110:3148":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:16151:4344":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:9225:28300":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:11773:3429":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:542:4375":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:4308:4982":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:3237:4982":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:9047:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2888:2831":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:45438:5573":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:573:3126":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13738:3717":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:7378:5127":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:15616:4207":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7250:6220":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4802:8209":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:12273:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43417:2658":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:14968:4027":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:12220:8049":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8808:5883":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:40483:5445":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2485:1884":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"2:22099:31567":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:10997:3345":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5415:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:7621:5138":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11524:3394":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:45248:5555":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11443:3389":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:837:4987":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7590:4438":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11045:30802":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:8300:7555":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:9131:5890":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:2274:5920":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:42981:5490":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12371:3556":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:9886:21029":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:15931:3589":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:6721:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:5671:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5565:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"0:61:1980":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"11:687:4999":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:4502:4459":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"0:0:2328":{"crate_id":0,"path":["strsim"],"kind":"module"},"2:21333:8313":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:2205:5097":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2883:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"14:202:13484":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:643:3126":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12683:3539":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:31760:2675":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41697:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:586:6596":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:7979:8047":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:7357:13665":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14025:3764":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41344:1950":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:7648:4818":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5557:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:7558:31502":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1887:5703":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8781:5734":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6456:20967":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:1628:6691":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:623:34657":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:10268:5701":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:31743:2848":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:6948:4432":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:39000:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:513:3191":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8562:5863":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6574:4442":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:21880:8123":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:40009:5434":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:42962:5487":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:15333:4113":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:43123:1889":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:22073:8123":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:41395:8248":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5382:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:21758:5366":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11567:3399":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:1575:5090":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9071:5886":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:2403:4999":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"14:160:4972":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:39781:2990":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:7951:3449":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:860:4384":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:10092:21034":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:15400:4132":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14868:3991":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:533:8030":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7111:4718":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"15:306:20057":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:33561:13679":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:4148:4999":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:21202:31734":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:11205:5781":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:2374:4398":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:44083:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:10473:30791":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:3584:30550":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:29788:8164":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:43203:2668":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44062:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:10915:34646":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:299:6513":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14235:3813":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:437:3190":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:14986:4032":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:6471:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:1923:5006":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:13276:5360":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1621:6687":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:12116:5347":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:8455:5444":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:10848:5919":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:14855:3984":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:5553:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11595:3409":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6543:4620":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:13538:3666":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:12260:861":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:1826:5700":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10439:3320":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5643:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11128:3309":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:14051:3768":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:2748:4415":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:15010:4034":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"13:109:34621":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2640:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:2660:5710":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:4876:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10759:3335":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:31817:2837":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:80:25208":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3283:34084":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:45675:5600":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:598:34655":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:742:4984":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:12658:13476":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:673:4982":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:706:2633":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:3279:5714":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:718:3166":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:1207:3195":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4062:4455":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:6746:5773":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:7844:30795":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5020:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4811:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"2:3123:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9737:21011":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:12443:3520":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6412:20966":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:3536:5721":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:7293:25778":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:4856:4470":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:14977:4031":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:4087:8183":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:12267:1722":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:5457:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:844:8053":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:7359:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4971:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10218:3177":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5236:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:39050:5405":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:2279:8105":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:6907:2958":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5598:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:40283:5309":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43873:7600":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:4132:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:7643:3171":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:670:3157":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12900:3555":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:545:6574":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46370:5664":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:39800:2986":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:21229:31736":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14876:3992":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:9173:8282":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:7584:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:10666:8123":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:5075:4477":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11825:3438":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11189:3363":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15376:4127":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:21246:31730":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7813:4824":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:8226:2030":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:2307:7573":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:42749:7597":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:46245:5650":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"11:2231:3402":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:12247:1105":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:22589:5390":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:893:2954":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:39931:5427":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:41232:5322":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:9977:2602":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:5307:4479":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:22555:31340":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"15:327:7762":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3767:8163":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15760:4246":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5864:5756":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:8257:5809":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:5290:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:31687:2597":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:42271:4851":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:11270:7617":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:38230:13684":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11841:3440":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11557:3397":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"0:27:1920":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"16:2878:4421":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8137:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:7537:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5466:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:1581:2954":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:10390:13768":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:14933:4026":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:2606:8123":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6066:4531":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4410:5728":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13473:3650":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:3842:4452":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11853:3441":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5181:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:7356:5126":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:4928:31707":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:43407:2657":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:45713:5602":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13116:3576":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:4029:8180":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11812:3436":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11674:3417":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:43919:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13723:3713":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10350:3181":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3740:34269":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11115:3359":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"9:357:19966":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:46219:5648":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:40085:5440":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:45825:5606":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4932:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:800:2954":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:5005:8234":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:16165:4347":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"0:105:2089":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"6:6738:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:37651:13683":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6629:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:41580:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:7348:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12030:3478":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12264:3498":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4839:8195":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:44162:5533":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:8136:4878":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9501:5702":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:8125:5804":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:7924:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:3119:2677":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:2944:4735":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"9:178:7776":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10170:3319":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13899:3746":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:2338:4390":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8797:5882":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:39829:31502":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:531:3130":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12530:3532":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:1585:2952":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:3575:2602":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:3778:4450":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:2441:8112":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:43869:7599":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12175:3488":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:40259:5444":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7559:4813":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5277:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15608:4204":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:43073:5497":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6962:4433":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:42902:5485":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:503:8026":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:351:34609":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:12100:13757":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:12271:1794":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9218:5895":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:41541:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:1525:4986":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:12610:2630":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:6305:5761":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:2788:4417":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8741:8258":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:42991:5491":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:30218:2945":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:43063:5496":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10967:5747":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:2636:4410":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:10020:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11313:3376":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8159:2621":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:12544:2655":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:39748:2652":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39732:2654":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:39874:5417":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:4459:7579":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:6692:8276":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6160:20074":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4065:8181":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:2352:4994":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:4035:8179":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11214:3365":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5006:4475":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:4523:2849":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13235:3604":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:8351:7567":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:43889:7604":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:22199:8395":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:3014:20104":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14545:3862":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:2355:4392":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:3806:5095":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"9:330:6524":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13814:3734":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:553:6579":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:12286:5349":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:872:3184":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:6273:30804":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15023:4039":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:16032:3607":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:1025:4993":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6895:4685":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:45646:5599":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11153:3336":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5200:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43427:2642":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:39661:5408":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:7888:4836":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:3647:4982":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"15:0:2445":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:637:5692":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6689:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:6788:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:13418:5364":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"11:2151:4994":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2902:20102":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:4830:4469":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:13064:3569":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:39991:5288":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12695:3540":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:11661:3416":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11811:5936":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:5538:5746":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:7928:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:41992:2609":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6562:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:9092:4982":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:43470:2654":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13485:3653":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:3899:4453":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:559:6582":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10930:5722":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:5781:4427":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:8259:4779":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:6609:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:4718:4465":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:21331:8123":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:10920:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:10037:2615":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:8014:5800":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:39057:5406":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:11061:5342":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:3036:33928":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12189:3492":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43112:2651":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:4273:5280":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:22417:5370":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6278:4569":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6976:4693":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7061:4710":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:2101:5095":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:15039:4042":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:38889:2947":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:14788:3929":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"9:424:19953":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:5449:2637":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:41894:5334":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:14012:3763":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:1910:5004":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12362:3512":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7823:20974":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11877:3443":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:4482:5729":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:21280:8317":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:8726:5877":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7397:34642":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6532:4619":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4909:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13972:3451":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:3243:30388":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7755:4431":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:46432:5681":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:39818:5415":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5445:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:8638:8244":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:14436:3851":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2418:4400":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:30224:3009":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:31761:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6821:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11179:30605":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:15957:4280":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11634:3414":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:7473:13657":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:16138:4338":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:2712:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:10284:2624":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4841:8197":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:22227:8396":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:538:6571":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:10948:30607":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:8401:5848":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:8294:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7366:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12572:3335":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"18:726:3169":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9858:21028":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:3369:13451":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2985:5713":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:4352:4456":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6849:4683":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10044:21033":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:45335:5568":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:45455:5574":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:570:6587":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13424:3640":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11764:3428":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"11:2536:6518":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:8271:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:12248:455":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:8075:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:43452:2652":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:16249:4364":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:6342:34639":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7799:4429":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7863:30785":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:10429:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:4920:8194":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13344:3629":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6729:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:3832:5724":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:1490:6602":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:21214:31734":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:0:1601":{"crate_id":1,"path":["std"],"kind":"module"},"1:945:4991":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:3660:4999":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:15701:4230":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:0:2438":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1707:6734":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:38980:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:12249:1755":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:3324:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4885:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:41048:5321":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:39940:5428":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:1602:5005":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:12252:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:396:34611":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:43675:5356":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11671:27627":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13526:3663":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15168:4071":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:45079:5539":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:3871:2952":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:43954:13801":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:14516:3859":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:41619:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:10843:4999":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46177:5646":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6442:4610":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:3810:4451":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:951:4992":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:43712:5514":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12768:21014":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:45388:5571":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:868:8054":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:7908:5690":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:12590:2631":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:44065:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:41032:5319":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:3281:5715":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3246:30392":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:14414:3840":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:10982:28308":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:6760:5777":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:43893:7605":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5064:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1062:34269":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:588:8041":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}