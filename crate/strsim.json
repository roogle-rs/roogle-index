{"root":"0:0:2427","crate_version":"0.11.0","includes_private":false,"index":{"0:44:2054":{"id":"0:44:2054","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2879-0:112:1989":{"id":"b:2:2879-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26:2015":{"id":"0:26:2015","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:2030":{"id":"2:13137:2030","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13136:26690","str::split_at_mut_checked":"2:13139:26694"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2881:817":{"id":"2:2881:817","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31974:236-0:112:1989":{"id":"a:2:31974:236-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13148:31531":{"id":"2:13148:31531","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43712:2743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:26710":{"id":"2:13222:26710","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:33714":{"id":"2:13205:33714","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:2968":{"id":"2:13162:2968","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13169:26697":{"id":"2:13169:26697","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12620:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:685":{"id":"0:119:685","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:27912":{"id":"2:13243:27912","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:38501"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31902:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13115:2089":{"id":"2:13115:2089","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5608:34421":{"id":"5:5608:34421","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13119:33704":{"id":"2:13119:33704","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13117:33703"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:26705":{"id":"2:13187:26705","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13141:2016":{"id":"2:13141:2016","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43390:1988","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:33708":{"id":"2:13147:33708","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43684:2762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2188":{"id":"0:105:2188","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:33719":{"id":"2:13213:33719","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12830:2734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1990":{"id":"0:113:1990","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:116:787":{"id":"0:116:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:26708":{"id":"2:13152:26708","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:33725":{"id":"2:13244:33725","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4893:33725"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43719:2756","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13117:33703":{"id":"2:13117:33703","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2878:2962":{"id":"2:2878:2962","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2852:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:27958":{"id":"5:5622:27958","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13239:27907"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1995":{"id":"0:20:1995","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:13216:33720":{"id":"2:13216:33720","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:33723":{"id":"2:13231:33723","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:26699":{"id":"2:13172:26699","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12804:2742","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split":"2:13166:26695"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43438:2767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13239:27907":{"id":"2:13239:27907","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:5237":{"id":"2:13143:5237","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43406:2751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2110":{"id":"0:65:2110","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2094":{"id":"0:63:2094","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2209":{"id":"0:108:2209","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:112:1989":{"id":"b:2:2890-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5623:27959":{"id":"5:5623:27959","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13240:27908"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13135:33707":{"id":"2:13135:33707","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12331:1699","crate::ops::IndexMut":"2:3374:3052","str::slice_unchecked":"2:13134:33706"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13238:27906":{"id":"2:13238:27906","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2427":{"id":"0:0:2427","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:1989","0:20:1995","0:21:1998","0:26:2015","0:27:2019","0:44:2054","0:45:2056","0:53:2065","0:54:2070","0:61:2079","0:62:2088","0:63:2094","0:65:2110","0:105:2188","0:106:2197","0:108:2209"],"is_stripped":false}}},"2:2889:1784":{"id":"2:2889:1784","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2056":{"id":"0:45:2056","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:2143":{"id":"2:13128:2143","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:112:1989":{"id":"b:2:2885-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"2:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5854-0:112:1989":{"id":"b:5:5854-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5856:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13123:33705":{"id":"2:13123:33705","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13166:26695":{"id":"2:13166:26695","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12804:2742","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split_whitespace":"2:13144:31529","str::rsplit":"2:13172:26699"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43420:2768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:33721":{"id":"2:13225:33721","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:33713":{"id":"2:13202:33713","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12804:2742","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::match_indices":"2:13199:33712"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43588:2764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:27908":{"id":"2:13240:27908","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:33724":{"id":"2:13234:33724","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12765:135","`FromStr`":"2:12764:2759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12764:2759","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12764:2759","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13122:26615":{"id":"2:13122:26615","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12352:2749"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13138:26693":{"id":"2:13138:26693","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13139:26694"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:8174":{"id":"2:13246:8174","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4894:8174"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43728:2757","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13184:26703":{"id":"2:13184:26703","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12325:458","str::splitn":"2:13181:26701","self::pattern":"2:12804:2742"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43542:2769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:33706":{"id":"2:13134:33706","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12331:1699","str::slice_mut_unchecked":"2:13135:33707","crate::ops::Index":"2:39104:3051"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:112:1989":{"id":"b:2:2602-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3714-0:112:1989":{"id":"b:2:3714-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13228:33722":{"id":"2:13228:33722","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2888:136":{"id":"2:2888:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5620:34424":{"id":"5:5620:34424","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2739","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2739","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:34420","5:5605:2157","5:5608:34421","5:5611:34422","5:5619:34423","5:5620:34424","5:5621:8283","5:5622:27958","5:5623:27959"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13146:28645":{"id":"2:13146:28645","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43674:2761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2604:2640":{"id":"2:2604:2640","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32031:2780-0:112:1989":{"id":"a:2:32031:2780-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:2780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2607:25706":{"id":"2:2607:25706","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13149:26707":{"id":"2:13149:26707","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:34420":{"id":"5:5604:34420","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2739","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2739","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13113":{"id":"2:13113","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13114:981","2:13115:2089","2:13116:33702","2:13117:33703","2:13119:33704","2:13122:26615","2:13123:33705","2:13124:334","2:13125:26667","2:13126:2120","2:13128:2143","2:13130:26665","2:13132:26666","2:13134:33706","2:13135:33707","2:13136:26690","2:13137:2030","2:13138:26693","2:13139:26694","2:13141:2016","2:13142:5621","2:13143:5237","2:13144:31529","2:13145:31530","2:13146:28645","2:13147:33708","2:13148:31531","2:13149:26707","2:13152:26708","2:13155:26709","2:13158:3002","2:13162:2968","2:13166:26695","2:13169:26697","2:13172:26699","2:13175:33709","2:13178:33710","2:13181:26701","2:13184:26703","2:13187:26705","2:13190:26706","2:13193:2031","2:13196:33711","2:13199:33712","2:13202:33713","2:13205:33714","2:13207:33715","2:13209:33716","2:13211:33717","2:13212:33718","2:13213:33719","2:13216:33720","2:13219:25908","2:13222:26710","2:13225:33721","2:13228:33722","2:13231:33723","2:13234:33724","2:13236:27903","2:13237:27904","2:13238:27906","2:13239:27907","2:13240:27908","2:13241:27910","2:13242:27911","2:13243:27912","2:13244:33725","2:13246:8174","2:13247:33726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5605:2157":{"id":"5:5605:2157","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13175:33709":{"id":"2:13175:33709","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12804:2742","str::split":"2:13166:26695","prim@char":"1:12325:458","`DoubleEndedIterator`":"2:8196:129","str::rsplit_terminator":"2:13178:33710"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43470:2772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:26701":{"id":"2:13181:26701","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742","str::rsplitn":"2:13184:26703"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43524:2770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:27904":{"id":"2:13237:27904","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39459:2944","Self::is_ascii":"2:13236:27903"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39459:2944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:2031":{"id":"2:13193:2031","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12804:2742","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatches":"2:13196:33711"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43624:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:26666":{"id":"2:13132:26666","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13236:27903":{"id":"2:13236:27903","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:33726":{"id":"2:13247:33726","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4891:33726"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43737:2758","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:8283":{"id":"5:5621:8283","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2875-0:112:1989":{"id":"b:2:2875-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2962"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41633:8375-0:112:1989":{"id":"a:2:41633:8375-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:8375","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:27:2019":{"id":"0:27:2019","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13145:31530":{"id":"2:13145:31530","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13144:31529"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43703:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:34422":{"id":"5:5611:34422","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13139:26694":{"id":"2:13139:26694","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13138:26693"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:33718":{"id":"2:13212:33718","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:2937-0:112:1989":{"id":"a:2:3133:2937-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13136:26690":{"id":"2:13136:26690","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13138:26693","str::split_at_mut":"2:13137:2030"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2065":{"id":"0:53:2065","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2070":{"id":"0:54:2070","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13241:27910":{"id":"2:13241:27910","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:38501"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1998":{"id":"0:21:1998","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3716:1797":{"id":"2:3716:1797","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39273:5520","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:3002":{"id":"2:13158:3002","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5856:1757":{"id":"5:5856:1757","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:31529":{"id":"2:13144:31529","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13145:31530"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43694:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:26667":{"id":"2:13125:26667","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:26709":{"id":"2:13155:26709","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:33712":{"id":"2:13199:33712","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12804:2742","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatch_indices":"2:13202:33713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43570:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:334":{"id":"2:13124:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13125:26667","`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:25908":{"id":"2:13219:25908","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:2742"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31976:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13178:33710":{"id":"2:13178:33710","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12804:2742","str::split":"2:13166:26695","prim@char":"1:12325:458","str::split_terminator":"2:13175:33709"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43488:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:112:1989":{"id":"a:2:3098:246-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:61:2079":{"id":"0:61:2079","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2088":{"id":"0:62:2088","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13126:2120":{"id":"2:13126:2120","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:33716":{"id":"2:13209:33716","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13142:5621":{"id":"2:13142:5621","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43396:2752","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:33711":{"id":"2:13196:33711","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12804:2742","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::matches":"2:13193:2031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43642:2766","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2197":{"id":"0:106:2197","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:33715":{"id":"2:13207:33715","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:34423":{"id":"5:5619:34423","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:8182-0:112:1989":{"id":"a:2:41632:8182-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:8182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:18:787":{"id":"0:18:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42571:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:112:1989":{"id":"b:2:2605-0:112:1989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:25706"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13190:26706":{"id":"2:13190:26706","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:33717":{"id":"2:13211:33717","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13114:981":{"id":"2:13114:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:27911":{"id":"2:13242:27911","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:38501"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13116:33702":{"id":"2:13116:33702","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13130:26665":{"id":"2:13130:26665","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1989":{"id":"0:112:1989","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:1990"],"impls":["a:2:41633:8375-0:112:1989","a:2:31974:236-0:112:1989","a:2:41632:8182-0:112:1989","a:2:32031:2780-0:112:1989","a:2:3133:2937-0:112:1989","a:2:3098:246-0:112:1989","b:2:2885-0:112:1989","b:2:2879-0:112:1989","b:2:2890-0:112:1989","b:2:2605-0:112:1989","b:2:2875-0:112:1989","b:2:2602-0:112:1989","b:2:3714-0:112:1989","b:5:5854-0:112:1989","0:117","0:19","0:115","0:118","0:17"]}}},"2:2894:1782":{"id":"2:2894:1782","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:7452:5231":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:7546:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:3250:31295":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:2443:3058":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:8216:4989":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4932:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:2859:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40142:5528":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:14545:3964":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:11887:6047":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"18:726:3271":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11392:3486":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13553:3774":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46098:5717":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"14:220:5082":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45948:5711":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:4427:5839":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:40527:5555":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:7461:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40230:5541":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:13656:5467":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:13015:3620":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:2498:20154":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:11702:3521":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:4487:5382":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10978:26459":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14994:4135":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:12326:1849":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:256:3285":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8582:7739":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:4683:2952":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:39955:2757":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:635:3252":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11042:3451":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:42807:5594":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13594:3785":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:7472:2049":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:1588:3056":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:15569:4291":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5617:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14212:3914":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:102:6644":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:12506:5451":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12929:3658":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:16212:4460":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:15944:3705":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:4309:5084":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44150:7734":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10710:3437":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:8328:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:2612:4511":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:11914:5901":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:5895:5863":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:43703:2744":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10256:2720":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:8249:2782":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:45352:5650":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:31974:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:4243:30692":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:7306:7517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:44158:7736":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:43917:5624":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:7714:3056":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:1577:5192":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:15635:4315":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:39970:3091":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:40058:3090":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6519:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12362:3614":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:830:5187":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8150:5912":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6738:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"14:214:5080":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:872:3286":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:2989:5824":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:15:1993":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:8773:5988":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12089:3585":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4959:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:41574:5101":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4864:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:515:3225":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"0:54:2070":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"1:11198:5997":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:6120:5859":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:2528:4507":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:7955:5801":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:43728:2757":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:3669:3325":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:43981:5625":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2483:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:491:6671":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12300:21285":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:7650:31729":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11557:3499":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15342:4216":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42113:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:43226:5598":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:16093:4431":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12225:3597":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:31902:2702":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13877:3847":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6802:4772":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7633:34804":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8314:8282":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"11:0:2546":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:896:3058":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:1676:34784":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:2808:4520":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11595:3511":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11012:26411":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:12340:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:5927:4610":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:15126:4159":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6729:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:10612:3435":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11810:5835":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:4323:5379":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:479:6668":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:40124:8222":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3244:29189":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:12348:1888":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11324:3480":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"12:0:2547":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:3091:2934":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:39060:13580":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:43624:2765":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:2572:4509":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7686:4921":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"14:202:13613":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:2548:6651":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11676:7753":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:10461:152":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:8184:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4876:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3133:2937":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:22201:8526":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11189:3465":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:2199:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:22461:8523":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:11898:3547":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3022:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:4802:4570":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4952:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:7422:34742":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:9858:21156":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:8167:2783":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:22754:31567":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5457:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:12308:26412":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:3247:31297":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:7655:5241":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:11850:5447":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:484:26594":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12213:3596":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:21954:8446":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:3149:8436":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:42257:2715":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:6689:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:6574:4544":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:41566:5084":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:6446:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:42074:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:3792:5195":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:8304:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:6798:5888":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:5788:5860":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:11407:5165":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:5039:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:11089:2768":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:33949:4842":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:10498:2727":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:15151:4168":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6629:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:437:3292":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:5174:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12584:3439":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:5853:7741":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:40259:5390":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:12297:8181":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:1527:5088":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"15:0:2549":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:43266:5603":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:8259:7678":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:11351:5445":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:41518:5427":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:31975:2779":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:465:6660":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:9897:32604":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:564:6716":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:671:5184":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:839:5084":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:613:34832":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:37866:13804":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:16050:3719":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:5227:5850":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44212:5635":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:4149:5101":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:7412:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5515:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"11:1160:5100":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:14051:3870":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13146:3682":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:22466:8521":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:10989:5911":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12264:3600":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4044:8311":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8145:3366":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:9781:21155":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6120:21093":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6079:4479":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:12825:2736":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:2369:5111":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:2694:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11537:3497":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:2748:4517":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:670:3259":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:1327:5096":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8200:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11051:3453":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12557:3457":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:7873:3273":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:39963:2756":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:6554:3058":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13187:3691":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5219:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:5158:31764":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:867:3285":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:4468:7741":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14325:3927":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4094:8313":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12318:3310":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:43869:5623":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:3024:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:2394:4501":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:3174:13576":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:870:8186":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:10350:3283":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4992:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9293:6010":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:15799:4357":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4612:8341":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:15822:4361":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:22321:8531":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1547:6765":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6678:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:21666:8254":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:46031:5714":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10254:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22716:31566":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:44458:5645":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:5560:5856":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:41736:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:6295:5466":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:1191:34749":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:1903:5105":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:485:6670":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:43396:2752":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6263:4669":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2323:20229":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:10714:3551":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:1584:3058":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:30445:3117":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12353:3613":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:14177:3903":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"9:482:20078":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5112:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11115:3461":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:481:3226":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:3552:13626":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:43684:2762":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:41838:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10044:21161":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11214:3467":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8515:2768":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10315:6018":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:11682:7754":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"7:78:20072":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:523:6694":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:844:8185":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:2037:3298":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:6433:4711":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7813:4926":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"14:7:5074":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12993:21165":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11831:5836":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11092:26603":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:1565:6775":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13785:3831":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:12343:1809":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6026:4473":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:32823:13794":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:2231:3504":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:6634:4532":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:710:5085":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13797:3833":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:573:3228":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:32451:4836":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7098:4817":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11747:25958":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:13442:31405":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11743:3526":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"10:44:5115":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:2822:8254":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:2234:3305":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5624:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:11235:5892":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:12332:1787":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:6655:5879":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:280:33575":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:41663:5431":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:15760:4348":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12485:21287":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:2569:2698":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6588:4723":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:9391:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:10472:26627":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:7355:4860":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5995:4620":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:43802:13611":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6480:4526":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7590:4540":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12494:3627":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:41360:7720":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8607:5974":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:43470:2772":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6353:4484":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:7295:6345":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12707:3643":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:80:25336":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:4835:787":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:1926:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12201:3595":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:11323:2770":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15748:4346":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:5949:7741":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:4502:4561":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12371:3658":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5536:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:0:2552":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:11171:5442":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2450:8244":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:8175:4985":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"0:112:1989":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"6:8351:7699":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6447:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:3925:4556":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11300:7746":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:22816:7717":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5014:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12671:3640":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:14463:3955":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:15222:4186":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:15426:4240":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:7527:2698":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22283:8528":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:11341:3483":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:1888:5813":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:7314:7522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:11365:5446":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:9161:5861":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14091:3875":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:7851:6050":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8828:5845":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11621:3514":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:4424:4559":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:46060:5715":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13606:3788":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:0:1691":{"crate_id":1,"path":["std"],"kind":"module"},"17:15356:4223":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:6402:8534":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9715:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:13494:5462":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:12339:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6427:4710":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:2998:4546":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:1628:6823":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:948:5093":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5344:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:43011:5439":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:1075:5100":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:44166:7738":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:44006:5626":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8061:5911":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3618:8271":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15190:4179":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7741:4543":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:2040:7708":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:14372:3934":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5528:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:44016:5630":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2927:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13738:3819":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:2423:2049":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:21678:5469":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:46363:5754":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:9755:21137":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:5897:4604":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13412:3741":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6609:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7444:30694":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5472:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:1155:34751":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:2788:4519":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:6784:5884":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"11:2304:4823":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"11:2326:5095":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:2636:4512":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:3472:5557":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:5716:8390":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:16176:4454":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11128:3412":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9396:5890":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"14:40:3706":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"15:306:20185":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7168:6014":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12900:3657":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:4604:5383":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5466:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5277:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:12337:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"7:0:1878":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5006:4577":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9527:5813":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:15102:4157":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"11:1887:2049":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:44047:2774":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:40102:5527":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:2548:4508":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:14723:3980":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:517:6691":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:40744:5413":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:1593:5105":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"0:27:2019":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"17:11443:3491":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10931:5914":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:8613:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5181:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8228:5919":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:15249:4190":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:2309:7705":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:10213:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12189:3594":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:1726:33575":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:6136:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:359:5797":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:10534:34816":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4979:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:39898:31552":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10661:3436":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:46471:5758":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12863:3654":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6466:4715":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:3899:4555":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:22388:13817":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:13986:3862":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:5781:4529":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:14147:3884":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:8155:4983":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:45322:5646":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:4718:4567":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:1963:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:44334:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:5238:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:14876:4094":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4757:7561":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:9265:6006":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:7933:5870":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13235:3706":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6976:4795":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"0:26:2015":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"1:6853:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:8118:4978":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1356:5100":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5225:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:1485:6732":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:33430:13798":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:7363:3054":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13437:3743":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:43852:5622":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:2554:34783":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14271:3920":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:23478:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:14284:3922":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:40378:3250":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:10381:8392":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8304:5920":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44446:5113":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"18:589:3238":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:12620:2745":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:7348:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7052:4809":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:9369:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:4104:33575":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:45579:5670":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12076:3584":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:5390:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4346:5838":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1490:6734":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6342:34810":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12175:3590":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:12111:26581":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"11:883:5094":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:11040:5084":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:40309:5549":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6698:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:6606:4731":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:14260:3919":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5630:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:5526:5851":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:2460:8249":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:5329:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6940:4793":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:41677:135":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"16:7428:21100":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:9688:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:2175:21219":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5400:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:4502:33584":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:3027:33701":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:754:3277":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:43217:5597":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5756:4590":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:22307:8254":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:46666:5776":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1535:6756":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:6219:26590":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:45775:5688":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:7085:4813":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:9313:6014":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:1580:6787":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:4771:4569":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:11604:5893":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:7372:2049":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:852:5101":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:10258:2721":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43420:2768":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:43366:2760":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:21467:32758":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:14356:3933":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11510:3495":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:41711:5084":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4294:8339":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:10463:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:2592:4510":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:1653:6842":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4712:8359":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6524:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12251:3599":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7528:4911":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5290:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:2089:5195":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11142:3438":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:11209:5443":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:6398:5859":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:10455:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:6927:4791":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:1465:5084":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:4370:13574":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:43944:5458":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40775:5559":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:3597:3309":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:45454:5662":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1605:5107":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:2124:4823":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:44146:7733":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:45437:5661":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8528:5965":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4985:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:6060:14118":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12127:3587":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9155:2049":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:46509:5760":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13211:3705":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7727:4542":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11075:3457":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11497:3494":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:2702:5820":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:15521:4290":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11075:26592":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12851:3653":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:11029:5998":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2854:4522":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:10239:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:7480:2049":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6650:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6714:7442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:7473:4637":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"11:1566:20159":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:10969:26463":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:41332:8293":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:507:3228":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:40208:5539":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10671:34821":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13946:3854":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:7553:5223":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9205:8407":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:3810:4553":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:8117:13786":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7730:3057":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:3819:3058":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:8522:2761":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:7266:26604":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11730:3525":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:12566:5455":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:21465:32754":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4156:8318":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:41300:5421":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:21421:32752":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:31944:4881":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:42760:5585":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:7689:26438":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11153:3439":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:45369:5653":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9807:21145":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:15206:4182":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:10902:7744":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:10250:2722":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:5802:21090":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:10878:6028":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:43719:2756":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13089:3672":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:40172:5535":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:9394:2735":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14341:3929":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:4273:8337":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:10960:5833":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:16151:4446":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:42789:5589":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:1942:2704":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:22982:5504":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"11:774:5087":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:4784:2954":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:39024:13624":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:538:6703":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5347:4582":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13814:3836":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:4389:13628":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:8121:13785":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:16165:4449":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:39887:3096":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:8029:7674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:2680:26598":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:3952:2049":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:22598:5471":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1311:4823":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:43292:5536":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5320:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:570:6719":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:3847:5835":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8309:5921":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:6838:5405":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:43995:13612":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:23026:5508":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5236:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:7366:7550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:2497:13817":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:7537:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:32032:2941":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4335:5380":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:14847:4083":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:22651:5472":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13308:3724":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15058:4145":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6278:4671":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:365:5799":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44162:7737":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:5831:4599":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7006:4798":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:10195:2707":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:39871:2757":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:15400:4234":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11788:3535":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:3807:5197":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1546:5085":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:5817:4596":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2728:4516":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:2282:5818":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:7910:26585":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"17:13455:3751":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12408:3617":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:45728:5685":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:39121:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:44223:13925":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7648:4920":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5134:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:7516:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12572:3438":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"18:698:3263":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5671:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:43712:2743":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:623:34829":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:39104:3051":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43318:5606":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:5974:5869":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:1582:5103":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:22107:8254":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:21499:8444":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5146:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8750:5589":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12323:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:3159:4837":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:5457:2741":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14788:4031":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:5108:8367":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:7621:5239":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6782:21097":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:15266:4198":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:42264:2722":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:351:34775":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:8472:8253":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:3337:5827":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10759:3438":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:12878:13605":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11906:5901":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:14246:3917":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14012:3865":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:4757:2943":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:942:5092":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:1917:5107":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42500:2711":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:7580:4916":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10954:21172":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:473:6665":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:7769:4924":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10439:3423":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:3329:4549":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:5064:7741":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46575:5766":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:8154:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"9:502:5168":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"9:357:20094":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7618:4917":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:7891:26596":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:40071:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6900:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12647:3638":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:8301:4996":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7497:4901":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:7379:34807":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12695:3642":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:15023:4141":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:5540:5855":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5557:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:13693:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:113:25338":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:883:5088":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:4976:4576":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:41877:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5665:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:7575:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11467:3492":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7695:4922":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"0:113:1990":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"6:5445:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:624:2706":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4891:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46518:5761":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:7338:26128":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6385:4706":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:15646:4316":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:4761:7565":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:13344:3731":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:1496:6737":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7570:4539":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"0:65:2110":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"0:108:2209":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"17:12443:3622":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:13748:3053":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5415:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11026:21174":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:0:2550":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:3551:5832":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12683:3641":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:14402:3940":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:7144:21099":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14868:4093":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5122:7039":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8162:5914":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:2660:4513":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5200:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:12804:2742":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:40277:5545":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12597:3636":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:5102:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:954:5094":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:22245:8527":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:3473:3308":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2846:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:4964:3084":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:15434:4241":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:16259:3736":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:4800:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3287:5825":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6504:4719":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10666:5825":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:6409:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:10194:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"14:187:20172":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:43327:5607":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:22789:31568":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4837:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5307:4581":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:7569:5232":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:659:3253":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4885:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:2352:5096":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:1827:5810":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:22916:5498":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:11583:3507":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:43379:2755":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:38445:13805":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5742:4585":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6749:4759":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1699:6862":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:40009:3092":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:43305:5605":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:21558:8443":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:21411:2686":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11773:3531":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"0:62:2088":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"11:1025:5095":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2115:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5031:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:8282:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:3264:3306":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5502:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:9737:21139":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:10294:5812":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:8509:2751":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6721:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:7436:2049":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12949:3310":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:33234:13795":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10769:34815":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"18:538:3235":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11166:3464":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11102:3459":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:41444:31555":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6317:4693":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3531:13806":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:559:6714":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:2151:5096":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5914:4609":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8460:5833":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:42529:4953":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:8317:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:42490:7721":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:7978:5904":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:12320:13880":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:4468:4560":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:45337:5649":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6542:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:12276:6053":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:13469:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:40179:5536":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:11825:3540":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:8073:4975":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:1891:3058":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"0:105:2188":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"18:598:34830":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22993:5505":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:45792:5689":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4909:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:8136:4980":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:7609:5238":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:7561:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:1599:5106":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13999:3863":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2236:5248":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:299:6645":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:5863:21091":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:4759:7563":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:5217:5224":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10251:3280":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:42571:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:14449:3954":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11313:3478":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:11345:6043":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:44419:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15418:4238":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6813:4773":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6706:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:4916:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11634:3516":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11574:3504":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:800:3058":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:22868:8254":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:7539:4538":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:11282:5444":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:15273:4199":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:3382:5830":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:7701:13780":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:8247:7676":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:4865:8328":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:1518:5087":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:921:5086":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:2207:5199":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:21433:32752":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:2979:2710":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:5367:21089":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12278:3601":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:22433:8522":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"10:36:6655":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:7389:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8155:5913":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3844:5834":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:3339:5828":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:8040:8180":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4870:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1671:6849":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:5781:5859":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:2478:4505":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12043:3581":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:5929:5868":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:40:3055":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3872:3056":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:1559:6773":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13538:3768":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:4811:458":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:43674:2761":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:4940:4575":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:7359:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:33603:13799":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6300:4686":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1593:6794":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10818:3439":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8838:5084":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:1517:6745":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5037:4578":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:45711:5684":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:7452:7577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:39216:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:4747:8315":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:45986:5713":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:43588:2764":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:45646:5681":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:10950:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:521:25349":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:22666:7714":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:4944:8325":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:4743:4568":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10155:3421":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:7586:3103":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:41316:5423":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:15390:4231":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12808:3651":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:42992:5595":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:706:2737":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6047:4626":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:2469:3056":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:8844:5993":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:2536:6650":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6620:4733":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:2303:20203":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:41582:2049":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11688:3520":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:40551:5411":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:1066:20158":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:6681:2049":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:2289:34744":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:12350:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6621:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:3608:8252":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:123:6431":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:689:3262":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6991:34806":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"0:44:2054":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"17:10997:3448":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4164:8320":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12422:3618":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10622:34822":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11524:3496":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:8259:4881":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:43737:2758":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:2757:6296":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:15168:4173":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:735:25347":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:15410:4237":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:12347:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11293:21192":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11063:3456":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40087:13858":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6915:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:4438:33584":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7132:4822":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:7119:33582":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12399:3616":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10524:3434":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13674:3790":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15289:4201":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:37756:13802":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:6615:5556":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44170:6173":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:6532:4721":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4600:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11217:6173":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:8855:5994":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:2236:7701":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:2403:5101":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:46529:5762":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:15624:4310":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:3037:33694":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:4609:5384":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5283:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40239:5542":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:2285:6029":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:536:8162":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"0:0:2427":{"crate_id":0,"path":["strsim"],"kind":"module"},"17:11405:3487":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3380:5829":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:44142:7732":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:10895:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6880:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:4641:4566":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:7094:33616":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4965:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1503:6740":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:15769:4352":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:6478:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11853:3543":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8788:8385":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:46564:5765":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:45874:5693":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11209:26461":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:6746:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:21448:32757":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:39459:2944":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:41727:2049":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5046:7024":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12238:3598":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8593:5972":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:6026:5394":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5385:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:12819:2737":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14560:3968":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:4531:4562":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:4826:8341":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13473:3752":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10720:34820":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:14038:3868":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6491:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4824:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:32061:2940":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:11812:3538":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11674:3519":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:14111:3878":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:608:3245":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:45661:5682":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:22109:8442":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"0:53:2065":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"16:2708:4515":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10399:2751":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5653:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:7321:5574":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:8006:7663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"0:21:1998":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"1:8439:3273":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:787:5088":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5415:4583":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:8197:7675":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:15836:4364":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8211:2725":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:10573:34817":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6648:4735":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:7392:3058":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:44138:7731":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:12338:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12328:3604":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:7973:5902":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14977:4133":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44356:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:6421:8535":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:44435:5644":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14575:3620":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:13636:5466":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9695:5912":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:1812:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11270:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:39236:2692":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:42152:5436":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:22682:5473":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12464:21286":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:10692:26598":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43007:7729":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10419:3287":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:45401:5655":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:12352:2749":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40249:5544":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15138:4162":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:22938:5500":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:2499:13818":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:6872:4786":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15814:4358":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:43524:2770":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:1577:5084":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:3033:33697":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5361:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:45384:5654":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:3245:5106":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15116:4158":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:12582:5456":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5336:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"9:330:6656":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5483:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"11:328:6648":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6098:21092":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:40050:3094":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:3098:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4811:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8652:5841":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:40766:5557":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:11337:2769":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:6821:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5306:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:37811:13803":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:15931:3691":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:16223:4462":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:8202:4545":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5700:4528":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8220:5917":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2702:1983":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"16:2684:4514":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:726:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12107:3438":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:39913:3095":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:46643:5775":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13173:3690":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13485:3755":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:45469:5663":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:45690:5683":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:15720:4337":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:41632:8182":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3429:8279":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:4239:7741":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:4737:2953":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5636:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:9386:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:42799:5593":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10218:3279":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6343:5872":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:9886:21157":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:16105:4433":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:13581:3784":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12792:3386":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40291:5548":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:9305:6012":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:32031:2780":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:42033:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9259:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:0:2542":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:2768:4518":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12454:3623":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:2289:8236":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46613:5773":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:15197:4181":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:8196:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:10897:7742":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:6460:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:2203:3302":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13844:3839":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:7857:4934":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"15:394:20194":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13387:3736":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:2140:5095":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6948:4534":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3029:7702":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12056:3583":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:22419:8254":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:21450:32746":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:5591:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:9272:25903":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15992:4412":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:3196:4491":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4897:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:0:2551":{"crate_id":17,"path":["object"],"kind":"module"},"2:40321:5403":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:640:5803":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11755:3529":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:41671:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:3475:4550":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:2849:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:5645:5858":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:9139:5084":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6788:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14503:3960":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11661:3518":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:22545:5470":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13363:3732":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:3949:5836":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:6657:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14599:3978":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:12342:1827":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:31976:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:42777:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:560:5802":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5546:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2448:8243":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:5769:4595":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14298:3923":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:5196:5850":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1526:6750":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:430:34786":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5686:4525":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3335:2781":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3179:13577":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"11:742:5086":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:11593:26441":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:15473:4253":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4246:7741":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:832:5102":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3661:5101":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:6727:5880":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12659:3639":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:11883:5448":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:5846:4600":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1510:6742":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11647:3517":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11915:21261":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:42517:31770":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:434:34787":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:8026:8179":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:4882:4573":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:8341:7697":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:15039:4144":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:46538:5763":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:10246:2715":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12824:21164":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:591:8173":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5565:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:7584:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:16121:4438":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:7402:5229":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13116:3678":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:856:5092":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:1890:5814":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:45760:5687":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:2526:6298":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12324:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11493:3493":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7910:21103":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:46119:5718":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13972:3553":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:33116:8437":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:1933:3115":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:39158:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"13:229:6643":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:11132:2745":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5370:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5588:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8448:5959":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:43255:5602":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2506:2557":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:1692:6859":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15376:4229":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:14436:3953":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13325:3726":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:597:3294":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:3502:7741":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:1971:2705":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:1207:3297":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4062:4557":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44134:7730":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:14475:3956":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:643:5805":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:7397:34809":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11016:3450":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:33057:8435":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:563:3237":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6636:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"10:0:2545":{"crate_id":10,"path":["adler"],"kind":"module"},"1:11086:26587":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:5052:8362":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:10564:5995":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:23015:5507":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:30471:31565":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:4501:5840":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:506:8158":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:3289:5826":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13959:3857":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7549:4914":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:6763:33575":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5489:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:586:6728":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:4530:2951":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:5385:3421":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:3623:13582":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4787:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13375:3735":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12530:3634":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:4265:8336":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11227:3468":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"11:2562:6653":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:31940:5510":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12508:3630":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5382:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:46590:5767":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10877:3440":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:4560:4563":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6398:4524":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:45521:5666":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:875:5093":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:44348:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12289:3602":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:16269:3741":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:13723:3815":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8492:5539":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:1496:2049":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:14079:3874":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:12345:1821":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:43245:5601":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:22705:5478":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15383:4230":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:44029:2773":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:14986:4134":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:3324:13581":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:3306:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6505:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:40330:5404":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"13:0:2541":{"crate_id":13,"path":["std_detect"],"kind":"module"},"14:165:20165":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:39108:5515":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8587:8340":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:22774:31558":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:8188:4987":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:545:6706":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"18:491:3227":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:40751:5556":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:43488:2771":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:8271:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9374:5875":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:42554:2711":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11497:26582":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:15957:4382":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:12516:3632":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:261:3286":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:1663:6848":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:8012:7665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1707:6866":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:12341:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4673:7711":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:12830:2734":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:42250:2714":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15092:4156":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:46492:5759":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:22949:5501":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:13024:21166":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13855:3840":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:43337:5608":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44338:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:41591:5574":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44188:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:1686:6858":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:9427:5892":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46421:5756":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:532:6700":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:2666:5821":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:1007:4823":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:22333:32139":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:11367:3457":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:37701:13801":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1723:6871":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5244:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5020:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8601:5965":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7656:21101":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:9300:6011":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:11637:5897":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:43235:5600":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:5038:8361":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:12150:3588":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2458:4504":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:22927:5499":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:7998:3551":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12724:21163":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7446:7575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40076:5526":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6562:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:39947:2758":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:9902:7918":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:6844:7713":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:7485:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"15:288:20184":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:5774:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:44389:5638":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:917:5085":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:9094:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:4587:4564":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2438:4503":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10907:5913":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"5:4074:3058":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:15281:4200":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:680:3260":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13399:3739":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7823:21102":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3288:13579":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:22823:5492":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6664:7423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6560:4527":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:8288:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:15608:4306":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:6140:5396":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13509:3757":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12768:21142":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:25878:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:30190:8295":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:9131:5998":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:45536:5667":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3590:2707":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:8158:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:12543:5454":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:43438:2767":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6435:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11419:3438":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:5376:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5436:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:3284:34767":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:7429:7570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5052:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:40760:5414":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10185:3278":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2374:4500":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:10313:6019":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:11252:6178":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6768:7456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:417:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:1752:1987":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:931:8185":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:8306:7688":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:14311:3924":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:21552:8440":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:6231:4664":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:39176:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3741:33575":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12349:1397":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:16032:3709":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:21949:8254":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:497:6674":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:12764:2759":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:10252:2723":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:3712:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:14414:3942":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:12336:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13526:3765":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:10187:5569":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:906:3056":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"11:700:2049":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:22738:5480":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3533:5968":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:30814:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:3305:5108":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2599:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13252:3709":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"14:31:5074":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:15301:4207":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:43570:2763":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"7:31:20065":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:6649:5398":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14529:3962":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22836:5493":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:1639:6831":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:2936:20231":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11770:5834":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:943:5084":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:6494:4718":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:23004:5506":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:14912:4123":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:22847:8309":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:7330:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:6600:33575":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6811:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:33293:13797":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:15368:4226":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1621:6819":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6160:20202":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:513:3293":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:925:5089":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15313:4208":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:11899:31076":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:16138:4440":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15596:4303":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:3319:8191":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:12325:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:6417:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:1680:6855":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2041:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2688:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4942:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:22730:5479":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:581:2686":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:40793:5417":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:15582:4297":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6665:21096":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:9220:8409":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6597:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:1557:5086":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:15616:4309":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:3229:4838":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10284:3281":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:15324:4212":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:40737:5412":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:9445:6016":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10982:21173":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:40362:5406":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7538:2699":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:45565:5669":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:9105:5996":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:1087:34791":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11185:5996":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11799:3536":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:15463:4248":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:10672:5829":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:11064:5101":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:4269:7741":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:40402:5552":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:10887:34819":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:12344:1815":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:7412:5230":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:2434:8239":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:44397:5640":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:41760:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14516:3961":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10068:21144":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:1610:5108":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:1829:5811":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:9190:8408":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:2383:5084":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:729:8296":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:40199:5538":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:1585:6789":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8575:5837":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"0:20:1995":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"2:45919:5710":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:42768:2730":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:42752:2728":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:11610:6046":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:10244:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8046:8212":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:7380:5228":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12621:3637":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:8660:32603":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:16187:4455":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:6730:8403":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:4080:8312":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:14386:3936":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:40114:2751":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"16:7014:21098":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:8630:7550":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8206:2726":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2508:4506":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:39936:3098":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:39196:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:870:5087":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:8093:4976":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8702:5985":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43390:1988":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"9:0:2544":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1171:33693":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10669:5827":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:5137:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:9118:5997":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:41719:5101":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:6543:4722":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12478:3625":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:3599:30855":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:45416:5656":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:46705:5792":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6763:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:7841:3294":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"11:673:5084":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:2044:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:3558:13625":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:14968:4129":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:403:3288":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40537:5410":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:41799:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:11924:2747":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:43166:5596":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:5453:2740":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:12329:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:45504:5665":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:2432:7710":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"11:2542:6430":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5423:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:46392:5755":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:3374:3052":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40152:5534":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4971:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46196:5751":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13753:3824":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4823:8363":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:7602:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:45842:5691":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:6311:26607":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:1066:5096":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10092:21162":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5581:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:21550:8254":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:43838:5619":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:542:4477":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:1449:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:10885:8254":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:12810:2735":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:4856:4572":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:8300:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:41633:8375":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:21976:5468":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:40043:3093":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:6619:5878":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12030:3580":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:8539:8292":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"9:53:7898":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:40343:5550":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:4728:13636":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:2598:5819":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:1043:4823":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12887:3655":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:40221:5540":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:3782:8294":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:4821:3315":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:31951:5511":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:44154:7735":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:15010:4136":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:44410:5643":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:43642:2766":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4867:8329":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:15734:4339":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46628:5774":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10941:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:43406:2751":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11089:3458":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5075:4579":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:2741:5823":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:4986:3317":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:3648:5084":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13899:3848":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:40392:5408":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:7582:13858":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:218:5182":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11256:3472":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:42592:2713":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:12330:1665":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:1830:3056":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5083:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:3029:3320":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:1142:5099":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5960:4617":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:15778:4354":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:1536:5102":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:811:3056":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:643:3228":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:1865:5812":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:12292:7920":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8502:5555":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:9700:26606":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:2878:4523":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:1051:5096":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14189:3905":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:14131:3879":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:1850:7741":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:4830:4571":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6670:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"15:327:7895":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:41500:5424":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:12328:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6758:4760":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:1064:33575":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6066:4633":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:3842:4554":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11841:3542":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:45821:5690":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"0:45:2056":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"6:6756:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:5677:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"11:1107:5098":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"9:178:7909":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:1480:5101":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:6471:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:9326:26276":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13046:3668":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11865:3544":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5598:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:912:5102":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5064:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:4152:8317":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:5717:3062":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7509:4902":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:5029:8360":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13832:3837":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4924:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:13618:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:10997:5858":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:31965:5512":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:3140:2939":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15655:4318":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:13038:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:2114:5198":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:2902:20230":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5352:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:4614:4565":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8626:5976":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:15176:4176":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:15678:4331":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:8265:7679":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:32063:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:6379:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:9241:6002":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:3171:13575":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:13424:3742":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10915:34818":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:14066:3873":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:2338:4492":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:15078:4153":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:8226:2129":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7111:4820":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:21676:8441":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2657:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11567:3501":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:40785:5415":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:8294:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:3778:4552":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13272:3719":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:6775:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7559:4915":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:5576:5857":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"14:0:2548":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:12346:1803":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6962:4535":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13497:3756":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:2197:8158":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:1923:5108":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:16079:4427":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14025:3866":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11547:3365":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:5922:3058":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:14489:3957":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:12336:5449":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:1057:5095":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:6947:3063":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:30460:2711":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:33175:13796":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:12331:1699":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5107:4580":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5160:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:3014:20232":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:8616:3101":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:22335:13817":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"6:7467:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:648:8176":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:21497:8254":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:2652:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:4863:8326":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:15701:4332":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5713:7471":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:10675:31660":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:2618:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:10018:21141":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:5453:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:6456:21095":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7604:4541":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3144:8434":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:3397:3056":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:7799:4531":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:1883:5084":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:7339:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4108:8315":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:14933:4128":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:21988:32759":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2355:4494":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"13:110:34793":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:3279:5105":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41466:5572":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14235:3915":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:7597:5235":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:1603:5104":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:860:4486":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:39136:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6895:4787":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:22971:5503":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:7480:2042":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:718:3268":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:7645:5240":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:9346:6174":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:30439:3049":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:862:2049":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:6532:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5722:4530":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11764:3530":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:7888:4938":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5314:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:6164:7741":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:16069:4426":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:3271:5107":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:4102:8314":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:3614:4551":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:10707:31668":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:578:6724":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:22374:8532":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:3026:3022":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:14855:4086":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"9:238:5589":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8236:5195":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"9:424:20081":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:39877:5522":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:3238:5084":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:6039:5224":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13292:3720":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:6957:3064":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:5196:5387":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:35825:4843":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:22905:5497":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:11665:5900":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5477:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:2596:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:16249:4466":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:2852:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:837:5089":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12342:3609":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:22960:5502":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:1342:5095":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:3586:13578":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11651:5898":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:40268:5393":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:364:34780":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:295:2739":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13766:3826":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"9:447:20079":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:46450:5757":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7061:4812":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:9178:6001":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9916:21158":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7306:34811":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:7984:7662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40300:5397":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:6874:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:42545:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3093:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12433:3620":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:1910:5106":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:45969:5712":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2280:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:39926:3097":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:45629:5680":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8534:5967":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11571:6044":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"6:8253:7677":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:21570:5469":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:9283:5430":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7755:4533":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9401:5891":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:10248:2714":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:1581:2049":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5902:5867":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"14:160:5074":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9984:21160":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:96:25337":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:2418:4502":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6412:21094":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:43347:5609":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:15445:4245":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13064:3671":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:43542:2769":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46549:5764":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:45859:5692":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:3250:34768":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"9:392:20080":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:5400:3422":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:10503:2729":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:9409:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:6924:3062":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:2838:4521":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:41994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:10607:26601":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:12335:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:46318:5753":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:3571:32117":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:9710:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:21479:32749":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:13774:3828":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:31958:2952":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:4352:4558":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:10905:3441":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11877:3545":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:45483:5664":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:4347:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:1978:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:43694:2746":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6849:4785":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:41654:13872":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:6509:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:531:3232":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:7585:3102":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:10920:6035":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:41955:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6335:4703":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5266:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:5409:33575":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:8622:13784":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:45743:5686":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:9254:6003":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5260:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:1896:3056":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:39266:5519":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:40353:5551":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:553:6711":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:10609:13892":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:46273:5752":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:30841:2686":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"0:63:2094":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"17:16235:4465":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7954:8254":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5250:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14752:4000":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2026:13827":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44331:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:5273:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:1098:3295":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:41478:5837":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12543:3635":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:10317:3282":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5191:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:4456:5381":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6441:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15456:4246":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:32637:4833":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:33776:13800":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2712:1982":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"18:651:3228":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4921:5844":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:765:25348":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:4913:4574":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6442:4712":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:9671:21140":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2938:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:3103:2935":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10137:21138":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5002:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2855:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:41278:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11354:3484":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:30407:3048":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2843:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:5212:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4142:8316":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11605:3512":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:45550:5668":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41916:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:9088:5995":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:4281:8338":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:2103:5197":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:396:34778":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:926:8187":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:6849:7712":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:41557:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:14587:3971":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:687:5101":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9938:21159":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:10042:2712":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:16198:4456":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5643:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:41674:192":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"1:7081:8438":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12969:3660":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:11244:2767":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2823:2703":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:8172:5915":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2049:5245":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4634:8342":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:4050:8310":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:150:4471":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:8685:8371":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:39273:5520":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13922:3853":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:15333:4215":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:10828:34823":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9382:7741":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:46081:5716":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"0:61:2079":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"8:0:2543":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:45608:5679":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11715:3522":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"0:106:2197":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"2:10455:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:41622:5576":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:39286:5521":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10170:3422":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11269:21191":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13568:3780":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9147:6000":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:43823:5614":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5296:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:42271:2723":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11242:3470":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15214:4184":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12388:3615":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}